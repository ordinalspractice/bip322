var Cv = Object.defineProperty;
var Hv = (e, t, r) => t in e ? Cv(e, t, { enumerable: !0, configurable: !0, writable: !0, value: r }) : e[t] = r;
var ne = (e, t, r) => Hv(e, typeof t != "symbol" ? t + "" : t, r);
function Rv(e, t) {
  for (var r = 0; r < t.length; r++) {
    const n = t[r];
    if (typeof n != "string" && !Array.isArray(n)) {
      for (const o in n)
        if (o !== "default" && !(o in e)) {
          const i = Object.getOwnPropertyDescriptor(n, o);
          i && Object.defineProperty(e, o, i.get ? i : {
            enumerable: !0,
            get: () => n[o]
          });
        }
    }
  }
  return Object.freeze(Object.defineProperty(e, Symbol.toStringTag, { value: "Module" }));
}
let Ml = Symbol("clean"), Ir = [], Ln = 0;
const va = 4;
let Dl = (e) => {
  let t = [], r = {
    get() {
      return r.lc || r.listen(() => {
      })(), r.value;
    },
    lc: 0,
    listen(n) {
      return r.lc = t.push(n), () => {
        for (let i = Ln + va; i < Ir.length; )
          Ir[i] === n ? Ir.splice(i, va) : i += va;
        let o = t.indexOf(n);
        ~o && (t.splice(o, 1), --r.lc || r.off());
      };
    },
    notify(n, o) {
      let i = !Ir.length;
      for (let s of t)
        Ir.push(
          s,
          r.value,
          n,
          o
        );
      if (i) {
        for (Ln = 0; Ln < Ir.length; Ln += va)
          Ir[Ln](
            Ir[Ln + 1],
            Ir[Ln + 2],
            Ir[Ln + 3]
          );
        Ir.length = 0;
      }
    },
    /* It will be called on last listener unsubscribing.
       We will redefine it in onMount and onStop. */
    off() {
    },
    set(n) {
      let o = r.value;
      o !== n && (r.value = n, r.notify(o));
    },
    subscribe(n) {
      let o = r.listen(n);
      return n(r.value), o;
    },
    value: e
  };
  return process.env.NODE_ENV !== "production" && (r[Ml] = () => {
    t = [], r.lc = 0, r.off();
  }), r;
};
const Lv = 5, hi = 6, xa = 10;
let zv = (e, t, r, n) => (e.events = e.events || {}, e.events[r + xa] || (e.events[r + xa] = n((o) => {
  e.events[r].reduceRight((i, s) => (s(i), i), {
    shared: {},
    ...o
  });
})), e.events[r] = e.events[r] || [], e.events[r].push(t), () => {
  let o = e.events[r], i = o.indexOf(t);
  o.splice(i, 1), o.length || (delete e.events[r], e.events[r + xa](), delete e.events[r + xa]);
}), jv = 1e3, Mv = (e, t) => zv(e, (n) => {
  let o = t(n);
  o && e.events[hi].push(o);
}, Lv, (n) => {
  let o = e.listen;
  e.listen = (...s) => (!e.lc && !e.active && (e.active = !0, n()), o(...s));
  let i = e.off;
  if (e.events[hi] = [], e.off = () => {
    i(), setTimeout(() => {
      if (e.active && !e.lc) {
        e.active = !1;
        for (let s of e.events[hi]) s();
        e.events[hi] = [];
      }
    }, jv);
  }, process.env.NODE_ENV !== "production") {
    let s = e[Ml];
    e[Ml] = () => {
      for (let a of e.events[hi]) a();
      e.events[hi] = [], e.active = !1, s();
    };
  }
  return () => {
    e.listen = o, e.off = i;
  };
});
function Sr(e, t, r) {
  let n = /* @__PURE__ */ new Set([...t, void 0]);
  return e.listen((o, i, s) => {
    n.has(s) && r(o, i, s);
  });
}
function Dv(e, t, r) {
  let n = Sr(e, t, r);
  return r(e.value), n;
}
let O0 = (e = {}) => {
  let t = Dl(e);
  return t.setKey = function(r, n) {
    let o = t.value;
    typeof n > "u" && r in t.value ? (t.value = { ...t.value }, delete t.value[r], t.notify(o, r)) : t.value[r] !== n && (t.value = {
      ...t.value,
      [r]: n
    }, t.notify(o, r));
  }, t;
};
const vi = "oyl", Po = "unisat", Oo = "xverse", Bo = "phantom", xi = "leather", wn = "magic-eden", Ei = "okx", _i = "wizz", $o = "orange", No = "op_net", Uo = "sparrow", bs = "p2tr", Fv = "p2pkh", Kv = "p2sh-p2wpkh", Fl = "p2wpkh", wU = "p2psh", qv = "p2wsh", B0 = "p2sh", vU = {
  leather: {
    name: "leather",
    url: "https://leather.io/install-extension"
  },
  "magic-eden": {
    name: "magic-eden",
    url: "https://wallet.magiceden.io/"
  },
  okx: {
    name: "okx",
    url: "https://chromewebstore.google.com/detail/okx-wallet/mcohilncbfahbmgdjkbpemcciiolgcge"
  },
  op_net: {
    name: "op_net",
    url: "https://opnet.org/"
  },
  orange: {
    name: "orange",
    url: "https://www.orangewallet.com/"
  },
  oyl: {
    name: "oyl",
    url: "https://www.oyl.io/#get-wallet"
  },
  phantom: {
    name: "phantom",
    url: "https://phantom.app/download"
  },
  sparrow: {
    name: "sparrow",
    url: "https://sparrowwallet.com/"
  },
  unisat: {
    name: "unisat",
    url: "https://unisat.io/download"
  },
  wizz: {
    name: "wizz",
    url: "https://wizzwallet.io/#extension"
  },
  xverse: {
    name: "xverse",
    url: "https://www.xverse.app/download"
  }
}, Du = "defaultWallet", Dr = {
  /**
   * The message prefix used for signing Bitcoin messages.
   */
  messagePrefix: `Bitcoin Signed Message:
`,
  /**
   * The Bech32 prefix used for Bitcoin addresses.
   */
  bech32: "bc",
  /**
   * The BIP32 key prefixes for Bitcoin.
   */
  bip32: {
    /**
     * The public key prefix for BIP32 extended public keys.
     */
    public: 76067358,
    /**
     * The private key prefix for BIP32 extended private keys.
     */
    private: 76066276
  },
  /**
   * The prefix for Bitcoin public key hashes.
   */
  pubKeyHash: 0,
  /**
   * The prefix for Bitcoin script hashes.
   */
  scriptHash: 5,
  /**
   * The prefix for Bitcoin Wallet Import Format (WIF) private keys.
   */
  wif: 128
}, Vv = {
  messagePrefix: `Bitcoin Signed Message:
`,
  bech32: "tb",
  bip32: {
    public: 70617039,
    private: 70615956
  },
  pubKeyHash: 111,
  scriptHash: 196,
  wif: 239
};
function Wv(e) {
  if (e.length < 8 || e.length > 72 || e[0] !== 48 || e[1] !== e.length - 2 || e[2] !== 2) return !1;
  const t = e[3];
  if (t === 0 || 5 + t >= e.length || e[4 + t] !== 2) return !1;
  const r = e[5 + t];
  return !(r === 0 || 6 + t + r !== e.length || e[4] & 128 || t > 1 && e[4] === 0 && !(e[5] & 128) || e[t + 6] & 128 || r > 1 && e[t + 6] === 0 && !(e[t + 7] & 128));
}
function Gv(e) {
  if (e.length < 8) throw new Error("DER sequence length is too short");
  if (e.length > 72) throw new Error("DER sequence length is too long");
  if (e[0] !== 48) throw new Error("Expected DER sequence");
  if (e[1] !== e.length - 2)
    throw new Error("DER sequence length is invalid");
  if (e[2] !== 2) throw new Error("Expected DER integer");
  const t = e[3];
  if (t === 0) throw new Error("R length is zero");
  if (5 + t >= e.length) throw new Error("R length is too long");
  if (e[4 + t] !== 2) throw new Error("Expected DER integer (2)");
  const r = e[5 + t];
  if (r === 0) throw new Error("S length is zero");
  if (6 + t + r !== e.length) throw new Error("S length is invalid");
  if (e[4] & 128) throw new Error("R value is negative");
  if (t > 1 && e[4] === 0 && !(e[5] & 128))
    throw new Error("R value excessively padded");
  if (e[t + 6] & 128) throw new Error("S value is negative");
  if (r > 1 && e[t + 6] === 0 && !(e[t + 7] & 128))
    throw new Error("S value excessively padded");
  return {
    r: e.slice(4, 4 + t),
    s: e.slice(6 + t)
  };
}
function Zv(e, t) {
  const r = e.length, n = t.length;
  if (r === 0) throw new Error("R length is zero");
  if (n === 0) throw new Error("S length is zero");
  if (r > 33) throw new Error("R length is too long");
  if (n > 33) throw new Error("S length is too long");
  if (e[0] & 128) throw new Error("R value is negative");
  if (t[0] & 128) throw new Error("S value is negative");
  if (r > 1 && e[0] === 0 && !(e[1] & 128))
    throw new Error("R value excessively padded");
  if (n > 1 && t[0] === 0 && !(t[1] & 128))
    throw new Error("S value excessively padded");
  const o = new Uint8Array(6 + r + n);
  return o[0] = 48, o[1] = o.length - 2, o[2] = 2, o[3] = e.length, o.set(e, 4), o[4 + r] = 2, o[5 + r] = t.length, o.set(t, 6 + r), o;
}
const Ke = {
  OP_FALSE: 0,
  OP_0: 0,
  OP_PUSHDATA1: 76,
  OP_PUSHDATA2: 77,
  OP_PUSHDATA4: 78,
  OP_1NEGATE: 79,
  OP_RESERVED: 80,
  OP_TRUE: 81,
  OP_1: 81,
  OP_2: 82,
  OP_3: 83,
  OP_4: 84,
  OP_5: 85,
  OP_6: 86,
  OP_7: 87,
  OP_8: 88,
  OP_9: 89,
  OP_10: 90,
  OP_11: 91,
  OP_12: 92,
  OP_13: 93,
  OP_14: 94,
  OP_15: 95,
  OP_16: 96,
  OP_NOP: 97,
  OP_VER: 98,
  OP_IF: 99,
  OP_NOTIF: 100,
  OP_VERIF: 101,
  OP_VERNOTIF: 102,
  OP_ELSE: 103,
  OP_ENDIF: 104,
  OP_VERIFY: 105,
  OP_RETURN: 106,
  OP_TOALTSTACK: 107,
  OP_FROMALTSTACK: 108,
  OP_2DROP: 109,
  OP_2DUP: 110,
  OP_3DUP: 111,
  OP_2OVER: 112,
  OP_2ROT: 113,
  OP_2SWAP: 114,
  OP_IFDUP: 115,
  OP_DEPTH: 116,
  OP_DROP: 117,
  OP_DUP: 118,
  OP_NIP: 119,
  OP_OVER: 120,
  OP_PICK: 121,
  OP_ROLL: 122,
  OP_ROT: 123,
  OP_SWAP: 124,
  OP_TUCK: 125,
  OP_CAT: 126,
  OP_SUBSTR: 127,
  OP_LEFT: 128,
  OP_RIGHT: 129,
  OP_SIZE: 130,
  OP_INVERT: 131,
  OP_AND: 132,
  OP_OR: 133,
  OP_XOR: 134,
  OP_EQUAL: 135,
  OP_EQUALVERIFY: 136,
  OP_RESERVED1: 137,
  OP_RESERVED2: 138,
  OP_1ADD: 139,
  OP_1SUB: 140,
  OP_2MUL: 141,
  OP_2DIV: 142,
  OP_NEGATE: 143,
  OP_ABS: 144,
  OP_NOT: 145,
  OP_0NOTEQUAL: 146,
  OP_ADD: 147,
  OP_SUB: 148,
  OP_MUL: 149,
  OP_DIV: 150,
  OP_MOD: 151,
  OP_LSHIFT: 152,
  OP_RSHIFT: 153,
  OP_BOOLAND: 154,
  OP_BOOLOR: 155,
  OP_NUMEQUAL: 156,
  OP_NUMEQUALVERIFY: 157,
  OP_NUMNOTEQUAL: 158,
  OP_LESSTHAN: 159,
  OP_GREATERTHAN: 160,
  OP_LESSTHANOREQUAL: 161,
  OP_GREATERTHANOREQUAL: 162,
  OP_MIN: 163,
  OP_MAX: 164,
  OP_WITHIN: 165,
  OP_RIPEMD160: 166,
  OP_SHA1: 167,
  OP_SHA256: 168,
  OP_HASH160: 169,
  OP_HASH256: 170,
  OP_CODESEPARATOR: 171,
  OP_CHECKSIG: 172,
  OP_CHECKSIGVERIFY: 173,
  OP_CHECKMULTISIG: 174,
  OP_CHECKMULTISIGVERIFY: 175,
  OP_NOP1: 176,
  OP_NOP2: 177,
  OP_CHECKLOCKTIMEVERIFY: 177,
  OP_NOP3: 178,
  OP_CHECKSEQUENCEVERIFY: 178,
  OP_NOP4: 179,
  OP_NOP5: 180,
  OP_NOP6: 181,
  OP_NOP7: 182,
  OP_NOP8: 183,
  OP_NOP9: 184,
  OP_NOP10: 185,
  OP_CHECKSIGADD: 186,
  OP_PUBKEYHASH: 253,
  OP_PUBKEY: 254,
  OP_INVALIDOPCODE: 255
}, $0 = {};
for (const e of Object.keys(Ke)) {
  const t = Ke[e];
  $0[t] = e;
}
const Xa = "0123456789abcdefABCDEF", Ya = Xa.split("").map((e) => e.codePointAt(0)), Ja = Array(256).fill(!0).map((e, t) => {
  const r = String.fromCodePoint(t), n = Xa.indexOf(r);
  return n < 0 ? void 0 : n < 16 ? n : n - 6;
}), N0 = new TextEncoder(), U0 = new TextDecoder();
function Xv(e) {
  return U0.decode(e);
}
function Yv(e) {
  return N0.encode(e);
}
function st(e) {
  const t = e.reduce((o, i) => o + i.length, 0), r = new Uint8Array(t);
  let n = 0;
  for (const o of e)
    r.set(o, n), n += o.length;
  return r;
}
function me(e) {
  const t = e || new Uint8Array();
  return t.length > 512 ? Qv(t) : Jv(t);
}
function Jv(e) {
  let t = "";
  for (let r = 0; r < e.length; ++r)
    t += Xa[Ja[Ya[e[r] >> 4]]], t += Xa[Ja[Ya[e[r] & 15]]];
  return t;
}
function Qv(e) {
  const t = new Uint8Array(e.length * 2);
  for (let r = 0; r < e.length; ++r)
    t[r * 2] = Ya[e[r] >> 4], t[r * 2 + 1] = Ya[e[r] & 15];
  return U0.decode(t);
}
function Nn(e) {
  const t = N0.encode(e || ""), r = new Uint8Array(Math.floor(t.length / 2));
  let n;
  for (n = 0; n < r.length; n++) {
    const o = Ja[t[n * 2]], i = Ja[t[n * 2 + 1]];
    if (o === void 0 || i === void 0)
      break;
    r[n] = o << 4 | i;
  }
  return n === r.length ? r : r.slice(0, n);
}
function e1(e) {
  return btoa(String.fromCharCode(...e));
}
function C0(e) {
  const t = atob(e), r = new Uint8Array(t.length);
  for (let n = 0; n < t.length; n++)
    r[n] = t.charCodeAt(n);
  return r;
}
function J(e, t) {
  const r = Math.min(e.length, t.length);
  for (let n = 0; n < r; ++n)
    if (e[n] !== t[n])
      return e[n] < t[n] ? -1 : 1;
  return e.length === t.length ? 0 : e.length > t.length ? 1 : -1;
}
function ur(e, t, r) {
  if (t + 1 > e.length)
    throw new Error("Offset is outside the bounds of Uint8Array");
  if (r > 255)
    throw new Error(`The value of "value" is out of range. It must be >= 0 and <= 255. Received ${r}`);
  return e[t] = r, t + 1;
}
function t1(e, t, r, n) {
  if (t + 2 > e.length)
    throw new Error("Offset is outside the bounds of Uint8Array");
  if (n = n.toUpperCase(), r > 65535)
    throw new Error(`The value of "value" is out of range. It must be >= 0 and <= 65535. Received ${r}`);
  return n === "LE" ? (e[t] = r & 255, e[t + 1] = r >> 8 & 255) : (e[t] = r >> 8 & 255, e[t + 1] = r & 255), t + 2;
}
function Gs(e, t, r, n) {
  if (t + 4 > e.length)
    throw new Error("Offset is outside the bounds of Uint8Array");
  if (n = n.toUpperCase(), r > 4294967295)
    throw new Error(`The value of "value" is out of range. It must be >= 0 and <= ${4294967295}. Received ${r}`);
  return n === "LE" ? (e[t] = r & 255, e[t + 1] = r >> 8 & 255, e[t + 2] = r >> 16 & 255, e[t + 3] = r >> 24 & 255) : (e[t] = r >> 24 & 255, e[t + 1] = r >> 16 & 255, e[t + 2] = r >> 8 & 255, e[t + 3] = r & 255), t + 4;
}
function r1(e, t, r, n) {
  if (t + 8 > e.length)
    throw new Error("Offset is outside the bounds of Uint8Array");
  if (n = n.toUpperCase(), r > 0xffffffffffffffffn)
    throw new Error(`The value of "value" is out of range. It must be >= 0 and <= ${0xffffffffffffffffn}. Received ${r}`);
  return n === "LE" ? (e[t] = Number(r & 0xffn), e[t + 1] = Number(r >> 8n & 0xffn), e[t + 2] = Number(r >> 16n & 0xffn), e[t + 3] = Number(r >> 24n & 0xffn), e[t + 4] = Number(r >> 32n & 0xffn), e[t + 5] = Number(r >> 40n & 0xffn), e[t + 6] = Number(r >> 48n & 0xffn), e[t + 7] = Number(r >> 56n & 0xffn)) : (e[t] = Number(r >> 56n & 0xffn), e[t + 1] = Number(r >> 48n & 0xffn), e[t + 2] = Number(r >> 40n & 0xffn), e[t + 3] = Number(r >> 32n & 0xffn), e[t + 4] = Number(r >> 24n & 0xffn), e[t + 5] = Number(r >> 16n & 0xffn), e[t + 6] = Number(r >> 8n & 0xffn), e[t + 7] = Number(r & 0xffn)), t + 8;
}
function In(e, t) {
  if (t + 1 > e.length)
    throw new Error("Offset is outside the bounds of Uint8Array");
  return e[t];
}
function n1(e, t, r) {
  if (t + 2 > e.length)
    throw new Error("Offset is outside the bounds of Uint8Array");
  if (r = r.toUpperCase(), r === "LE") {
    let n = 0;
    return n = (n << 8) + e[t + 1], n = (n << 8) + e[t], n;
  } else {
    let n = 0;
    return n = (n << 8) + e[t], n = (n << 8) + e[t + 1], n;
  }
}
function Wi(e, t, r) {
  if (t + 4 > e.length)
    throw new Error("Offset is outside the bounds of Uint8Array");
  if (r = r.toUpperCase(), r === "LE") {
    let n = 0;
    return n = (n << 8) + e[t + 3] >>> 0, n = (n << 8) + e[t + 2] >>> 0, n = (n << 8) + e[t + 1] >>> 0, n = (n << 8) + e[t] >>> 0, n;
  } else {
    let n = 0;
    return n = (n << 8) + e[t] >>> 0, n = (n << 8) + e[t + 1] >>> 0, n = (n << 8) + e[t + 2] >>> 0, n = (n << 8) + e[t + 3] >>> 0, n;
  }
}
function H0(e, t, r, n) {
  if (t + 4 > e.length)
    throw new Error("Offset is outside the bounds of Uint8Array");
  if (r > 2147483647 || r < -2147483648)
    throw new Error(`The value of "value" is out of range. It must be >= -2147483648 and <= 2147483647. Received ${r}`);
  return n = n.toUpperCase(), n === "LE" ? (e[t] = r & 255, e[t + 1] = r >> 8 & 255, e[t + 2] = r >> 16 & 255, e[t + 3] = r >> 24 & 255) : (e[t] = r >> 24 & 255, e[t + 1] = r >> 16 & 255, e[t + 2] = r >> 8 & 255, e[t + 3] = r & 255), t + 4;
}
function R0(e, t, r, n) {
  if (t + 8 > e.length)
    throw new Error("Offset is outside the bounds of Uint8Array");
  if (r > 0x7fffffffffffffffn || r < -0x8000000000000000n)
    throw new Error(`The value of "value" is out of range. It must be >= ${-0x8000000000000000n} and <= ${0x7fffffffffffffffn}. Received ${r}`);
  return n = n.toUpperCase(), n === "LE" ? (e[t] = Number(r & 0xffn), e[t + 1] = Number(r >> 8n & 0xffn), e[t + 2] = Number(r >> 16n & 0xffn), e[t + 3] = Number(r >> 24n & 0xffn), e[t + 4] = Number(r >> 32n & 0xffn), e[t + 5] = Number(r >> 40n & 0xffn), e[t + 6] = Number(r >> 48n & 0xffn), e[t + 7] = Number(r >> 56n & 0xffn)) : (e[t] = Number(r >> 56n & 0xffn), e[t + 1] = Number(r >> 48n & 0xffn), e[t + 2] = Number(r >> 40n & 0xffn), e[t + 3] = Number(r >> 32n & 0xffn), e[t + 4] = Number(r >> 24n & 0xffn), e[t + 5] = Number(r >> 16n & 0xffn), e[t + 6] = Number(r >> 8n & 0xffn), e[t + 7] = Number(r & 0xffn)), t + 8;
}
function o1(e, t, r) {
  if (t + 4 > e.length)
    throw new Error("Offset is outside the bounds of Uint8Array");
  if (r = r.toUpperCase(), r === "LE") {
    const n = e[t] + (e[t + 1] << 8) + (e[t + 2] << 16) + (e[t + 3] << 24 >>> 0);
    return e[t + 3] <= 127 ? n : n - 4294967296;
  } else {
    const n = (e[t] << 24 >>> 0) + (e[t + 1] << 16) + (e[t + 2] << 8) + e[t + 3];
    return e[t] <= 127 ? n : n - 4294967296;
  }
}
function L0(e, t, r) {
  if (t + 8 > e.length)
    throw new Error("Offset is outside the bounds of Uint8Array");
  r = r.toUpperCase();
  let n = 0n;
  if (r === "LE")
    return n = (n << 8n) + BigInt(e[t + 7]), n = (n << 8n) + BigInt(e[t + 6]), n = (n << 8n) + BigInt(e[t + 5]), n = (n << 8n) + BigInt(e[t + 4]), n = (n << 8n) + BigInt(e[t + 3]), n = (n << 8n) + BigInt(e[t + 2]), n = (n << 8n) + BigInt(e[t + 1]), n = (n << 8n) + BigInt(e[t]), e[t + 7] <= 127 ? n : n - 0x10000000000000000n;
  {
    let o = 0n;
    return o = (o << 8n) + BigInt(e[t]), o = (o << 8n) + BigInt(e[t + 1]), o = (o << 8n) + BigInt(e[t + 2]), o = (o << 8n) + BigInt(e[t + 3]), o = (o << 8n) + BigInt(e[t + 4]), o = (o << 8n) + BigInt(e[t + 5]), o = (o << 8n) + BigInt(e[t + 6]), o = (o << 8n) + BigInt(e[t + 7]), e[t] <= 127 ? o : o - 0x10000000000000000n;
  }
}
function z0(e) {
  return e < Ke.OP_PUSHDATA1 ? 1 : e <= 255 ? 2 : e <= 65535 ? 3 : 5;
}
function i1(e, t, r) {
  const n = z0(t);
  return n === 1 ? ur(e, r, t) : n === 2 ? (ur(e, r, Ke.OP_PUSHDATA1), ur(e, r + 1, t)) : n === 3 ? (ur(e, r, Ke.OP_PUSHDATA2), t1(e, r + 1, t, "LE")) : (ur(e, r, Ke.OP_PUSHDATA4), Gs(e, r + 1, t, "LE")), n;
}
function s1(e, t) {
  const r = In(e, t);
  let n, o;
  if (r < Ke.OP_PUSHDATA1)
    n = r, o = 1;
  else if (r === Ke.OP_PUSHDATA1) {
    if (t + 2 > e.length) return null;
    n = In(e, t + 1), o = 2;
  } else if (r === Ke.OP_PUSHDATA2) {
    if (t + 3 > e.length) return null;
    n = n1(e, t + 1, "LE"), o = 3;
  } else {
    if (t + 5 > e.length) return null;
    if (r !== Ke.OP_PUSHDATA4) throw new Error("Unexpected opcode");
    n = Wi(e, t + 1, "LE"), o = 5;
  }
  return {
    opcode: r,
    number: n,
    size: o
  };
}
function a1(e) {
  return e > 2147483647 ? 5 : e > 8388607 ? 4 : e > 32767 ? 3 : e > 127 ? 2 : e > 0 ? 1 : 0;
}
function c1(e) {
  let t = Math.abs(e);
  const r = a1(t), n = new Uint8Array(r), o = e < 0;
  for (let i = 0; i < r; ++i)
    ur(n, i, t & 255), t >>= 8;
  return n[r - 1] & 128 ? ur(n, r - 1, o ? 128 : 0) : o && (n[r - 1] |= 128), n;
}
var dn;
function u1(e) {
  return {
    lang: (e == null ? void 0 : e.lang) ?? (dn == null ? void 0 : dn.lang),
    message: e == null ? void 0 : e.message,
    abortEarly: (e == null ? void 0 : e.abortEarly) ?? (dn == null ? void 0 : dn.abortEarly),
    abortPipeEarly: (e == null ? void 0 : e.abortPipeEarly) ?? (dn == null ? void 0 : dn.abortPipeEarly)
  };
}
var Fu;
function l1(e) {
  return Fu == null ? void 0 : Fu.get(e);
}
var Ku;
function f1(e) {
  return Ku == null ? void 0 : Ku.get(e);
}
var qu;
function d1(e, t) {
  var r;
  return (r = qu == null ? void 0 : qu.get(e)) == null ? void 0 : r.get(t);
}
function Ss(e) {
  var r, n;
  const t = typeof e;
  return t === "string" ? `"${e}"` : t === "number" || t === "bigint" || t === "boolean" ? `${e}` : t === "object" || t === "function" ? (e && ((n = (r = Object.getPrototypeOf(e)) == null ? void 0 : r.constructor) == null ? void 0 : n.name)) ?? "null" : t;
}
function Kt(e, t, r, n, o) {
  const i = o && "input" in o ? o.input : r.value, s = (o == null ? void 0 : o.expected) ?? e.expects ?? null, a = (o == null ? void 0 : o.received) ?? Ss(i), c = {
    kind: e.kind,
    type: e.type,
    input: i,
    expected: s,
    received: a,
    message: `Invalid ${t}: ${s ? `Expected ${s} but r` : "R"}eceived ${a}`,
    // @ts-expect-error
    requirement: e.requirement,
    path: o == null ? void 0 : o.path,
    issues: o == null ? void 0 : o.issues,
    lang: n.lang,
    abortEarly: n.abortEarly,
    abortPipeEarly: n.abortPipeEarly
  }, u = e.kind === "schema", f = (o == null ? void 0 : o.message) ?? // @ts-expect-error
  e.message ?? d1(e.reference, c.lang) ?? (u ? f1(c.lang) : null) ?? n.message ?? l1(c.lang);
  f && (c.message = typeof f == "function" ? f(c) : f), u && (r.typed = !1), r.issues ? r.issues.push(c) : r.issues = [c];
}
function h1(e, t) {
  const r = [...new Set(e)];
  return r.length > 1 ? `(${r.join(` ${t} `)})` : r[0] ?? "never";
}
var p1 = class extends Error {
  /**
   * Creates a Valibot error with useful information.
   *
   * @param issues The error issues.
   */
  constructor(r) {
    super(r[0].message);
    /**
     * The error issues.
     */
    ne(this, "issues");
    this.name = "ValiError", this.issues = r;
  }
};
function j0(e, t) {
  return {
    kind: "validation",
    type: "every_item",
    reference: j0,
    async: !1,
    expects: null,
    requirement: e,
    message: t,
    _run(r, n) {
      return r.typed && !r.value.every(this.requirement) && Kt(this, "item", r, n), r;
    }
  };
}
function qf(e) {
  return {
    kind: "validation",
    type: "integer",
    reference: qf,
    async: !1,
    expects: null,
    requirement: Number.isInteger,
    message: e,
    _run(t, r) {
      return t.typed && !this.requirement(t.value) && Kt(this, "integer", t, r), t;
    }
  };
}
function M0(e, t) {
  return {
    kind: "validation",
    type: "length",
    reference: M0,
    async: !1,
    expects: `${e}`,
    requirement: e,
    message: t,
    _run(r, n) {
      return r.typed && r.value.length !== this.requirement && Kt(this, "length", r, n, {
        received: `${r.value.length}`
      }), r;
    }
  };
}
function zc(e, t) {
  return {
    kind: "validation",
    type: "max_value",
    reference: zc,
    async: !1,
    expects: `<=${e instanceof Date ? e.toJSON() : Ss(e)}`,
    requirement: e,
    message: t,
    _run(r, n) {
      return r.typed && r.value > this.requirement && Kt(this, "value", r, n, {
        received: r.value instanceof Date ? r.value.toJSON() : Ss(r.value)
      }), r;
    }
  };
}
function jc(e, t) {
  return {
    kind: "validation",
    type: "min_value",
    reference: jc,
    async: !1,
    expects: `>=${e instanceof Date ? e.toJSON() : Ss(e)}`,
    requirement: e,
    message: t,
    _run(r, n) {
      return r.typed && r.value < this.requirement && Kt(this, "value", r, n, {
        received: r.value instanceof Date ? r.value.toJSON() : Ss(r.value)
      }), r;
    }
  };
}
function D0(e, t) {
  return {
    kind: "validation",
    type: "regex",
    reference: D0,
    async: !1,
    expects: `${e}`,
    requirement: e,
    message: t,
    _run(r, n) {
      return r.typed && !this.requirement.test(r.value) && Kt(this, "format", r, n), r;
    }
  };
}
function Vf(e, t, r) {
  return typeof e.default == "function" ? (
    // @ts-expect-error
    e.default(t, r)
  ) : (
    // @ts-expect-error
    e.default
  );
}
function Mc(e, t) {
  return !e._run({ typed: !1, value: t }, { abortEarly: !0 }).issues;
}
function F0() {
  return {
    kind: "schema",
    type: "any",
    reference: F0,
    expects: "any",
    async: !1,
    _run(e) {
      return e.typed = !0, e;
    }
  };
}
function er(e, t) {
  return {
    kind: "schema",
    type: "array",
    reference: er,
    expects: "Array",
    async: !1,
    item: e,
    message: t,
    _run(r, n) {
      var i;
      const o = r.value;
      if (Array.isArray(o)) {
        r.typed = !0, r.value = [];
        for (let s = 0; s < o.length; s++) {
          const a = o[s], c = this.item._run({ typed: !1, value: a }, n);
          if (c.issues) {
            const u = {
              type: "array",
              origin: "value",
              input: o,
              key: s,
              value: a
            };
            for (const f of c.issues)
              f.path ? f.path.unshift(u) : f.path = [u], (i = r.issues) == null || i.push(f);
            if (r.issues || (r.issues = c.issues), n.abortEarly) {
              r.typed = !1;
              break;
            }
          }
          c.typed || (r.typed = !1), r.value.push(c.value);
        }
      } else
        Kt(this, "type", r, n);
      return r;
    }
  };
}
function K0(e) {
  return {
    kind: "schema",
    type: "bigint",
    reference: K0,
    expects: "bigint",
    async: !1,
    message: e,
    _run(t, r) {
      return typeof t.value == "bigint" ? t.typed = !0 : Kt(this, "type", t, r), t;
    }
  };
}
function Lr(e, t) {
  return {
    kind: "schema",
    type: "custom",
    reference: Lr,
    expects: "unknown",
    async: !1,
    check: e,
    message: t,
    _run(r, n) {
      return this.check(r.value) ? r.typed = !0 : Kt(this, "type", r, n), r;
    }
  };
}
function Dc(e, t) {
  return {
    kind: "schema",
    type: "instance",
    reference: Dc,
    expects: e.name,
    async: !1,
    class: e,
    message: t,
    _run(r, n) {
      return r.value instanceof this.class ? r.typed = !0 : Kt(this, "type", r, n), r;
    }
  };
}
function Kl(e, ...t) {
  const r = {
    kind: "schema",
    type: "nullable",
    reference: Kl,
    expects: `(${e.expects} | null)`,
    async: !1,
    wrapped: e,
    _run(n, o) {
      return n.value === null && ("default" in this && (n.value = Vf(
        this,
        n,
        o
      )), n.value === null) ? (n.typed = !0, n) : this.wrapped._run(n, o);
    }
  };
  return 0 in t && (r.default = t[0]), r;
}
function q0(e, ...t) {
  const r = {
    kind: "schema",
    type: "nullish",
    reference: q0,
    expects: `(${e.expects} | null | undefined)`,
    async: !1,
    wrapped: e,
    _run(n, o) {
      return (n.value === null || n.value === void 0) && ("default" in this && (n.value = Vf(
        this,
        n,
        o
      )), n.value === null || n.value === void 0) ? (n.typed = !0, n) : this.wrapped._run(n, o);
    }
  };
  return 0 in t && (r.default = t[0]), r;
}
function Qt(e) {
  return {
    kind: "schema",
    type: "number",
    reference: Qt,
    expects: "number",
    async: !1,
    message: e,
    _run(t, r) {
      return typeof t.value == "number" && !isNaN(t.value) ? t.typed = !0 : Kt(this, "type", t, r), t;
    }
  };
}
function yt(e, t) {
  return {
    kind: "schema",
    type: "object",
    reference: yt,
    expects: "Object",
    async: !1,
    entries: e,
    message: t,
    _run(r, n) {
      var i;
      const o = r.value;
      if (o && typeof o == "object") {
        r.typed = !0, r.value = {};
        for (const s in this.entries) {
          const a = o[s], c = this.entries[s]._run(
            { typed: !1, value: a },
            n
          );
          if (c.issues) {
            const u = {
              type: "object",
              origin: "value",
              input: o,
              key: s,
              value: a
            };
            for (const f of c.issues)
              f.path ? f.path.unshift(u) : f.path = [u], (i = r.issues) == null || i.push(f);
            if (r.issues || (r.issues = c.issues), n.abortEarly) {
              r.typed = !1;
              break;
            }
          }
          c.typed || (r.typed = !1), (c.value !== void 0 || s in o) && (r.value[s] = c.value);
        }
      } else
        Kt(this, "type", r, n);
      return r;
    }
  };
}
function Qa(e, ...t) {
  const r = {
    kind: "schema",
    type: "optional",
    reference: Qa,
    expects: `(${e.expects} | undefined)`,
    async: !1,
    wrapped: e,
    _run(n, o) {
      return n.value === void 0 && ("default" in this && (n.value = Vf(
        this,
        n,
        o
      )), n.value === void 0) ? (n.typed = !0, n) : this.wrapped._run(n, o);
    }
  };
  return 0 in t && (r.default = t[0]), r;
}
function ti(e) {
  return {
    kind: "schema",
    type: "string",
    reference: ti,
    expects: "string",
    async: !1,
    message: e,
    _run(t, r) {
      return typeof t.value == "string" ? t.typed = !0 : Kt(this, "type", t, r), t;
    }
  };
}
function en(e, t) {
  return {
    kind: "schema",
    type: "tuple",
    reference: en,
    expects: "Array",
    async: !1,
    items: e,
    message: t,
    _run(r, n) {
      var i;
      const o = r.value;
      if (Array.isArray(o)) {
        r.typed = !0, r.value = [];
        for (let s = 0; s < this.items.length; s++) {
          const a = o[s], c = this.items[s]._run(
            { typed: !1, value: a },
            n
          );
          if (c.issues) {
            const u = {
              type: "array",
              origin: "value",
              input: o,
              key: s,
              value: a
            };
            for (const f of c.issues)
              f.path ? f.path.unshift(u) : f.path = [u], (i = r.issues) == null || i.push(f);
            if (r.issues || (r.issues = c.issues), n.abortEarly) {
              r.typed = !1;
              break;
            }
          }
          c.typed || (r.typed = !1), r.value.push(c.value);
        }
      } else
        Kt(this, "type", r, n);
      return r;
    }
  };
}
function Nh(e) {
  let t;
  if (e)
    for (const r of e)
      t ? t.push(...r.issues) : t = r.issues;
  return t;
}
function Wf(e, t) {
  return {
    kind: "schema",
    type: "union",
    reference: Wf,
    expects: h1(
      e.map((r) => r.expects),
      "|"
    ),
    async: !1,
    options: e,
    message: t,
    _run(r, n) {
      let o, i, s;
      for (const a of this.options) {
        const c = a._run(
          { typed: !1, value: r.value },
          n
        );
        if (c.typed)
          if (c.issues)
            i ? i.push(c) : i = [c];
          else {
            o = c;
            break;
          }
        else
          s ? s.push(c) : s = [c];
      }
      if (o)
        return o;
      if (i) {
        if (i.length === 1)
          return i[0];
        Kt(this, "type", r, n, {
          issues: Nh(i)
        }), r.typed = !0;
      } else {
        if ((s == null ? void 0 : s.length) === 1)
          return s[0];
        Kt(this, "type", r, n, {
          issues: Nh(s)
        });
      }
      return r;
    }
  };
}
function rt(e, t, r) {
  const n = e._run(
    { typed: !1, value: t },
    u1(r)
  );
  if (n.issues)
    throw new p1(n.issues);
  return n.value;
}
function po(e, t) {
  const r = {};
  for (const n in e.entries)
    r[n] = Qa(e.entries[n]);
  return { ...e, entries: r };
}
function Gi(...e) {
  return {
    ...e[0],
    pipe: e,
    _run(t, r) {
      for (const n of e)
        if (n.kind !== "metadata") {
          if (t.issues && (n.kind === "schema" || n.kind === "transformation")) {
            t.typed = !1;
            break;
          }
          (!t.issues || !r.abortEarly && !r.abortPipeEarly) && (t = n._run(t, r));
        }
      return t;
    }
  };
}
const Uh = new Uint8Array(32), Ch = Nn(
  "fffffffffffffffffffffffffffffffffffffffffffffffffffffffefffffc2f"
), St = (e) => Gi(Dc(Uint8Array), M0(e));
function ks(e, t) {
  return e.length !== t.length ? !1 : e.every((r, n) => J(r, t[n]) === 0);
}
function Nr(e) {
  if (!(e instanceof Uint8Array) || e.length < 33) return !1;
  const t = e[0], r = e.slice(1, 33);
  if (J(Uh, r) === 0 || J(r, Ch) >= 0) return !1;
  if ((t === 2 || t === 3) && e.length === 33)
    return !0;
  const n = e.slice(33);
  return J(Uh, n) === 0 || J(n, Ch) >= 0 ? !1 : t === 4 && e.length === 65;
}
const Fa = 254;
function Gf(e) {
  return !e || !("output" in e) || !(e.output instanceof Uint8Array) ? !1 : e.version !== void 0 ? (e.version & Fa) === e.version : !0;
}
function V0(e) {
  return Array.isArray(e) ? e.length !== 2 ? !1 : e.every((t) => V0(t)) : Gf(e);
}
const g1 = St(32), m1 = St(20), Hh = St(32), Fe = Dc(Uint8Array);
Gi(ti(), D0(/^([0-9a-f]{2})+$/i));
const b1 = Gi(
  Qt(),
  qf(),
  jc(0),
  zc(255)
), vn = Gi(
  Qt(),
  qf(),
  jc(0),
  zc(4294967295)
), Vu = Gi(
  K0(),
  jc(0n),
  zc(0x7fffffffffffffffn)
), Rh = (e) => yt(
  Object.entries(e).reduce(
    (t, r) => ({ ...t, [r[0]]: q0(r[1]) }),
    {}
  )
), Lh = new Uint8Array(1);
function zh(e) {
  let t = 0;
  for (; e[t] === 0; ) ++t;
  return t === e.length ? Lh : (e = e.slice(t), e[0] & 128 ? st([Lh, e]) : e);
}
function jh(e) {
  e[0] === 0 && (e = e.slice(1));
  const t = new Uint8Array(32), r = Math.max(0, 32 - e.length);
  return t.set(e, r), t;
}
function y1(e) {
  const t = In(e, e.length - 1);
  if (!Xf(t))
    throw new Error("Invalid hashType " + t);
  const r = Gv(e.subarray(0, -1)), n = jh(r.r), o = jh(r.s);
  return { signature: st([n, o]), hashType: t };
}
function w1(e, t) {
  if (rt(
    yt({
      signature: St(64),
      hashType: b1
    }),
    { signature: e, hashType: t }
  ), !Xf(t))
    throw new Error("Invalid hashType " + t);
  const r = new Uint8Array(1);
  ur(r, 0, t);
  const n = zh(e.slice(0, 32)), o = zh(e.slice(32, 64));
  return st([Zv(n, o), r]);
}
const v1 = /* @__PURE__ */ Object.freeze(/* @__PURE__ */ Object.defineProperty({
  __proto__: null,
  decode: y1,
  encode: w1
}, Symbol.toStringTag, { value: "Module" })), W0 = Ke.OP_RESERVED, G0 = er(Wf([Dc(Uint8Array), Qt()]));
function x1(e) {
  return Mc(Qt(), e) && (e === Ke.OP_0 || e >= Ke.OP_1 && e <= Ke.OP_16 || e === Ke.OP_1NEGATE);
}
function Z0(e) {
  return Mc(Fe, e) || x1(e);
}
function Zf(e) {
  return Mc(Gi(F0(), j0(Z0)), e);
}
function X0(e) {
  return e.length - e.filter(Z0).length;
}
function ec(e) {
  if (e.length === 0) return Ke.OP_0;
  if (e.length === 1) {
    if (e[0] >= 1 && e[0] <= 16) return W0 + e[0];
    if (e[0] === 129) return Ke.OP_1NEGATE;
  }
}
function Y0(e) {
  return e instanceof Uint8Array;
}
function E1(e) {
  return Mc(G0, e);
}
function tc(e) {
  return e instanceof Uint8Array;
}
function tr(e) {
  if (Y0(e)) return e;
  rt(G0, e);
  const t = e.reduce((o, i) => tc(i) ? i.length === 1 && ec(i) !== void 0 ? o + 1 : o + z0(i.length) + i.length : o + 1, 0), r = new Uint8Array(t);
  let n = 0;
  if (e.forEach((o) => {
    if (tc(o)) {
      const i = ec(o);
      if (i !== void 0) {
        ur(r, n, i), n += 1;
        return;
      }
      n += i1(r, o.length, n), r.set(o, n), n += o.length;
    } else
      ur(r, n, o), n += 1;
  }), n !== r.length) throw new Error("Could not decode chunks");
  return r;
}
function ot(e) {
  if (E1(e)) return e;
  rt(Fe, e);
  const t = [];
  let r = 0;
  for (; r < e.length; ) {
    const n = e[r];
    if (n > Ke.OP_0 && n <= Ke.OP_PUSHDATA4) {
      const o = s1(e, r);
      if (o === null || (r += o.size, r + o.number > e.length)) return null;
      const i = e.slice(r, r + o.number);
      r += o.number;
      const s = ec(i);
      s !== void 0 ? t.push(s) : t.push(i);
    } else
      t.push(n), r += 1;
  }
  return t;
}
function _1(e) {
  if (Y0(e) && (e = ot(e)), !e)
    throw new Error("Could not convert invalid chunks to ASM");
  return e.map((t) => {
    if (tc(t)) {
      const r = ec(t);
      if (r === void 0) return me(t);
      t = r;
    }
    return $0[t];
  }).join(" ");
}
function S1(e) {
  return e = ot(e), rt(Lr(Zf), e), e.map((t) => tc(t) ? t : t === Ke.OP_0 ? new Uint8Array(0) : c1(t - W0));
}
function k1(e) {
  return Nr(e);
}
function Xf(e) {
  const t = e & -129;
  return t > 0 && t < 4;
}
function Pn(e) {
  return !(e instanceof Uint8Array) || !Xf(e[e.length - 1]) ? !1 : Wv(e.slice(0, -1));
}
const ys = v1;
function le(e, t, r) {
  Object.defineProperty(e, t, {
    configurable: !0,
    enumerable: !0,
    get() {
      const n = r.call(this);
      return this[t] = n, n;
    },
    set(n) {
      Object.defineProperty(this, t, {
        configurable: !0,
        enumerable: !0,
        value: n,
        writable: !0
      });
    }
  });
}
function Er(e) {
  let t;
  return () => (t !== void 0 || (t = e()), t);
}
const bi = Ke, Ea = bi.OP_RESERVED;
function Fc(e, t) {
  if (!e.input && !e.output && !(e.pubkeys && e.m !== void 0) && !e.signatures)
    throw new TypeError("Not enough data");
  t = Object.assign({ validate: !0 }, t || {});
  function r(c) {
    return Pn(c) || (t.allowIncomplete && c === bi.OP_0) !== void 0;
  }
  rt(
    po(
      yt({
        network: yt({}),
        m: Qt(),
        n: Qt(),
        output: Fe,
        pubkeys: er(Lr(Nr), "Received invalid pubkey"),
        signatures: er(
          Lr(r),
          "Expected signature to be of type isAcceptableSignature"
        ),
        input: Fe
      })
    ),
    e
  );
  const o = { network: e.network || Dr };
  let i = [], s = !1;
  function a(c) {
    s || (s = !0, i = ot(c), o.m = i[0] - Ea, o.n = i[i.length - 2] - Ea, o.pubkeys = i.slice(1, -2));
  }
  if (le(o, "output", () => {
    if (e.m && o.n && e.pubkeys)
      return tr(
        [].concat(
          Ea + e.m,
          e.pubkeys,
          Ea + o.n,
          bi.OP_CHECKMULTISIG
        )
      );
  }), le(o, "m", () => {
    if (o.output)
      return a(o.output), o.m;
  }), le(o, "n", () => {
    if (o.pubkeys)
      return o.pubkeys.length;
  }), le(o, "pubkeys", () => {
    if (e.output)
      return a(e.output), o.pubkeys;
  }), le(o, "signatures", () => {
    if (e.input)
      return ot(e.input).slice(1);
  }), le(o, "input", () => {
    if (e.signatures)
      return tr([bi.OP_0].concat(e.signatures));
  }), le(o, "witness", () => {
    if (o.input)
      return [];
  }), le(o, "name", () => {
    if (!(!o.m || !o.n))
      return `p2ms(${o.m} of ${o.n})`;
  }), t.validate) {
    if (e.output) {
      if (a(e.output), rt(Qt(), i[0], { message: "Output is invalid" }), rt(Qt(), i[i.length - 2], {
        message: "Output is invalid"
      }), i[i.length - 1] !== bi.OP_CHECKMULTISIG)
        throw new TypeError("Output is invalid");
      if (o.m <= 0 || o.n > 16 || o.m > o.n || o.n !== i.length - 3)
        throw new TypeError("Output is invalid");
      if (!o.pubkeys.every((c) => Nr(c)))
        throw new TypeError("Output is invalid");
      if (e.m !== void 0 && e.m !== o.m) throw new TypeError("m mismatch");
      if (e.n !== void 0 && e.n !== o.n) throw new TypeError("n mismatch");
      if (e.pubkeys && !ks(e.pubkeys, o.pubkeys))
        throw new TypeError("Pubkeys mismatch");
    }
    if (e.pubkeys) {
      if (e.n !== void 0 && e.n !== e.pubkeys.length)
        throw new TypeError("Pubkey count mismatch");
      if (o.n = e.pubkeys.length, o.n < o.m) throw new TypeError("Pubkey count cannot be less than m");
    }
    if (e.signatures) {
      if (e.signatures.length < o.m)
        throw new TypeError("Not enough signatures provided");
      if (e.signatures.length > o.m)
        throw new TypeError("Too many signatures provided");
    }
    if (e.input) {
      if (e.input[0] !== bi.OP_0) throw new TypeError("Input is invalid");
      if (o.signatures.length === 0 || !o.signatures.every(r))
        throw new TypeError("Input has invalid signature(s)");
      if (e.signatures && !ks(e.signatures, o.signatures))
        throw new TypeError("Signature mismatch");
      if (e.m !== void 0 && e.m !== e.signatures.length)
        throw new TypeError("Signature count mismatch");
    }
  }
  return Object.assign(o, e);
}
const Mh = Ke;
function J0(e, t) {
  if (!e.input && !e.output && !e.pubkey && !e.input && !e.signature)
    throw new TypeError("Not enough data");
  t = Object.assign({ validate: !0 }, t || {}), rt(
    po(
      yt({
        network: yt({}),
        output: Fe,
        pubkey: Lr(Nr, "invalid pubkey"),
        signature: Lr(
          Pn,
          "Expected signature to be of type isCanonicalScriptSignature"
        ),
        input: Fe
      })
    ),
    e
  );
  const r = Er(() => ot(e.input)), o = { name: "p2pk", network: e.network || Dr };
  if (le(o, "output", () => {
    if (e.pubkey)
      return tr([e.pubkey, Mh.OP_CHECKSIG]);
  }), le(o, "pubkey", () => {
    if (e.output)
      return e.output.slice(1, -1);
  }), le(o, "signature", () => {
    if (e.input)
      return r()[0];
  }), le(o, "input", () => {
    if (e.signature)
      return tr([e.signature]);
  }), le(o, "witness", () => {
    if (o.input)
      return [];
  }), t.validate) {
    if (e.output) {
      if (e.output[e.output.length - 1] !== Mh.OP_CHECKSIG)
        throw new TypeError("Output is invalid");
      if (!Nr(o.pubkey)) throw new TypeError("Output pubkey is invalid");
      if (e.pubkey && J(e.pubkey, o.pubkey) !== 0)
        throw new TypeError("Pubkey mismatch");
    }
    if (e.signature && e.input && J(e.input, o.input) !== 0)
      throw new TypeError("Signature mismatch");
    if (e.input) {
      if (r().length !== 1) throw new TypeError("Input is invalid");
      if (!Pn(o.signature))
        throw new TypeError("Input has invalid signature");
    }
  }
  return Object.assign(o, e);
}
function Dh(e) {
  if (!Number.isSafeInteger(e) || e < 0)
    throw new Error(`positive integer expected, not ${e}`);
}
function A1(e) {
  return e instanceof Uint8Array || e != null && typeof e == "object" && e.constructor.name === "Uint8Array";
}
function Kc(e, ...t) {
  if (!A1(e))
    throw new Error("Uint8Array expected");
  if (t.length > 0 && !t.includes(e.length))
    throw new Error(`Uint8Array expected of length ${t}, not of length=${e.length}`);
}
function T1(e) {
  if (typeof e != "function" || typeof e.create != "function")
    throw new Error("Hash should be wrapped by utils.wrapConstructor");
  Dh(e.outputLen), Dh(e.blockLen);
}
function rc(e, t = !0) {
  if (e.destroyed)
    throw new Error("Hash instance has been destroyed");
  if (t && e.finished)
    throw new Error("Hash#digest() has already been called");
}
function I1(e, t) {
  Kc(e);
  const r = t.outputLen;
  if (e.length < r)
    throw new Error(`digestInto() expects output buffer of length at least ${r}`);
}
const pi = typeof globalThis == "object" && "crypto" in globalThis ? globalThis.crypto : void 0;
/*! noble-hashes - MIT License (c) 2022 Paul Miller (paulmillr.com) */
const Wu = (e) => new DataView(e.buffer, e.byteOffset, e.byteLength), Wr = (e, t) => e << 32 - t | e >>> t, _a = (e, t) => e << t | e >>> 32 - t >>> 0;
new Uint8Array(new Uint32Array([287454020]).buffer)[0];
function P1(e) {
  if (typeof e != "string")
    throw new Error(`utf8ToBytes expected string, got ${typeof e}`);
  return new Uint8Array(new TextEncoder().encode(e));
}
function Yf(e) {
  return typeof e == "string" && (e = P1(e)), Kc(e), e;
}
function O1(...e) {
  let t = 0;
  for (let n = 0; n < e.length; n++) {
    const o = e[n];
    Kc(o), t += o.length;
  }
  const r = new Uint8Array(t);
  for (let n = 0, o = 0; n < e.length; n++) {
    const i = e[n];
    r.set(i, o), o += i.length;
  }
  return r;
}
let Q0 = class {
  // Safe version that clones internal state
  clone() {
    return this._cloneInto();
  }
};
function Jf(e) {
  const t = (n) => e().update(Yf(n)).digest(), r = e();
  return t.outputLen = r.outputLen, t.blockLen = r.blockLen, t.create = () => e(), t;
}
function B1(e = 32) {
  if (pi && typeof pi.getRandomValues == "function")
    return pi.getRandomValues(new Uint8Array(e));
  if (pi && typeof pi.randomBytes == "function")
    return pi.randomBytes(e);
  throw new Error("crypto.getRandomValues must be defined");
}
function $1(e, t, r, n) {
  if (typeof e.setBigUint64 == "function")
    return e.setBigUint64(t, r, n);
  const o = BigInt(32), i = BigInt(4294967295), s = Number(r >> o & i), a = Number(r & i), c = n ? 4 : 0, u = n ? 0 : 4;
  e.setUint32(t + c, s, n), e.setUint32(t + u, a, n);
}
const N1 = (e, t, r) => e & t ^ ~e & r, U1 = (e, t, r) => e & t ^ e & r ^ t & r;
let Qf = class extends Q0 {
  constructor(t, r, n, o) {
    super(), this.blockLen = t, this.outputLen = r, this.padOffset = n, this.isLE = o, this.finished = !1, this.length = 0, this.pos = 0, this.destroyed = !1, this.buffer = new Uint8Array(t), this.view = Wu(this.buffer);
  }
  update(t) {
    rc(this);
    const { view: r, buffer: n, blockLen: o } = this;
    t = Yf(t);
    const i = t.length;
    for (let s = 0; s < i; ) {
      const a = Math.min(o - this.pos, i - s);
      if (a === o) {
        const c = Wu(t);
        for (; o <= i - s; s += o)
          this.process(c, s);
        continue;
      }
      n.set(t.subarray(s, s + a), this.pos), this.pos += a, s += a, this.pos === o && (this.process(r, 0), this.pos = 0);
    }
    return this.length += t.length, this.roundClean(), this;
  }
  digestInto(t) {
    rc(this), I1(t, this), this.finished = !0;
    const { buffer: r, view: n, blockLen: o, isLE: i } = this;
    let { pos: s } = this;
    r[s++] = 128, this.buffer.subarray(s).fill(0), this.padOffset > o - s && (this.process(n, 0), s = 0);
    for (let l = s; l < o; l++)
      r[l] = 0;
    $1(n, o - 8, BigInt(this.length * 8), i), this.process(n, 0);
    const a = Wu(t), c = this.outputLen;
    if (c % 4)
      throw new Error("_sha2: outputLen should be aligned to 32bit");
    const u = c / 4, f = this.get();
    if (u > f.length)
      throw new Error("_sha2: outputLen bigger than state");
    for (let l = 0; l < u; l++)
      a.setUint32(4 * l, f[l], i);
  }
  digest() {
    const { buffer: t, outputLen: r } = this;
    this.digestInto(t);
    const n = t.slice(0, r);
    return this.destroy(), n;
  }
  _cloneInto(t) {
    t || (t = new this.constructor()), t.set(...this.get());
    const { blockLen: r, buffer: n, length: o, finished: i, destroyed: s, pos: a } = this;
    return t.length = o, t.pos = a, t.finished = i, t.destroyed = s, o % r && t.buffer.set(n), t;
  }
};
const C1 = /* @__PURE__ */ new Uint8Array([7, 4, 13, 1, 10, 6, 15, 3, 12, 0, 9, 5, 2, 14, 11, 8]), eg = /* @__PURE__ */ new Uint8Array(new Array(16).fill(0).map((e, t) => t)), H1 = /* @__PURE__ */ eg.map((e) => (9 * e + 5) % 16);
let ed = [eg], td = [H1];
for (let e = 0; e < 4; e++)
  for (let t of [ed, td])
    t.push(t[e].map((r) => C1[r]));
const tg = /* @__PURE__ */ [
  [11, 14, 15, 12, 5, 8, 7, 9, 11, 13, 14, 15, 6, 7, 9, 8],
  [12, 13, 11, 15, 6, 9, 9, 7, 12, 15, 11, 13, 7, 8, 7, 7],
  [13, 15, 14, 11, 7, 7, 6, 8, 13, 14, 13, 12, 5, 5, 6, 9],
  [14, 11, 12, 14, 8, 6, 5, 5, 15, 12, 15, 14, 9, 9, 8, 6],
  [15, 12, 13, 13, 9, 5, 8, 6, 14, 11, 12, 11, 8, 6, 5, 5]
].map((e) => new Uint8Array(e)), R1 = /* @__PURE__ */ ed.map((e, t) => e.map((r) => tg[t][r])), L1 = /* @__PURE__ */ td.map((e, t) => e.map((r) => tg[t][r])), z1 = /* @__PURE__ */ new Uint32Array([
  0,
  1518500249,
  1859775393,
  2400959708,
  2840853838
]), j1 = /* @__PURE__ */ new Uint32Array([
  1352829926,
  1548603684,
  1836072691,
  2053994217,
  0
]);
function Fh(e, t, r, n) {
  return e === 0 ? t ^ r ^ n : e === 1 ? t & r | ~t & n : e === 2 ? (t | ~r) ^ n : e === 3 ? t & n | r & ~n : t ^ (r | ~n);
}
const Sa = /* @__PURE__ */ new Uint32Array(16);
let M1 = class extends Qf {
  constructor() {
    super(64, 20, 8, !0), this.h0 = 1732584193, this.h1 = -271733879, this.h2 = -1732584194, this.h3 = 271733878, this.h4 = -1009589776;
  }
  get() {
    const { h0: t, h1: r, h2: n, h3: o, h4: i } = this;
    return [t, r, n, o, i];
  }
  set(t, r, n, o, i) {
    this.h0 = t | 0, this.h1 = r | 0, this.h2 = n | 0, this.h3 = o | 0, this.h4 = i | 0;
  }
  process(t, r) {
    for (let m = 0; m < 16; m++, r += 4)
      Sa[m] = t.getUint32(r, !0);
    let n = this.h0 | 0, o = n, i = this.h1 | 0, s = i, a = this.h2 | 0, c = a, u = this.h3 | 0, f = u, l = this.h4 | 0, h = l;
    for (let m = 0; m < 5; m++) {
      const b = 4 - m, y = z1[m], g = j1[m], x = ed[m], S = td[m], v = R1[m], T = L1[m];
      for (let I = 0; I < 16; I++) {
        const P = _a(n + Fh(m, i, a, u) + Sa[x[I]] + y, v[I]) + l | 0;
        n = l, l = u, u = _a(a, 10) | 0, a = i, i = P;
      }
      for (let I = 0; I < 16; I++) {
        const P = _a(o + Fh(b, s, c, f) + Sa[S[I]] + g, T[I]) + h | 0;
        o = h, h = f, f = _a(c, 10) | 0, c = s, s = P;
      }
    }
    this.set(this.h1 + a + f | 0, this.h2 + u + h | 0, this.h3 + l + o | 0, this.h4 + n + s | 0, this.h0 + i + c | 0);
  }
  roundClean() {
    Sa.fill(0);
  }
  destroy() {
    this.destroyed = !0, this.buffer.fill(0), this.set(0, 0, 0, 0, 0);
  }
};
const rg = /* @__PURE__ */ Jf(() => new M1()), D1 = /* @__PURE__ */ new Uint32Array([
  1116352408,
  1899447441,
  3049323471,
  3921009573,
  961987163,
  1508970993,
  2453635748,
  2870763221,
  3624381080,
  310598401,
  607225278,
  1426881987,
  1925078388,
  2162078206,
  2614888103,
  3248222580,
  3835390401,
  4022224774,
  264347078,
  604807628,
  770255983,
  1249150122,
  1555081692,
  1996064986,
  2554220882,
  2821834349,
  2952996808,
  3210313671,
  3336571891,
  3584528711,
  113926993,
  338241895,
  666307205,
  773529912,
  1294757372,
  1396182291,
  1695183700,
  1986661051,
  2177026350,
  2456956037,
  2730485921,
  2820302411,
  3259730800,
  3345764771,
  3516065817,
  3600352804,
  4094571909,
  275423344,
  430227734,
  506948616,
  659060556,
  883997877,
  958139571,
  1322822218,
  1537002063,
  1747873779,
  1955562222,
  2024104815,
  2227730452,
  2361852424,
  2428436474,
  2756734187,
  3204031479,
  3329325298
]), zn = /* @__PURE__ */ new Uint32Array([
  1779033703,
  3144134277,
  1013904242,
  2773480762,
  1359893119,
  2600822924,
  528734635,
  1541459225
]), jn = /* @__PURE__ */ new Uint32Array(64);
let F1 = class extends Qf {
  constructor() {
    super(64, 32, 8, !1), this.A = zn[0] | 0, this.B = zn[1] | 0, this.C = zn[2] | 0, this.D = zn[3] | 0, this.E = zn[4] | 0, this.F = zn[5] | 0, this.G = zn[6] | 0, this.H = zn[7] | 0;
  }
  get() {
    const { A: t, B: r, C: n, D: o, E: i, F: s, G: a, H: c } = this;
    return [t, r, n, o, i, s, a, c];
  }
  // prettier-ignore
  set(t, r, n, o, i, s, a, c) {
    this.A = t | 0, this.B = r | 0, this.C = n | 0, this.D = o | 0, this.E = i | 0, this.F = s | 0, this.G = a | 0, this.H = c | 0;
  }
  process(t, r) {
    for (let l = 0; l < 16; l++, r += 4)
      jn[l] = t.getUint32(r, !1);
    for (let l = 16; l < 64; l++) {
      const h = jn[l - 15], m = jn[l - 2], b = Wr(h, 7) ^ Wr(h, 18) ^ h >>> 3, y = Wr(m, 17) ^ Wr(m, 19) ^ m >>> 10;
      jn[l] = y + jn[l - 7] + b + jn[l - 16] | 0;
    }
    let { A: n, B: o, C: i, D: s, E: a, F: c, G: u, H: f } = this;
    for (let l = 0; l < 64; l++) {
      const h = Wr(a, 6) ^ Wr(a, 11) ^ Wr(a, 25), m = f + h + N1(a, c, u) + D1[l] + jn[l] | 0, y = (Wr(n, 2) ^ Wr(n, 13) ^ Wr(n, 22)) + U1(n, o, i) | 0;
      f = u, u = c, c = a, a = s + m | 0, s = i, i = o, o = n, n = m + y | 0;
    }
    n = n + this.A | 0, o = o + this.B | 0, i = i + this.C | 0, s = s + this.D | 0, a = a + this.E | 0, c = c + this.F | 0, u = u + this.G | 0, f = f + this.H | 0, this.set(n, o, i, s, a, c, u, f);
  }
  roundClean() {
    jn.fill(0);
  }
  destroy() {
    this.set(0, 0, 0, 0, 0, 0, 0, 0), this.buffer.fill(0);
  }
};
const Pt = /* @__PURE__ */ Jf(() => new F1());
function kn(e) {
  return rg(Pt(e));
}
function To(e) {
  return Pt(Pt(e));
}
const K1 = {
  "BIP0340/challenge": Uint8Array.from([
    123,
    181,
    45,
    122,
    159,
    239,
    88,
    50,
    62,
    177,
    191,
    122,
    64,
    125,
    179,
    130,
    210,
    243,
    242,
    216,
    27,
    177,
    34,
    79,
    73,
    254,
    81,
    143,
    109,
    72,
    211,
    124,
    123,
    181,
    45,
    122,
    159,
    239,
    88,
    50,
    62,
    177,
    191,
    122,
    64,
    125,
    179,
    130,
    210,
    243,
    242,
    216,
    27,
    177,
    34,
    79,
    73,
    254,
    81,
    143,
    109,
    72,
    211,
    124
  ]),
  "BIP0340/aux": Uint8Array.from([
    241,
    239,
    78,
    94,
    192,
    99,
    202,
    218,
    109,
    148,
    202,
    250,
    157,
    152,
    126,
    160,
    105,
    38,
    88,
    57,
    236,
    193,
    31,
    151,
    45,
    119,
    165,
    46,
    216,
    193,
    204,
    144,
    241,
    239,
    78,
    94,
    192,
    99,
    202,
    218,
    109,
    148,
    202,
    250,
    157,
    152,
    126,
    160,
    105,
    38,
    88,
    57,
    236,
    193,
    31,
    151,
    45,
    119,
    165,
    46,
    216,
    193,
    204,
    144
  ]),
  "BIP0340/nonce": Uint8Array.from([
    7,
    73,
    119,
    52,
    167,
    155,
    203,
    53,
    91,
    155,
    140,
    125,
    3,
    79,
    18,
    28,
    244,
    52,
    215,
    62,
    247,
    45,
    218,
    25,
    135,
    0,
    97,
    251,
    82,
    191,
    235,
    47,
    7,
    73,
    119,
    52,
    167,
    155,
    203,
    53,
    91,
    155,
    140,
    125,
    3,
    79,
    18,
    28,
    244,
    52,
    215,
    62,
    247,
    45,
    218,
    25,
    135,
    0,
    97,
    251,
    82,
    191,
    235,
    47
  ]),
  TapLeaf: Uint8Array.from([
    174,
    234,
    143,
    220,
    66,
    8,
    152,
    49,
    5,
    115,
    75,
    88,
    8,
    29,
    30,
    38,
    56,
    211,
    95,
    28,
    181,
    64,
    8,
    212,
    211,
    87,
    202,
    3,
    190,
    120,
    233,
    238,
    174,
    234,
    143,
    220,
    66,
    8,
    152,
    49,
    5,
    115,
    75,
    88,
    8,
    29,
    30,
    38,
    56,
    211,
    95,
    28,
    181,
    64,
    8,
    212,
    211,
    87,
    202,
    3,
    190,
    120,
    233,
    238
  ]),
  TapBranch: Uint8Array.from([
    25,
    65,
    161,
    242,
    229,
    110,
    185,
    95,
    162,
    169,
    241,
    148,
    190,
    92,
    1,
    247,
    33,
    111,
    51,
    237,
    130,
    176,
    145,
    70,
    52,
    144,
    208,
    91,
    245,
    22,
    160,
    21,
    25,
    65,
    161,
    242,
    229,
    110,
    185,
    95,
    162,
    169,
    241,
    148,
    190,
    92,
    1,
    247,
    33,
    111,
    51,
    237,
    130,
    176,
    145,
    70,
    52,
    144,
    208,
    91,
    245,
    22,
    160,
    21
  ]),
  TapSighash: Uint8Array.from([
    244,
    10,
    72,
    223,
    75,
    42,
    112,
    200,
    180,
    146,
    75,
    242,
    101,
    70,
    97,
    237,
    61,
    149,
    253,
    102,
    163,
    19,
    235,
    135,
    35,
    117,
    151,
    198,
    40,
    228,
    160,
    49,
    244,
    10,
    72,
    223,
    75,
    42,
    112,
    200,
    180,
    146,
    75,
    242,
    101,
    70,
    97,
    237,
    61,
    149,
    253,
    102,
    163,
    19,
    235,
    135,
    35,
    117,
    151,
    198,
    40,
    228,
    160,
    49
  ]),
  TapTweak: Uint8Array.from([
    232,
    15,
    225,
    99,
    156,
    156,
    160,
    80,
    227,
    175,
    27,
    57,
    193,
    67,
    198,
    62,
    66,
    156,
    188,
    235,
    21,
    217,
    64,
    251,
    181,
    197,
    161,
    244,
    175,
    87,
    197,
    233,
    232,
    15,
    225,
    99,
    156,
    156,
    160,
    80,
    227,
    175,
    27,
    57,
    193,
    67,
    198,
    62,
    66,
    156,
    188,
    235,
    21,
    217,
    64,
    251,
    181,
    197,
    161,
    244,
    175,
    87,
    197,
    233
  ]),
  "KeyAgg list": Uint8Array.from([
    72,
    28,
    151,
    28,
    60,
    11,
    70,
    215,
    240,
    178,
    117,
    174,
    89,
    141,
    78,
    44,
    126,
    215,
    49,
    156,
    89,
    74,
    92,
    110,
    199,
    158,
    160,
    212,
    153,
    2,
    148,
    240,
    72,
    28,
    151,
    28,
    60,
    11,
    70,
    215,
    240,
    178,
    117,
    174,
    89,
    141,
    78,
    44,
    126,
    215,
    49,
    156,
    89,
    74,
    92,
    110,
    199,
    158,
    160,
    212,
    153,
    2,
    148,
    240
  ]),
  "KeyAgg coefficient": Uint8Array.from([
    191,
    201,
    4,
    3,
    77,
    28,
    136,
    232,
    200,
    14,
    34,
    229,
    61,
    36,
    86,
    109,
    100,
    130,
    78,
    214,
    66,
    114,
    129,
    192,
    145,
    0,
    249,
    77,
    205,
    82,
    201,
    129,
    191,
    201,
    4,
    3,
    77,
    28,
    136,
    232,
    200,
    14,
    34,
    229,
    61,
    36,
    86,
    109,
    100,
    130,
    78,
    214,
    66,
    114,
    129,
    192,
    145,
    0,
    249,
    77,
    205,
    82,
    201,
    129
  ])
};
function qc(e, t) {
  return Pt(st([K1[e], t]));
}
function q1(e) {
  if (e.length >= 255)
    throw new TypeError("Alphabet too long");
  const t = new Uint8Array(256);
  for (let u = 0; u < t.length; u++)
    t[u] = 255;
  for (let u = 0; u < e.length; u++) {
    const f = e.charAt(u), l = f.charCodeAt(0);
    if (t[l] !== 255)
      throw new TypeError(f + " is ambiguous");
    t[l] = u;
  }
  const r = e.length, n = e.charAt(0), o = Math.log(r) / Math.log(256), i = Math.log(256) / Math.log(r);
  function s(u) {
    if (u instanceof Uint8Array || (ArrayBuffer.isView(u) ? u = new Uint8Array(u.buffer, u.byteOffset, u.byteLength) : Array.isArray(u) && (u = Uint8Array.from(u))), !(u instanceof Uint8Array))
      throw new TypeError("Expected Uint8Array");
    if (u.length === 0)
      return "";
    let f = 0, l = 0, h = 0;
    const m = u.length;
    for (; h !== m && u[h] === 0; )
      h++, f++;
    const b = (m - h) * i + 1 >>> 0, y = new Uint8Array(b);
    for (; h !== m; ) {
      let S = u[h], v = 0;
      for (let T = b - 1; (S !== 0 || v < l) && T !== -1; T--, v++)
        S += 256 * y[T] >>> 0, y[T] = S % r >>> 0, S = S / r >>> 0;
      if (S !== 0)
        throw new Error("Non-zero carry");
      l = v, h++;
    }
    let g = b - l;
    for (; g !== b && y[g] === 0; )
      g++;
    let x = n.repeat(f);
    for (; g < b; ++g)
      x += e.charAt(y[g]);
    return x;
  }
  function a(u) {
    if (typeof u != "string")
      throw new TypeError("Expected String");
    if (u.length === 0)
      return new Uint8Array();
    let f = 0, l = 0, h = 0;
    for (; u[f] === n; )
      l++, f++;
    const m = (u.length - f) * o + 1 >>> 0, b = new Uint8Array(m);
    for (; u[f]; ) {
      let S = t[u.charCodeAt(f)];
      if (S === 255)
        return;
      let v = 0;
      for (let T = m - 1; (S !== 0 || v < h) && T !== -1; T--, v++)
        S += r * b[T] >>> 0, b[T] = S % 256 >>> 0, S = S / 256 >>> 0;
      if (S !== 0)
        throw new Error("Non-zero carry");
      h = v, f++;
    }
    let y = m - h;
    for (; y !== m && b[y] === 0; )
      y++;
    const g = new Uint8Array(l + (m - y));
    let x = l;
    for (; y !== m; )
      g[x++] = b[y++];
    return g;
  }
  function c(u) {
    const f = a(u);
    if (f)
      return f;
    throw new Error("Non-base" + r + " character");
  }
  return {
    encode: s,
    decodeUnsafe: a,
    decode: c
  };
}
var V1 = "123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz";
const Gu = q1(V1);
function W1(e) {
  function t(i) {
    var s = Uint8Array.from(i), a = e(s), c = s.length + 4, u = new Uint8Array(c);
    return u.set(s, 0), u.set(a.subarray(0, 4), s.length), Gu.encode(u);
  }
  function r(i) {
    var s = i.slice(0, -4), a = i.slice(-4), c = e(s);
    if (!(a[0] ^ c[0] | a[1] ^ c[1] | a[2] ^ c[2] | a[3] ^ c[3]))
      return s;
  }
  function n(i) {
    var s = Gu.decodeUnsafe(i);
    if (s != null)
      return r(s);
  }
  function o(i) {
    var s = Gu.decode(i), a = r(s);
    if (a == null)
      throw new Error("Invalid checksum");
    return a;
  }
  return {
    encode: t,
    decode: o,
    decodeUnsafe: n
  };
}
function G1(e) {
  return Pt(Pt(e));
}
const $i = W1(G1), Mn = Ke;
function Zs(e, t) {
  if (!e.address && !e.hash && !e.output && !e.pubkey && !e.input)
    throw new TypeError("Not enough data");
  t = Object.assign({ validate: !0 }, t || {}), rt(
    po(
      yt({
        network: yt({}),
        address: ti(),
        hash: m1,
        output: St(25),
        pubkey: Lr(Nr),
        signature: Lr(Pn),
        input: Fe
      })
    ),
    e
  );
  const r = Er(() => {
    const s = $i.decode(e.address), a = In(s, 0), c = s.slice(1);
    return { version: a, hash: c };
  }), n = Er(() => ot(e.input)), o = e.network || Dr, i = { name: "p2pkh", network: o };
  if (le(i, "address", () => {
    if (!i.hash) return;
    const s = new Uint8Array(21);
    return ur(s, 0, o.pubKeyHash), s.set(i.hash, 1), $i.encode(s);
  }), le(i, "hash", () => {
    if (e.output) return e.output.slice(3, 23);
    if (e.address) return r().hash;
    if (e.pubkey || i.pubkey) return kn(e.pubkey || i.pubkey);
  }), le(i, "output", () => {
    if (i.hash)
      return tr([
        Mn.OP_DUP,
        Mn.OP_HASH160,
        i.hash,
        Mn.OP_EQUALVERIFY,
        Mn.OP_CHECKSIG
      ]);
  }), le(i, "pubkey", () => {
    if (e.input)
      return n()[1];
  }), le(i, "signature", () => {
    if (e.input)
      return n()[0];
  }), le(i, "input", () => {
    if (e.pubkey && e.signature)
      return tr([e.signature, e.pubkey]);
  }), le(i, "witness", () => {
    if (i.input)
      return [];
  }), t.validate) {
    let s = Uint8Array.from([]);
    if (e.address) {
      if (r().version !== o.pubKeyHash)
        throw new TypeError("Invalid version or Network mismatch");
      if (r().hash.length !== 20) throw new TypeError("Invalid address");
      s = r().hash;
    }
    if (e.hash) {
      if (s.length > 0 && J(s, e.hash) !== 0)
        throw new TypeError("Hash mismatch");
      s = e.hash;
    }
    if (e.output) {
      if (e.output.length !== 25 || e.output[0] !== Mn.OP_DUP || e.output[1] !== Mn.OP_HASH160 || e.output[2] !== 20 || e.output[23] !== Mn.OP_EQUALVERIFY || e.output[24] !== Mn.OP_CHECKSIG)
        throw new TypeError("Output is invalid");
      const a = e.output.slice(3, 23);
      if (s.length > 0 && J(s, a) !== 0)
        throw new TypeError("Hash mismatch");
      s = a;
    }
    if (e.pubkey) {
      const a = kn(e.pubkey);
      if (s.length > 0 && J(s, a) !== 0)
        throw new TypeError("Hash mismatch");
      s = a;
    }
    if (e.input) {
      const a = n();
      if (a.length !== 2) throw new TypeError("Input is invalid");
      if (!Pn(a[0]))
        throw new TypeError("Input has invalid signature");
      if (!Nr(a[1])) throw new TypeError("Input has invalid pubkey");
      if (e.signature && J(e.signature, a[0]) !== 0)
        throw new TypeError("Signature mismatch");
      if (e.pubkey && J(e.pubkey, a[1]) !== 0)
        throw new TypeError("Pubkey mismatch");
      const c = kn(a[1]);
      if (s.length > 0 && J(s, c) !== 0)
        throw new TypeError("Hash mismatch");
    }
  }
  return Object.assign(i, e);
}
const as = Ke;
function Zi(e, t) {
  if (!e.address && !e.hash && !e.output && !e.redeem && !e.input)
    throw new TypeError("Not enough data");
  t = Object.assign({ validate: !0 }, t || {}), rt(
    po(
      yt({
        network: yt({}),
        address: ti(),
        hash: St(20),
        output: St(23),
        redeem: po(
          yt({
            network: yt({}),
            output: Fe,
            input: Fe,
            witness: er(Fe)
          })
        ),
        input: Fe,
        witness: er(Fe)
      })
    ),
    e
  );
  let r = e.network;
  r || (r = e.redeem && e.redeem.network || Dr);
  const n = { network: r }, o = Er(() => {
    const a = $i.decode(e.address), c = In(a, 0), u = a.slice(1);
    return { version: c, hash: u };
  }), i = Er(() => ot(e.input)), s = Er(() => {
    const a = i(), c = a[a.length - 1];
    return {
      network: r,
      output: c === as.OP_FALSE ? Uint8Array.from([]) : c,
      input: tr(a.slice(0, -1)),
      witness: e.witness || []
    };
  });
  if (le(n, "address", () => {
    if (!n.hash) return;
    const a = new Uint8Array(21);
    return ur(a, 0, n.network.scriptHash), a.set(n.hash, 1), $i.encode(a);
  }), le(n, "hash", () => {
    if (e.output) return e.output.slice(2, 22);
    if (e.address) return o().hash;
    if (n.redeem && n.redeem.output) return kn(n.redeem.output);
  }), le(n, "output", () => {
    if (n.hash)
      return tr([as.OP_HASH160, n.hash, as.OP_EQUAL]);
  }), le(n, "redeem", () => {
    if (e.input)
      return s();
  }), le(n, "input", () => {
    if (!(!e.redeem || !e.redeem.input || !e.redeem.output))
      return tr(
        [].concat(ot(e.redeem.input), e.redeem.output)
      );
  }), le(n, "witness", () => {
    if (n.redeem && n.redeem.witness) return n.redeem.witness;
    if (n.input) return [];
  }), le(n, "name", () => {
    const a = ["p2sh"];
    return n.redeem !== void 0 && n.redeem.name !== void 0 && a.push(n.redeem.name), a.join("-");
  }), t.validate) {
    let a = Uint8Array.from([]);
    if (e.address) {
      if (o().version !== r.scriptHash)
        throw new TypeError("Invalid version or Network mismatch");
      if (o().hash.length !== 20) throw new TypeError("Invalid address");
      a = o().hash;
    }
    if (e.hash) {
      if (a.length > 0 && J(a, e.hash) !== 0)
        throw new TypeError("Hash mismatch");
      a = e.hash;
    }
    if (e.output) {
      if (e.output.length !== 23 || e.output[0] !== as.OP_HASH160 || e.output[1] !== 20 || e.output[22] !== as.OP_EQUAL)
        throw new TypeError("Output is invalid");
      const u = e.output.slice(2, 22);
      if (a.length > 0 && J(a, u) !== 0)
        throw new TypeError("Hash mismatch");
      a = u;
    }
    const c = (u) => {
      if (u.output) {
        const f = ot(u.output);
        if (!f || f.length < 1)
          throw new TypeError("Redeem.output too short");
        if (u.output.byteLength > 520)
          throw new TypeError(
            "Redeem.output unspendable if larger than 520 bytes"
          );
        if (X0(f) > 201)
          throw new TypeError(
            "Redeem.output unspendable with more than 201 non-push ops"
          );
        const l = kn(u.output);
        if (a.length > 0 && J(a, l) !== 0)
          throw new TypeError("Hash mismatch");
        a = l;
      }
      if (u.input) {
        const f = u.input.length > 0, l = u.witness && u.witness.length > 0;
        if (!f && !l) throw new TypeError("Empty input");
        if (f && l)
          throw new TypeError("Input and witness provided");
        if (f) {
          const h = ot(u.input);
          if (!Zf(h))
            throw new TypeError("Non push-only scriptSig");
        }
      }
    };
    if (e.input) {
      const u = i();
      if (!u || u.length < 1) throw new TypeError("Input too short");
      if (!(s().output instanceof Uint8Array))
        throw new TypeError("Input is invalid");
      c(s());
    }
    if (e.redeem) {
      if (e.redeem.network && e.redeem.network !== r)
        throw new TypeError("Network mismatch");
      if (e.input) {
        const u = s();
        if (e.redeem.output && J(e.redeem.output, u.output) !== 0)
          throw new TypeError("Redeem.output mismatch");
        if (e.redeem.input && J(e.redeem.input, u.input) !== 0)
          throw new TypeError("Redeem.input mismatch");
      }
      c(e.redeem);
    }
    if (e.witness && e.redeem && e.redeem.witness && !ks(e.redeem.witness, e.witness))
      throw new TypeError("Witness and redeem.witness mismatch");
  }
  return Object.assign(n, e);
}
var we = typeof globalThis < "u" ? globalThis : typeof window < "u" ? window : typeof global < "u" ? global : typeof self < "u" ? self : {};
function Z1(e) {
  return e && e.__esModule && Object.prototype.hasOwnProperty.call(e, "default") ? e.default : e;
}
function X1(e) {
  if (e.__esModule) return e;
  var t = e.default;
  if (typeof t == "function") {
    var r = function n() {
      return this instanceof n ? Reflect.construct(t, arguments, this.constructor) : t.apply(this, arguments);
    };
    r.prototype = t.prototype;
  } else r = {};
  return Object.defineProperty(r, "__esModule", { value: !0 }), Object.keys(e).forEach(function(n) {
    var o = Object.getOwnPropertyDescriptor(e, n);
    Object.defineProperty(r, n, o.get ? o : {
      enumerable: !0,
      get: function() {
        return e[n];
      }
    });
  }), r;
}
var As = {};
Object.defineProperty(As, "__esModule", { value: !0 });
var Ts = As.bech32m = lr = As.bech32 = void 0;
const nc = "qpzry9x8gf2tvdw0s3jn54khce6mua7l", ng = {};
for (let e = 0; e < nc.length; e++) {
  const t = nc.charAt(e);
  ng[t] = e;
}
function Ti(e) {
  const t = e >> 25;
  return (e & 33554431) << 5 ^ -(t >> 0 & 1) & 996825010 ^ -(t >> 1 & 1) & 642813549 ^ -(t >> 2 & 1) & 513874426 ^ -(t >> 3 & 1) & 1027748829 ^ -(t >> 4 & 1) & 705979059;
}
function Kh(e) {
  let t = 1;
  for (let r = 0; r < e.length; ++r) {
    const n = e.charCodeAt(r);
    if (n < 33 || n > 126)
      return "Invalid prefix (" + e + ")";
    t = Ti(t) ^ n >> 5;
  }
  t = Ti(t);
  for (let r = 0; r < e.length; ++r) {
    const n = e.charCodeAt(r);
    t = Ti(t) ^ n & 31;
  }
  return t;
}
function rd(e, t, r, n) {
  let o = 0, i = 0;
  const s = (1 << r) - 1, a = [];
  for (let c = 0; c < e.length; ++c)
    for (o = o << t | e[c], i += t; i >= r; )
      i -= r, a.push(o >> i & s);
  if (n)
    i > 0 && a.push(o << r - i & s);
  else {
    if (i >= t)
      return "Excess padding";
    if (o << r - i & s)
      return "Non-zero padding";
  }
  return a;
}
function Y1(e) {
  return rd(e, 8, 5, !0);
}
function J1(e) {
  const t = rd(e, 5, 8, !1);
  if (Array.isArray(t))
    return t;
}
function Q1(e) {
  const t = rd(e, 5, 8, !1);
  if (Array.isArray(t))
    return t;
  throw new Error(t);
}
function og(e) {
  let t;
  e === "bech32" ? t = 1 : t = 734539939;
  function r(s, a, c) {
    if (c = c || 90, s.length + 7 + a.length > c)
      throw new TypeError("Exceeds length limit");
    s = s.toLowerCase();
    let u = Kh(s);
    if (typeof u == "string")
      throw new Error(u);
    let f = s + "1";
    for (let l = 0; l < a.length; ++l) {
      const h = a[l];
      if (h >> 5)
        throw new Error("Non 5-bit word");
      u = Ti(u) ^ h, f += nc.charAt(h);
    }
    for (let l = 0; l < 6; ++l)
      u = Ti(u);
    u ^= t;
    for (let l = 0; l < 6; ++l) {
      const h = u >> (5 - l) * 5 & 31;
      f += nc.charAt(h);
    }
    return f;
  }
  function n(s, a) {
    if (a = a || 90, s.length < 8)
      return s + " too short";
    if (s.length > a)
      return "Exceeds length limit";
    const c = s.toLowerCase(), u = s.toUpperCase();
    if (s !== c && s !== u)
      return "Mixed-case string " + s;
    s = c;
    const f = s.lastIndexOf("1");
    if (f === -1)
      return "No separator character for " + s;
    if (f === 0)
      return "Missing prefix for " + s;
    const l = s.slice(0, f), h = s.slice(f + 1);
    if (h.length < 6)
      return "Data too short";
    let m = Kh(l);
    if (typeof m == "string")
      return m;
    const b = [];
    for (let y = 0; y < h.length; ++y) {
      const g = h.charAt(y), x = ng[g];
      if (x === void 0)
        return "Unknown character " + g;
      m = Ti(m) ^ x, !(y + 6 >= h.length) && b.push(x);
    }
    return m !== t ? "Invalid checksum for " + s : { prefix: l, words: b };
  }
  function o(s, a) {
    const c = n(s, a);
    if (typeof c == "object")
      return c;
  }
  function i(s, a) {
    const c = n(s, a);
    if (typeof c == "object")
      return c;
    throw new Error(c);
  }
  return {
    decodeUnsafe: o,
    decode: i,
    encode: r,
    toWords: Y1,
    fromWordsUnsafe: J1,
    fromWords: Q1
  };
}
var lr = As.bech32 = og("bech32");
Ts = As.bech32m = og("bech32m");
const qh = Ke, ex = new Uint8Array(0);
function Xs(e, t) {
  if (!e.address && !e.hash && !e.output && !e.pubkey && !e.witness)
    throw new TypeError("Not enough data");
  t = Object.assign({ validate: !0 }, t || {}), rt(
    po(
      yt({
        address: ti(),
        hash: St(20),
        input: St(0),
        network: yt({}),
        output: St(22),
        pubkey: Lr(Nr, "Not a valid pubkey"),
        signature: Lr(Pn),
        witness: er(Fe)
      })
    ),
    e
  );
  const r = Er(() => {
    const i = lr.decode(e.address), s = i.words.shift(), a = lr.fromWords(i.words);
    return {
      version: s,
      prefix: i.prefix,
      data: Uint8Array.from(a)
    };
  }), n = e.network || Dr, o = { name: "p2wpkh", network: n };
  if (le(o, "address", () => {
    if (!o.hash) return;
    const i = lr.toWords(o.hash);
    return i.unshift(0), lr.encode(n.bech32, i);
  }), le(o, "hash", () => {
    if (e.output) return e.output.slice(2, 22);
    if (e.address) return r().data;
    if (e.pubkey || o.pubkey) return kn(e.pubkey || o.pubkey);
  }), le(o, "output", () => {
    if (o.hash)
      return tr([qh.OP_0, o.hash]);
  }), le(o, "pubkey", () => {
    if (e.pubkey) return e.pubkey;
    if (e.witness)
      return e.witness[1];
  }), le(o, "signature", () => {
    if (e.witness)
      return e.witness[0];
  }), le(o, "input", () => {
    if (o.witness)
      return ex;
  }), le(o, "witness", () => {
    if (e.pubkey && e.signature)
      return [e.signature, e.pubkey];
  }), t.validate) {
    let i = Uint8Array.from([]);
    if (e.address) {
      if (n && n.bech32 !== r().prefix)
        throw new TypeError("Invalid prefix or Network mismatch");
      if (r().version !== 0)
        throw new TypeError("Invalid address version");
      if (r().data.length !== 20)
        throw new TypeError("Invalid address data");
      i = r().data;
    }
    if (e.hash) {
      if (i.length > 0 && J(i, e.hash) !== 0)
        throw new TypeError("Hash mismatch");
      i = e.hash;
    }
    if (e.output) {
      if (e.output.length !== 22 || e.output[0] !== qh.OP_0 || e.output[1] !== 20)
        throw new TypeError("Output is invalid");
      if (i.length > 0 && J(i, e.output.slice(2)) !== 0)
        throw new TypeError("Hash mismatch");
      i = e.output.slice(2);
    }
    if (e.pubkey) {
      const s = kn(e.pubkey);
      if (i.length > 0 && J(i, s) !== 0)
        throw new TypeError("Hash mismatch");
      if (i = s, !Nr(e.pubkey) || e.pubkey.length !== 33)
        throw new TypeError("Invalid pubkey for p2wpkh");
    }
    if (e.witness) {
      if (e.witness.length !== 2) throw new TypeError("Witness is invalid");
      if (!Pn(e.witness[0]))
        throw new TypeError("Witness has invalid signature");
      if (!Nr(e.witness[1]) || e.witness[1].length !== 33)
        throw new TypeError("Witness has invalid pubkey");
      if (e.signature && J(e.signature, e.witness[0]) !== 0)
        throw new TypeError("Signature mismatch");
      if (e.pubkey && J(e.pubkey, e.witness[1]) !== 0)
        throw new TypeError("Pubkey mismatch");
      const s = kn(e.witness[1]);
      if (i.length > 0 && J(i, s) !== 0)
        throw new TypeError("Hash mismatch");
    }
  }
  return Object.assign(o, e);
}
const Vh = Ke, Zu = new Uint8Array(0);
function ka(e) {
  return !!(e instanceof Uint8Array && e.length === 65 && e[0] === 4 && Nr(e));
}
function Ys(e, t) {
  if (!e.address && !e.hash && !e.output && !e.redeem && !e.witness)
    throw new TypeError("Not enough data");
  t = Object.assign({ validate: !0 }, t || {}), rt(
    Rh({
      network: yt({}),
      address: ti(),
      hash: g1,
      output: St(34),
      redeem: Rh({
        input: Fe,
        network: yt({}),
        output: Fe,
        witness: er(Fe)
      }),
      input: St(0),
      witness: er(Fe)
    }),
    e
  );
  const r = Er(() => {
    const s = lr.decode(e.address), a = s.words.shift(), c = lr.fromWords(s.words);
    return {
      version: a,
      prefix: s.prefix,
      data: Uint8Array.from(c)
    };
  }), n = Er(() => ot(e.redeem.input));
  let o = e.network;
  o || (o = e.redeem && e.redeem.network || Dr);
  const i = { network: o };
  if (le(i, "address", () => {
    if (!i.hash) return;
    const s = lr.toWords(i.hash);
    return s.unshift(0), lr.encode(o.bech32, s);
  }), le(i, "hash", () => {
    if (e.output) return e.output.slice(2);
    if (e.address) return r().data;
    if (i.redeem && i.redeem.output) return Pt(i.redeem.output);
  }), le(i, "output", () => {
    if (i.hash)
      return tr([Vh.OP_0, i.hash]);
  }), le(i, "redeem", () => {
    if (e.witness)
      return {
        output: e.witness[e.witness.length - 1],
        input: Zu,
        witness: e.witness.slice(0, -1)
      };
  }), le(i, "input", () => {
    if (i.witness)
      return Zu;
  }), le(i, "witness", () => {
    if (e.redeem && e.redeem.input && e.redeem.input.length > 0 && e.redeem.output && e.redeem.output.length > 0) {
      const s = S1(n());
      return i.redeem = Object.assign({ witness: s }, e.redeem), i.redeem.input = Zu, [].concat(s, e.redeem.output);
    }
    if (e.redeem && e.redeem.output && e.redeem.witness)
      return [].concat(e.redeem.witness, e.redeem.output);
  }), le(i, "name", () => {
    const s = ["p2wsh"];
    return i.redeem !== void 0 && i.redeem.name !== void 0 && s.push(i.redeem.name), s.join("-");
  }), t.validate) {
    let s = Uint8Array.from([]);
    if (e.address) {
      if (r().prefix !== o.bech32)
        throw new TypeError("Invalid prefix or Network mismatch");
      if (r().version !== 0)
        throw new TypeError("Invalid address version");
      if (r().data.length !== 32)
        throw new TypeError("Invalid address data");
      s = r().data;
    }
    if (e.hash) {
      if (s.length > 0 && J(s, e.hash) !== 0)
        throw new TypeError("Hash mismatch");
      s = e.hash;
    }
    if (e.output) {
      if (e.output.length !== 34 || e.output[0] !== Vh.OP_0 || e.output[1] !== 32)
        throw new TypeError("Output is invalid");
      const a = e.output.slice(2);
      if (s.length > 0 && J(s, a) !== 0)
        throw new TypeError("Hash mismatch");
      s = a;
    }
    if (e.redeem) {
      if (e.redeem.network && e.redeem.network !== o)
        throw new TypeError("Network mismatch");
      if (e.redeem.input && e.redeem.input.length > 0 && e.redeem.witness && e.redeem.witness.length > 0)
        throw new TypeError("Ambiguous witness source");
      if (e.redeem.output) {
        const a = ot(e.redeem.output);
        if (!a || a.length < 1)
          throw new TypeError("Redeem.output is invalid");
        if (e.redeem.output.byteLength > 3600)
          throw new TypeError(
            "Redeem.output unspendable if larger than 3600 bytes"
          );
        if (X0(a) > 201)
          throw new TypeError(
            "Redeem.output unspendable with more than 201 non-push ops"
          );
        const c = Pt(e.redeem.output);
        if (s.length > 0 && J(s, c) !== 0)
          throw new TypeError("Hash mismatch");
        s = c;
      }
      if (e.redeem.input && !Zf(n()))
        throw new TypeError("Non push-only scriptSig");
      if (e.witness && e.redeem.witness && !ks(e.witness, e.redeem.witness))
        throw new TypeError("Witness and redeem.witness mismatch");
      if (e.redeem.input && n().some(ka) || e.redeem.output && (ot(e.redeem.output) || []).some(
        ka
      ))
        throw new TypeError(
          "redeem.input or redeem.output contains uncompressed pubkey"
        );
    }
    if (e.witness && e.witness.length > 0) {
      const a = e.witness[e.witness.length - 1];
      if (e.redeem && e.redeem.output && J(e.redeem.output, a) !== 0)
        throw new TypeError("Witness and redeem.output mismatch");
      if (e.witness.some(ka) || (ot(a) || []).some(ka))
        throw new TypeError("Witness contains uncompressed pubkey");
    }
  }
  return Object.assign(i, e);
}
const ws = {};
function ig(e) {
  e ? e !== ws.eccLib && (tx(e), ws.eccLib = e) : ws.eccLib = e;
}
function ql() {
  if (!ws.eccLib)
    throw new Error(
      "No ECC Library provided. You must call initEccLib() with a valid TinySecp256k1Interface instance"
    );
  return ws.eccLib;
}
const hn = (e) => Nn(e);
function tx(e) {
  br(typeof e.isXOnlyPoint == "function"), br(
    e.isXOnlyPoint(
      hn("79be667ef9dcbbac55a06295ce870b07029bfcdb2dce28d959f2815b16f81798")
    )
  ), br(
    e.isXOnlyPoint(
      hn("fffffffffffffffffffffffffffffffffffffffffffffffffffffffeeffffc2e")
    )
  ), br(
    e.isXOnlyPoint(
      hn("f9308a019258c31049344f85f89d5229b531c845836f99b08601f113bce036f9")
    )
  ), br(
    e.isXOnlyPoint(
      hn("0000000000000000000000000000000000000000000000000000000000000001")
    )
  ), br(
    !e.isXOnlyPoint(
      hn("0000000000000000000000000000000000000000000000000000000000000000")
    )
  ), br(
    !e.isXOnlyPoint(
      hn("fffffffffffffffffffffffffffffffffffffffffffffffffffffffefffffc2f")
    )
  ), br(typeof e.xOnlyPointAddTweak == "function"), rx.forEach((t) => {
    const r = e.xOnlyPointAddTweak(hn(t.pubkey), hn(t.tweak));
    t.result === null ? br(r === null) : (br(r !== null), br(r.parity === t.parity), br(J(r.xOnlyPubkey, hn(t.result)) === 0));
  });
}
function br(e) {
  if (!e) throw new Error("ecc library invalid");
}
const rx = [
  {
    pubkey: "79be667ef9dcbbac55a06295ce870b07029bfcdb2dce28d959f2815b16f81798",
    tweak: "fffffffffffffffffffffffffffffffebaaedce6af48a03bbfd25e8cd0364140",
    parity: -1,
    result: null
  },
  {
    pubkey: "1617d38ed8d8657da4d4761e8057bc396ea9e4b9d29776d4be096016dbd2509b",
    tweak: "a8397a935f0dfceba6ba9618f6451ef4d80637abf4e6af2669fbc9de6a8fd2ac",
    parity: 1,
    result: "e478f99dab91052ab39a33ea35fd5e6e4933f4d28023cd597c9a1f6760346adf"
  },
  {
    pubkey: "2c0b7cf95324a07d05398b240174dc0c2be444d96b159aa6c7f7b1e668680991",
    tweak: "823c3cd2142744b075a87eade7e1b8678ba308d566226a0056ca2b7a76f86b47",
    parity: 0,
    result: "9534f8dc8c6deda2dc007655981c78b49c5d96c778fbf363462a11ec9dfd948c"
  }
], sg = "0123456789abcdefABCDEF";
sg.split("").map((e) => e.codePointAt(0));
const Wh = Array(256).fill(!0).map((e, t) => {
  const r = String.fromCodePoint(t), n = sg.indexOf(r);
  return n < 0 ? void 0 : n < 16 ? n : n - 6;
}), ag = new TextEncoder();
new TextDecoder();
function nx(e) {
  return ag.encode(e);
}
function ox(e) {
  const t = e.reduce((o, i) => o + i.length, 0), r = new Uint8Array(t);
  let n = 0;
  for (const o of e)
    r.set(o, n), n += o.length;
  return r;
}
function ix(e) {
  const t = ag.encode(e || ""), r = new Uint8Array(Math.floor(t.length / 2));
  let n;
  for (n = 0; n < r.length; n++) {
    const o = Wh[t[n * 2]], i = Wh[t[n * 2 + 1]];
    if (o === void 0 || i === void 0)
      break;
    r[n] = o << 4 | i;
  }
  return n === r.length ? r : r.slice(0, n);
}
function pn(e, t) {
  const r = Math.min(e.length, t.length);
  for (let n = 0; n < r; ++n)
    if (e[n] !== t[n])
      return e[n] < t[n] ? -1 : 1;
  return e.length === t.length ? 0 : e.length > t.length ? 1 : -1;
}
function Gh(e, t, r) {
  if (t + 1 > e.length)
    throw new Error("Offset is outside the bounds of Uint8Array");
  if (r > 255)
    throw new Error(`The value of "value" is out of range. It must be >= 0 and <= 255. Received ${r}`);
  e[t] = r;
}
function sx(e, t, r, n) {
  if (t + 2 > e.length)
    throw new Error("Offset is outside the bounds of Uint8Array");
  if (n = n.toUpperCase(), r > 65535)
    throw new Error(`The value of "value" is out of range. It must be >= 0 and <= 65535. Received ${r}`);
  n === "LE" ? (e[t] = r & 255, e[t + 1] = r >> 8 & 255) : (e[t] = r >> 8 & 255, e[t + 1] = r & 255);
}
function Io(e, t, r, n) {
  if (t + 4 > e.length)
    throw new Error("Offset is outside the bounds of Uint8Array");
  if (n = n.toUpperCase(), r > 4294967295)
    throw new Error(`The value of "value" is out of range. It must be >= 0 and <= ${4294967295}. Received ${r}`);
  n === "LE" ? (e[t] = r & 255, e[t + 1] = r >> 8 & 255, e[t + 2] = r >> 16 & 255, e[t + 3] = r >> 24 & 255) : (e[t] = r >> 24 & 255, e[t + 1] = r >> 16 & 255, e[t + 2] = r >> 8 & 255, e[t + 3] = r & 255);
}
function ax(e, t, r, n) {
  if (t + 8 > e.length)
    throw new Error("Offset is outside the bounds of Uint8Array");
  if (n = n.toUpperCase(), r > 0xffffffffffffffffn)
    throw new Error(`The value of "value" is out of range. It must be >= 0 and <= ${0xffffffffffffffffn}. Received ${r}`);
  n === "LE" ? (e[t] = Number(r & 0xffn), e[t + 1] = Number(r >> 8n & 0xffn), e[t + 2] = Number(r >> 16n & 0xffn), e[t + 3] = Number(r >> 24n & 0xffn), e[t + 4] = Number(r >> 32n & 0xffn), e[t + 5] = Number(r >> 40n & 0xffn), e[t + 6] = Number(r >> 48n & 0xffn), e[t + 7] = Number(r >> 56n & 0xffn)) : (e[t] = Number(r >> 56n & 0xffn), e[t + 1] = Number(r >> 48n & 0xffn), e[t + 2] = Number(r >> 40n & 0xffn), e[t + 3] = Number(r >> 32n & 0xffn), e[t + 4] = Number(r >> 24n & 0xffn), e[t + 5] = Number(r >> 16n & 0xffn), e[t + 6] = Number(r >> 8n & 0xffn), e[t + 7] = Number(r & 0xffn));
}
function cx(e, t, r) {
  if (t + 2 > e.length)
    throw new Error("Offset is outside the bounds of Uint8Array");
  if (r = r.toUpperCase(), r === "LE") {
    let n = 0;
    return n = (n << 8) + e[t + 1], n = (n << 8) + e[t], n;
  } else {
    let n = 0;
    return n = (n << 8) + e[t], n = (n << 8) + e[t + 1], n;
  }
}
function yi(e, t, r) {
  if (t + 4 > e.length)
    throw new Error("Offset is outside the bounds of Uint8Array");
  if (r = r.toUpperCase(), r === "LE") {
    let n = 0;
    return n = (n << 8) + e[t + 3] >>> 0, n = (n << 8) + e[t + 2] >>> 0, n = (n << 8) + e[t + 1] >>> 0, n = (n << 8) + e[t] >>> 0, n;
  } else {
    let n = 0;
    return n = (n << 8) + e[t] >>> 0, n = (n << 8) + e[t + 1] >>> 0, n = (n << 8) + e[t + 2] >>> 0, n = (n << 8) + e[t + 3] >>> 0, n;
  }
}
function ux(e, t, r) {
  if (t + 8 > e.length)
    throw new Error("Offset is outside the bounds of Uint8Array");
  if (r = r.toUpperCase(), r === "LE") {
    let n = 0n;
    return n = (n << 8n) + BigInt(e[t + 7]), n = (n << 8n) + BigInt(e[t + 6]), n = (n << 8n) + BigInt(e[t + 5]), n = (n << 8n) + BigInt(e[t + 4]), n = (n << 8n) + BigInt(e[t + 3]), n = (n << 8n) + BigInt(e[t + 2]), n = (n << 8n) + BigInt(e[t + 1]), n = (n << 8n) + BigInt(e[t]), n;
  } else {
    let n = 0n;
    return n = (n << 8n) + BigInt(e[t]), n = (n << 8n) + BigInt(e[t + 1]), n = (n << 8n) + BigInt(e[t + 2]), n = (n << 8n) + BigInt(e[t + 3]), n = (n << 8n) + BigInt(e[t + 4]), n = (n << 8n) + BigInt(e[t + 5]), n = (n << 8n) + BigInt(e[t + 6]), n = (n << 8n) + BigInt(e[t + 7]), n;
  }
}
const lx = (e) => {
  if (e < 0 || e > 0xffffffffffffffffn)
    throw new RangeError("value out of range");
};
function fx(e) {
  if (e < 0 || e > Number.MAX_SAFE_INTEGER || e % 1 !== 0)
    throw new RangeError("value out of range");
}
function cg(e) {
  typeof e == "number" ? fx(e) : lx(e);
}
function go(e, t, r) {
  cg(e), r === void 0 && (r = 0), t === void 0 && (t = new Uint8Array(_r(e)));
  let n = 0;
  return e < 253 ? (t.set([Number(e)], r), n = 1) : e <= 65535 ? (t.set([253], r), sx(t, r + 1, Number(e), "LE"), n = 3) : e <= 4294967295 ? (t.set([254], r), Io(t, r + 1, Number(e), "LE"), n = 5) : (t.set([255], r), ax(t, r + 1, BigInt(e), "LE"), n = 9), { buffer: t, bytes: n };
}
function Xi(e, t) {
  t === void 0 && (t = 0);
  const r = e.at(t);
  if (r === void 0)
    throw new Error("buffer too small");
  if (r < 253)
    return { numberValue: r, bigintValue: BigInt(r), bytes: 1 };
  if (r === 253) {
    const n = cx(e, t + 1, "LE");
    return {
      numberValue: n,
      bigintValue: BigInt(n),
      bytes: 3
    };
  } else if (r === 254) {
    const n = yi(e, t + 1, "LE");
    return {
      numberValue: n,
      bigintValue: BigInt(n),
      bytes: 5
    };
  } else {
    const n = ux(e, t + 1, "LE");
    return { numberValue: n <= Number.MAX_SAFE_INTEGER ? Number(n) : null, bigintValue: n, bytes: 9 };
  }
}
function _r(e) {
  return cg(e), e < 253 ? 1 : e <= 65535 ? 3 : e <= 4294967295 ? 5 : 9;
}
const dx = 9007199254740991;
function hx(e, t) {
  if (typeof e != "number" && typeof e != "bigint")
    throw new Error("cannot write a non-number as a number");
  if (e < 0 && e < BigInt(0))
    throw new Error("specified a negative value for writing an unsigned value");
  if (e > t && e > BigInt(t))
    throw new Error("RangeError: value out of range");
  if (Math.floor(Number(e)) !== Number(e))
    throw new Error("value has a fractional component");
}
function nd(e) {
  if (e.length < 1) return e;
  let t = e.length - 1, r = 0;
  for (let n = 0; n < e.length / 2; n++)
    r = e[n], e[n] = e[t], e[t] = r, t--;
  return e;
}
function Zh(e) {
  const t = new Uint8Array(e.length);
  return t.set(e), t;
}
class Dt {
  constructor(t, r = 0) {
    ne(this, "buffer");
    ne(this, "offset");
    this.buffer = t, this.offset = r, rt(en([Fe, vn]), [
      t,
      r
    ]);
  }
  static withCapacity(t) {
    return new Dt(new Uint8Array(t));
  }
  writeUInt8(t) {
    this.offset = ur(this.buffer, this.offset, t);
  }
  writeInt32(t) {
    this.offset = H0(this.buffer, this.offset, t, "LE");
  }
  writeInt64(t) {
    this.offset = R0(this.buffer, this.offset, BigInt(t), "LE");
  }
  writeUInt32(t) {
    this.offset = Gs(this.buffer, this.offset, t, "LE");
  }
  writeUInt64(t) {
    this.offset = r1(this.buffer, this.offset, BigInt(t), "LE");
  }
  writeVarInt(t) {
    const { bytes: r } = go(t, this.buffer, this.offset);
    this.offset += r;
  }
  writeSlice(t) {
    if (this.buffer.length < this.offset + t.length)
      throw new Error("Cannot write slice out of bounds");
    this.buffer.set(t, this.offset), this.offset += t.length;
  }
  writeVarSlice(t) {
    this.writeVarInt(t.length), this.writeSlice(t);
  }
  writeVector(t) {
    this.writeVarInt(t.length), t.forEach((r) => this.writeVarSlice(r));
  }
  end() {
    if (this.buffer.length === this.offset)
      return this.buffer;
    throw new Error(`buffer size ${this.buffer.length}, offset ${this.offset}`);
  }
}
class px {
  constructor(t, r = 0) {
    ne(this, "buffer");
    ne(this, "offset");
    this.buffer = t, this.offset = r, rt(en([Fe, vn]), [
      t,
      r
    ]);
  }
  readUInt8() {
    const t = In(this.buffer, this.offset);
    return this.offset++, t;
  }
  readInt32() {
    const t = o1(this.buffer, this.offset, "LE");
    return this.offset += 4, t;
  }
  readUInt32() {
    const t = Wi(this.buffer, this.offset, "LE");
    return this.offset += 4, t;
  }
  readInt64() {
    const t = L0(this.buffer, this.offset, "LE");
    return this.offset += 8, t;
  }
  readVarInt() {
    const { bigintValue: t, bytes: r } = Xi(this.buffer, this.offset);
    return this.offset += r, t;
  }
  readSlice(t) {
    hx(t, dx);
    const r = Number(t);
    if (this.buffer.length < this.offset + r)
      throw new Error("Cannot read slice out of bounds");
    const n = this.buffer.slice(this.offset, this.offset + r);
    return this.offset += r, n;
  }
  readVarSlice() {
    return this.readSlice(this.readVarInt());
  }
  readVector() {
    const t = this.readVarInt(), r = [];
    for (let n = 0; n < t; n++) r.push(this.readVarSlice());
    return r;
  }
}
const ug = 192, gx = 128, mx = (e) => "left" in e && "right" in e;
function Vl(e, t) {
  if (e.length < 33)
    throw new TypeError(
      `The control-block length is too small. Got ${e.length}, expected min 33.`
    );
  const r = (e.length - 33) / 32;
  let n = t;
  for (let o = 0; o < r; o++) {
    const i = e.slice(33 + 32 * o, 65 + 32 * o);
    J(n, i) < 0 ? n = Gl(n, i) : n = Gl(i, n);
  }
  return n;
}
function Wl(e) {
  if (Gf(e)) return { hash: Sn(e) };
  const t = [Wl(e[0]), Wl(e[1])];
  t.sort((o, i) => J(o.hash, i.hash));
  const [r, n] = t;
  return {
    hash: Gl(r.hash, n.hash),
    left: r,
    right: n
  };
}
function oc(e, t) {
  if (mx(e)) {
    const r = oc(e.left, t);
    if (r !== void 0) return [...r, e.right.hash];
    const n = oc(e.right, t);
    if (n !== void 0) return [...n, e.left.hash];
  } else if (J(e.hash, t) === 0)
    return [];
}
function Sn(e) {
  const t = e.version || ug;
  return qc(
    "TapLeaf",
    st([Uint8Array.from([t]), yx(e.output)])
  );
}
function bx(e, t) {
  return qc(
    "TapTweak",
    st(t ? [e, t] : [e])
  );
}
function Aa(e, t) {
  if (!(e instanceof Uint8Array) || e.length !== 32 || t && t.length !== 32) return null;
  const r = bx(e, t), n = ql().xOnlyPointAddTweak(e, r);
  return !n || n.xOnlyPubkey === null ? null : {
    parity: n.parity,
    x: Uint8Array.from(n.xOnlyPubkey)
  };
}
function Gl(e, t) {
  return qc("TapBranch", st([e, t]));
}
function yx(e) {
  const t = _r(e.length), r = new Uint8Array(t);
  return go(e.length, r), st([r, e]);
}
const Xh = Ke, Yh = 1, wx = 80;
function Js(e, t) {
  if (!e.address && !e.output && !e.pubkey && !e.internalPubkey && !(e.witness && e.witness.length > 1))
    throw new TypeError("Not enough data");
  t = Object.assign({ validate: !0 }, t || {}), rt(
    po(
      yt({
        address: ti(),
        input: St(0),
        network: yt({}),
        output: St(34),
        internalPubkey: St(32),
        hash: St(32),
        // merkle root hash, the tweak
        pubkey: St(32),
        // tweaked with `hash` from `internalPubkey`
        signature: Wf([
          St(64),
          St(65)
        ]),
        witness: er(Fe),
        scriptTree: Lr(V0, "Taptree is not of type isTaptree"),
        redeem: po(
          yt({
            output: Fe,
            // tapleaf script
            redeemVersion: Qt(),
            // tapleaf version
            witness: er(Fe)
          })
        ),
        redeemVersion: Qt()
      })
    ),
    e
  );
  const r = Er(() => od(e.address)), n = Er(() => {
    if (!(!e.witness || !e.witness.length))
      return e.witness.length >= 2 && e.witness[e.witness.length - 1][0] === wx ? e.witness.slice(0, -1) : e.witness.slice();
  }), o = Er(() => {
    if (e.scriptTree) return Wl(e.scriptTree);
    if (e.hash) return { hash: e.hash };
  }), i = e.network || Dr, s = { name: "p2tr", network: i };
  if (le(s, "address", () => {
    if (!s.pubkey) return;
    const a = Ts.toWords(s.pubkey);
    return a.unshift(Yh), Ts.encode(i.bech32, a);
  }), le(s, "hash", () => {
    const a = o();
    if (a) return a.hash;
    const c = n();
    if (c && c.length > 1) {
      const u = c[c.length - 1], f = u[0] & Fa, l = c[c.length - 2], h = Sn({ output: l, version: f });
      return Vl(u, h);
    }
    return null;
  }), le(s, "output", () => {
    if (s.pubkey)
      return tr([Xh.OP_1, s.pubkey]);
  }), le(s, "redeemVersion", () => e.redeemVersion ? e.redeemVersion : e.redeem && e.redeem.redeemVersion !== void 0 && e.redeem.redeemVersion !== null ? e.redeem.redeemVersion : ug), le(s, "redeem", () => {
    const a = n();
    if (!(!a || a.length < 2))
      return {
        output: a[a.length - 2],
        witness: a.slice(0, -2),
        redeemVersion: a[a.length - 1][0] & Fa
      };
  }), le(s, "pubkey", () => {
    if (e.pubkey) return e.pubkey;
    if (e.output) return e.output.slice(2);
    if (e.address) return r().data;
    if (s.internalPubkey) {
      const a = Aa(s.internalPubkey, s.hash);
      if (a) return a.x;
    }
  }), le(s, "internalPubkey", () => {
    if (e.internalPubkey) return e.internalPubkey;
    const a = n();
    if (a && a.length > 1)
      return a[a.length - 1].slice(1, 33);
  }), le(s, "signature", () => {
    if (e.signature) return e.signature;
    const a = n();
    if (!(!a || a.length !== 1))
      return a[0];
  }), le(s, "witness", () => {
    if (e.witness) return e.witness;
    const a = o();
    if (a && e.redeem && e.redeem.output && e.internalPubkey) {
      const c = Sn({
        output: e.redeem.output,
        version: s.redeemVersion
      }), u = oc(a, c);
      if (!u) return;
      const f = Aa(e.internalPubkey, a.hash);
      if (!f) return;
      const l = st(
        [
          Uint8Array.from([s.redeemVersion | f.parity]),
          e.internalPubkey
        ].concat(u)
      );
      return [e.redeem.output, l];
    }
    if (e.signature) return [e.signature];
  }), t.validate) {
    let a = Uint8Array.from([]);
    if (e.address) {
      if (i && i.bech32 !== r().prefix)
        throw new TypeError("Invalid prefix or Network mismatch");
      if (r().version !== Yh)
        throw new TypeError("Invalid address version");
      if (r().data.length !== 32)
        throw new TypeError("Invalid address data");
      a = r().data;
    }
    if (e.pubkey) {
      if (a.length > 0 && J(a, e.pubkey) !== 0)
        throw new TypeError("Pubkey mismatch");
      a = e.pubkey;
    }
    if (e.output) {
      if (e.output.length !== 34 || e.output[0] !== Xh.OP_1 || e.output[1] !== 32)
        throw new TypeError("Output is invalid");
      if (a.length > 0 && J(a, e.output.slice(2)) !== 0)
        throw new TypeError("Pubkey mismatch");
      a = e.output.slice(2);
    }
    if (e.internalPubkey) {
      const f = Aa(e.internalPubkey, s.hash);
      if (a.length > 0 && J(a, f.x) !== 0)
        throw new TypeError("Pubkey mismatch");
      a = f.x;
    }
    if (a && a.length && !ql().isXOnlyPoint(a))
      throw new TypeError("Invalid pubkey for p2tr");
    const c = o();
    if (e.hash && c && J(e.hash, c.hash) !== 0)
      throw new TypeError("Hash mismatch");
    if (e.redeem && e.redeem.output && c) {
      const f = Sn({
        output: e.redeem.output,
        version: s.redeemVersion
      });
      if (!oc(c, f))
        throw new TypeError("Redeem script not in tree");
    }
    const u = n();
    if (e.redeem && s.redeem) {
      if (e.redeem.redeemVersion && e.redeem.redeemVersion !== s.redeem.redeemVersion)
        throw new TypeError("Redeem.redeemVersion and witness mismatch");
      if (e.redeem.output) {
        if (ot(e.redeem.output).length === 0)
          throw new TypeError("Redeem.output is invalid");
        if (s.redeem.output && J(e.redeem.output, s.redeem.output) !== 0)
          throw new TypeError("Redeem.output and witness mismatch");
      }
      if (e.redeem.witness && s.redeem.witness && !ks(e.redeem.witness, s.redeem.witness))
        throw new TypeError("Redeem.witness and witness mismatch");
    }
    if (u && u.length)
      if (u.length === 1) {
        if (e.signature && J(e.signature, u[0]) !== 0)
          throw new TypeError("Signature mismatch");
      } else {
        const f = u[u.length - 1];
        if (f.length < 33)
          throw new TypeError(
            `The control-block length is too small. Got ${f.length}, expected min 33.`
          );
        if ((f.length - 33) % 32 !== 0)
          throw new TypeError(
            `The control-block length of ${f.length} is incorrect!`
          );
        const l = (f.length - 33) / 32;
        if (l > 128)
          throw new TypeError(
            `The script path is too long. Got ${l}, expected max 128.`
          );
        const h = f.slice(1, 33);
        if (e.internalPubkey && J(e.internalPubkey, h) !== 0)
          throw new TypeError("Internal pubkey mismatch");
        if (!ql().isXOnlyPoint(h))
          throw new TypeError("Invalid internalPubkey for p2tr witness");
        const m = f[0] & Fa, b = u[u.length - 2], y = Sn({ output: b, version: m }), g = Vl(f, y), x = Aa(h, g);
        if (!x)
          throw new TypeError("Invalid outputKey for p2tr witness");
        if (a.length && J(a, x.x) !== 0)
          throw new TypeError("Pubkey mismatch for p2tr witness");
        if (x.parity !== (f[0] & 1))
          throw new Error("Incorrect parity");
      }
  }
  return Object.assign(s, e);
}
const lg = 40, fg = 2, dg = 16, hg = 2, pg = 80, gg = "WARNING: Sending to a future segwit version address can lead to loss of funds. End users MUST be warned carefully in the GUI and asked if they wish to proceed with caution. Wallets should verify the segwit version from the output of fromBech32, then decide when it is safe to use which version of segwit.";
function vx(e, t) {
  const r = e.slice(2);
  if (r.length < fg || r.length > lg)
    throw new TypeError("Invalid program length for segwit address");
  const n = e[0] - pg;
  if (n < hg || n > dg)
    throw new TypeError("Invalid version for segwit address");
  if (e[1] !== r.length)
    throw new TypeError("Invalid script for segwit address");
  return console.warn(gg), xx(r, n, t.bech32);
}
function mg(e) {
  const t = $i.decode(e);
  if (t.length < 21) throw new TypeError(e + " is too short");
  if (t.length > 21) throw new TypeError(e + " is too long");
  const r = In(t, 0), n = t.slice(1);
  return { version: r, hash: n };
}
function od(e) {
  let t, r;
  try {
    t = lr.decode(e);
  } catch {
  }
  if (t) {
    if (r = t.words[0], r !== 0) throw new TypeError(e + " uses wrong encoding");
  } else if (t = Ts.decode(e), r = t.words[0], r === 0) throw new TypeError(e + " uses wrong encoding");
  const n = lr.fromWords(t.words.slice(1));
  return {
    version: r,
    prefix: t.prefix,
    data: Uint8Array.from(n)
  };
}
function xx(e, t, r) {
  const n = lr.toWords(e);
  return n.unshift(t), t === 0 ? lr.encode(r, n) : Ts.encode(r, n);
}
function Qs(e, t) {
  t = t || Dr;
  try {
    return Zs({ output: e, network: t }).address;
  } catch {
  }
  try {
    return Zi({ output: e, network: t }).address;
  } catch {
  }
  try {
    return Xs({ output: e, network: t }).address;
  } catch {
  }
  try {
    return Ys({ output: e, network: t }).address;
  } catch {
  }
  try {
    return Js({ output: e, network: t }).address;
  } catch {
  }
  try {
    return vx(e, t);
  } catch {
  }
  throw new Error(_1(e) + " has no matching Address");
}
function id(e, t) {
  t = t || Dr;
  let r, n;
  try {
    r = mg(e);
  } catch {
  }
  if (r) {
    if (r.version === t.pubKeyHash)
      return Zs({ hash: r.hash }).output;
    if (r.version === t.scriptHash)
      return Zi({ hash: r.hash }).output;
  } else {
    try {
      n = od(e);
    } catch {
    }
    if (n) {
      if (n.prefix !== t.bech32)
        throw new Error(e + " has an invalid prefix");
      if (n.version === 0) {
        if (n.data.length === 20)
          return Xs({ hash: n.data }).output;
        if (n.data.length === 32)
          return Ys({ hash: n.data }).output;
      } else if (n.version === 1) {
        if (n.data.length === 32)
          return Js({ pubkey: n.data }).output;
      } else if (n.version >= hg && n.version <= dg && n.data.length >= fg && n.data.length <= lg)
        return console.warn(gg), tr([
          n.version + pg,
          n.data
        ]);
    }
  }
  throw new Error(e + " has no matching Script");
}
function Qr(e) {
  const t = e.length;
  return _r(t) + t;
}
function Ex(e) {
  const t = e.length;
  return _r(t) + e.reduce((r, n) => r + Qr(n), 0);
}
const co = new Uint8Array(0), Jh = [], Xu = Nn(
  "0000000000000000000000000000000000000000000000000000000000000000"
), Qh = Nn(
  "0000000000000000000000000000000000000000000000000000000000000001"
), _x = Nn("ffffffffffffffff"), Sx = {
  script: co,
  valueBuffer: _x
};
function kx(e) {
  return e.value !== void 0;
}
const Ne = class Ne {
  constructor() {
    ne(this, "version", 1);
    ne(this, "locktime", 0);
    ne(this, "ins", []);
    ne(this, "outs", []);
  }
  static fromBuffer(t, r) {
    const n = new px(t), o = new Ne();
    o.version = n.readInt32();
    const i = n.readUInt8(), s = n.readUInt8();
    let a = !1;
    i === Ne.ADVANCED_TRANSACTION_MARKER && s === Ne.ADVANCED_TRANSACTION_FLAG ? a = !0 : n.offset -= 2;
    const c = n.readVarInt();
    for (let f = 0; f < c; ++f)
      o.ins.push({
        hash: n.readSlice(32),
        index: n.readUInt32(),
        script: n.readVarSlice(),
        sequence: n.readUInt32(),
        witness: Jh
      });
    const u = n.readVarInt();
    for (let f = 0; f < u; ++f)
      o.outs.push({
        value: n.readInt64(),
        script: n.readVarSlice()
      });
    if (a) {
      for (let f = 0; f < c; ++f)
        o.ins[f].witness = n.readVector();
      if (!o.hasWitnesses())
        throw new Error("Transaction has superfluous witness data");
    }
    if (o.locktime = n.readUInt32(), r) return o;
    if (n.offset !== t.length)
      throw new Error("Transaction has unexpected data");
    return o;
  }
  static fromHex(t) {
    return Ne.fromBuffer(Nn(t), !1);
  }
  static isCoinbaseHash(t) {
    rt(Hh, t);
    for (let r = 0; r < 32; ++r)
      if (t[r] !== 0) return !1;
    return !0;
  }
  isCoinbase() {
    return this.ins.length === 1 && Ne.isCoinbaseHash(this.ins[0].hash);
  }
  addInput(t, r, n, o) {
    return rt(
      en([
        Hh,
        vn,
        Kl(Qa(vn)),
        Kl(Qa(Fe))
      ]),
      [t, r, n, o]
    ), n == null && (n = Ne.DEFAULT_SEQUENCE), this.ins.push({
      hash: t,
      index: r,
      script: o || co,
      sequence: n,
      witness: Jh
    }) - 1;
  }
  addOutput(t, r) {
    return rt(en([Fe, Vu]), [
      t,
      r
    ]), this.outs.push({
      script: t,
      value: r
    }) - 1;
  }
  hasWitnesses() {
    return this.ins.some((t) => t.witness.length !== 0);
  }
  weight() {
    const t = this.byteLength(!1), r = this.byteLength(!0);
    return t * 3 + r;
  }
  virtualSize() {
    return Math.ceil(this.weight() / 4);
  }
  byteLength(t = !0) {
    const r = t && this.hasWitnesses();
    return (r ? 10 : 8) + _r(this.ins.length) + _r(this.outs.length) + this.ins.reduce((n, o) => n + 40 + Qr(o.script), 0) + this.outs.reduce((n, o) => n + 8 + Qr(o.script), 0) + (r ? this.ins.reduce((n, o) => n + Ex(o.witness), 0) : 0);
  }
  clone() {
    const t = new Ne();
    return t.version = this.version, t.locktime = this.locktime, t.ins = this.ins.map((r) => ({
      hash: r.hash,
      index: r.index,
      script: r.script,
      sequence: r.sequence,
      witness: r.witness
    })), t.outs = this.outs.map((r) => ({
      script: r.script,
      value: r.value
    })), t;
  }
  /**
   * Hash transaction for signing a specific input.
   *
   * Bitcoin uses a different hash for each signed transaction input.
   * This method copies the transaction, makes the necessary changes based on the
   * hashType, and then hashes the result.
   * This hash can then be used to sign the provided transaction input.
   */
  hashForSignature(t, r, n) {
    if (rt(en([vn, Fe, Qt()]), [
      t,
      r,
      n
    ]), t >= this.ins.length) return Qh;
    const o = tr(
      ot(r).filter((a) => a !== Ke.OP_CODESEPARATOR)
    ), i = this.clone();
    if ((n & 31) === Ne.SIGHASH_NONE)
      i.outs = [], i.ins.forEach((a, c) => {
        c !== t && (a.sequence = 0);
      });
    else if ((n & 31) === Ne.SIGHASH_SINGLE) {
      if (t >= this.outs.length) return Qh;
      i.outs.length = t + 1;
      for (let a = 0; a < t; a++)
        i.outs[a] = Sx;
      i.ins.forEach((a, c) => {
        c !== t && (a.sequence = 0);
      });
    }
    n & Ne.SIGHASH_ANYONECANPAY ? (i.ins = [i.ins[t]], i.ins[0].script = o) : (i.ins.forEach((a) => {
      a.script = co;
    }), i.ins[t].script = o);
    const s = new Uint8Array(i.byteLength(!1) + 4);
    return H0(s, s.length - 4, n, "LE"), i.__toBuffer(s, 0, !1), To(s);
  }
  hashForWitnessV1(t, r, n, o, i, s) {
    if (rt(
      en([
        vn,
        er(Fe),
        er(Vu),
        vn
      ]),
      [t, r, n, o]
    ), n.length !== this.ins.length || r.length !== this.ins.length)
      throw new Error("Must supply prevout script and value for all inputs");
    const a = o === Ne.SIGHASH_DEFAULT ? Ne.SIGHASH_ALL : o & Ne.SIGHASH_OUTPUT_MASK, u = (o & Ne.SIGHASH_INPUT_MASK) === Ne.SIGHASH_ANYONECANPAY, f = a === Ne.SIGHASH_NONE, l = a === Ne.SIGHASH_SINGLE;
    let h = co, m = co, b = co, y = co, g = co;
    if (!u) {
      let T = Dt.withCapacity(36 * this.ins.length);
      this.ins.forEach((I) => {
        T.writeSlice(I.hash), T.writeUInt32(I.index);
      }), h = Pt(T.end()), T = Dt.withCapacity(8 * this.ins.length), n.forEach((I) => T.writeInt64(I)), m = Pt(T.end()), T = Dt.withCapacity(
        r.map(Qr).reduce((I, P) => I + P)
      ), r.forEach(
        (I) => T.writeVarSlice(I)
      ), b = Pt(T.end()), T = Dt.withCapacity(4 * this.ins.length), this.ins.forEach((I) => T.writeUInt32(I.sequence)), y = Pt(T.end());
    }
    if (f || l) {
      if (l && t < this.outs.length) {
        const T = this.outs[t], I = Dt.withCapacity(
          8 + Qr(T.script)
        );
        I.writeInt64(T.value), I.writeVarSlice(T.script), g = Pt(I.end());
      }
    } else {
      if (!this.outs.length)
        throw new Error("Add outputs to the transaction before signing.");
      const T = this.outs.map((P) => 8 + Qr(P.script)).reduce((P, H) => P + H), I = Dt.withCapacity(T);
      this.outs.forEach((P) => {
        I.writeInt64(P.value), I.writeVarSlice(P.script);
      }), g = Pt(I.end());
    }
    const x = (i ? 2 : 0) + (s ? 1 : 0), S = 174 - (u ? 49 : 0) - (f ? 32 : 0) + (s ? 32 : 0) + (i ? 37 : 0), v = Dt.withCapacity(S);
    if (v.writeUInt8(o), v.writeInt32(this.version), v.writeUInt32(this.locktime), v.writeSlice(h), v.writeSlice(m), v.writeSlice(b), v.writeSlice(y), f || l || v.writeSlice(g), v.writeUInt8(x), u) {
      const T = this.ins[t];
      v.writeSlice(T.hash), v.writeUInt32(T.index), v.writeInt64(n[t]), v.writeVarSlice(r[t]), v.writeUInt32(T.sequence);
    } else
      v.writeUInt32(t);
    if (s) {
      const T = Dt.withCapacity(Qr(s));
      T.writeVarSlice(s), v.writeSlice(Pt(T.end()));
    }
    return l && v.writeSlice(g), i && (v.writeSlice(i), v.writeUInt8(0), v.writeUInt32(4294967295)), qc(
      "TapSighash",
      st([Uint8Array.from([0]), v.end()])
    );
  }
  hashForWitnessV0(t, r, n, o) {
    rt(
      en([
        vn,
        Fe,
        Vu,
        vn
      ]),
      [t, r, n, o]
    );
    let i = Uint8Array.from([]), s, a = Xu, c = Xu, u = Xu;
    if (o & Ne.SIGHASH_ANYONECANPAY || (i = new Uint8Array(36 * this.ins.length), s = new Dt(i, 0), this.ins.forEach((l) => {
      s.writeSlice(l.hash), s.writeUInt32(l.index);
    }), c = To(i)), !(o & Ne.SIGHASH_ANYONECANPAY) && (o & 31) !== Ne.SIGHASH_SINGLE && (o & 31) !== Ne.SIGHASH_NONE && (i = new Uint8Array(4 * this.ins.length), s = new Dt(i, 0), this.ins.forEach((l) => {
      s.writeUInt32(l.sequence);
    }), u = To(i)), (o & 31) !== Ne.SIGHASH_SINGLE && (o & 31) !== Ne.SIGHASH_NONE) {
      const l = this.outs.reduce((h, m) => h + 8 + Qr(m.script), 0);
      i = new Uint8Array(l), s = new Dt(i, 0), this.outs.forEach((h) => {
        s.writeInt64(h.value), s.writeVarSlice(h.script);
      }), a = To(i);
    } else if ((o & 31) === Ne.SIGHASH_SINGLE && t < this.outs.length) {
      const l = this.outs[t];
      i = new Uint8Array(8 + Qr(l.script)), s = new Dt(i, 0), s.writeInt64(l.value), s.writeVarSlice(l.script), a = To(i);
    }
    i = new Uint8Array(156 + Qr(r)), s = new Dt(i, 0);
    const f = this.ins[t];
    return s.writeInt32(this.version), s.writeSlice(c), s.writeSlice(u), s.writeSlice(f.hash), s.writeUInt32(f.index), s.writeVarSlice(r), s.writeInt64(n), s.writeUInt32(f.sequence), s.writeSlice(a), s.writeUInt32(this.locktime), s.writeUInt32(o), To(i);
  }
  getHash(t) {
    return t && this.isCoinbase() ? new Uint8Array(32) : To(this.__toBuffer(void 0, void 0, t));
  }
  getId() {
    return me(nd(this.getHash(!1)));
  }
  toBuffer(t, r) {
    return this.__toBuffer(t, r, !0);
  }
  toHex() {
    return me(this.toBuffer(void 0, void 0));
  }
  setInputScript(t, r) {
    rt(en([Qt(), Fe]), [t, r]), this.ins[t].script = r;
  }
  setWitness(t, r) {
    rt(en([Qt(), er(Fe)]), [
      t,
      r
    ]), this.ins[t].witness = r;
  }
  __toBuffer(t, r, n = !1) {
    t || (t = new Uint8Array(this.byteLength(n)));
    const o = new Dt(t, r || 0);
    o.writeInt32(this.version);
    const i = n && this.hasWitnesses();
    return i && (o.writeUInt8(Ne.ADVANCED_TRANSACTION_MARKER), o.writeUInt8(Ne.ADVANCED_TRANSACTION_FLAG)), o.writeVarInt(this.ins.length), this.ins.forEach((s) => {
      o.writeSlice(s.hash), o.writeUInt32(s.index), o.writeVarSlice(s.script), o.writeUInt32(s.sequence);
    }), o.writeVarInt(this.outs.length), this.outs.forEach((s) => {
      kx(s) ? o.writeInt64(s.value) : o.writeSlice(s.valueBuffer), o.writeVarSlice(s.script);
    }), i && this.ins.forEach((s) => {
      o.writeVector(s.witness);
    }), o.writeUInt32(this.locktime), r !== void 0 ? t.slice(r, o.offset) : t;
  }
};
ne(Ne, "DEFAULT_SEQUENCE", 4294967295), ne(Ne, "SIGHASH_DEFAULT", 0), ne(Ne, "SIGHASH_ALL", 1), ne(Ne, "SIGHASH_NONE", 2), ne(Ne, "SIGHASH_SINGLE", 3), ne(Ne, "SIGHASH_ANYONECANPAY", 128), ne(Ne, "SIGHASH_OUTPUT_MASK", 3), ne(Ne, "SIGHASH_INPUT_MASK", 128), ne(Ne, "ADVANCED_TRANSACTION_MARKER", 0), ne(Ne, "ADVANCED_TRANSACTION_FLAG", 1);
let nt = Ne;
var on;
(function(e) {
  e[e.UNSIGNED_TX = 0] = "UNSIGNED_TX", e[e.GLOBAL_XPUB = 1] = "GLOBAL_XPUB";
})(on || (on = {}));
var ie;
(function(e) {
  e[e.NON_WITNESS_UTXO = 0] = "NON_WITNESS_UTXO", e[e.WITNESS_UTXO = 1] = "WITNESS_UTXO", e[e.PARTIAL_SIG = 2] = "PARTIAL_SIG", e[e.SIGHASH_TYPE = 3] = "SIGHASH_TYPE", e[e.REDEEM_SCRIPT = 4] = "REDEEM_SCRIPT", e[e.WITNESS_SCRIPT = 5] = "WITNESS_SCRIPT", e[e.BIP32_DERIVATION = 6] = "BIP32_DERIVATION", e[e.FINAL_SCRIPTSIG = 7] = "FINAL_SCRIPTSIG", e[e.FINAL_SCRIPTWITNESS = 8] = "FINAL_SCRIPTWITNESS", e[e.POR_COMMITMENT = 9] = "POR_COMMITMENT", e[e.TAP_KEY_SIG = 19] = "TAP_KEY_SIG", e[e.TAP_SCRIPT_SIG = 20] = "TAP_SCRIPT_SIG", e[e.TAP_LEAF_SCRIPT = 21] = "TAP_LEAF_SCRIPT", e[e.TAP_BIP32_DERIVATION = 22] = "TAP_BIP32_DERIVATION", e[e.TAP_INTERNAL_KEY = 23] = "TAP_INTERNAL_KEY", e[e.TAP_MERKLE_ROOT = 24] = "TAP_MERKLE_ROOT";
})(ie || (ie = {}));
var dt;
(function(e) {
  e[e.REDEEM_SCRIPT = 0] = "REDEEM_SCRIPT", e[e.WITNESS_SCRIPT = 1] = "WITNESS_SCRIPT", e[e.BIP32_DERIVATION = 2] = "BIP32_DERIVATION", e[e.TAP_INTERNAL_KEY = 5] = "TAP_INTERNAL_KEY", e[e.TAP_TREE = 6] = "TAP_TREE", e[e.TAP_BIP32_DERIVATION = 7] = "TAP_BIP32_DERIVATION";
})(dt || (dt = {}));
const Ax = (e) => [...Array(e).keys()];
function Tx(e) {
  if (e.key[0] !== on.GLOBAL_XPUB)
    throw new Error(
      "Decode Error: could not decode globalXpub with key 0x" + me(e.key)
    );
  if (e.key.length !== 79 || ![2, 3].includes(e.key[46]))
    throw new Error(
      "Decode Error: globalXpub has invalid extended pubkey in key 0x" + me(e.key)
    );
  if (e.value.length / 4 % 1 !== 0)
    throw new Error(
      "Decode Error: Global GLOBAL_XPUB value length should be multiple of 4"
    );
  const t = e.key.slice(1), r = {
    masterFingerprint: e.value.slice(0, 4),
    extendedPubkey: t,
    path: "m"
  };
  for (const n of Ax(e.value.length / 4 - 1)) {
    const o = Wi(e.value, n * 4 + 4, "LE"), i = !!(o & 2147483648), s = o & 2147483647;
    r.path += "/" + s.toString(10) + (i ? "'" : "");
  }
  return r;
}
function Ix(e) {
  const t = new Uint8Array([on.GLOBAL_XPUB]), r = st([t, e.extendedPubkey]), n = e.path.split("/"), o = new Uint8Array(n.length * 4);
  o.set(e.masterFingerprint, 0);
  let i = 4;
  return n.slice(1).forEach((s) => {
    const a = s.slice(-1) === "'";
    let c = 2147483647 & parseInt(a ? s.slice(0, -1) : s, 10);
    a && (c += 2147483648), Gs(o, i, c, "LE"), i += 4;
  }), {
    key: r,
    value: o
  };
}
const Px = "{ masterFingerprint: Uint8Array; extendedPubkey: Uint8Array; path: string; }";
function Ox(e) {
  const t = e.extendedPubkey, r = e.masterFingerprint, n = e.path;
  return t instanceof Uint8Array && t.length === 78 && [2, 3].indexOf(t[45]) > -1 && r instanceof Uint8Array && r.length === 4 && typeof n == "string" && !!n.match(/^m(\/\d+'?)*$/);
}
function Bx(e, t, r) {
  const n = me(t.extendedPubkey);
  return r.has(n) ? !1 : (r.add(n), e.filter((o) => J(o.extendedPubkey, t.extendedPubkey)).length === 0);
}
const $x = /* @__PURE__ */ Object.freeze(/* @__PURE__ */ Object.defineProperty({
  __proto__: null,
  canAddToArray: Bx,
  check: Ox,
  decode: Tx,
  encode: Ix,
  expected: Px
}, Symbol.toStringTag, { value: "Module" }));
function Nx(e) {
  return {
    key: new Uint8Array([on.UNSIGNED_TX]),
    value: e.toBuffer()
  };
}
const Ux = /* @__PURE__ */ Object.freeze(/* @__PURE__ */ Object.defineProperty({
  __proto__: null,
  encode: Nx
}, Symbol.toStringTag, { value: "Module" }));
function Cx(e) {
  if (e.key[0] !== ie.FINAL_SCRIPTSIG)
    throw new Error(
      "Decode Error: could not decode finalScriptSig with key 0x" + me(e.key)
    );
  return e.value;
}
function Hx(e) {
  return {
    key: new Uint8Array([ie.FINAL_SCRIPTSIG]),
    value: e
  };
}
const Rx = "Uint8Array";
function Lx(e) {
  return e instanceof Uint8Array;
}
function zx(e, t) {
  return !!e && !!t && e.finalScriptSig === void 0;
}
const jx = /* @__PURE__ */ Object.freeze(/* @__PURE__ */ Object.defineProperty({
  __proto__: null,
  canAdd: zx,
  check: Lx,
  decode: Cx,
  encode: Hx,
  expected: Rx
}, Symbol.toStringTag, { value: "Module" }));
function Mx(e) {
  if (e.key[0] !== ie.FINAL_SCRIPTWITNESS)
    throw new Error(
      "Decode Error: could not decode finalScriptWitness with key 0x" + me(e.key)
    );
  return e.value;
}
function Dx(e) {
  return {
    key: new Uint8Array([ie.FINAL_SCRIPTWITNESS]),
    value: e
  };
}
const Fx = "Uint8Array";
function Kx(e) {
  return e instanceof Uint8Array;
}
function qx(e, t) {
  return !!e && !!t && e.finalScriptWitness === void 0;
}
const Vx = /* @__PURE__ */ Object.freeze(/* @__PURE__ */ Object.defineProperty({
  __proto__: null,
  canAdd: qx,
  check: Kx,
  decode: Mx,
  encode: Dx,
  expected: Fx
}, Symbol.toStringTag, { value: "Module" }));
function Wx(e) {
  if (e.key[0] !== ie.NON_WITNESS_UTXO)
    throw new Error(
      "Decode Error: could not decode nonWitnessUtxo with key 0x" + me(e.key)
    );
  return e.value;
}
function Gx(e) {
  return {
    key: new Uint8Array([ie.NON_WITNESS_UTXO]),
    value: e
  };
}
const Zx = "Uint8Array";
function Xx(e) {
  return e instanceof Uint8Array;
}
function Yx(e, t) {
  return !!e && !!t && e.nonWitnessUtxo === void 0;
}
const Jx = /* @__PURE__ */ Object.freeze(/* @__PURE__ */ Object.defineProperty({
  __proto__: null,
  canAdd: Yx,
  check: Xx,
  decode: Wx,
  encode: Gx,
  expected: Zx
}, Symbol.toStringTag, { value: "Module" }));
function Qx(e) {
  if (e.key[0] !== ie.PARTIAL_SIG)
    throw new Error(
      "Decode Error: could not decode partialSig with key 0x" + me(e.key)
    );
  if (!(e.key.length === 34 || e.key.length === 66) || ![2, 3, 4].includes(e.key[1]))
    throw new Error(
      "Decode Error: partialSig has invalid pubkey in key 0x" + me(e.key)
    );
  return {
    pubkey: e.key.slice(1),
    signature: e.value
  };
}
function e2(e) {
  const t = new Uint8Array([ie.PARTIAL_SIG]);
  return {
    key: st([t, e.pubkey]),
    value: e.signature
  };
}
const t2 = "{ pubkey: Uint8Array; signature: Uint8Array; }";
function r2(e) {
  return e.pubkey instanceof Uint8Array && e.signature instanceof Uint8Array && [33, 65].includes(e.pubkey.length) && [2, 3, 4].includes(e.pubkey[0]) && n2(e.signature);
}
function n2(e) {
  if (!(e instanceof Uint8Array) || e.length < 9 || e[0] !== 48 || e.length !== e[1] + 3 || e[2] !== 2) return !1;
  const t = e[3];
  if (t > 33 || t < 1 || e[3 + t + 1] !== 2) return !1;
  const r = e[3 + t + 2];
  return !(r > 33 || r < 1 || e.length !== 3 + t + 2 + r + 2);
}
function o2(e, t, r) {
  const n = me(t.pubkey);
  return r.has(n) ? !1 : (r.add(n), e.filter((o) => J(o.pubkey, t.pubkey) === 0).length === 0);
}
const i2 = /* @__PURE__ */ Object.freeze(/* @__PURE__ */ Object.defineProperty({
  __proto__: null,
  canAddToArray: o2,
  check: r2,
  decode: Qx,
  encode: e2,
  expected: t2
}, Symbol.toStringTag, { value: "Module" }));
function s2(e) {
  if (e.key[0] !== ie.POR_COMMITMENT)
    throw new Error(
      "Decode Error: could not decode porCommitment with key 0x" + me(e.key)
    );
  return Xv(e.value);
}
function a2(e) {
  return {
    key: new Uint8Array([ie.POR_COMMITMENT]),
    value: Yv(e)
  };
}
const c2 = "string";
function u2(e) {
  return typeof e == "string";
}
function l2(e, t) {
  return !!e && !!t && e.porCommitment === void 0;
}
const f2 = /* @__PURE__ */ Object.freeze(/* @__PURE__ */ Object.defineProperty({
  __proto__: null,
  canAdd: l2,
  check: u2,
  decode: s2,
  encode: a2,
  expected: c2
}, Symbol.toStringTag, { value: "Module" }));
function d2(e) {
  if (e.key[0] !== ie.SIGHASH_TYPE)
    throw new Error(
      "Decode Error: could not decode sighashType with key 0x" + me(e.key)
    );
  return Number(Wi(e.value, 0, "LE"));
}
function h2(e) {
  const t = Uint8Array.from([ie.SIGHASH_TYPE]), r = new Uint8Array(4);
  return Gs(r, 0, e, "LE"), {
    key: t,
    value: r
  };
}
const p2 = "number";
function g2(e) {
  return typeof e == "number";
}
function m2(e, t) {
  return !!e && !!t && e.sighashType === void 0;
}
const b2 = /* @__PURE__ */ Object.freeze(/* @__PURE__ */ Object.defineProperty({
  __proto__: null,
  canAdd: m2,
  check: g2,
  decode: d2,
  encode: h2,
  expected: p2
}, Symbol.toStringTag, { value: "Module" }));
function y2(e) {
  if (e.key[0] !== ie.TAP_KEY_SIG || e.key.length !== 1)
    throw new Error(
      "Decode Error: could not decode tapKeySig with key 0x" + me(e.key)
    );
  if (!bg(e.value))
    throw new Error(
      "Decode Error: tapKeySig not a valid 64-65-byte BIP340 signature"
    );
  return e.value;
}
function w2(e) {
  return { key: Uint8Array.from([ie.TAP_KEY_SIG]), value: e };
}
const v2 = "Uint8Array";
function bg(e) {
  return e instanceof Uint8Array && (e.length === 64 || e.length === 65);
}
function x2(e, t) {
  return !!e && !!t && e.tapKeySig === void 0;
}
const E2 = /* @__PURE__ */ Object.freeze(/* @__PURE__ */ Object.defineProperty({
  __proto__: null,
  canAdd: x2,
  check: bg,
  decode: y2,
  encode: w2,
  expected: v2
}, Symbol.toStringTag, { value: "Module" }));
function _2(e) {
  if (e.key[0] !== ie.TAP_LEAF_SCRIPT)
    throw new Error(
      "Decode Error: could not decode tapLeafScript with key 0x" + me(e.key)
    );
  if ((e.key.length - 2) % 32 !== 0)
    throw new Error(
      "Decode Error: tapLeafScript has invalid control block in key 0x" + me(e.key)
    );
  const t = e.value[e.value.length - 1];
  if ((e.key[1] & 254) !== t)
    throw new Error(
      "Decode Error: tapLeafScript bad leaf version in key 0x" + me(e.key)
    );
  const r = e.value.slice(0, -1);
  return { controlBlock: e.key.slice(1), script: r, leafVersion: t };
}
function S2(e) {
  const t = Uint8Array.from([ie.TAP_LEAF_SCRIPT]), r = Uint8Array.from([e.leafVersion]);
  return {
    key: st([t, e.controlBlock]),
    value: st([e.script, r])
  };
}
const k2 = "{ controlBlock: Uint8Array; leafVersion: number, script: Uint8Array; }";
function A2(e) {
  return e.controlBlock instanceof Uint8Array && (e.controlBlock.length - 1) % 32 === 0 && (e.controlBlock[0] & 254) === e.leafVersion && e.script instanceof Uint8Array;
}
function T2(e, t, r) {
  const n = me(t.controlBlock);
  return r.has(n) ? !1 : (r.add(n), e.filter((o) => J(o.controlBlock, t.controlBlock) === 0).length === 0);
}
const I2 = /* @__PURE__ */ Object.freeze(/* @__PURE__ */ Object.defineProperty({
  __proto__: null,
  canAddToArray: T2,
  check: A2,
  decode: _2,
  encode: S2,
  expected: k2
}, Symbol.toStringTag, { value: "Module" }));
function P2(e) {
  if (e.key[0] !== ie.TAP_MERKLE_ROOT || e.key.length !== 1)
    throw new Error(
      "Decode Error: could not decode tapMerkleRoot with key 0x" + me(e.key)
    );
  if (!yg(e.value))
    throw new Error("Decode Error: tapMerkleRoot not a 32-byte hash");
  return e.value;
}
function O2(e) {
  return { key: Uint8Array.from([ie.TAP_MERKLE_ROOT]), value: e };
}
const B2 = "Uint8Array";
function yg(e) {
  return e instanceof Uint8Array && e.length === 32;
}
function $2(e, t) {
  return !!e && !!t && e.tapMerkleRoot === void 0;
}
const N2 = /* @__PURE__ */ Object.freeze(/* @__PURE__ */ Object.defineProperty({
  __proto__: null,
  canAdd: $2,
  check: yg,
  decode: P2,
  encode: O2,
  expected: B2
}, Symbol.toStringTag, { value: "Module" }));
function U2(e) {
  if (e.key[0] !== ie.TAP_SCRIPT_SIG)
    throw new Error(
      "Decode Error: could not decode tapScriptSig with key 0x" + me(e.key)
    );
  if (e.key.length !== 65)
    throw new Error(
      "Decode Error: tapScriptSig has invalid key 0x" + me(e.key)
    );
  if (e.value.length !== 64 && e.value.length !== 65)
    throw new Error(
      "Decode Error: tapScriptSig has invalid signature in key 0x" + me(e.key)
    );
  const t = e.key.slice(1, 33), r = e.key.slice(33);
  return {
    pubkey: t,
    leafHash: r,
    signature: e.value
  };
}
function C2(e) {
  const t = Uint8Array.from([ie.TAP_SCRIPT_SIG]);
  return {
    key: st([t, e.pubkey, e.leafHash]),
    value: e.signature
  };
}
const H2 = "{ pubkey: Uint8Array; leafHash: Uint8Array; signature: Uint8Array; }";
function R2(e) {
  return e.pubkey instanceof Uint8Array && e.leafHash instanceof Uint8Array && e.signature instanceof Uint8Array && e.pubkey.length === 32 && e.leafHash.length === 32 && (e.signature.length === 64 || e.signature.length === 65);
}
function L2(e, t, r) {
  const n = me(t.pubkey) + me(t.leafHash);
  return r.has(n) ? !1 : (r.add(n), e.filter(
    (o) => J(o.pubkey, t.pubkey) === 0 && J(o.leafHash, t.leafHash) === 0
  ).length === 0);
}
const z2 = /* @__PURE__ */ Object.freeze(/* @__PURE__ */ Object.defineProperty({
  __proto__: null,
  canAddToArray: L2,
  check: R2,
  decode: U2,
  encode: C2,
  expected: H2
}, Symbol.toStringTag, { value: "Module" }));
function j2(e) {
  if (e.key[0] !== ie.WITNESS_UTXO)
    throw new Error(
      "Decode Error: could not decode witnessUtxo with key 0x" + me(e.key)
    );
  const t = L0(e.value, 0, "LE");
  let r = 8;
  const { numberValue: n, bytes: o } = Xi(
    e.value,
    r
  );
  r += o;
  const i = e.value.slice(r);
  if (i.length !== n)
    throw new Error("Decode Error: WITNESS_UTXO script is not proper length");
  return {
    script: i,
    value: t
  };
}
function M2(e) {
  const { script: t, value: r } = e, n = _r(t.length), o = new Uint8Array(8 + n + t.length);
  return R0(o, 0, BigInt(r), "LE"), go(t.length, o, 8), o.set(t, 8 + n), {
    key: Uint8Array.from([ie.WITNESS_UTXO]),
    value: o
  };
}
const D2 = "{ script: Uint8Array; value: bigint; }";
function F2(e) {
  return e.script instanceof Uint8Array && typeof e.value == "bigint";
}
function K2(e, t) {
  return !!e && !!t && e.witnessUtxo === void 0;
}
const q2 = /* @__PURE__ */ Object.freeze(/* @__PURE__ */ Object.defineProperty({
  __proto__: null,
  canAdd: K2,
  check: F2,
  decode: j2,
  encode: M2,
  expected: D2
}, Symbol.toStringTag, { value: "Module" }));
function V2(e) {
  if (e.key[0] !== dt.TAP_TREE || e.key.length !== 1)
    throw new Error(
      "Decode Error: could not decode tapTree with key 0x" + me(e.key)
    );
  let t = 0;
  const r = [];
  for (; t < e.value.length; ) {
    const n = e.value[t++], o = e.value[t++], { numberValue: i, bytes: s } = Xi(
      e.value,
      t
    );
    t += s, r.push({
      depth: n,
      leafVersion: o,
      script: e.value.slice(t, t + i)
    }), t += i;
  }
  return { leaves: r };
}
function W2(e) {
  const t = Uint8Array.from([dt.TAP_TREE]), r = [].concat(
    ...e.leaves.map((n) => [
      Uint8Array.of(n.depth, n.leafVersion),
      go(BigInt(n.script.length)).buffer,
      n.script
    ])
  );
  return {
    key: t,
    value: st(r)
  };
}
const G2 = "{ leaves: [{ depth: number; leafVersion: number, script: Uint8Array; }] }";
function Z2(e) {
  return Array.isArray(e.leaves) && e.leaves.every(
    (t) => t.depth >= 0 && t.depth <= 128 && (t.leafVersion & 254) === t.leafVersion && t.script instanceof Uint8Array
  );
}
function X2(e, t) {
  return !!e && !!t && e.tapTree === void 0;
}
const Y2 = /* @__PURE__ */ Object.freeze(/* @__PURE__ */ Object.defineProperty({
  __proto__: null,
  canAdd: X2,
  check: Z2,
  decode: V2,
  encode: W2,
  expected: G2
}, Symbol.toStringTag, { value: "Module" })), J2 = (e) => [...Array(e).keys()], Q2 = (e) => e.length === 33 && [2, 3].includes(e[0]) || e.length === 65 && e[0] === 4;
function sd(e, t = Q2) {
  function r(a) {
    if (a.key[0] !== e)
      throw new Error(
        "Decode Error: could not decode bip32Derivation with key 0x" + me(a.key)
      );
    const c = a.key.slice(1);
    if (!t(c))
      throw new Error(
        "Decode Error: bip32Derivation has invalid pubkey in key 0x" + me(a.key)
      );
    if (a.value.length / 4 % 1 !== 0)
      throw new Error(
        "Decode Error: Input BIP32_DERIVATION value length should be multiple of 4"
      );
    const u = {
      masterFingerprint: a.value.slice(0, 4),
      pubkey: c,
      path: "m"
    };
    for (const f of J2(a.value.length / 4 - 1)) {
      const l = Wi(a.value, f * 4 + 4, "LE"), h = !!(l & 2147483648), m = l & 2147483647;
      u.path += "/" + m.toString(10) + (h ? "'" : "");
    }
    return u;
  }
  function n(a) {
    const c = Uint8Array.from([e]), u = st([c, a.pubkey]), f = a.path.split("/"), l = new Uint8Array(f.length * 4);
    l.set(a.masterFingerprint, 0);
    let h = 4;
    return f.slice(1).forEach((m) => {
      const b = m.slice(-1) === "'";
      let y = 2147483647 & parseInt(b ? m.slice(0, -1) : m, 10);
      b && (y += 2147483648), Gs(l, h, y, "LE"), h += 4;
    }), {
      key: u,
      value: l
    };
  }
  const o = "{ masterFingerprint: Uint8Array; pubkey: Uint8Array; path: string; }";
  function i(a) {
    return a.pubkey instanceof Uint8Array && a.masterFingerprint instanceof Uint8Array && typeof a.path == "string" && t(a.pubkey) && a.masterFingerprint.length === 4;
  }
  function s(a, c, u) {
    const f = me(c.pubkey);
    return u.has(f) ? !1 : (u.add(f), a.filter((l) => J(l.pubkey, c.pubkey) === 0).length === 0);
  }
  return {
    decode: r,
    encode: n,
    check: i,
    expected: o,
    canAddToArray: s
  };
}
function ad(e) {
  return t;
  function t(r) {
    let n;
    if (e.includes(r.key[0]) && (n = r.key.slice(1), !(n.length === 33 || n.length === 65) || ![2, 3, 4].includes(n[0])))
      throw new Error(
        "Format Error: invalid pubkey in key 0x" + me(r.key)
      );
    return n;
  }
}
function wg(e) {
  function t(s) {
    if (s.key[0] !== e)
      throw new Error(
        "Decode Error: could not decode redeemScript with key 0x" + me(s.key)
      );
    return s.value;
  }
  function r(s) {
    return {
      key: Uint8Array.from([e]),
      value: s
    };
  }
  const n = "Uint8Array";
  function o(s) {
    return s instanceof Uint8Array;
  }
  function i(s, a) {
    return !!s && !!a && s.redeemScript === void 0;
  }
  return {
    decode: t,
    encode: r,
    check: o,
    expected: n,
    canAdd: i
  };
}
const eE = (e) => e.length === 32;
function vg(e) {
  const t = sd(e, eE);
  function r(s) {
    const { numberValue: a, bytes: c } = Xi(
      s.value
    ), u = t.decode({
      key: s.key,
      value: s.value.slice(c + Number(a) * 32)
    }), f = new Array(Number(a));
    for (let l = 0, h = c; l < a; l++, h += 32)
      f[l] = s.value.slice(h, h + 32);
    return { ...u, leafHashes: f };
  }
  function n(s) {
    const a = t.encode(s), c = _r(s.leafHashes.length), u = new Uint8Array(c);
    go(s.leafHashes.length, u);
    const f = st([u, ...s.leafHashes, a.value]);
    return { ...a, value: f };
  }
  const o = "{ masterFingerprint: Uint8Array; pubkey: Uint8Array; path: string; leafHashes: Uint8Array[]; }";
  function i(s) {
    return Array.isArray(s.leafHashes) && s.leafHashes.every(
      (a) => a instanceof Uint8Array && a.length === 32
    ) && t.check(s);
  }
  return {
    decode: r,
    encode: n,
    check: i,
    expected: o,
    canAddToArray: t.canAddToArray
  };
}
function xg(e) {
  function t(s) {
    if (s.key[0] !== e || s.key.length !== 1)
      throw new Error(
        "Decode Error: could not decode tapInternalKey with key 0x" + me(s.key)
      );
    if (s.value.length !== 32)
      throw new Error(
        "Decode Error: tapInternalKey not a 32-byte x-only pubkey"
      );
    return s.value;
  }
  function r(s) {
    return { key: Uint8Array.from([e]), value: s };
  }
  const n = "Uint8Array";
  function o(s) {
    return s instanceof Uint8Array && s.length === 32;
  }
  function i(s, a) {
    return !!s && !!a && s.tapInternalKey === void 0;
  }
  return {
    decode: t,
    encode: r,
    check: o,
    expected: n,
    canAdd: i
  };
}
function Eg(e) {
  function t(s) {
    if (s.key[0] !== e)
      throw new Error(
        "Decode Error: could not decode witnessScript with key 0x" + me(s.key)
      );
    return s.value;
  }
  function r(s) {
    return {
      key: Uint8Array.from([e]),
      value: s
    };
  }
  const n = "Uint8Array";
  function o(s) {
    return s instanceof Uint8Array;
  }
  function i(s, a) {
    return !!s && !!a && s.witnessScript === void 0;
  }
  return {
    decode: t,
    encode: r,
    check: o,
    expected: n,
    canAdd: i
  };
}
const cd = {
  unsignedTx: Ux,
  globalXpub: $x,
  // pass an Array of key bytes that require pubkey beside the key
  checkPubkey: ad([])
}, Et = {
  nonWitnessUtxo: Jx,
  partialSig: i2,
  sighashType: b2,
  finalScriptSig: jx,
  finalScriptWitness: Vx,
  porCommitment: f2,
  witnessUtxo: q2,
  bip32Derivation: sd(ie.BIP32_DERIVATION),
  redeemScript: wg(ie.REDEEM_SCRIPT),
  witnessScript: Eg(ie.WITNESS_SCRIPT),
  checkPubkey: ad([
    ie.PARTIAL_SIG,
    ie.BIP32_DERIVATION
  ]),
  tapKeySig: E2,
  tapScriptSig: z2,
  tapLeafScript: I2,
  tapBip32Derivation: vg(
    ie.TAP_BIP32_DERIVATION
  ),
  tapInternalKey: xg(ie.TAP_INTERNAL_KEY),
  tapMerkleRoot: N2
}, xn = {
  bip32Derivation: sd(dt.BIP32_DERIVATION),
  redeemScript: wg(dt.REDEEM_SCRIPT),
  witnessScript: Eg(dt.WITNESS_SCRIPT),
  checkPubkey: ad([dt.BIP32_DERIVATION]),
  tapBip32Derivation: vg(
    dt.TAP_BIP32_DERIVATION
  ),
  tapTree: Y2,
  tapInternalKey: xg(dt.TAP_INTERNAL_KEY)
}, tE = /* @__PURE__ */ Object.freeze(/* @__PURE__ */ Object.defineProperty({
  __proto__: null,
  globals: cd,
  inputs: Et,
  outputs: xn
}, Symbol.toStringTag, { value: "Module" })), ic = (e) => [...Array(e).keys()];
function ep(e) {
  const t = e.map(rE);
  return t.push(Uint8Array.from([0])), st(t);
}
function rE(e) {
  const t = e.key.length, r = e.value.length, n = _r(t), o = _r(r), i = new Uint8Array(n + t + o + r);
  return go(t, i, 0), i.set(e.key, n), go(r, i, n + t), i.set(e.value, n + t + o), i;
}
function nE(e, t) {
  let r = 0;
  function n() {
    const { numberValue: g, bytes: x } = Xi(e, r);
    r += x;
    const S = e.slice(r, r + Number(g));
    return r += Number(g), S;
  }
  function o() {
    const g = Wi(e, r, "BE");
    return r += 4, g;
  }
  function i() {
    const g = In(e, r);
    return r += 1, g;
  }
  function s() {
    const g = n(), x = n();
    return {
      key: g,
      value: x
    };
  }
  function a() {
    if (r >= e.length)
      throw new Error("Format Error: Unexpected End of PSBT");
    const g = In(e, r) === 0;
    return g && r++, g;
  }
  if (o() !== 1886610036)
    throw new Error("Format Error: Invalid Magic Number");
  if (i() !== 255)
    throw new Error(
      "Format Error: Magic Number must be followed by 0xff separator"
    );
  const c = [], u = {};
  for (; !a(); ) {
    const g = s(), x = me(g.key);
    if (u[x])
      throw new Error(
        "Format Error: Keys must be unique for global keymap: key " + x
      );
    u[x] = 1, c.push(g);
  }
  const f = c.filter(
    (g) => g.key[0] === on.UNSIGNED_TX
  );
  if (f.length !== 1)
    throw new Error("Format Error: Only one UNSIGNED_TX allowed");
  const l = t(f[0].value), { inputCount: h, outputCount: m } = l.getInputOutputCounts(), b = [], y = [];
  for (const g of ic(h)) {
    const x = {}, S = [];
    for (; !a(); ) {
      const v = s(), T = me(v.key);
      if (x[T])
        throw new Error(
          "Format Error: Keys must be unique for each input: input index " + g + " key " + T
        );
      x[T] = 1, S.push(v);
    }
    b.push(S);
  }
  for (const g of ic(m)) {
    const x = {}, S = [];
    for (; !a(); ) {
      const v = s(), T = me(v.key);
      if (x[T])
        throw new Error(
          "Format Error: Keys must be unique for each output: output index " + g + " key " + T
        );
      x[T] = 1, S.push(v);
    }
    y.push(S);
  }
  return _g(l, {
    globalMapKeyVals: c,
    inputKeyVals: b,
    outputKeyVals: y
  });
}
function Mt(e, t, r) {
  if (J(t, Uint8Array.from([r])))
    throw new Error(
      // `Format Error: Invalid ${type} key: ${keyBuf.toString('hex')}`,
      `Format Error: Invalid ${e} key: ${me(t)}`
    );
}
function _g(e, { globalMapKeyVals: t, inputKeyVals: r, outputKeyVals: n }) {
  const o = {
    unsignedTx: e
  };
  let i = 0;
  for (const f of t)
    switch (f.key[0]) {
      case on.UNSIGNED_TX:
        if (Mt("global", f.key, on.UNSIGNED_TX), i > 0)
          throw new Error("Format Error: GlobalMap has multiple UNSIGNED_TX");
        i++;
        break;
      case on.GLOBAL_XPUB:
        o.globalXpub === void 0 && (o.globalXpub = []), o.globalXpub.push(cd.globalXpub.decode(f));
        break;
      default:
        o.unknownKeyVals || (o.unknownKeyVals = []), o.unknownKeyVals.push(f);
    }
  const s = r.length, a = n.length, c = [], u = [];
  for (const f of ic(s)) {
    const l = {};
    for (const h of r[f])
      switch (Et.checkPubkey(h), h.key[0]) {
        case ie.NON_WITNESS_UTXO:
          if (Mt("input", h.key, ie.NON_WITNESS_UTXO), l.nonWitnessUtxo !== void 0)
            throw new Error(
              "Format Error: Input has multiple NON_WITNESS_UTXO"
            );
          l.nonWitnessUtxo = Et.nonWitnessUtxo.decode(h);
          break;
        case ie.WITNESS_UTXO:
          if (Mt("input", h.key, ie.WITNESS_UTXO), l.witnessUtxo !== void 0)
            throw new Error("Format Error: Input has multiple WITNESS_UTXO");
          l.witnessUtxo = Et.witnessUtxo.decode(h);
          break;
        case ie.PARTIAL_SIG:
          l.partialSig === void 0 && (l.partialSig = []), l.partialSig.push(Et.partialSig.decode(h));
          break;
        case ie.SIGHASH_TYPE:
          if (Mt("input", h.key, ie.SIGHASH_TYPE), l.sighashType !== void 0)
            throw new Error("Format Error: Input has multiple SIGHASH_TYPE");
          l.sighashType = Et.sighashType.decode(h);
          break;
        case ie.REDEEM_SCRIPT:
          if (Mt("input", h.key, ie.REDEEM_SCRIPT), l.redeemScript !== void 0)
            throw new Error("Format Error: Input has multiple REDEEM_SCRIPT");
          l.redeemScript = Et.redeemScript.decode(h);
          break;
        case ie.WITNESS_SCRIPT:
          if (Mt("input", h.key, ie.WITNESS_SCRIPT), l.witnessScript !== void 0)
            throw new Error("Format Error: Input has multiple WITNESS_SCRIPT");
          l.witnessScript = Et.witnessScript.decode(h);
          break;
        case ie.BIP32_DERIVATION:
          l.bip32Derivation === void 0 && (l.bip32Derivation = []), l.bip32Derivation.push(
            Et.bip32Derivation.decode(h)
          );
          break;
        case ie.FINAL_SCRIPTSIG:
          Mt("input", h.key, ie.FINAL_SCRIPTSIG), l.finalScriptSig = Et.finalScriptSig.decode(h);
          break;
        case ie.FINAL_SCRIPTWITNESS:
          Mt("input", h.key, ie.FINAL_SCRIPTWITNESS), l.finalScriptWitness = Et.finalScriptWitness.decode(
            h
          );
          break;
        case ie.POR_COMMITMENT:
          Mt("input", h.key, ie.POR_COMMITMENT), l.porCommitment = Et.porCommitment.decode(h);
          break;
        case ie.TAP_KEY_SIG:
          Mt("input", h.key, ie.TAP_KEY_SIG), l.tapKeySig = Et.tapKeySig.decode(h);
          break;
        case ie.TAP_SCRIPT_SIG:
          l.tapScriptSig === void 0 && (l.tapScriptSig = []), l.tapScriptSig.push(Et.tapScriptSig.decode(h));
          break;
        case ie.TAP_LEAF_SCRIPT:
          l.tapLeafScript === void 0 && (l.tapLeafScript = []), l.tapLeafScript.push(Et.tapLeafScript.decode(h));
          break;
        case ie.TAP_BIP32_DERIVATION:
          l.tapBip32Derivation === void 0 && (l.tapBip32Derivation = []), l.tapBip32Derivation.push(
            Et.tapBip32Derivation.decode(h)
          );
          break;
        case ie.TAP_INTERNAL_KEY:
          Mt("input", h.key, ie.TAP_INTERNAL_KEY), l.tapInternalKey = Et.tapInternalKey.decode(h);
          break;
        case ie.TAP_MERKLE_ROOT:
          Mt("input", h.key, ie.TAP_MERKLE_ROOT), l.tapMerkleRoot = Et.tapMerkleRoot.decode(h);
          break;
        default:
          l.unknownKeyVals || (l.unknownKeyVals = []), l.unknownKeyVals.push(h);
      }
    c.push(l);
  }
  for (const f of ic(a)) {
    const l = {};
    for (const h of n[f])
      switch (xn.checkPubkey(h), h.key[0]) {
        case dt.REDEEM_SCRIPT:
          if (Mt("output", h.key, dt.REDEEM_SCRIPT), l.redeemScript !== void 0)
            throw new Error("Format Error: Output has multiple REDEEM_SCRIPT");
          l.redeemScript = xn.redeemScript.decode(h);
          break;
        case dt.WITNESS_SCRIPT:
          if (Mt("output", h.key, dt.WITNESS_SCRIPT), l.witnessScript !== void 0)
            throw new Error("Format Error: Output has multiple WITNESS_SCRIPT");
          l.witnessScript = xn.witnessScript.decode(h);
          break;
        case dt.BIP32_DERIVATION:
          l.bip32Derivation === void 0 && (l.bip32Derivation = []), l.bip32Derivation.push(
            xn.bip32Derivation.decode(h)
          );
          break;
        case dt.TAP_INTERNAL_KEY:
          Mt("output", h.key, dt.TAP_INTERNAL_KEY), l.tapInternalKey = xn.tapInternalKey.decode(h);
          break;
        case dt.TAP_TREE:
          Mt("output", h.key, dt.TAP_TREE), l.tapTree = xn.tapTree.decode(h);
          break;
        case dt.TAP_BIP32_DERIVATION:
          l.tapBip32Derivation === void 0 && (l.tapBip32Derivation = []), l.tapBip32Derivation.push(
            xn.tapBip32Derivation.decode(h)
          );
          break;
        default:
          l.unknownKeyVals || (l.unknownKeyVals = []), l.unknownKeyVals.push(h);
      }
    u.push(l);
  }
  return { globalMap: o, inputs: c, outputs: u };
}
function oE({ globalMap: e, inputs: t, outputs: r }) {
  const { globalKeyVals: n, inputKeyVals: o, outputKeyVals: i } = Zl({
    globalMap: e,
    inputs: t,
    outputs: r
  }), s = ep(n), a = (l) => l.length === 0 ? [Uint8Array.from([0])] : l.map(ep), c = a(o), u = a(i), f = new Uint8Array(5);
  return f.set([112, 115, 98, 116, 255], 0), st(
    [f, s].concat(c, u)
  );
}
const iE = (e, t) => J(e.key, t.key);
function Yu(e, t) {
  const r = /* @__PURE__ */ new Set(), n = Object.entries(e).reduce((i, [s, a]) => {
    if (s === "unknownKeyVals") return i;
    const c = t[s];
    if (c === void 0) return i;
    const u = (Array.isArray(a) ? a : [a]).map(
      c.encode
    );
    return u.map((l) => me(l.key)).forEach((l) => {
      if (r.has(l))
        throw new Error("Serialize Error: Duplicate key: " + l);
      r.add(l);
    }), i.concat(u);
  }, []), o = e.unknownKeyVals ? e.unknownKeyVals.filter((i) => !r.has(me(i.key))) : [];
  return n.concat(o).sort(iE);
}
function Zl({ globalMap: e, inputs: t, outputs: r }) {
  return {
    globalKeyVals: Yu(e, cd),
    inputKeyVals: t.map((n) => Yu(n, Et)),
    outputKeyVals: r.map((n) => Yu(n, xn))
  };
}
function sE(e) {
  const t = e[0], r = Zl(t), n = e.slice(1);
  if (n.length === 0) throw new Error("Combine: Nothing to combine");
  const o = tp(t);
  if (o === void 0)
    throw new Error("Combine: Self missing transaction");
  const i = gi(r.globalKeyVals), s = r.inputKeyVals.map(gi), a = r.outputKeyVals.map(gi);
  for (const c of n) {
    const u = tp(c);
    if (u === void 0 || J(u.toBuffer(), o.toBuffer()) !== 0)
      throw new Error(
        "Combine: One of the Psbts does not have the same transaction."
      );
    const f = Zl(c);
    gi(f.globalKeyVals).forEach(
      Ju(
        i,
        r.globalKeyVals,
        f.globalKeyVals
      )
    ), f.inputKeyVals.map(gi).forEach(
      (b, y) => b.forEach(
        Ju(
          s[y],
          r.inputKeyVals[y],
          f.inputKeyVals[y]
        )
      )
    ), f.outputKeyVals.map(gi).forEach(
      (b, y) => b.forEach(
        Ju(
          a[y],
          r.outputKeyVals[y],
          f.outputKeyVals[y]
        )
      )
    );
  }
  return _g(o, {
    globalMapKeyVals: r.globalKeyVals,
    inputKeyVals: r.inputKeyVals,
    outputKeyVals: r.outputKeyVals
  });
}
function Ju(e, t, r) {
  return (n) => {
    if (e.has(n)) return;
    const o = r.filter((i) => me(i.key) === n)[0];
    t.push(o), e.add(n);
  };
}
function tp(e) {
  return e.globalMap.unsignedTx;
}
function gi(e) {
  const t = /* @__PURE__ */ new Set();
  return e.forEach((r) => {
    const n = me(r.key);
    if (t.has(n))
      throw new Error("Combine: KeyValue Map keys should be unique");
    t.add(n);
  }), t;
}
function Rt(e, t) {
  const r = e[t];
  if (r === void 0) throw new Error(`No input #${t}`);
  return r;
}
function Is(e, t) {
  const r = e[t];
  if (r === void 0) throw new Error(`No output #${t}`);
  return r;
}
function Qu(e, t, r) {
  if (e.key[0] < r)
    throw new Error(
      "Use the method for your specific key instead of addUnknownKeyVal*"
    );
  if (t && t.filter((n) => J(n.key, e.key) === 0).length !== 0)
    throw new Error(`Duplicate Key: ${me(e.key)}`);
}
function el(e) {
  let t = 0;
  return Object.keys(e).forEach((r) => {
    Number(isNaN(Number(r))) && t++;
  }), t;
}
function aE(e, t) {
  let r = !1;
  if (t.nonWitnessUtxo || t.witnessUtxo) {
    const n = !!t.redeemScript, o = !!t.witnessScript, i = !n || !!t.finalScriptSig, s = !o || !!t.finalScriptWitness, a = !!t.finalScriptSig || !!t.finalScriptWitness;
    r = i && s && a;
  }
  if (r === !1)
    throw new Error(
      `Input #${e} has too much or too little data to clean`
    );
}
function rp(e, t, r, n) {
  throw new Error(
    `Data for ${e} key ${t} is incorrect: Expected ${r} and got ${JSON.stringify(n)}`
  );
}
function ud(e) {
  return (t, r) => {
    for (const n of Object.keys(t)) {
      const o = t[n], { canAdd: i, canAddToArray: s, check: a, expected: c } = (
        // @ts-ignore
        tE[e + "s"][n] || {}
      ), u = !!s;
      if (a)
        if (u) {
          if (!Array.isArray(o) || // @ts-ignore
          r[n] && !Array.isArray(r[n]))
            throw new Error(`Key type ${n} must be an array`);
          o.every(a) || rp(e, n, c, o);
          const f = r[n] || [], l = /* @__PURE__ */ new Set();
          if (!o.every((h) => s(f, h, l)))
            throw new Error("Can not add duplicate data to array");
          r[n] = f.concat(o);
        } else {
          if (a(o) || rp(e, n, c, o), !i(r, o))
            throw new Error(`Can not add duplicate data to ${e}`);
          r[n] = o;
        }
    }
  };
}
const cE = ud("global"), Sg = ud("input"), kg = ud("output");
function uE(e, t) {
  const r = e.length - 1, n = Rt(e, r);
  Sg(t, n);
}
function lE(e, t) {
  const r = e.length - 1, n = Is(e, r);
  kg(t, n);
}
let np = class {
  constructor(t) {
    this.inputs = [], this.outputs = [], this.globalMap = {
      unsignedTx: t
    };
  }
  static fromBase64(t, r) {
    const n = C0(t);
    return this.fromBuffer(n, r);
  }
  static fromHex(t, r) {
    const n = Nn(t);
    return this.fromBuffer(n, r);
  }
  static fromBuffer(t, r) {
    const n = nE(t, r), o = new this(n.globalMap.unsignedTx);
    return Object.assign(o, n), o;
  }
  toBase64() {
    const t = this.toBuffer();
    return e1(t);
  }
  toHex() {
    const t = this.toBuffer();
    return me(t);
  }
  toBuffer() {
    return oE(this);
  }
  updateGlobal(t) {
    return cE(t, this.globalMap), this;
  }
  updateInput(t, r) {
    const n = Rt(this.inputs, t);
    return Sg(r, n), this;
  }
  updateOutput(t, r) {
    const n = Is(this.outputs, t);
    return kg(r, n), this;
  }
  addUnknownKeyValToGlobal(t) {
    return Qu(
      t,
      this.globalMap.unknownKeyVals,
      el(on)
    ), this.globalMap.unknownKeyVals || (this.globalMap.unknownKeyVals = []), this.globalMap.unknownKeyVals.push(t), this;
  }
  addUnknownKeyValToInput(t, r) {
    const n = Rt(this.inputs, t);
    return Qu(r, n.unknownKeyVals, el(ie)), n.unknownKeyVals || (n.unknownKeyVals = []), n.unknownKeyVals.push(r), this;
  }
  addUnknownKeyValToOutput(t, r) {
    const n = Is(this.outputs, t);
    return Qu(r, n.unknownKeyVals, el(dt)), n.unknownKeyVals || (n.unknownKeyVals = []), n.unknownKeyVals.push(r), this;
  }
  addInput(t) {
    this.globalMap.unsignedTx.addInput(t), this.inputs.push({
      unknownKeyVals: []
    });
    const r = t.unknownKeyVals || [], n = this.inputs.length - 1;
    if (!Array.isArray(r))
      throw new Error("unknownKeyVals must be an Array");
    return r.forEach(
      (o) => this.addUnknownKeyValToInput(n, o)
    ), uE(this.inputs, t), this;
  }
  addOutput(t) {
    this.globalMap.unsignedTx.addOutput(t), this.outputs.push({
      unknownKeyVals: []
    });
    const r = t.unknownKeyVals || [], n = this.outputs.length - 1;
    if (!Array.isArray(r))
      throw new Error("unknownKeyVals must be an Array");
    return r.forEach(
      (o) => this.addUnknownKeyValToOutput(n, o)
    ), lE(this.outputs, t), this;
  }
  clearFinalizedInput(t) {
    const r = Rt(this.inputs, t);
    aE(t, r);
    for (const n of Object.keys(r))
      [
        "witnessUtxo",
        "nonWitnessUtxo",
        "finalScriptSig",
        "finalScriptWitness",
        "unknownKeyVals"
      ].includes(n) || delete r[n];
    return this;
  }
  combine(...t) {
    const r = sE([this].concat(t));
    return Object.assign(this, r), this;
  }
  getTransaction() {
    return this.globalMap.unsignedTx.toBuffer();
  }
};
function ri(e) {
  return (t) => {
    try {
      return e({ output: t }), !0;
    } catch {
      return !1;
    }
  };
}
const fE = ri(Fc), dE = ri(J0), hE = ri(Zs), Vc = ri(Xs), op = ri(Ys), Ag = ri(Zi), Tg = ri(Js);
function sc(e) {
  let t = new Uint8Array(0);
  function r(s) {
    t = st([t, s]);
  }
  function n(s) {
    const a = t.length, c = _r(s);
    t = st([t, new Uint8Array(c)]), go(s, t, a);
  }
  function o(s) {
    n(s.length), r(s);
  }
  function i(s) {
    n(s.length), s.forEach(o);
  }
  return i(e), t;
}
function Ig(e, t) {
  const r = kn(e), n = e.slice(1, 33), o = ot(t);
  if (o === null) throw new Error("Unknown script error");
  return o.findIndex((i) => typeof i == "number" ? !1 : J(e, i) === 0 || J(r, i) === 0 || J(n, i) === 0);
}
function Wc(e, t) {
  return Ig(e, t) !== -1;
}
function pE(e, t) {
  return gE(e).some(
    (n) => Pg(n, ys.decode, t)
  );
}
function Pg(e, t, r) {
  const { hashType: n } = t(e), o = [];
  switch (n & nt.SIGHASH_ANYONECANPAY && o.push("addInput"), n & 31) {
    case nt.SIGHASH_ALL:
      break;
    case nt.SIGHASH_SINGLE:
    case nt.SIGHASH_NONE:
      o.push("addOutput"), o.push("setInputSequence");
      break;
  }
  return o.indexOf(r) === -1;
}
function gE(e) {
  let t = [];
  if ((e.partialSig || []).length === 0) {
    if (!e.finalScriptSig && !e.finalScriptWitness) return [];
    t = mE(e);
  } else
    t = e.partialSig;
  return t.map((r) => r.signature);
}
function mE(e) {
  const t = e.finalScriptSig ? ot(e.finalScriptSig) || [] : [], r = e.finalScriptWitness ? ot(e.finalScriptWitness) || [] : [];
  return t.concat(r).filter((n) => n instanceof Uint8Array && Pn(n)).map((n) => ({ signature: n }));
}
const vs = (e) => e.length === 32 ? e : e.slice(1, 33);
function ip(e, t, r) {
  const n = OE(
    t,
    e,
    r
  );
  try {
    const i = IE(t, n).concat(n.script).concat(n.controlBlock);
    return { finalScriptWitness: sc(i) };
  } catch (o) {
    throw new Error(`Can not finalize taproot input #${e}: ${o}`);
  }
}
function Ta(e, t) {
  const r = t ? Uint8Array.from([t]) : Uint8Array.from([]);
  return st([e, r]);
}
function Or(e) {
  return e && !!(e.tapInternalKey || e.tapMerkleRoot || e.tapLeafScript && e.tapLeafScript.length || e.tapBip32Derivation && e.tapBip32Derivation.length || e.witnessUtxo && Tg(e.witnessUtxo.script));
}
function tl(e, t) {
  return e && !!(e.tapInternalKey || e.tapTree || e.tapBip32Derivation && e.tapBip32Derivation.length || t);
}
function sp(e, t, r) {
  kE(e, t, r), TE(e, t, r);
}
function ap(e, t, r) {
  AE(e, t, r), bE(e, t);
}
function bE(e, t) {
  if (!t.tapTree && !t.tapInternalKey) return;
  const r = t.tapInternalKey || e.tapInternalKey, n = t.tapTree || e.tapTree;
  if (r) {
    const { script: o } = e, i = yE(r, n);
    if (o && J(i, o) !== 0)
      throw new Error("Error adding output. Script or address mismatch.");
  }
}
function yE(e, t) {
  const r = t && wE(t.leaves), { output: n } = Js({
    internalPubkey: e,
    scriptTree: r
  });
  return n;
}
function wE(e = []) {
  return e.length === 1 && e[0].depth === 0 ? {
    output: e[0].script,
    version: e[0].leafVersion
  } : SE(e);
}
function vE(e, t) {
  return EE(e).some(
    (n) => Pg(n, xE, t)
  );
}
function xE(e) {
  return {
    signature: e.slice(0, 64),
    hashType: e.slice(64)[0] || nt.SIGHASH_DEFAULT
  };
}
function EE(e) {
  const t = [];
  if (e.tapKeySig && t.push(e.tapKeySig), e.tapScriptSig && t.push(...e.tapScriptSig.map((r) => r.signature)), !t.length) {
    const r = _E(e.finalScriptWitness);
    r && t.push(r);
  }
  return t;
}
function _E(e) {
  if (!e) return;
  const t = e.slice(2);
  if (t.length === 64 || t.length === 65) return t;
}
function SE(e) {
  let t;
  for (const r of e)
    if (t = Xl(r, t), !t) throw new Error("No room left to insert tapleaf in tree");
  return t;
}
function Xl(e, t, r = 0) {
  if (r > gx) throw new Error("Max taptree depth exceeded.");
  if (e.depth === r)
    return t ? void 0 : {
      output: e.script,
      version: e.leafVersion
    };
  if (Gf(t)) return;
  const n = Xl(e, t && t[0], r + 1);
  if (n) return [n, t && t[1]];
  const o = Xl(e, t && t[1], r + 1);
  if (o) return [t && t[0], o];
}
function kE(e, t, r) {
  const n = Or(e) && Ii(t), o = Ii(e) && Or(t), i = e === t && Or(t) && Ii(t);
  if (n || o || i)
    throw new Error(
      `Invalid arguments for Psbt.${r}. Cannot use both taproot and non-taproot fields.`
    );
}
function AE(e, t, r) {
  const n = tl(e) && Ii(t), o = Ii(e) && tl(t), i = e === t && tl(t) && Ii(t);
  if (n || o || i)
    throw new Error(
      `Invalid arguments for Psbt.${r}. Cannot use both taproot and non-taproot fields.`
    );
}
function TE(e, t, r) {
  if (t.tapMerkleRoot) {
    const n = (t.tapLeafScript || []).every(
      (i) => rl(i, t.tapMerkleRoot)
    ), o = (e.tapLeafScript || []).every(
      (i) => rl(i, t.tapMerkleRoot)
    );
    if (!n || !o)
      throw new Error(
        `Invalid arguments for Psbt.${r}. Tapleaf not part of taptree.`
      );
  } else if (e.tapMerkleRoot && !(t.tapLeafScript || []).every(
    (o) => rl(o, e.tapMerkleRoot)
  ))
    throw new Error(
      `Invalid arguments for Psbt.${r}. Tapleaf not part of taptree.`
    );
}
function rl(e, t) {
  if (!t) return !0;
  const r = Sn({
    output: e.script,
    version: e.leafVersion
  }), n = Vl(e.controlBlock, r);
  return J(n, t) === 0;
}
function IE(e, t) {
  const r = Sn({
    output: t.script,
    version: t.leafVersion
  });
  return (e.tapScriptSig || []).filter((n) => J(n.leafHash, r) === 0).map((n) => PE(t.script, n)).sort((n, o) => o.positionInScript - n.positionInScript).map((n) => n.signature);
}
function PE(e, t) {
  return Object.assign(
    {
      positionInScript: Ig(t.pubkey, e)
    },
    t
  );
}
function OE(e, t, r) {
  if (!e.tapScriptSig || !e.tapScriptSig.length)
    throw new Error(
      `Can not finalize taproot input #${t}. No tapleaf script signature provided.`
    );
  const n = (e.tapLeafScript || []).sort((o, i) => o.controlBlock.length - i.controlBlock.length).find(
    (o) => BE(o, e.tapScriptSig, r)
  );
  if (!n)
    throw new Error(
      `Can not finalize taproot input #${t}. Signature for tapleaf script not found.`
    );
  return n;
}
function BE(e, t, r) {
  const n = Sn({
    output: e.script,
    version: e.leafVersion
  });
  return (!r || J(n, r) === 0) && t.find((i) => J(i.leafHash, n) === 0) !== void 0;
}
function Ii(e) {
  return e && !!(e.redeemScript || e.witnessScript || e.bip32Derivation && e.bip32Derivation.length);
}
const $E = {
  /**
   * A bitcoinjs Network object. This is only used if you pass an `address`
   * parameter to addOutput. Otherwise it is not needed and can be left default.
   */
  network: Dr,
  /**
   * When extractTransaction is called, the fee rate is checked.
   * THIS IS NOT TO BE RELIED ON.
   * It is only here as a last ditch effort to prevent sending a 500 BTC fee etc.
   */
  maximumFeeRate: 5e3
  // satoshi per byte
};
class et {
  constructor(t = {}, r = new np(new Og())) {
    ne(this, "data");
    ne(this, "__CACHE");
    ne(this, "opts");
    this.data = r, this.opts = Object.assign({}, $E, t), this.__CACHE = {
      __NON_WITNESS_UTXO_TX_CACHE: [],
      __NON_WITNESS_UTXO_BUF_CACHE: [],
      __TX_IN_CACHE: {},
      __TX: this.data.globalMap.unsignedTx.tx,
      // Psbt's predecessor (TransactionBuilder - now removed) behavior
      // was to not confirm input values  before signing.
      // Even though we highly encourage people to get
      // the full parent transaction to verify values, the ability to
      // sign non-segwit inputs without the full transaction was often
      // requested. So the only way to activate is to use @ts-ignore.
      // We will disable exporting the Psbt when unsafe sign is active.
      // because it is not BIP174 compliant.
      __UNSAFE_SIGN_NONSEGWIT: !1
    }, this.data.inputs.length === 0 && this.setVersion(2);
    const n = (o, i, s, a) => Object.defineProperty(o, i, {
      enumerable: s,
      writable: a
    });
    n(this, "__CACHE", !1, !0), n(this, "opts", !1, !0);
  }
  static fromBase64(t, r = {}) {
    const n = C0(t);
    return this.fromBuffer(n, r);
  }
  static fromHex(t, r = {}) {
    const n = Nn(t);
    return this.fromBuffer(n, r);
  }
  static fromBuffer(t, r = {}) {
    const n = np.fromBuffer(t, NE), o = new et(r, n);
    return LE(o.__CACHE.__TX, o.__CACHE), o;
  }
  get inputCount() {
    return this.data.inputs.length;
  }
  get version() {
    return this.__CACHE.__TX.version;
  }
  set version(t) {
    this.setVersion(t);
  }
  get locktime() {
    return this.__CACHE.__TX.locktime;
  }
  set locktime(t) {
    this.setLocktime(t);
  }
  get txInputs() {
    return this.__CACHE.__TX.ins.map((t) => ({
      hash: Zh(t.hash),
      index: t.index,
      sequence: t.sequence
    }));
  }
  get txOutputs() {
    return this.__CACHE.__TX.outs.map((t) => {
      let r;
      try {
        r = Qs(t.script, this.opts.network);
      } catch {
      }
      return {
        script: Zh(t.script),
        value: t.value,
        address: r
      };
    });
  }
  combine(...t) {
    return this.data.combine(...t.map((r) => r.data)), this;
  }
  clone() {
    const t = et.fromBuffer(this.data.toBuffer());
    return t.opts = JSON.parse(JSON.stringify(this.opts)), t;
  }
  setMaximumFeeRate(t) {
    Ia(t), this.opts.maximumFeeRate = t;
  }
  setVersion(t) {
    Ia(t), cs(this.data.inputs, "setVersion");
    const r = this.__CACHE;
    return r.__TX.version = t, r.__EXTRACTED_TX = void 0, this;
  }
  setLocktime(t) {
    Ia(t), cs(this.data.inputs, "setLocktime");
    const r = this.__CACHE;
    return r.__TX.locktime = t, r.__EXTRACTED_TX = void 0, this;
  }
  setInputSequence(t, r) {
    Ia(r), cs(this.data.inputs, "setInputSequence");
    const n = this.__CACHE;
    if (n.__TX.ins.length <= t)
      throw new Error("Input index too high");
    return n.__TX.ins[t].sequence = r, n.__EXTRACTED_TX = void 0, this;
  }
  addInputs(t) {
    return t.forEach((r) => this.addInput(r)), this;
  }
  addInput(t) {
    if (arguments.length > 1 || !t || t.hash === void 0 || t.index === void 0)
      throw new Error(
        "Invalid arguments for Psbt.addInput. Requires single object with at least [hash] and [index]"
      );
    sp(t, t, "addInput"), cs(this.data.inputs, "addInput"), t.witnessScript && ac(t.witnessScript);
    const r = this.__CACHE;
    this.data.addInput(t);
    const n = r.__TX.ins[r.__TX.ins.length - 1];
    Ng(r, n);
    const o = this.data.inputs.length - 1, i = this.data.inputs[o];
    return i.nonWitnessUtxo && Jl(this.__CACHE, i, o), r.__FEE = void 0, r.__FEE_RATE = void 0, r.__EXTRACTED_TX = void 0, this;
  }
  addOutputs(t) {
    return t.forEach((r) => this.addOutput(r)), this;
  }
  addOutput(t) {
    if (arguments.length > 1 || !t || t.value === void 0 || t.address === void 0 && t.script === void 0)
      throw new Error(
        "Invalid arguments for Psbt.addOutput. Requires single object with at least [script or address] and [value]"
      );
    cs(this.data.inputs, "addOutput");
    const { address: r } = t;
    if (typeof r == "string") {
      const { network: o } = this.opts, i = id(r, o);
      t = Object.assign({}, t, { script: i });
    }
    ap(t, t, "addOutput");
    const n = this.__CACHE;
    return this.data.addOutput(t), n.__FEE = void 0, n.__FEE_RATE = void 0, n.__EXTRACTED_TX = void 0, this;
  }
  extractTransaction(t) {
    if (!this.data.inputs.every(Bg)) throw new Error("Not finalized");
    const r = this.__CACHE;
    if (t || CE(this, r, this.opts), r.__EXTRACTED_TX) return r.__EXTRACTED_TX;
    const n = r.__TX.clone();
    return zg(this.data.inputs, n, r, !0), n;
  }
  getFeeRate() {
    return dp(
      "__FEE_RATE",
      "fee rate",
      this.data.inputs,
      this.__CACHE
    );
  }
  getFee() {
    return dp("__FEE", "fee", this.data.inputs, this.__CACHE);
  }
  finalizeAllInputs() {
    return Rt(this.data.inputs, 0), us(this.data.inputs.length).forEach((t) => this.finalizeInput(t)), this;
  }
  finalizeInput(t, r) {
    const n = Rt(this.data.inputs, t);
    return Or(n) ? this._finalizeTaprootInput(
      t,
      n,
      void 0,
      r
    ) : this._finalizeInput(t, n, r);
  }
  finalizeTaprootInput(t, r, n = ip) {
    const o = Rt(this.data.inputs, t);
    if (Or(o))
      return this._finalizeTaprootInput(
        t,
        o,
        r,
        n
      );
    throw new Error(`Cannot finalize input #${t}. Not Taproot.`);
  }
  _finalizeInput(t, r, n = zE) {
    const { script: o, isP2SH: i, isP2WSH: s, isSegwit: a } = FE(
      t,
      r,
      this.__CACHE
    );
    if (!o) throw new Error(`No script found for input #${t}`);
    HE(r);
    const { finalScriptSig: c, finalScriptWitness: u } = n(
      t,
      r,
      o,
      a,
      i,
      s
    );
    if (c && this.data.updateInput(t, { finalScriptSig: c }), u && this.data.updateInput(t, { finalScriptWitness: u }), !c && !u)
      throw new Error(`Unknown error finalizing input #${t}`);
    return this.data.clearFinalizedInput(t), this;
  }
  _finalizeTaprootInput(t, r, n, o = ip) {
    if (!r.witnessUtxo)
      throw new Error(
        `Cannot finalize input #${t}. Missing withness utxo.`
      );
    if (r.tapKeySig) {
      const i = Js({
        output: r.witnessUtxo.script,
        signature: r.tapKeySig
      }), s = sc(i.witness);
      this.data.updateInput(t, { finalScriptWitness: s });
    } else {
      const { finalScriptWitness: i } = o(
        t,
        r,
        n
      );
      this.data.updateInput(t, { finalScriptWitness: i });
    }
    return this.data.clearFinalizedInput(t), this;
  }
  getInputType(t) {
    const r = Rt(this.data.inputs, t), n = jg(t, r, this.__CACHE), o = Zc(
      n,
      t,
      "input",
      r.redeemScript || GE(r.finalScriptSig),
      r.witnessScript || ZE(r.finalScriptWitness)
    ), i = o.type === "raw" ? "" : o.type + "-", s = Dg(o.meaningfulScript);
    return i + s;
  }
  inputHasPubkey(t, r) {
    const n = Rt(this.data.inputs, t);
    return VE(r, n, t, this.__CACHE);
  }
  inputHasHDKey(t, r) {
    const n = Rt(this.data.inputs, t), o = up(r);
    return !!n.bip32Derivation && n.bip32Derivation.some(o);
  }
  outputHasPubkey(t, r) {
    const n = Is(this.data.outputs, t);
    return WE(r, n, t, this.__CACHE);
  }
  outputHasHDKey(t, r) {
    const n = Is(this.data.outputs, t), o = up(r);
    return !!n.bip32Derivation && n.bip32Derivation.some(o);
  }
  validateSignaturesOfAllInputs(t) {
    return Rt(this.data.inputs, 0), us(this.data.inputs.length).map(
      (n) => this.validateSignaturesOfInput(n, t)
    ).reduce((n, o) => o === !0 && n, !0);
  }
  validateSignaturesOfInput(t, r, n) {
    const o = this.data.inputs[t];
    return Or(o) ? this.validateSignaturesOfTaprootInput(
      t,
      r,
      n
    ) : this._validateSignaturesOfInput(t, r, n);
  }
  _validateSignaturesOfInput(t, r, n) {
    const o = this.data.inputs[t], i = (o || {}).partialSig;
    if (!o || !i || i.length < 1)
      throw new Error("No signatures to validate");
    if (typeof r != "function")
      throw new Error("Need validator function to validate signatures");
    const s = n ? i.filter((l) => J(l.pubkey, n) === 0) : i;
    if (s.length < 1) throw new Error("No signatures for this pubkey");
    const a = [];
    let c, u, f;
    for (const l of s) {
      const h = ys.decode(l.signature), { hash: m, script: b } = f !== h.hashType ? Cg(
        t,
        Object.assign({}, o, { sighashType: h.hashType }),
        this.__CACHE,
        !0
      ) : { hash: c, script: u };
      f = h.hashType, c = m, u = b, $g(l.pubkey, b, "verify"), a.push(r(l.pubkey, m, h.signature));
    }
    return a.every((l) => l === !0);
  }
  validateSignaturesOfTaprootInput(t, r, n) {
    const o = this.data.inputs[t], i = (o || {}).tapKeySig, s = (o || {}).tapScriptSig;
    if (!o && !i && !(s && !s.length))
      throw new Error("No signatures to validate");
    if (typeof r != "function")
      throw new Error("Need validator function to validate signatures");
    n = n && vs(n);
    const a = n ? Yl(
      t,
      o,
      this.data.inputs,
      n,
      this.__CACHE
    ) : ME(
      t,
      o,
      this.data.inputs,
      this.__CACHE
    );
    if (!a.length) throw new Error("No signatures for this pubkey");
    const c = a.find((f) => !f.leafHash);
    let u = 0;
    if (i && c) {
      if (!r(
        c.pubkey,
        c.hash,
        pp(i)
      )) return !1;
      u++;
    }
    if (s)
      for (const f of s) {
        const l = a.find(
          (h) => J(h.pubkey, f.pubkey) === 0
        );
        if (l) {
          if (!r(
            f.pubkey,
            l.hash,
            pp(f.signature)
          )) return !1;
          u++;
        }
      }
    return u > 0;
  }
  signAllInputsHD(t, r = [nt.SIGHASH_ALL]) {
    if (!t || !t.publicKey || !t.fingerprint)
      throw new Error("Need HDSigner to sign input");
    const n = [];
    for (const o of us(this.data.inputs.length))
      try {
        this.signInputHD(o, t, r), n.push(!0);
      } catch {
        n.push(!1);
      }
    if (n.every((o) => o === !1))
      throw new Error("No inputs were signed");
    return this;
  }
  signAllInputsHDAsync(t, r = [nt.SIGHASH_ALL]) {
    return new Promise((n, o) => {
      if (!t || !t.publicKey || !t.fingerprint)
        return o(new Error("Need HDSigner to sign input"));
      const i = [], s = [];
      for (const a of us(this.data.inputs.length))
        s.push(
          this.signInputHDAsync(a, t, r).then(
            () => {
              i.push(!0);
            },
            () => {
              i.push(!1);
            }
          )
        );
      return Promise.all(s).then(() => {
        if (i.every((a) => a === !1))
          return o(new Error("No inputs were signed"));
        n();
      });
    });
  }
  signInputHD(t, r, n = [nt.SIGHASH_ALL]) {
    if (!r || !r.publicKey || !r.fingerprint)
      throw new Error("Need HDSigner to sign input");
    return gp(t, this.data.inputs, r).forEach((i) => this.signInput(t, i, n)), this;
  }
  signInputHDAsync(t, r, n = [nt.SIGHASH_ALL]) {
    return new Promise((o, i) => {
      if (!r || !r.publicKey || !r.fingerprint)
        return i(new Error("Need HDSigner to sign input"));
      const a = gp(t, this.data.inputs, r).map(
        (c) => this.signInputAsync(t, c, n)
      );
      return Promise.all(a).then(() => {
        o();
      }).catch(i);
    });
  }
  signAllInputs(t, r) {
    if (!t || !t.publicKey)
      throw new Error("Need Signer to sign input");
    const n = [];
    for (const o of us(this.data.inputs.length))
      try {
        this.signInput(o, t, r), n.push(!0);
      } catch {
        n.push(!1);
      }
    if (n.every((o) => o === !1))
      throw new Error("No inputs were signed");
    return this;
  }
  signAllInputsAsync(t, r) {
    return new Promise((n, o) => {
      if (!t || !t.publicKey)
        return o(new Error("Need Signer to sign input"));
      const i = [], s = [];
      for (const [a] of this.data.inputs.entries())
        s.push(
          this.signInputAsync(a, t, r).then(
            () => {
              i.push(!0);
            },
            () => {
              i.push(!1);
            }
          )
        );
      return Promise.all(s).then(() => {
        if (i.every((a) => a === !1))
          return o(new Error("No inputs were signed"));
        n();
      });
    });
  }
  signInput(t, r, n) {
    if (!r || !r.publicKey)
      throw new Error("Need Signer to sign input");
    const o = Rt(this.data.inputs, t);
    return Or(o) ? this._signTaprootInput(
      t,
      o,
      r,
      void 0,
      n
    ) : this._signInput(t, r, n);
  }
  signTaprootInput(t, r, n, o) {
    if (!r || !r.publicKey)
      throw new Error("Need Signer to sign input");
    const i = Rt(this.data.inputs, t);
    if (Or(i))
      return this._signTaprootInput(
        t,
        i,
        r,
        n,
        o
      );
    throw new Error(`Input #${t} is not of type Taproot.`);
  }
  _signInput(t, r, n = [nt.SIGHASH_ALL]) {
    const { hash: o, sighashType: i } = hp(
      this.data.inputs,
      t,
      r.publicKey,
      this.__CACHE,
      n
    ), s = [
      {
        pubkey: r.publicKey,
        signature: ys.encode(r.sign(o), i)
      }
    ];
    return this.data.updateInput(t, { partialSig: s }), this;
  }
  _signTaprootInput(t, r, n, o, i = [nt.SIGHASH_DEFAULT]) {
    const s = this.checkTaprootHashesForSig(
      t,
      r,
      n,
      o,
      i
    ), a = s.filter((u) => !u.leafHash).map(
      (u) => Ta(
        n.signSchnorr(u.hash),
        r.sighashType
      )
    )[0], c = s.filter((u) => !!u.leafHash).map((u) => ({
      pubkey: vs(n.publicKey),
      signature: Ta(
        n.signSchnorr(u.hash),
        r.sighashType
      ),
      leafHash: u.leafHash
    }));
    return a && this.data.updateInput(t, { tapKeySig: a }), c.length && this.data.updateInput(t, { tapScriptSig: c }), this;
  }
  signInputAsync(t, r, n) {
    return Promise.resolve().then(() => {
      if (!r || !r.publicKey)
        throw new Error("Need Signer to sign input");
      const o = Rt(this.data.inputs, t);
      return Or(o) ? this._signTaprootInputAsync(
        t,
        o,
        r,
        void 0,
        n
      ) : this._signInputAsync(t, r, n);
    });
  }
  signTaprootInputAsync(t, r, n, o) {
    return Promise.resolve().then(() => {
      if (!r || !r.publicKey)
        throw new Error("Need Signer to sign input");
      const i = Rt(this.data.inputs, t);
      if (Or(i))
        return this._signTaprootInputAsync(
          t,
          i,
          r,
          n,
          o
        );
      throw new Error(`Input #${t} is not of type Taproot.`);
    });
  }
  _signInputAsync(t, r, n = [nt.SIGHASH_ALL]) {
    const { hash: o, sighashType: i } = hp(
      this.data.inputs,
      t,
      r.publicKey,
      this.__CACHE,
      n
    );
    return Promise.resolve(r.sign(o)).then((s) => {
      const a = [
        {
          pubkey: r.publicKey,
          signature: ys.encode(s, i)
        }
      ];
      this.data.updateInput(t, { partialSig: a });
    });
  }
  async _signTaprootInputAsync(t, r, n, o, i = [nt.SIGHASH_DEFAULT]) {
    const s = this.checkTaprootHashesForSig(
      t,
      r,
      n,
      o,
      i
    ), a = [], c = s.filter((f) => !f.leafHash)[0];
    if (c) {
      const f = Promise.resolve(
        n.signSchnorr(c.hash)
      ).then((l) => ({ tapKeySig: Ta(l, r.sighashType) }));
      a.push(f);
    }
    const u = s.filter((f) => !!f.leafHash);
    if (u.length) {
      const f = u.map((l) => Promise.resolve(n.signSchnorr(l.hash)).then(
        (h) => ({ tapScriptSig: [
          {
            pubkey: vs(n.publicKey),
            signature: Ta(
              h,
              r.sighashType
            ),
            leafHash: l.leafHash
          }
        ] })
      ));
      a.push(...f);
    }
    return Promise.all(a).then((f) => {
      f.forEach((l) => this.data.updateInput(t, l));
    });
  }
  checkTaprootHashesForSig(t, r, n, o, i) {
    if (typeof n.signSchnorr != "function")
      throw new Error(
        `Need Schnorr Signer to sign taproot input #${t}.`
      );
    const s = Yl(
      t,
      r,
      this.data.inputs,
      n.publicKey,
      this.__CACHE,
      o,
      i
    );
    if (!s || !s.length)
      throw new Error(
        `Can not sign for input #${t} with the key ${me(n.publicKey)}`
      );
    return s;
  }
  toBuffer() {
    return nl(this.__CACHE), this.data.toBuffer();
  }
  toHex() {
    return nl(this.__CACHE), this.data.toHex();
  }
  toBase64() {
    return nl(this.__CACHE), this.data.toBase64();
  }
  updateGlobal(t) {
    return this.data.updateGlobal(t), this;
  }
  updateInput(t, r) {
    return r.witnessScript && ac(r.witnessScript), sp(
      this.data.inputs[t],
      r,
      "updateInput"
    ), this.data.updateInput(t, r), r.nonWitnessUtxo && Jl(
      this.__CACHE,
      this.data.inputs[t],
      t
    ), this;
  }
  updateOutput(t, r) {
    const n = this.data.outputs[t];
    return ap(n, r, "updateOutput"), this.data.updateOutput(t, r), this;
  }
  addUnknownKeyValToGlobal(t) {
    return this.data.addUnknownKeyValToGlobal(t), this;
  }
  addUnknownKeyValToInput(t, r) {
    return this.data.addUnknownKeyValToInput(t, r), this;
  }
  addUnknownKeyValToOutput(t, r) {
    return this.data.addUnknownKeyValToOutput(t, r), this;
  }
  clearFinalizedInput(t) {
    return this.data.clearFinalizedInput(t), this;
  }
}
const NE = (e) => new Og(e);
class Og {
  constructor(t = Uint8Array.from([2, 0, 0, 0, 0, 0, 0, 0, 0, 0])) {
    ne(this, "tx");
    this.tx = nt.fromBuffer(t), RE(this.tx), Object.defineProperty(this, "tx", {
      enumerable: !1,
      writable: !0
    });
  }
  getInputOutputCounts() {
    return {
      inputCount: this.tx.ins.length,
      outputCount: this.tx.outs.length
    };
  }
  addInput(t) {
    if (t.hash === void 0 || t.index === void 0 || !(t.hash instanceof Uint8Array) && typeof t.hash != "string" || typeof t.index != "number")
      throw new Error("Error adding input.");
    const r = typeof t.hash == "string" ? nd(Nn(t.hash)) : t.hash;
    this.tx.addInput(r, t.index, t.sequence);
  }
  addOutput(t) {
    if (t.script === void 0 || t.value === void 0 || !(t.script instanceof Uint8Array) || typeof t.value != "bigint")
      throw new Error("Error adding output.");
    this.tx.addOutput(t.script, t.value);
  }
  toBuffer() {
    return this.tx.toBuffer();
  }
}
function UE(e, t, r) {
  switch (r) {
    case "pubkey":
    case "pubkeyhash":
    case "witnesspubkeyhash":
      return cp(1, e.partialSig);
    case "multisig":
      const n = Fc({ output: t });
      return cp(n.m, e.partialSig, n.pubkeys);
    default:
      return !1;
  }
}
function nl(e) {
  if (e.__UNSAFE_SIGN_NONSEGWIT !== !1)
    throw new Error("Not BIP174 compliant, can not export");
}
function cp(e, t, r) {
  if (!t) return !1;
  let n;
  if (r ? n = r.map((o) => {
    const i = XE(o);
    return t.find(
      (s) => J(s.pubkey, i) === 0
    );
  }).filter((o) => !!o) : n = t, n.length > e) throw new Error("Too many signatures");
  return n.length === e;
}
function Bg(e) {
  return !!e.finalScriptSig || !!e.finalScriptWitness;
}
function up(e) {
  return (t) => !(J(e.fingerprint, t.masterFingerprint) || J(e.derivePath(t.path).publicKey, t.pubkey));
}
function Ia(e) {
  if (typeof e != "number" || e !== Math.floor(e) || e > 4294967295 || e < 0)
    throw new Error("Invalid 32 bit integer");
}
function CE(e, t, r) {
  const n = t.__FEE_RATE || e.getFeeRate(), o = t.__EXTRACTED_TX.virtualSize(), i = n * o;
  if (n >= r.maximumFeeRate)
    throw new Error(
      `Warning: You are paying around ${(i / 1e8).toFixed(8)} in fees, which is ${n} satoshi per byte for a transaction with a VSize of ${o} bytes (segwit counted as 0.25 byte per byte). Use setMaximumFeeRate method to raise your threshold, or pass true to the first arg of extractTransaction.`
    );
}
function cs(e, t) {
  e.forEach((r) => {
    if (Or(r) ? vE(r, t) : pE(r, t))
      throw new Error("Can not modify transaction, signatures exist.");
  });
}
function HE(e) {
  if (!e.sighashType || !e.partialSig) return;
  const { partialSig: t, sighashType: r } = e;
  t.forEach((n) => {
    const { hashType: o } = ys.decode(n.signature);
    if (r !== o)
      throw new Error("Signature sighash does not match input sighash type");
  });
}
function $g(e, t, r) {
  if (!Wc(e, t))
    throw new Error(
      `Can not ${r} for this input with the key ${me(e)}`
    );
}
function RE(e) {
  if (!e.ins.every(
    (r) => r.script && r.script.length === 0 && r.witness && r.witness.length === 0
  ))
    throw new Error("Format Error: Transaction ScriptSigs are not empty");
}
function LE(e, t) {
  e.ins.forEach((r) => {
    Ng(t, r);
  });
}
function Ng(e, t) {
  const r = me(nd(Uint8Array.from(t.hash))) + ":" + t.index;
  if (e.__TX_IN_CACHE[r]) throw new Error("Duplicate input detected.");
  e.__TX_IN_CACHE[r] = 1;
}
function Ug(e, t) {
  return (r, n, o, i) => {
    const s = e({
      redeem: { output: o }
    }).output;
    if (J(n, s))
      throw new Error(
        `${t} for ${i} #${r} doesn't match the scriptPubKey in the prevout`
      );
  };
}
const lp = Ug(Zi, "Redeem script"), fp = Ug(
  Ys,
  "Witness script"
);
function dp(e, t, r, n) {
  if (!r.every(Bg))
    throw new Error(`PSBT must be finalized to calculate ${t}`);
  if (e === "__FEE_RATE" && n.__FEE_RATE) return n.__FEE_RATE;
  if (e === "__FEE" && n.__FEE) return n.__FEE;
  let o, i = !0;
  if (n.__EXTRACTED_TX ? (o = n.__EXTRACTED_TX, i = !1) : o = n.__TX.clone(), zg(r, o, n, i), e === "__FEE_RATE") return n.__FEE_RATE;
  if (e === "__FEE") return n.__FEE;
}
function zE(e, t, r, n, o, i) {
  const s = Dg(r);
  if (!UE(t, r, s))
    throw new Error(`Can not finalize input #${e}`);
  return jE(
    r,
    s,
    t.partialSig,
    n,
    o,
    i
  );
}
function jE(e, t, r, n, o, i) {
  let s, a;
  const c = DE(e, t, r), u = i ? Ys({ redeem: c }) : null, f = o ? Zi({ redeem: u || c }) : null;
  return n ? (u ? a = sc(u.witness) : a = sc(c.witness), f && (s = f.input)) : f ? s = f.input : s = c.input, {
    finalScriptSig: s,
    finalScriptWitness: a
  };
}
function hp(e, t, r, n, o) {
  const i = Rt(e, t), { hash: s, sighashType: a, script: c } = Cg(
    t,
    i,
    n,
    !1,
    o
  );
  return $g(r, c, "sign"), {
    hash: s,
    sighashType: a
  };
}
function Cg(e, t, r, n, o) {
  const i = r.__TX, s = t.sighashType || nt.SIGHASH_ALL;
  Rg(s, o);
  let a, c;
  if (t.nonWitnessUtxo) {
    const l = Gc(
      r,
      t,
      e
    ), h = i.ins[e].hash, m = l.getHash();
    if (J(h, m) !== 0)
      throw new Error(
        `Non-witness UTXO hash for input #${e} doesn't match the hash specified in the prevout`
      );
    const b = i.ins[e].index;
    c = l.outs[b];
  } else if (t.witnessUtxo)
    c = t.witnessUtxo;
  else
    throw new Error("Need a Utxo input item for signing");
  const { meaningfulScript: u, type: f } = Zc(
    c.script,
    e,
    "input",
    t.redeemScript,
    t.witnessScript
  );
  if (["p2sh-p2wsh", "p2wsh"].indexOf(f) >= 0)
    a = i.hashForWitnessV0(
      e,
      u,
      c.value,
      s
    );
  else if (Vc(u)) {
    const l = Zs({
      hash: u.slice(2)
    }).output;
    a = i.hashForWitnessV0(
      e,
      l,
      c.value,
      s
    );
  } else {
    if (t.nonWitnessUtxo === void 0 && r.__UNSAFE_SIGN_NONSEGWIT === !1)
      throw new Error(
        `Input #${e} has witnessUtxo but non-segwit script: ${me(u)}`
      );
    !n && r.__UNSAFE_SIGN_NONSEGWIT !== !1 && console.warn(
      `Warning: Signing non-segwit inputs without the full parent transaction means there is a chance that a miner could feed you incorrect information to trick you into paying large fees. This behavior is the same as Psbt's predecessor (TransactionBuilder - now removed) when signing non-segwit scripts. You are not able to export this Psbt with toBuffer|toBase64|toHex since it is not BIP174 compliant.
*********************
PROCEED WITH CAUTION!
*********************`
    ), a = i.hashForSignature(
      e,
      u,
      s
    );
  }
  return {
    script: u,
    sighashType: s,
    hash: a
  };
}
function ME(e, t, r, n) {
  const o = [];
  if (t.tapInternalKey) {
    const s = Hg(e, t, n);
    s && o.push(s);
  }
  if (t.tapScriptSig) {
    const s = t.tapScriptSig.map((a) => a.pubkey);
    o.push(...s);
  }
  return o.map(
    (s) => Yl(e, t, r, s, n)
  ).flat();
}
function Hg(e, t, r) {
  const { script: n } = ld(e, t, r);
  return Tg(n) ? n.subarray(2, 34) : null;
}
function pp(e) {
  return e.length === 64 ? e : e.subarray(0, 64);
}
function Yl(e, t, r, n, o, i, s) {
  const a = o.__TX, c = t.sighashType || nt.SIGHASH_DEFAULT;
  Rg(c, s);
  const u = r.map(
    (b, y) => ld(y, b, o)
  ), f = u.map((b) => b.script), l = u.map((b) => b.value), h = [];
  if (t.tapInternalKey && !i) {
    const b = Hg(e, t, o) || Uint8Array.from([]);
    if (J(vs(n), b) === 0) {
      const y = a.hashForWitnessV1(
        e,
        f,
        l,
        c
      );
      h.push({ pubkey: n, hash: y });
    }
  }
  const m = (t.tapLeafScript || []).filter((b) => Wc(n, b.script)).map((b) => {
    const y = Sn({
      output: b.script,
      version: b.leafVersion
    });
    return Object.assign({ hash: y }, b);
  }).filter(
    (b) => !i || J(i, b.hash) === 0
  ).map((b) => {
    const y = a.hashForWitnessV1(
      e,
      f,
      l,
      c,
      b.hash
    );
    return {
      pubkey: n,
      hash: y,
      leafHash: b.hash
    };
  });
  return h.concat(m);
}
function Rg(e, t) {
  if (t && t.indexOf(e) < 0) {
    const r = qE(e);
    throw new Error(
      `Sighash type is not allowed. Retry the sign method passing the sighashTypes array of whitelisted types. Sighash type: ${r}`
    );
  }
}
function DE(e, t, r) {
  let n;
  switch (t) {
    case "multisig":
      const o = KE(e, r);
      n = Fc({
        output: e,
        signatures: o
      });
      break;
    case "pubkey":
      n = J0({
        output: e,
        signature: r[0].signature
      });
      break;
    case "pubkeyhash":
      n = Zs({
        output: e,
        pubkey: r[0].pubkey,
        signature: r[0].signature
      });
      break;
    case "witnesspubkeyhash":
      n = Xs({
        output: e,
        pubkey: r[0].pubkey,
        signature: r[0].signature
      });
      break;
  }
  return n;
}
function FE(e, t, r) {
  const n = r.__TX, o = {
    script: null,
    isSegwit: !1,
    isP2SH: !1,
    isP2WSH: !1
  };
  if (o.isP2SH = !!t.redeemScript, o.isP2WSH = !!t.witnessScript, t.witnessScript)
    o.script = t.witnessScript;
  else if (t.redeemScript)
    o.script = t.redeemScript;
  else if (t.nonWitnessUtxo) {
    const i = Gc(
      r,
      t,
      e
    ), s = n.ins[e].index;
    o.script = i.outs[s].script;
  } else t.witnessUtxo && (o.script = t.witnessUtxo.script);
  return (t.witnessScript || Vc(o.script)) && (o.isSegwit = !0), o;
}
function gp(e, t, r) {
  const n = Rt(t, e);
  if (!n.bip32Derivation || n.bip32Derivation.length === 0)
    throw new Error("Need bip32Derivation to sign with HD");
  const o = n.bip32Derivation.map((s) => {
    if (J(s.masterFingerprint, r.fingerprint) === 0)
      return s;
  }).filter((s) => !!s);
  if (o.length === 0)
    throw new Error(
      "Need one bip32Derivation masterFingerprint to match the HDSigner fingerprint"
    );
  return o.map((s) => {
    const a = r.derivePath(s.path);
    if (J(s.pubkey, a.publicKey) !== 0)
      throw new Error("pubkey did not match bip32Derivation");
    return a;
  });
}
function KE(e, t) {
  return Fc({ output: e }).pubkeys.map((n) => (t.filter((o) => J(o.pubkey, n) === 0)[0] || {}).signature).filter((n) => !!n);
}
function Lg(e) {
  let t = 0;
  function r(s) {
    return t += s, e.slice(t - s, t);
  }
  function n() {
    const s = Xi(e, t);
    return t += _r(s.bigintValue), s.numberValue;
  }
  function o() {
    return r(n());
  }
  function i() {
    const s = n(), a = [];
    for (let c = 0; c < s; c++) a.push(o());
    return a;
  }
  return i();
}
function qE(e) {
  let t = e & nt.SIGHASH_ANYONECANPAY ? "SIGHASH_ANYONECANPAY | " : "";
  switch (e & 31) {
    case nt.SIGHASH_ALL:
      t += "SIGHASH_ALL";
      break;
    case nt.SIGHASH_SINGLE:
      t += "SIGHASH_SINGLE";
      break;
    case nt.SIGHASH_NONE:
      t += "SIGHASH_NONE";
      break;
  }
  return t;
}
function Jl(e, t, r) {
  e.__NON_WITNESS_UTXO_BUF_CACHE[r] = t.nonWitnessUtxo;
  const n = nt.fromBuffer(t.nonWitnessUtxo);
  e.__NON_WITNESS_UTXO_TX_CACHE[r] = n;
  const o = e, i = r;
  delete t.nonWitnessUtxo, Object.defineProperty(t, "nonWitnessUtxo", {
    enumerable: !0,
    get() {
      const s = o.__NON_WITNESS_UTXO_BUF_CACHE[i], a = o.__NON_WITNESS_UTXO_TX_CACHE[i];
      if (s !== void 0)
        return s;
      {
        const c = a.toBuffer();
        return o.__NON_WITNESS_UTXO_BUF_CACHE[i] = c, c;
      }
    },
    set(s) {
      o.__NON_WITNESS_UTXO_BUF_CACHE[i] = s;
    }
  });
}
function zg(e, t, r, n) {
  let o = 0n;
  e.forEach((c, u) => {
    if (n && c.finalScriptSig && (t.ins[u].script = c.finalScriptSig), n && c.finalScriptWitness && (t.ins[u].witness = Lg(
      c.finalScriptWitness
    )), c.witnessUtxo)
      o += c.witnessUtxo.value;
    else if (c.nonWitnessUtxo) {
      const f = Gc(r, c, u), l = t.ins[u].index, h = f.outs[l];
      o += h.value;
    }
  });
  const i = t.outs.reduce((c, u) => c + u.value, 0n), s = o - i;
  if (s < 0)
    throw new Error("Outputs are spending more than Inputs");
  const a = t.virtualSize();
  r.__FEE = s, r.__EXTRACTED_TX = t, r.__FEE_RATE = Math.floor(Number(s / BigInt(a)));
}
function Gc(e, t, r) {
  const n = e.__NON_WITNESS_UTXO_TX_CACHE;
  return n[r] || Jl(e, t, r), n[r];
}
function jg(e, t, r) {
  const { script: n } = ld(e, t, r);
  return n;
}
function ld(e, t, r) {
  if (t.witnessUtxo !== void 0)
    return {
      script: t.witnessUtxo.script,
      value: t.witnessUtxo.value
    };
  if (t.nonWitnessUtxo !== void 0) {
    const o = Gc(
      r,
      t,
      e
    ).outs[r.__TX.ins[e].index];
    return { script: o.script, value: o.value };
  } else
    throw new Error("Can't find pubkey in input without Utxo data");
}
function VE(e, t, r, n) {
  const o = jg(r, t, n), { meaningfulScript: i } = Zc(
    o,
    r,
    "input",
    t.redeemScript,
    t.witnessScript
  );
  return Wc(e, i);
}
function WE(e, t, r, n) {
  const o = n.__TX.outs[r].script, { meaningfulScript: i } = Zc(
    o,
    r,
    "output",
    t.redeemScript,
    t.witnessScript
  );
  return Wc(e, i);
}
function GE(e) {
  if (!e) return;
  const t = ot(e);
  if (!t) return;
  const r = t[t.length - 1];
  if (!(!(r instanceof Uint8Array) || Mg(r) || YE(r) || !ot(r)))
    return r;
}
function ZE(e) {
  if (!e) return;
  const t = Lg(e), r = t[t.length - 1];
  if (!(Mg(r) || !ot(r)))
    return r;
}
function XE(e) {
  if (e.length === 65) {
    const t = e[64] & 1, r = e.slice(0, 33);
    return r[0] = 2 | t, r;
  }
  return e.slice();
}
function Mg(e) {
  return e.length === 33 && k1(e);
}
function YE(e) {
  return Pn(e);
}
function Zc(e, t, r, n, o) {
  const i = Ag(e), s = i && n && op(n), a = op(e);
  if (i && n === void 0)
    throw new Error("scriptPubkey is P2SH but redeemScript missing");
  if ((a || s) && o === void 0)
    throw new Error(
      "scriptPubkey or redeemScript is P2WSH but witnessScript missing"
    );
  let c;
  return s ? (c = o, lp(t, e, n, r), fp(t, n, o, r), ac(c)) : a ? (c = o, fp(t, e, o, r), ac(c)) : i ? (c = n, lp(t, e, n, r)) : c = e, {
    meaningfulScript: c,
    type: s ? "p2sh-p2wsh" : i ? "p2sh" : a ? "p2wsh" : "raw"
  };
}
function ac(e) {
  if (Vc(e) || Ag(e))
    throw new Error("P2WPKH or P2SH can not be contained within P2WSH");
}
function Dg(e) {
  return Vc(e) ? "witnesspubkeyhash" : hE(e) ? "pubkeyhash" : fE(e) ? "multisig" : dE(e) ? "pubkey" : "nonstandard";
}
function us(e) {
  return [...Array(e).keys()];
}
let Fg = class extends Q0 {
  constructor(t, r) {
    super(), this.finished = !1, this.destroyed = !1, T1(t);
    const n = Yf(r);
    if (this.iHash = t.create(), typeof this.iHash.update != "function")
      throw new Error("Expected instance of class which extends utils.Hash");
    this.blockLen = this.iHash.blockLen, this.outputLen = this.iHash.outputLen;
    const o = this.blockLen, i = new Uint8Array(o);
    i.set(n.length > o ? t.create().update(n).digest() : n);
    for (let s = 0; s < i.length; s++)
      i[s] ^= 54;
    this.iHash.update(i), this.oHash = t.create();
    for (let s = 0; s < i.length; s++)
      i[s] ^= 106;
    this.oHash.update(i), i.fill(0);
  }
  update(t) {
    return rc(this), this.iHash.update(t), this;
  }
  digestInto(t) {
    rc(this), Kc(t, this.outputLen), this.finished = !0, this.iHash.digestInto(t), this.oHash.update(t), this.oHash.digestInto(t), this.destroy();
  }
  digest() {
    const t = new Uint8Array(this.oHash.outputLen);
    return this.digestInto(t), t;
  }
  _cloneInto(t) {
    t || (t = Object.create(Object.getPrototypeOf(this), {}));
    const { oHash: r, iHash: n, finished: o, destroyed: i, blockLen: s, outputLen: a } = this;
    return t = t, t.finished = o, t.destroyed = i, t.blockLen = s, t.outputLen = a, t.oHash = r._cloneInto(t.oHash), t.iHash = n._cloneInto(t.iHash), t;
  }
  destroy() {
    this.destroyed = !0, this.oHash.destroy(), this.iHash.destroy();
  }
};
const fd = (e, t, r) => new Fg(e, t).update(r).digest();
fd.create = (e, t) => new Fg(e, t);
/*! noble-curves - MIT License (c) 2022 Paul Miller (paulmillr.com) */
const dd = /* @__PURE__ */ BigInt(0), Xc = /* @__PURE__ */ BigInt(1), JE = /* @__PURE__ */ BigInt(2);
function Vo(e) {
  return e instanceof Uint8Array || e != null && typeof e == "object" && e.constructor.name === "Uint8Array";
}
function ea(e) {
  if (!Vo(e))
    throw new Error("Uint8Array expected");
}
function Ni(e, t) {
  if (typeof t != "boolean")
    throw new Error(`${e} must be valid boolean, got "${t}".`);
}
const QE = /* @__PURE__ */ Array.from({ length: 256 }, (e, t) => t.toString(16).padStart(2, "0"));
function Ui(e) {
  ea(e);
  let t = "";
  for (let r = 0; r < e.length; r++)
    t += QE[e[r]];
  return t;
}
function Si(e) {
  const t = e.toString(16);
  return t.length & 1 ? `0${t}` : t;
}
function hd(e) {
  if (typeof e != "string")
    throw new Error("hex string expected, got " + typeof e);
  return BigInt(e === "" ? "0" : `0x${e}`);
}
const gn = { _0: 48, _9: 57, _A: 65, _F: 70, _a: 97, _f: 102 };
function mp(e) {
  if (e >= gn._0 && e <= gn._9)
    return e - gn._0;
  if (e >= gn._A && e <= gn._F)
    return e - (gn._A - 10);
  if (e >= gn._a && e <= gn._f)
    return e - (gn._a - 10);
}
function Ci(e) {
  if (typeof e != "string")
    throw new Error("hex string expected, got " + typeof e);
  const t = e.length, r = t / 2;
  if (t % 2)
    throw new Error("padded hex string expected, got unpadded hex of length " + t);
  const n = new Uint8Array(r);
  for (let o = 0, i = 0; o < r; o++, i += 2) {
    const s = mp(e.charCodeAt(i)), a = mp(e.charCodeAt(i + 1));
    if (s === void 0 || a === void 0) {
      const c = e[i] + e[i + 1];
      throw new Error('hex string expected, got non-hex character "' + c + '" at index ' + i);
    }
    n[o] = s * 16 + a;
  }
  return n;
}
function Mo(e) {
  return hd(Ui(e));
}
function pd(e) {
  return ea(e), hd(Ui(Uint8Array.from(e).reverse()));
}
function Hi(e, t) {
  return Ci(e.toString(16).padStart(t * 2, "0"));
}
function gd(e, t) {
  return Hi(e, t).reverse();
}
function e_(e) {
  return Ci(Si(e));
}
function Pr(e, t, r) {
  let n;
  if (typeof t == "string")
    try {
      n = Ci(t);
    } catch (i) {
      throw new Error(`${e} must be valid hex string, got "${t}". Cause: ${i}`);
    }
  else if (Vo(t))
    n = Uint8Array.from(t);
  else
    throw new Error(`${e} must be hex string or Uint8Array`);
  const o = n.length;
  if (typeof r == "number" && o !== r)
    throw new Error(`${e} expected ${r} bytes, got ${o}`);
  return n;
}
function Ps(...e) {
  let t = 0;
  for (let n = 0; n < e.length; n++) {
    const o = e[n];
    ea(o), t += o.length;
  }
  const r = new Uint8Array(t);
  for (let n = 0, o = 0; n < e.length; n++) {
    const i = e[n];
    r.set(i, o), o += i.length;
  }
  return r;
}
function t_(e, t) {
  if (e.length !== t.length)
    return !1;
  let r = 0;
  for (let n = 0; n < e.length; n++)
    r |= e[n] ^ t[n];
  return r === 0;
}
function r_(e) {
  if (typeof e != "string")
    throw new Error(`utf8ToBytes expected string, got ${typeof e}`);
  return new Uint8Array(new TextEncoder().encode(e));
}
const ol = (e) => typeof e == "bigint" && dd <= e;
function Yc(e, t, r) {
  return ol(e) && ol(t) && ol(r) && t <= e && e < r;
}
function Do(e, t, r, n) {
  if (!Yc(t, r, n))
    throw new Error(`expected valid ${e}: ${r} <= n < ${n}, got ${typeof t} ${t}`);
}
function Kg(e) {
  let t;
  for (t = 0; e > dd; e >>= Xc, t += 1)
    ;
  return t;
}
function n_(e, t) {
  return e >> BigInt(t) & Xc;
}
function o_(e, t, r) {
  return e | (r ? Xc : dd) << BigInt(t);
}
const md = (e) => (JE << BigInt(e - 1)) - Xc, il = (e) => new Uint8Array(e), bp = (e) => Uint8Array.from(e);
function qg(e, t, r) {
  if (typeof e != "number" || e < 2)
    throw new Error("hashLen must be a number");
  if (typeof t != "number" || t < 2)
    throw new Error("qByteLen must be a number");
  if (typeof r != "function")
    throw new Error("hmacFn must be a function");
  let n = il(e), o = il(e), i = 0;
  const s = () => {
    n.fill(1), o.fill(0), i = 0;
  }, a = (...l) => r(o, n, ...l), c = (l = il()) => {
    o = a(bp([0]), l), n = a(), l.length !== 0 && (o = a(bp([1]), l), n = a());
  }, u = () => {
    if (i++ >= 1e3)
      throw new Error("drbg: tried 1000 values");
    let l = 0;
    const h = [];
    for (; l < t; ) {
      n = a();
      const m = n.slice();
      h.push(m), l += n.length;
    }
    return Ps(...h);
  };
  return (l, h) => {
    s(), c(l);
    let m;
    for (; !(m = h(u())); )
      c();
    return s(), m;
  };
}
const i_ = {
  bigint: (e) => typeof e == "bigint",
  function: (e) => typeof e == "function",
  boolean: (e) => typeof e == "boolean",
  string: (e) => typeof e == "string",
  stringOrUint8Array: (e) => typeof e == "string" || Vo(e),
  isSafeInteger: (e) => Number.isSafeInteger(e),
  array: (e) => Array.isArray(e),
  field: (e, t) => t.Fp.isValid(e),
  hash: (e) => typeof e == "function" && Number.isSafeInteger(e.outputLen)
};
function ta(e, t, r = {}) {
  const n = (o, i, s) => {
    const a = i_[i];
    if (typeof a != "function")
      throw new Error(`Invalid validator "${i}", expected function`);
    const c = e[o];
    if (!(s && c === void 0) && !a(c, e))
      throw new Error(`Invalid param ${String(o)}=${c} (${typeof c}), expected ${i}`);
  };
  for (const [o, i] of Object.entries(t))
    n(o, i, !1);
  for (const [o, i] of Object.entries(r))
    n(o, i, !0);
  return e;
}
const s_ = () => {
  throw new Error("not implemented");
};
function Ql(e) {
  const t = /* @__PURE__ */ new WeakMap();
  return (r, ...n) => {
    const o = t.get(r);
    if (o !== void 0)
      return o;
    const i = e(r, ...n);
    return t.set(r, i), i;
  };
}
const a_ = /* @__PURE__ */ Object.freeze(/* @__PURE__ */ Object.defineProperty({
  __proto__: null,
  aInRange: Do,
  abool: Ni,
  abytes: ea,
  bitGet: n_,
  bitLen: Kg,
  bitMask: md,
  bitSet: o_,
  bytesToHex: Ui,
  bytesToNumberBE: Mo,
  bytesToNumberLE: pd,
  concatBytes: Ps,
  createHmacDrbg: qg,
  ensureBytes: Pr,
  equalBytes: t_,
  hexToBytes: Ci,
  hexToNumber: hd,
  inRange: Yc,
  isBytes: Vo,
  memoized: Ql,
  notImplemented: s_,
  numberToBytesBE: Hi,
  numberToBytesLE: gd,
  numberToHexUnpadded: Si,
  numberToVarBytesBE: e_,
  utf8ToBytes: r_,
  validateObject: ta
}, Symbol.toStringTag, { value: "Module" }));
/*! noble-curves - MIT License (c) 2022 Paul Miller (paulmillr.com) */
const Ot = BigInt(0), ht = BigInt(1), Co = BigInt(2), c_ = BigInt(3), ef = BigInt(4), yp = BigInt(5), wp = BigInt(8);
BigInt(9);
BigInt(16);
function Vt(e, t) {
  const r = e % t;
  return r >= Ot ? r : t + r;
}
function u_(e, t, r) {
  if (r <= Ot || t < Ot)
    throw new Error("Expected power/modulo > 0");
  if (r === ht)
    return Ot;
  let n = ht;
  for (; t > Ot; )
    t & ht && (n = n * e % r), e = e * e % r, t >>= ht;
  return n;
}
function yr(e, t, r) {
  let n = e;
  for (; t-- > Ot; )
    n *= n, n %= r;
  return n;
}
function tf(e, t) {
  if (e === Ot || t <= Ot)
    throw new Error(`invert: expected positive integers, got n=${e} mod=${t}`);
  let r = Vt(e, t), n = t, o = Ot, i = ht;
  for (; r !== Ot; ) {
    const a = n / r, c = n % r, u = o - i * a;
    n = r, r = c, o = i, i = u;
  }
  if (n !== ht)
    throw new Error("invert: does not exist");
  return Vt(o, t);
}
function l_(e) {
  const t = (e - ht) / Co;
  let r, n, o;
  for (r = e - ht, n = 0; r % Co === Ot; r /= Co, n++)
    ;
  for (o = Co; o < e && u_(o, t, e) !== e - ht; o++)
    ;
  if (n === 1) {
    const s = (e + ht) / ef;
    return function(c, u) {
      const f = c.pow(u, s);
      if (!c.eql(c.sqr(f), u))
        throw new Error("Cannot find square root");
      return f;
    };
  }
  const i = (r + ht) / Co;
  return function(a, c) {
    if (a.pow(c, t) === a.neg(a.ONE))
      throw new Error("Cannot find square root");
    let u = n, f = a.pow(a.mul(a.ONE, o), r), l = a.pow(c, i), h = a.pow(c, r);
    for (; !a.eql(h, a.ONE); ) {
      if (a.eql(h, a.ZERO))
        return a.ZERO;
      let m = 1;
      for (let y = a.sqr(h); m < u && !a.eql(y, a.ONE); m++)
        y = a.sqr(y);
      const b = a.pow(f, ht << BigInt(u - m - 1));
      f = a.sqr(b), l = a.mul(l, b), h = a.mul(h, f), u = m;
    }
    return l;
  };
}
function f_(e) {
  if (e % ef === c_) {
    const t = (e + ht) / ef;
    return function(n, o) {
      const i = n.pow(o, t);
      if (!n.eql(n.sqr(i), o))
        throw new Error("Cannot find square root");
      return i;
    };
  }
  if (e % wp === yp) {
    const t = (e - yp) / wp;
    return function(n, o) {
      const i = n.mul(o, Co), s = n.pow(i, t), a = n.mul(o, s), c = n.mul(n.mul(a, Co), s), u = n.mul(a, n.sub(c, n.ONE));
      if (!n.eql(n.sqr(u), o))
        throw new Error("Cannot find square root");
      return u;
    };
  }
  return l_(e);
}
const d_ = [
  "create",
  "isValid",
  "is0",
  "neg",
  "inv",
  "sqrt",
  "sqr",
  "eql",
  "add",
  "sub",
  "mul",
  "pow",
  "div",
  "addN",
  "subN",
  "mulN",
  "sqrN"
];
function h_(e) {
  const t = {
    ORDER: "bigint",
    MASK: "bigint",
    BYTES: "isSafeInteger",
    BITS: "isSafeInteger"
  }, r = d_.reduce((n, o) => (n[o] = "function", n), t);
  return ta(e, r);
}
function p_(e, t, r) {
  if (r < Ot)
    throw new Error("Expected power > 0");
  if (r === Ot)
    return e.ONE;
  if (r === ht)
    return t;
  let n = e.ONE, o = t;
  for (; r > Ot; )
    r & ht && (n = e.mul(n, o)), o = e.sqr(o), r >>= ht;
  return n;
}
function g_(e, t) {
  const r = new Array(t.length), n = t.reduce((i, s, a) => e.is0(s) ? i : (r[a] = i, e.mul(i, s)), e.ONE), o = e.inv(n);
  return t.reduceRight((i, s, a) => e.is0(s) ? i : (r[a] = e.mul(i, r[a]), e.mul(i, s)), o), r;
}
function Vg(e, t) {
  const r = t !== void 0 ? t : e.toString(2).length, n = Math.ceil(r / 8);
  return { nBitLength: r, nByteLength: n };
}
function bd(e, t, r = !1, n = {}) {
  if (e <= Ot)
    throw new Error(`Expected Field ORDER > 0, got ${e}`);
  const { nBitLength: o, nByteLength: i } = Vg(e, t);
  if (i > 2048)
    throw new Error("Field lengths over 2048 bytes are not supported");
  const s = f_(e), a = Object.freeze({
    ORDER: e,
    BITS: o,
    BYTES: i,
    MASK: md(o),
    ZERO: Ot,
    ONE: ht,
    create: (c) => Vt(c, e),
    isValid: (c) => {
      if (typeof c != "bigint")
        throw new Error(`Invalid field element: expected bigint, got ${typeof c}`);
      return Ot <= c && c < e;
    },
    is0: (c) => c === Ot,
    isOdd: (c) => (c & ht) === ht,
    neg: (c) => Vt(-c, e),
    eql: (c, u) => c === u,
    sqr: (c) => Vt(c * c, e),
    add: (c, u) => Vt(c + u, e),
    sub: (c, u) => Vt(c - u, e),
    mul: (c, u) => Vt(c * u, e),
    pow: (c, u) => p_(a, c, u),
    div: (c, u) => Vt(c * tf(u, e), e),
    // Same as above, but doesn't normalize
    sqrN: (c) => c * c,
    addN: (c, u) => c + u,
    subN: (c, u) => c - u,
    mulN: (c, u) => c * u,
    inv: (c) => tf(c, e),
    sqrt: n.sqrt || ((c) => s(a, c)),
    invertBatch: (c) => g_(a, c),
    // TODO: do we really need constant cmov?
    // We don't have const-time bigints anyway, so probably will be not very useful
    cmov: (c, u, f) => f ? u : c,
    toBytes: (c) => r ? gd(c, i) : Hi(c, i),
    fromBytes: (c) => {
      if (c.length !== i)
        throw new Error(`Fp.fromBytes: expected ${i}, got ${c.length}`);
      return r ? pd(c) : Mo(c);
    }
  });
  return Object.freeze(a);
}
function Wg(e) {
  if (typeof e != "bigint")
    throw new Error("field order must be bigint");
  const t = e.toString(2).length;
  return Math.ceil(t / 8);
}
function Gg(e) {
  const t = Wg(e);
  return t + Math.ceil(t / 2);
}
function m_(e, t, r = !1) {
  const n = e.length, o = Wg(t), i = Gg(t);
  if (n < 16 || n < i || n > 1024)
    throw new Error(`expected ${i}-1024 bytes of input, got ${n}`);
  const s = r ? Mo(e) : pd(e), a = Vt(s, t - ht) + ht;
  return r ? gd(a, o) : Hi(a, o);
}
/*! noble-curves - MIT License (c) 2022 Paul Miller (paulmillr.com) */
const b_ = BigInt(0), sl = BigInt(1), al = /* @__PURE__ */ new WeakMap(), vp = /* @__PURE__ */ new WeakMap();
function y_(e, t) {
  const r = (i, s) => {
    const a = s.negate();
    return i ? a : s;
  }, n = (i) => {
    if (!Number.isSafeInteger(i) || i <= 0 || i > t)
      throw new Error(`Wrong window size=${i}, should be [1..${t}]`);
  }, o = (i) => {
    n(i);
    const s = Math.ceil(t / i) + 1, a = 2 ** (i - 1);
    return { windows: s, windowSize: a };
  };
  return {
    constTimeNegate: r,
    // non-const time multiplication ladder
    unsafeLadder(i, s) {
      let a = e.ZERO, c = i;
      for (; s > b_; )
        s & sl && (a = a.add(c)), c = c.double(), s >>= sl;
      return a;
    },
    /**
     * Creates a wNAF precomputation window. Used for caching.
     * Default window size is set by `utils.precompute()` and is equal to 8.
     * Number of precomputed points depends on the curve size:
     * 2^(𝑊−1) * (Math.ceil(𝑛 / 𝑊) + 1), where:
     * - 𝑊 is the window size
     * - 𝑛 is the bitlength of the curve order.
     * For a 256-bit curve and window size 8, the number of precomputed points is 128 * 33 = 4224.
     * @returns precomputed point tables flattened to a single array
     */
    precomputeWindow(i, s) {
      const { windows: a, windowSize: c } = o(s), u = [];
      let f = i, l = f;
      for (let h = 0; h < a; h++) {
        l = f, u.push(l);
        for (let m = 1; m < c; m++)
          l = l.add(f), u.push(l);
        f = l.double();
      }
      return u;
    },
    /**
     * Implements ec multiplication using precomputed tables and w-ary non-adjacent form.
     * @param W window size
     * @param precomputes precomputed tables
     * @param n scalar (we don't check here, but should be less than curve order)
     * @returns real and fake (for const-time) points
     */
    wNAF(i, s, a) {
      const { windows: c, windowSize: u } = o(i);
      let f = e.ZERO, l = e.BASE;
      const h = BigInt(2 ** i - 1), m = 2 ** i, b = BigInt(i);
      for (let y = 0; y < c; y++) {
        const g = y * u;
        let x = Number(a & h);
        a >>= b, x > u && (x -= m, a += sl);
        const S = g, v = g + Math.abs(x) - 1, T = y % 2 !== 0, I = x < 0;
        x === 0 ? l = l.add(r(T, s[S])) : f = f.add(r(I, s[v]));
      }
      return { p: f, f: l };
    },
    wNAFCached(i, s, a) {
      const c = vp.get(i) || 1;
      let u = al.get(i);
      return u || (u = this.precomputeWindow(i, c), c !== 1 && al.set(i, a(u))), this.wNAF(c, u, s);
    },
    // We calculate precomputes for elliptic curve point multiplication
    // using windowed method. This specifies window size and
    // stores precomputed values. Usually only base point would be precomputed.
    setWindowSize(i, s) {
      n(s), vp.set(i, s), al.delete(i);
    }
  };
}
function w_(e, t, r, n) {
  if (!Array.isArray(r) || !Array.isArray(n) || n.length !== r.length)
    throw new Error("arrays of points and scalars must have equal length");
  n.forEach((f, l) => {
    if (!t.isValid(f))
      throw new Error(`wrong scalar at index ${l}`);
  }), r.forEach((f, l) => {
    if (!(f instanceof e))
      throw new Error(`wrong point at index ${l}`);
  });
  const o = Kg(BigInt(r.length)), i = o > 12 ? o - 3 : o > 4 ? o - 2 : o ? 2 : 1, s = (1 << i) - 1, a = new Array(s + 1).fill(e.ZERO), c = Math.floor((t.BITS - 1) / i) * i;
  let u = e.ZERO;
  for (let f = c; f >= 0; f -= i) {
    a.fill(e.ZERO);
    for (let h = 0; h < n.length; h++) {
      const m = n[h], b = Number(m >> BigInt(f) & BigInt(s));
      a[b] = a[b].add(r[h]);
    }
    let l = e.ZERO;
    for (let h = a.length - 1, m = e.ZERO; h > 0; h--)
      m = m.add(a[h]), l = l.add(m);
    if (u = u.add(l), f !== 0)
      for (let h = 0; h < i; h++)
        u = u.double();
  }
  return u;
}
function Zg(e) {
  return h_(e.Fp), ta(e, {
    n: "bigint",
    h: "bigint",
    Gx: "field",
    Gy: "field"
  }, {
    nBitLength: "isSafeInteger",
    nByteLength: "isSafeInteger"
  }), Object.freeze({
    ...Vg(e.n, e.nBitLength),
    ...e,
    p: e.Fp.ORDER
  });
}
/*! noble-curves - MIT License (c) 2022 Paul Miller (paulmillr.com) */
function xp(e) {
  e.lowS !== void 0 && Ni("lowS", e.lowS), e.prehash !== void 0 && Ni("prehash", e.prehash);
}
function v_(e) {
  const t = Zg(e);
  ta(t, {
    a: "field",
    b: "field"
  }, {
    allowedPrivateKeyLengths: "array",
    wrapPrivateKey: "boolean",
    isTorsionFree: "function",
    clearCofactor: "function",
    allowInfinityPoint: "boolean",
    fromBytes: "function",
    toBytes: "function"
  });
  const { endo: r, Fp: n, a: o } = t;
  if (r) {
    if (!n.eql(o, n.ZERO))
      throw new Error("Endomorphism can only be defined for Koblitz curves that have a=0");
    if (typeof r != "object" || typeof r.beta != "bigint" || typeof r.splitScalar != "function")
      throw new Error("Expected endomorphism with beta: bigint and splitScalar: function");
  }
  return Object.freeze({ ...t });
}
const { bytesToNumberBE: x_, hexToBytes: E_ } = a_, En = {
  // asn.1 DER encoding utils
  Err: class extends Error {
    constructor(t = "") {
      super(t);
    }
  },
  // Basic building block is TLV (Tag-Length-Value)
  _tlv: {
    encode: (e, t) => {
      const { Err: r } = En;
      if (e < 0 || e > 256)
        throw new r("tlv.encode: wrong tag");
      if (t.length & 1)
        throw new r("tlv.encode: unpadded data");
      const n = t.length / 2, o = Si(n);
      if (o.length / 2 & 128)
        throw new r("tlv.encode: long form length too big");
      const i = n > 127 ? Si(o.length / 2 | 128) : "";
      return `${Si(e)}${i}${o}${t}`;
    },
    // v - value, l - left bytes (unparsed)
    decode(e, t) {
      const { Err: r } = En;
      let n = 0;
      if (e < 0 || e > 256)
        throw new r("tlv.encode: wrong tag");
      if (t.length < 2 || t[n++] !== e)
        throw new r("tlv.decode: wrong tlv");
      const o = t[n++], i = !!(o & 128);
      let s = 0;
      if (!i)
        s = o;
      else {
        const c = o & 127;
        if (!c)
          throw new r("tlv.decode(long): indefinite length not supported");
        if (c > 4)
          throw new r("tlv.decode(long): byte length is too big");
        const u = t.subarray(n, n + c);
        if (u.length !== c)
          throw new r("tlv.decode: length bytes not complete");
        if (u[0] === 0)
          throw new r("tlv.decode(long): zero leftmost byte");
        for (const f of u)
          s = s << 8 | f;
        if (n += c, s < 128)
          throw new r("tlv.decode(long): not minimal encoding");
      }
      const a = t.subarray(n, n + s);
      if (a.length !== s)
        throw new r("tlv.decode: wrong value length");
      return { v: a, l: t.subarray(n + s) };
    }
  },
  // https://crypto.stackexchange.com/a/57734 Leftmost bit of first byte is 'negative' flag,
  // since we always use positive integers here. It must always be empty:
  // - add zero byte if exists
  // - if next byte doesn't have a flag, leading zero is not allowed (minimal encoding)
  _int: {
    encode(e) {
      const { Err: t } = En;
      if (e < _n)
        throw new t("integer: negative integers are not allowed");
      let r = Si(e);
      if (Number.parseInt(r[0], 16) & 8 && (r = "00" + r), r.length & 1)
        throw new t("unexpected assertion");
      return r;
    },
    decode(e) {
      const { Err: t } = En;
      if (e[0] & 128)
        throw new t("Invalid signature integer: negative");
      if (e[0] === 0 && !(e[1] & 128))
        throw new t("Invalid signature integer: unnecessary leading zero");
      return x_(e);
    }
  },
  toSig(e) {
    const { Err: t, _int: r, _tlv: n } = En, o = typeof e == "string" ? E_(e) : e;
    ea(o);
    const { v: i, l: s } = n.decode(48, o);
    if (s.length)
      throw new t("Invalid signature: left bytes after parsing");
    const { v: a, l: c } = n.decode(2, i), { v: u, l: f } = n.decode(2, c);
    if (f.length)
      throw new t("Invalid signature: left bytes after parsing");
    return { r: r.decode(a), s: r.decode(u) };
  },
  hexFromSig(e) {
    const { _tlv: t, _int: r } = En, n = `${t.encode(2, r.encode(e.r))}${t.encode(2, r.encode(e.s))}`;
    return t.encode(48, n);
  }
}, _n = BigInt(0), Tt = BigInt(1);
BigInt(2);
const Ep = BigInt(3);
BigInt(4);
function __(e) {
  const t = v_(e), { Fp: r } = t, n = bd(t.n, t.nBitLength), o = t.toBytes || ((y, g, x) => {
    const S = g.toAffine();
    return Ps(Uint8Array.from([4]), r.toBytes(S.x), r.toBytes(S.y));
  }), i = t.fromBytes || ((y) => {
    const g = y.subarray(1), x = r.fromBytes(g.subarray(0, r.BYTES)), S = r.fromBytes(g.subarray(r.BYTES, 2 * r.BYTES));
    return { x, y: S };
  });
  function s(y) {
    const { a: g, b: x } = t, S = r.sqr(y), v = r.mul(S, y);
    return r.add(r.add(v, r.mul(y, g)), x);
  }
  if (!r.eql(r.sqr(t.Gy), s(t.Gx)))
    throw new Error("bad generator point: equation left != right");
  function a(y) {
    return Yc(y, Tt, t.n);
  }
  function c(y) {
    const { allowedPrivateKeyLengths: g, nByteLength: x, wrapPrivateKey: S, n: v } = t;
    if (g && typeof y != "bigint") {
      if (Vo(y) && (y = Ui(y)), typeof y != "string" || !g.includes(y.length))
        throw new Error("Invalid key");
      y = y.padStart(x * 2, "0");
    }
    let T;
    try {
      T = typeof y == "bigint" ? y : Mo(Pr("private key", y, x));
    } catch {
      throw new Error(`private key must be ${x} bytes, hex or bigint, not ${typeof y}`);
    }
    return S && (T = Vt(T, v)), Do("private key", T, Tt, v), T;
  }
  function u(y) {
    if (!(y instanceof h))
      throw new Error("ProjectivePoint expected");
  }
  const f = Ql((y, g) => {
    const { px: x, py: S, pz: v } = y;
    if (r.eql(v, r.ONE))
      return { x, y: S };
    const T = y.is0();
    g == null && (g = T ? r.ONE : r.inv(v));
    const I = r.mul(x, g), P = r.mul(S, g), H = r.mul(v, g);
    if (T)
      return { x: r.ZERO, y: r.ZERO };
    if (!r.eql(H, r.ONE))
      throw new Error("invZ was invalid");
    return { x: I, y: P };
  }), l = Ql((y) => {
    if (y.is0()) {
      if (t.allowInfinityPoint && !r.is0(y.py))
        return;
      throw new Error("bad point: ZERO");
    }
    const { x: g, y: x } = y.toAffine();
    if (!r.isValid(g) || !r.isValid(x))
      throw new Error("bad point: x or y not FE");
    const S = r.sqr(x), v = s(g);
    if (!r.eql(S, v))
      throw new Error("bad point: equation left != right");
    if (!y.isTorsionFree())
      throw new Error("bad point: not in prime-order subgroup");
    return !0;
  });
  class h {
    constructor(g, x, S) {
      if (this.px = g, this.py = x, this.pz = S, g == null || !r.isValid(g))
        throw new Error("x required");
      if (x == null || !r.isValid(x))
        throw new Error("y required");
      if (S == null || !r.isValid(S))
        throw new Error("z required");
      Object.freeze(this);
    }
    // Does not validate if the point is on-curve.
    // Use fromHex instead, or call assertValidity() later.
    static fromAffine(g) {
      const { x, y: S } = g || {};
      if (!g || !r.isValid(x) || !r.isValid(S))
        throw new Error("invalid affine point");
      if (g instanceof h)
        throw new Error("projective point not allowed");
      const v = (T) => r.eql(T, r.ZERO);
      return v(x) && v(S) ? h.ZERO : new h(x, S, r.ONE);
    }
    get x() {
      return this.toAffine().x;
    }
    get y() {
      return this.toAffine().y;
    }
    /**
     * Takes a bunch of Projective Points but executes only one
     * inversion on all of them. Inversion is very slow operation,
     * so this improves performance massively.
     * Optimization: converts a list of projective points to a list of identical points with Z=1.
     */
    static normalizeZ(g) {
      const x = r.invertBatch(g.map((S) => S.pz));
      return g.map((S, v) => S.toAffine(x[v])).map(h.fromAffine);
    }
    /**
     * Converts hash string or Uint8Array to Point.
     * @param hex short/long ECDSA hex
     */
    static fromHex(g) {
      const x = h.fromAffine(i(Pr("pointHex", g)));
      return x.assertValidity(), x;
    }
    // Multiplies generator point by privateKey.
    static fromPrivateKey(g) {
      return h.BASE.multiply(c(g));
    }
    // Multiscalar Multiplication
    static msm(g, x) {
      return w_(h, n, g, x);
    }
    // "Private method", don't use it directly
    _setWindowSize(g) {
      b.setWindowSize(this, g);
    }
    // A point on curve is valid if it conforms to equation.
    assertValidity() {
      l(this);
    }
    hasEvenY() {
      const { y: g } = this.toAffine();
      if (r.isOdd)
        return !r.isOdd(g);
      throw new Error("Field doesn't support isOdd");
    }
    /**
     * Compare one point to another.
     */
    equals(g) {
      u(g);
      const { px: x, py: S, pz: v } = this, { px: T, py: I, pz: P } = g, H = r.eql(r.mul(x, P), r.mul(T, v)), j = r.eql(r.mul(S, P), r.mul(I, v));
      return H && j;
    }
    /**
     * Flips point to one corresponding to (x, -y) in Affine coordinates.
     */
    negate() {
      return new h(this.px, r.neg(this.py), this.pz);
    }
    // Renes-Costello-Batina exception-free doubling formula.
    // There is 30% faster Jacobian formula, but it is not complete.
    // https://eprint.iacr.org/2015/1060, algorithm 3
    // Cost: 8M + 3S + 3*a + 2*b3 + 15add.
    double() {
      const { a: g, b: x } = t, S = r.mul(x, Ep), { px: v, py: T, pz: I } = this;
      let P = r.ZERO, H = r.ZERO, j = r.ZERO, V = r.mul(v, v), te = r.mul(T, T), Z = r.mul(I, I), N = r.mul(v, T);
      return N = r.add(N, N), j = r.mul(v, I), j = r.add(j, j), P = r.mul(g, j), H = r.mul(S, Z), H = r.add(P, H), P = r.sub(te, H), H = r.add(te, H), H = r.mul(P, H), P = r.mul(N, P), j = r.mul(S, j), Z = r.mul(g, Z), N = r.sub(V, Z), N = r.mul(g, N), N = r.add(N, j), j = r.add(V, V), V = r.add(j, V), V = r.add(V, Z), V = r.mul(V, N), H = r.add(H, V), Z = r.mul(T, I), Z = r.add(Z, Z), V = r.mul(Z, N), P = r.sub(P, V), j = r.mul(Z, te), j = r.add(j, j), j = r.add(j, j), new h(P, H, j);
    }
    // Renes-Costello-Batina exception-free addition formula.
    // There is 30% faster Jacobian formula, but it is not complete.
    // https://eprint.iacr.org/2015/1060, algorithm 1
    // Cost: 12M + 0S + 3*a + 3*b3 + 23add.
    add(g) {
      u(g);
      const { px: x, py: S, pz: v } = this, { px: T, py: I, pz: P } = g;
      let H = r.ZERO, j = r.ZERO, V = r.ZERO;
      const te = t.a, Z = r.mul(t.b, Ep);
      let N = r.mul(x, T), W = r.mul(S, I), D = r.mul(v, P), $ = r.add(x, S), R = r.add(T, I);
      $ = r.mul($, R), R = r.add(N, W), $ = r.sub($, R), R = r.add(x, v);
      let K = r.add(T, P);
      return R = r.mul(R, K), K = r.add(N, D), R = r.sub(R, K), K = r.add(S, v), H = r.add(I, P), K = r.mul(K, H), H = r.add(W, D), K = r.sub(K, H), V = r.mul(te, R), H = r.mul(Z, D), V = r.add(H, V), H = r.sub(W, V), V = r.add(W, V), j = r.mul(H, V), W = r.add(N, N), W = r.add(W, N), D = r.mul(te, D), R = r.mul(Z, R), W = r.add(W, D), D = r.sub(N, D), D = r.mul(te, D), R = r.add(R, D), N = r.mul(W, R), j = r.add(j, N), N = r.mul(K, R), H = r.mul($, H), H = r.sub(H, N), N = r.mul($, W), V = r.mul(K, V), V = r.add(V, N), new h(H, j, V);
    }
    subtract(g) {
      return this.add(g.negate());
    }
    is0() {
      return this.equals(h.ZERO);
    }
    wNAF(g) {
      return b.wNAFCached(this, g, h.normalizeZ);
    }
    /**
     * Non-constant-time multiplication. Uses double-and-add algorithm.
     * It's faster, but should only be used when you don't care about
     * an exposed private key e.g. sig verification, which works over *public* keys.
     */
    multiplyUnsafe(g) {
      Do("scalar", g, _n, t.n);
      const x = h.ZERO;
      if (g === _n)
        return x;
      if (g === Tt)
        return this;
      const { endo: S } = t;
      if (!S)
        return b.unsafeLadder(this, g);
      let { k1neg: v, k1: T, k2neg: I, k2: P } = S.splitScalar(g), H = x, j = x, V = this;
      for (; T > _n || P > _n; )
        T & Tt && (H = H.add(V)), P & Tt && (j = j.add(V)), V = V.double(), T >>= Tt, P >>= Tt;
      return v && (H = H.negate()), I && (j = j.negate()), j = new h(r.mul(j.px, S.beta), j.py, j.pz), H.add(j);
    }
    /**
     * Constant time multiplication.
     * Uses wNAF method. Windowed method may be 10% faster,
     * but takes 2x longer to generate and consumes 2x memory.
     * Uses precomputes when available.
     * Uses endomorphism for Koblitz curves.
     * @param scalar by which the point would be multiplied
     * @returns New point
     */
    multiply(g) {
      const { endo: x, n: S } = t;
      Do("scalar", g, Tt, S);
      let v, T;
      if (x) {
        const { k1neg: I, k1: P, k2neg: H, k2: j } = x.splitScalar(g);
        let { p: V, f: te } = this.wNAF(P), { p: Z, f: N } = this.wNAF(j);
        V = b.constTimeNegate(I, V), Z = b.constTimeNegate(H, Z), Z = new h(r.mul(Z.px, x.beta), Z.py, Z.pz), v = V.add(Z), T = te.add(N);
      } else {
        const { p: I, f: P } = this.wNAF(g);
        v = I, T = P;
      }
      return h.normalizeZ([v, T])[0];
    }
    /**
     * Efficiently calculate `aP + bQ`. Unsafe, can expose private key, if used incorrectly.
     * Not using Strauss-Shamir trick: precomputation tables are faster.
     * The trick could be useful if both P and Q are not G (not in our case).
     * @returns non-zero affine point
     */
    multiplyAndAddUnsafe(g, x, S) {
      const v = h.BASE, T = (P, H) => H === _n || H === Tt || !P.equals(v) ? P.multiplyUnsafe(H) : P.multiply(H), I = T(this, x).add(T(g, S));
      return I.is0() ? void 0 : I;
    }
    // Converts Projective point to affine (x, y) coordinates.
    // Can accept precomputed Z^-1 - for example, from invertBatch.
    // (x, y, z) ∋ (x=x/z, y=y/z)
    toAffine(g) {
      return f(this, g);
    }
    isTorsionFree() {
      const { h: g, isTorsionFree: x } = t;
      if (g === Tt)
        return !0;
      if (x)
        return x(h, this);
      throw new Error("isTorsionFree() has not been declared for the elliptic curve");
    }
    clearCofactor() {
      const { h: g, clearCofactor: x } = t;
      return g === Tt ? this : x ? x(h, this) : this.multiplyUnsafe(t.h);
    }
    toRawBytes(g = !0) {
      return Ni("isCompressed", g), this.assertValidity(), o(h, this, g);
    }
    toHex(g = !0) {
      return Ni("isCompressed", g), Ui(this.toRawBytes(g));
    }
  }
  h.BASE = new h(t.Gx, t.Gy, r.ONE), h.ZERO = new h(r.ZERO, r.ONE, r.ZERO);
  const m = t.nBitLength, b = y_(h, t.endo ? Math.ceil(m / 2) : m);
  return {
    CURVE: t,
    ProjectivePoint: h,
    normPrivateKeyToScalar: c,
    weierstrassEquation: s,
    isWithinCurveOrder: a
  };
}
function S_(e) {
  const t = Zg(e);
  return ta(t, {
    hash: "hash",
    hmac: "function",
    randomBytes: "function"
  }, {
    bits2int: "function",
    bits2int_modN: "function",
    lowS: "boolean"
  }), Object.freeze({ lowS: !0, ...t });
}
function k_(e) {
  const t = S_(e), { Fp: r, n } = t, o = r.BYTES + 1, i = 2 * r.BYTES + 1;
  function s(D) {
    return Vt(D, n);
  }
  function a(D) {
    return tf(D, n);
  }
  const { ProjectivePoint: c, normPrivateKeyToScalar: u, weierstrassEquation: f, isWithinCurveOrder: l } = __({
    ...t,
    toBytes(D, $, R) {
      const K = $.toAffine(), re = r.toBytes(K.x), oe = Ps;
      return Ni("isCompressed", R), R ? oe(Uint8Array.from([$.hasEvenY() ? 2 : 3]), re) : oe(Uint8Array.from([4]), re, r.toBytes(K.y));
    },
    fromBytes(D) {
      const $ = D.length, R = D[0], K = D.subarray(1);
      if ($ === o && (R === 2 || R === 3)) {
        const re = Mo(K);
        if (!Yc(re, Tt, r.ORDER))
          throw new Error("Point is not on curve");
        const oe = f(re);
        let pe;
        try {
          pe = r.sqrt(oe);
        } catch (q) {
          const Ce = q instanceof Error ? ": " + q.message : "";
          throw new Error("Point is not on curve" + Ce);
        }
        const se = (pe & Tt) === Tt;
        return (R & 1) === 1 !== se && (pe = r.neg(pe)), { x: re, y: pe };
      } else if ($ === i && R === 4) {
        const re = r.fromBytes(K.subarray(0, r.BYTES)), oe = r.fromBytes(K.subarray(r.BYTES, 2 * r.BYTES));
        return { x: re, y: oe };
      } else
        throw new Error(`Point of length ${$} was invalid. Expected ${o} compressed bytes or ${i} uncompressed bytes`);
    }
  }), h = (D) => Ui(Hi(D, t.nByteLength));
  function m(D) {
    const $ = n >> Tt;
    return D > $;
  }
  function b(D) {
    return m(D) ? s(-D) : D;
  }
  const y = (D, $, R) => Mo(D.slice($, R));
  class g {
    constructor($, R, K) {
      this.r = $, this.s = R, this.recovery = K, this.assertValidity();
    }
    // pair (bytes of r, bytes of s)
    static fromCompact($) {
      const R = t.nByteLength;
      return $ = Pr("compactSignature", $, R * 2), new g(y($, 0, R), y($, R, 2 * R));
    }
    // DER encoded ECDSA signature
    // https://bitcoin.stackexchange.com/questions/57644/what-are-the-parts-of-a-bitcoin-transaction-input-script
    static fromDER($) {
      const { r: R, s: K } = En.toSig(Pr("DER", $));
      return new g(R, K);
    }
    assertValidity() {
      Do("r", this.r, Tt, n), Do("s", this.s, Tt, n);
    }
    addRecoveryBit($) {
      return new g(this.r, this.s, $);
    }
    recoverPublicKey($) {
      const { r: R, s: K, recovery: re } = this, oe = P(Pr("msgHash", $));
      if (re == null || ![0, 1, 2, 3].includes(re))
        throw new Error("recovery id invalid");
      const pe = re === 2 || re === 3 ? R + t.n : R;
      if (pe >= r.ORDER)
        throw new Error("recovery id 2 or 3 invalid");
      const se = re & 1 ? "03" : "02", Ae = c.fromHex(se + h(pe)), q = a(pe), Ce = s(-oe * q), Ut = s(K * q), Xe = c.BASE.multiplyAndAddUnsafe(Ae, Ce, Ut);
      if (!Xe)
        throw new Error("point at infinify");
      return Xe.assertValidity(), Xe;
    }
    // Signatures should be low-s, to prevent malleability.
    hasHighS() {
      return m(this.s);
    }
    normalizeS() {
      return this.hasHighS() ? new g(this.r, s(-this.s), this.recovery) : this;
    }
    // DER-encoded
    toDERRawBytes() {
      return Ci(this.toDERHex());
    }
    toDERHex() {
      return En.hexFromSig({ r: this.r, s: this.s });
    }
    // padded bytes of r, then padded bytes of s
    toCompactRawBytes() {
      return Ci(this.toCompactHex());
    }
    toCompactHex() {
      return h(this.r) + h(this.s);
    }
  }
  const x = {
    isValidPrivateKey(D) {
      try {
        return u(D), !0;
      } catch {
        return !1;
      }
    },
    normPrivateKeyToScalar: u,
    /**
     * Produces cryptographically secure private key from random of size
     * (groupLen + ceil(groupLen / 2)) with modulo bias being negligible.
     */
    randomPrivateKey: () => {
      const D = Gg(t.n);
      return m_(t.randomBytes(D), t.n);
    },
    /**
     * Creates precompute table for an arbitrary EC point. Makes point "cached".
     * Allows to massively speed-up `point.multiply(scalar)`.
     * @returns cached point
     * @example
     * const fast = utils.precompute(8, ProjectivePoint.fromHex(someonesPubKey));
     * fast.multiply(privKey); // much faster ECDH now
     */
    precompute(D = 8, $ = c.BASE) {
      return $._setWindowSize(D), $.multiply(BigInt(3)), $;
    }
  };
  function S(D, $ = !0) {
    return c.fromPrivateKey(D).toRawBytes($);
  }
  function v(D) {
    const $ = Vo(D), R = typeof D == "string", K = ($ || R) && D.length;
    return $ ? K === o || K === i : R ? K === 2 * o || K === 2 * i : D instanceof c;
  }
  function T(D, $, R = !0) {
    if (v(D))
      throw new Error("first arg must be private key");
    if (!v($))
      throw new Error("second arg must be public key");
    return c.fromHex($).multiply(u(D)).toRawBytes(R);
  }
  const I = t.bits2int || function(D) {
    const $ = Mo(D), R = D.length * 8 - t.nBitLength;
    return R > 0 ? $ >> BigInt(R) : $;
  }, P = t.bits2int_modN || function(D) {
    return s(I(D));
  }, H = md(t.nBitLength);
  function j(D) {
    return Do(`num < 2^${t.nBitLength}`, D, _n, H), Hi(D, t.nByteLength);
  }
  function V(D, $, R = te) {
    if (["recovered", "canonical"].some((gt) => gt in R))
      throw new Error("sign() legacy options not supported");
    const { hash: K, randomBytes: re } = t;
    let { lowS: oe, prehash: pe, extraEntropy: se } = R;
    oe == null && (oe = !0), D = Pr("msgHash", D), xp(R), pe && (D = Pr("prehashed msgHash", K(D)));
    const Ae = P(D), q = u($), Ce = [j(q), j(Ae)];
    if (se != null && se !== !1) {
      const gt = se === !0 ? re(r.BYTES) : se;
      Ce.push(Pr("extraEntropy", gt));
    }
    const Ut = Ps(...Ce), Xe = Ae;
    function Ct(gt) {
      const lt = I(gt);
      if (!l(lt))
        return;
      const wt = a(lt), Ht = c.BASE.multiply(lt).toAffine(), Ye = s(Ht.x);
      if (Ye === _n)
        return;
      const Le = s(wt * s(Xe + Ye * q));
      if (Le === _n)
        return;
      let mt = (Ht.x === Ye ? 0 : 2) | Number(Ht.y & Tt), Vr = Le;
      return oe && m(Le) && (Vr = b(Le), mt ^= 1), new g(Ye, Vr, mt);
    }
    return { seed: Ut, k2sig: Ct };
  }
  const te = { lowS: t.lowS, prehash: !1 }, Z = { lowS: t.lowS, prehash: !1 };
  function N(D, $, R = te) {
    const { seed: K, k2sig: re } = V(D, $, R), oe = t;
    return qg(oe.hash.outputLen, oe.nByteLength, oe.hmac)(K, re);
  }
  c.BASE._setWindowSize(8);
  function W(D, $, R, K = Z) {
    var Ht;
    const re = D;
    if ($ = Pr("msgHash", $), R = Pr("publicKey", R), "strict" in K)
      throw new Error("options.strict was renamed to lowS");
    xp(K);
    const { lowS: oe, prehash: pe } = K;
    let se, Ae;
    try {
      if (typeof re == "string" || Vo(re))
        try {
          se = g.fromDER(re);
        } catch (Ye) {
          if (!(Ye instanceof En.Err))
            throw Ye;
          se = g.fromCompact(re);
        }
      else if (typeof re == "object" && typeof re.r == "bigint" && typeof re.s == "bigint") {
        const { r: Ye, s: Le } = re;
        se = new g(Ye, Le);
      } else
        throw new Error("PARSE");
      Ae = c.fromHex(R);
    } catch (Ye) {
      if (Ye.message === "PARSE")
        throw new Error("signature must be Signature instance, Uint8Array or hex string");
      return !1;
    }
    if (oe && se.hasHighS())
      return !1;
    pe && ($ = t.hash($));
    const { r: q, s: Ce } = se, Ut = P($), Xe = a(Ce), Ct = s(Ut * Xe), gt = s(q * Xe), lt = (Ht = c.BASE.multiplyAndAddUnsafe(Ae, Ct, gt)) == null ? void 0 : Ht.toAffine();
    return lt ? s(lt.x) === q : !1;
  }
  return {
    CURVE: t,
    getPublicKey: S,
    getSharedSecret: T,
    sign: N,
    verify: W,
    ProjectivePoint: c,
    Signature: g,
    utils: x
  };
}
/*! noble-curves - MIT License (c) 2022 Paul Miller (paulmillr.com) */
function A_(e) {
  return {
    hash: e,
    hmac: (t, ...r) => fd(e, t, O1(...r)),
    randomBytes: B1
  };
}
function T_(e, t) {
  const r = (n) => k_({ ...e, ...A_(n) });
  return Object.freeze({ ...r(t), create: r });
}
/*! noble-curves - MIT License (c) 2022 Paul Miller (paulmillr.com) */
const Xg = BigInt("0xfffffffffffffffffffffffffffffffffffffffffffffffffffffffefffffc2f"), _p = BigInt("0xfffffffffffffffffffffffffffffffebaaedce6af48a03bbfd25e8cd0364141"), I_ = BigInt(1), rf = BigInt(2), Sp = (e, t) => (e + t / rf) / t;
function P_(e) {
  const t = Xg, r = BigInt(3), n = BigInt(6), o = BigInt(11), i = BigInt(22), s = BigInt(23), a = BigInt(44), c = BigInt(88), u = e * e * e % t, f = u * u * e % t, l = yr(f, r, t) * f % t, h = yr(l, r, t) * f % t, m = yr(h, rf, t) * u % t, b = yr(m, o, t) * m % t, y = yr(b, i, t) * b % t, g = yr(y, a, t) * y % t, x = yr(g, c, t) * g % t, S = yr(x, a, t) * y % t, v = yr(S, r, t) * f % t, T = yr(v, s, t) * b % t, I = yr(T, n, t) * u % t, P = yr(I, rf, t);
  if (!nf.eql(nf.sqr(P), e))
    throw new Error("Cannot find square root");
  return P;
}
const nf = bd(Xg, void 0, void 0, { sqrt: P_ }), Wo = T_({
  a: BigInt(0),
  // equation params: a, b
  b: BigInt(7),
  // Seem to be rigid: bitcointalk.org/index.php?topic=289795.msg3183975#msg3183975
  Fp: nf,
  // Field's prime: 2n**256n - 2n**32n - 2n**9n - 2n**8n - 2n**7n - 2n**6n - 2n**4n - 1n
  n: _p,
  // Curve order, total count of valid points in the field
  // Base point (x, y) aka generator point
  Gx: BigInt("55066263022277343669578718895168534326250603453777594175500187360389116729240"),
  Gy: BigInt("32670510020758816978083085130507043184471273380659243275938904335757337482424"),
  h: BigInt(1),
  // Cofactor
  lowS: !0,
  // Allow only low-S signatures by default in sign() and verify()
  /**
   * secp256k1 belongs to Koblitz curves: it has efficiently computable endomorphism.
   * Endomorphism uses 2x less RAM, speeds up precomputation by 2x and ECDH / key recovery by 20%.
   * For precomputed wNAF it trades off 1/2 init time & 1/3 ram for 20% perf hit.
   * Explanation: https://gist.github.com/paulmillr/eb670806793e84df628a7c434a873066
   */
  endo: {
    beta: BigInt("0x7ae96a2b657c07106e64479eac3434e99cf0497512f58995c1396c28719501ee"),
    splitScalar: (e) => {
      const t = _p, r = BigInt("0x3086d221a7d46bcde86c90e49284eb15"), n = -I_ * BigInt("0xe4437ed6010e88286f547fa90abfe4c3"), o = BigInt("0x114ca50f7a8e2f3f657c1108d9d44cfd8"), i = r, s = BigInt("0x100000000000000000000000000000000"), a = Sp(i * e, t), c = Sp(-n * e, t);
      let u = Vt(e - a * r - c * o, t), f = Vt(-a * n - c * i, t);
      const l = u > s, h = f > s;
      if (l && (u = t - u), h && (f = t - f), u > s || f > s)
        throw new Error("splitScalar: Endomorphism failed, k=" + e);
      return { k1neg: l, k1: u, k2neg: h, k2: f };
    }
  }
}, Pt);
BigInt(0);
Wo.ProjectivePoint;
function O_(e, ...t) {
  if (!(e instanceof Uint8Array))
    throw new Error("Expected Uint8Array");
  if (t.length > 0 && !t.includes(e.length))
    throw new Error(`Expected Uint8Array of length ${t}, not of length=${e.length}`);
}
function kp(e, t = !0) {
  if (e.destroyed)
    throw new Error("Hash instance has been destroyed");
  if (t && e.finished)
    throw new Error("Hash#digest() has already been called");
}
function B_(e, t) {
  O_(e);
  const r = t.outputLen;
  if (e.length < r)
    throw new Error(`digestInto() expects output buffer of length at least ${r}`);
}
/*! noble-hashes - MIT License (c) 2022 Paul Miller (paulmillr.com) */
const $_ = (e) => e instanceof Uint8Array, cl = (e) => new DataView(e.buffer, e.byteOffset, e.byteLength), Gr = (e, t) => e << 32 - t | e >>> t, N_ = new Uint8Array(new Uint32Array([287454020]).buffer)[0] === 68;
if (!N_)
  throw new Error("Non little-endian hardware is not supported");
function U_(e) {
  if (typeof e != "string")
    throw new Error(`utf8ToBytes expected string, got ${typeof e}`);
  return new Uint8Array(new TextEncoder().encode(e));
}
function Yg(e) {
  if (typeof e == "string" && (e = U_(e)), !$_(e))
    throw new Error(`expected Uint8Array, got ${typeof e}`);
  return e;
}
let C_ = class {
  // Safe version that clones internal state
  clone() {
    return this._cloneInto();
  }
};
function H_(e) {
  const t = (n) => e().update(Yg(n)).digest(), r = e();
  return t.outputLen = r.outputLen, t.blockLen = r.blockLen, t.create = () => e(), t;
}
function R_(e, t, r, n) {
  if (typeof e.setBigUint64 == "function")
    return e.setBigUint64(t, r, n);
  const o = BigInt(32), i = BigInt(4294967295), s = Number(r >> o & i), a = Number(r & i), c = n ? 4 : 0, u = n ? 0 : 4;
  e.setUint32(t + c, s, n), e.setUint32(t + u, a, n);
}
let L_ = class extends C_ {
  constructor(t, r, n, o) {
    super(), this.blockLen = t, this.outputLen = r, this.padOffset = n, this.isLE = o, this.finished = !1, this.length = 0, this.pos = 0, this.destroyed = !1, this.buffer = new Uint8Array(t), this.view = cl(this.buffer);
  }
  update(t) {
    kp(this);
    const { view: r, buffer: n, blockLen: o } = this;
    t = Yg(t);
    const i = t.length;
    for (let s = 0; s < i; ) {
      const a = Math.min(o - this.pos, i - s);
      if (a === o) {
        const c = cl(t);
        for (; o <= i - s; s += o)
          this.process(c, s);
        continue;
      }
      n.set(t.subarray(s, s + a), this.pos), this.pos += a, s += a, this.pos === o && (this.process(r, 0), this.pos = 0);
    }
    return this.length += t.length, this.roundClean(), this;
  }
  digestInto(t) {
    kp(this), B_(t, this), this.finished = !0;
    const { buffer: r, view: n, blockLen: o, isLE: i } = this;
    let { pos: s } = this;
    r[s++] = 128, this.buffer.subarray(s).fill(0), this.padOffset > o - s && (this.process(n, 0), s = 0);
    for (let l = s; l < o; l++)
      r[l] = 0;
    R_(n, o - 8, BigInt(this.length * 8), i), this.process(n, 0);
    const a = cl(t), c = this.outputLen;
    if (c % 4)
      throw new Error("_sha2: outputLen should be aligned to 32bit");
    const u = c / 4, f = this.get();
    if (u > f.length)
      throw new Error("_sha2: outputLen bigger than state");
    for (let l = 0; l < u; l++)
      a.setUint32(4 * l, f[l], i);
  }
  digest() {
    const { buffer: t, outputLen: r } = this;
    this.digestInto(t);
    const n = t.slice(0, r);
    return this.destroy(), n;
  }
  _cloneInto(t) {
    t || (t = new this.constructor()), t.set(...this.get());
    const { blockLen: r, buffer: n, length: o, finished: i, destroyed: s, pos: a } = this;
    return t.length = o, t.pos = a, t.finished = i, t.destroyed = s, o % r && t.buffer.set(n), t;
  }
};
const z_ = (e, t, r) => e & t ^ ~e & r, j_ = (e, t, r) => e & t ^ e & r ^ t & r, M_ = /* @__PURE__ */ new Uint32Array([
  1116352408,
  1899447441,
  3049323471,
  3921009573,
  961987163,
  1508970993,
  2453635748,
  2870763221,
  3624381080,
  310598401,
  607225278,
  1426881987,
  1925078388,
  2162078206,
  2614888103,
  3248222580,
  3835390401,
  4022224774,
  264347078,
  604807628,
  770255983,
  1249150122,
  1555081692,
  1996064986,
  2554220882,
  2821834349,
  2952996808,
  3210313671,
  3336571891,
  3584528711,
  113926993,
  338241895,
  666307205,
  773529912,
  1294757372,
  1396182291,
  1695183700,
  1986661051,
  2177026350,
  2456956037,
  2730485921,
  2820302411,
  3259730800,
  3345764771,
  3516065817,
  3600352804,
  4094571909,
  275423344,
  430227734,
  506948616,
  659060556,
  883997877,
  958139571,
  1322822218,
  1537002063,
  1747873779,
  1955562222,
  2024104815,
  2227730452,
  2361852424,
  2428436474,
  2756734187,
  3204031479,
  3329325298
]), Dn = /* @__PURE__ */ new Uint32Array([
  1779033703,
  3144134277,
  1013904242,
  2773480762,
  1359893119,
  2600822924,
  528734635,
  1541459225
]), Fn = /* @__PURE__ */ new Uint32Array(64);
let D_ = class extends L_ {
  constructor() {
    super(64, 32, 8, !1), this.A = Dn[0] | 0, this.B = Dn[1] | 0, this.C = Dn[2] | 0, this.D = Dn[3] | 0, this.E = Dn[4] | 0, this.F = Dn[5] | 0, this.G = Dn[6] | 0, this.H = Dn[7] | 0;
  }
  get() {
    const { A: t, B: r, C: n, D: o, E: i, F: s, G: a, H: c } = this;
    return [t, r, n, o, i, s, a, c];
  }
  // prettier-ignore
  set(t, r, n, o, i, s, a, c) {
    this.A = t | 0, this.B = r | 0, this.C = n | 0, this.D = o | 0, this.E = i | 0, this.F = s | 0, this.G = a | 0, this.H = c | 0;
  }
  process(t, r) {
    for (let l = 0; l < 16; l++, r += 4)
      Fn[l] = t.getUint32(r, !1);
    for (let l = 16; l < 64; l++) {
      const h = Fn[l - 15], m = Fn[l - 2], b = Gr(h, 7) ^ Gr(h, 18) ^ h >>> 3, y = Gr(m, 17) ^ Gr(m, 19) ^ m >>> 10;
      Fn[l] = y + Fn[l - 7] + b + Fn[l - 16] | 0;
    }
    let { A: n, B: o, C: i, D: s, E: a, F: c, G: u, H: f } = this;
    for (let l = 0; l < 64; l++) {
      const h = Gr(a, 6) ^ Gr(a, 11) ^ Gr(a, 25), m = f + h + z_(a, c, u) + M_[l] + Fn[l] | 0, y = (Gr(n, 2) ^ Gr(n, 13) ^ Gr(n, 22)) + j_(n, o, i) | 0;
      f = u, u = c, c = a, a = s + m | 0, s = i, i = o, o = n, n = m + y | 0;
    }
    n = n + this.A | 0, o = o + this.B | 0, i = i + this.C | 0, s = s + this.D | 0, a = a + this.E | 0, c = c + this.F | 0, u = u + this.G | 0, f = f + this.H | 0, this.set(n, o, i, s, a, c, u, f);
  }
  roundClean() {
    Fn.fill(0);
  }
  destroy() {
    this.set(0, 0, 0, 0, 0, 0, 0, 0), this.buffer.fill(0);
  }
};
const of = /* @__PURE__ */ H_(() => new D_());
/*! scure-base - MIT License (c) 2022 Paul Miller (paulmillr.com) */
// @__NO_SIDE_EFFECTS__
function ra(...e) {
  const t = (o, i) => (s) => o(i(s)), r = Array.from(e).reverse().reduce((o, i) => o ? t(o, i.encode) : i.encode, void 0), n = e.reduce((o, i) => o ? t(o, i.decode) : i.decode, void 0);
  return { encode: r, decode: n };
}
// @__NO_SIDE_EFFECTS__
function Jc(e) {
  return {
    encode: (t) => {
      if (!Array.isArray(t) || t.length && typeof t[0] != "number")
        throw new Error("alphabet.encode input should be an array of numbers");
      return t.map((r) => {
        if (r < 0 || r >= e.length)
          throw new Error(`Digit index outside alphabet: ${r} (alphabet: ${e.length})`);
        return e[r];
      });
    },
    decode: (t) => {
      if (!Array.isArray(t) || t.length && typeof t[0] != "string")
        throw new Error("alphabet.decode input should be array of strings");
      return t.map((r) => {
        if (typeof r != "string")
          throw new Error(`alphabet.decode: not string element=${r}`);
        const n = e.indexOf(r);
        if (n === -1)
          throw new Error(`Unknown letter: "${r}". Allowed: ${e}`);
        return n;
      });
    }
  };
}
// @__NO_SIDE_EFFECTS__
function Qc(e = "") {
  if (typeof e != "string")
    throw new Error("join separator should be string");
  return {
    encode: (t) => {
      if (!Array.isArray(t) || t.length && typeof t[0] != "string")
        throw new Error("join.encode input should be array of strings");
      for (let r of t)
        if (typeof r != "string")
          throw new Error(`join.encode: non-string input=${r}`);
      return t.join(e);
    },
    decode: (t) => {
      if (typeof t != "string")
        throw new Error("join.decode input should be string");
      return t.split(e);
    }
  };
}
// @__NO_SIDE_EFFECTS__
function Jg(e, t = "=") {
  if (typeof t != "string")
    throw new Error("padding chr should be string");
  return {
    encode(r) {
      if (!Array.isArray(r) || r.length && typeof r[0] != "string")
        throw new Error("padding.encode input should be array of strings");
      for (let n of r)
        if (typeof n != "string")
          throw new Error(`padding.encode: non-string input=${n}`);
      for (; r.length * e % 8; )
        r.push(t);
      return r;
    },
    decode(r) {
      if (!Array.isArray(r) || r.length && typeof r[0] != "string")
        throw new Error("padding.encode input should be array of strings");
      for (let o of r)
        if (typeof o != "string")
          throw new Error(`padding.decode: non-string input=${o}`);
      let n = r.length;
      if (n * e % 8)
        throw new Error("Invalid padding: string should have whole number of bytes");
      for (; n > 0 && r[n - 1] === t; n--)
        if (!((n - 1) * e % 8))
          throw new Error("Invalid padding: string has too much padding");
      return r.slice(0, n);
    }
  };
}
// @__NO_SIDE_EFFECTS__
function Ap(e, t, r) {
  if (t < 2)
    throw new Error(`convertRadix: wrong from=${t}, base cannot be less than 2`);
  if (r < 2)
    throw new Error(`convertRadix: wrong to=${r}, base cannot be less than 2`);
  if (!Array.isArray(e))
    throw new Error("convertRadix: data should be array");
  if (!e.length)
    return [];
  let n = 0;
  const o = [], i = Array.from(e);
  for (i.forEach((s) => {
    if (s < 0 || s >= t)
      throw new Error(`Wrong integer: ${s}`);
  }); ; ) {
    let s = 0, a = !0;
    for (let c = n; c < i.length; c++) {
      const u = i[c], f = t * s + u;
      if (!Number.isSafeInteger(f) || t * s / t !== s || f - u !== t * s)
        throw new Error("convertRadix: carry overflow");
      s = f % r;
      const l = Math.floor(f / r);
      if (i[c] = l, !Number.isSafeInteger(l) || l * r + s !== f)
        throw new Error("convertRadix: carry overflow");
      if (a)
        l ? a = !1 : n = c;
      else continue;
    }
    if (o.push(s), a)
      break;
  }
  for (let s = 0; s < e.length - 1 && e[s] === 0; s++)
    o.push(0);
  return o.reverse();
}
const Qg = /* @__NO_SIDE_EFFECTS__ */ (e, t) => t ? /* @__PURE__ */ Qg(t, e % t) : e, cc = /* @__NO_SIDE_EFFECTS__ */ (e, t) => e + (t - /* @__PURE__ */ Qg(e, t));
// @__NO_SIDE_EFFECTS__
function sf(e, t, r, n) {
  if (!Array.isArray(e))
    throw new Error("convertRadix2: data should be array");
  if (t <= 0 || t > 32)
    throw new Error(`convertRadix2: wrong from=${t}`);
  if (r <= 0 || r > 32)
    throw new Error(`convertRadix2: wrong to=${r}`);
  if (/* @__PURE__ */ cc(t, r) > 32)
    throw new Error(`convertRadix2: carry overflow from=${t} to=${r} carryBits=${/* @__PURE__ */ cc(t, r)}`);
  let o = 0, i = 0;
  const s = 2 ** r - 1, a = [];
  for (const c of e) {
    if (c >= 2 ** t)
      throw new Error(`convertRadix2: invalid data word=${c} from=${t}`);
    if (o = o << t | c, i + t > 32)
      throw new Error(`convertRadix2: carry overflow pos=${i} from=${t}`);
    for (i += t; i >= r; i -= r)
      a.push((o >> i - r & s) >>> 0);
    o &= 2 ** i - 1;
  }
  if (o = o << r - i & s, !n && i >= t)
    throw new Error("Excess padding");
  if (!n && o)
    throw new Error(`Non-zero padding: ${o}`);
  return n && i > 0 && a.push(o >>> 0), a;
}
// @__NO_SIDE_EFFECTS__
function F_(e) {
  return {
    encode: (t) => {
      if (!(t instanceof Uint8Array))
        throw new Error("radix.encode input should be Uint8Array");
      return /* @__PURE__ */ Ap(Array.from(t), 2 ** 8, e);
    },
    decode: (t) => {
      if (!Array.isArray(t) || t.length && typeof t[0] != "number")
        throw new Error("radix.decode input should be array of strings");
      return Uint8Array.from(/* @__PURE__ */ Ap(t, e, 2 ** 8));
    }
  };
}
// @__NO_SIDE_EFFECTS__
function yd(e, t = !1) {
  if (e <= 0 || e > 32)
    throw new Error("radix2: bits should be in (0..32]");
  if (/* @__PURE__ */ cc(8, e) > 32 || /* @__PURE__ */ cc(e, 8) > 32)
    throw new Error("radix2: carry overflow");
  return {
    encode: (r) => {
      if (!(r instanceof Uint8Array))
        throw new Error("radix2.encode input should be Uint8Array");
      return /* @__PURE__ */ sf(Array.from(r), 8, e, !t);
    },
    decode: (r) => {
      if (!Array.isArray(r) || r.length && typeof r[0] != "number")
        throw new Error("radix2.decode input should be array of strings");
      return Uint8Array.from(/* @__PURE__ */ sf(r, e, 8, t));
    }
  };
}
// @__NO_SIDE_EFFECTS__
function Tp(e) {
  if (typeof e != "function")
    throw new Error("unsafeWrapper fn should be function");
  return function(...t) {
    try {
      return e.apply(null, t);
    } catch {
    }
  };
}
// @__NO_SIDE_EFFECTS__
function K_(e, t) {
  if (typeof t != "function")
    throw new Error("checksum fn should be function");
  return {
    encode(r) {
      if (!(r instanceof Uint8Array))
        throw new Error("checksum.encode: input should be Uint8Array");
      const n = t(r).slice(0, e), o = new Uint8Array(r.length + e);
      return o.set(r), o.set(n, r.length), o;
    },
    decode(r) {
      if (!(r instanceof Uint8Array))
        throw new Error("checksum.decode: input should be Uint8Array");
      const n = r.slice(0, -e), o = t(n).slice(0, e), i = r.slice(-e);
      for (let s = 0; s < e; s++)
        if (o[s] !== i[s])
          throw new Error("Invalid checksum");
      return n;
    }
  };
}
const Ip = /* @__PURE__ */ ra(/* @__PURE__ */ yd(6), /* @__PURE__ */ Jc("ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/"), /* @__PURE__ */ Jg(6), /* @__PURE__ */ Qc("")), Pp = /* @__PURE__ */ ra(/* @__PURE__ */ yd(6), /* @__PURE__ */ Jc("ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789-_"), /* @__PURE__ */ Jg(6), /* @__PURE__ */ Qc("")), q_ = (e) => /* @__PURE__ */ ra(/* @__PURE__ */ F_(58), /* @__PURE__ */ Jc(e), /* @__PURE__ */ Qc("")), V_ = /* @__PURE__ */ q_("123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz"), Op = (e) => /* @__PURE__ */ ra(/* @__PURE__ */ K_(4, (t) => e(e(t))), V_), af = /* @__PURE__ */ ra(/* @__PURE__ */ Jc("qpzry9x8gf2tvdw0s3jn54khce6mua7l"), /* @__PURE__ */ Qc("")), Bp = [996825010, 642813549, 513874426, 1027748829, 705979059];
// @__NO_SIDE_EFFECTS__
function ls(e) {
  const t = e >> 25;
  let r = (e & 33554431) << 5;
  for (let n = 0; n < Bp.length; n++)
    (t >> n & 1) === 1 && (r ^= Bp[n]);
  return r;
}
// @__NO_SIDE_EFFECTS__
function $p(e, t, r = 1) {
  const n = e.length;
  let o = 1;
  for (let i = 0; i < n; i++) {
    const s = e.charCodeAt(i);
    if (s < 33 || s > 126)
      throw new Error(`Invalid prefix (${e})`);
    o = /* @__PURE__ */ ls(o) ^ s >> 5;
  }
  o = /* @__PURE__ */ ls(o);
  for (let i = 0; i < n; i++)
    o = /* @__PURE__ */ ls(o) ^ e.charCodeAt(i) & 31;
  for (let i of t)
    o = /* @__PURE__ */ ls(o) ^ i;
  for (let i = 0; i < 6; i++)
    o = /* @__PURE__ */ ls(o);
  return o ^= r, af.encode(/* @__PURE__ */ sf([o % 2 ** 30], 30, 5, !1));
}
// @__NO_SIDE_EFFECTS__
function em(e) {
  const t = e === "bech32" ? 1 : 734539939, r = /* @__PURE__ */ yd(5), n = r.decode, o = r.encode, i = /* @__PURE__ */ Tp(n);
  function s(f, l, h = 90) {
    if (typeof f != "string")
      throw new Error(`bech32.encode prefix should be string, not ${typeof f}`);
    if (!Array.isArray(l) || l.length && typeof l[0] != "number")
      throw new Error(`bech32.encode words should be array of numbers, not ${typeof l}`);
    const m = f.length + 7 + l.length;
    if (h !== !1 && m > h)
      throw new TypeError(`Length ${m} exceeds limit ${h}`);
    const b = f.toLowerCase(), y = /* @__PURE__ */ $p(b, l, t);
    return `${b}1${af.encode(l)}${y}`;
  }
  function a(f, l = 90) {
    if (typeof f != "string")
      throw new Error(`bech32.decode input should be string, not ${typeof f}`);
    if (f.length < 8 || l !== !1 && f.length > l)
      throw new TypeError(`Wrong string length: ${f.length} (${f}). Expected (8..${l})`);
    const h = f.toLowerCase();
    if (f !== h && f !== f.toUpperCase())
      throw new Error("String must be lowercase or uppercase");
    f = h;
    const m = f.lastIndexOf("1");
    if (m === 0 || m === -1)
      throw new Error('Letter "1" must be present between prefix and data only');
    const b = f.slice(0, m), y = f.slice(m + 1);
    if (y.length < 6)
      throw new Error("Data must be at least 6 characters long");
    const g = af.decode(y).slice(0, -6), x = /* @__PURE__ */ $p(b, g, t);
    if (!y.endsWith(x))
      throw new Error(`Invalid checksum in ${f}: expected "${x}"`);
    return { prefix: b, words: g };
  }
  const c = /* @__PURE__ */ Tp(a);
  function u(f) {
    const { prefix: l, words: h } = a(f, !1);
    return { prefix: l, words: h, bytes: n(h) };
  }
  return { encode: s, decode: a, decodeToBytes: u, decodeUnsafe: c, fromWords: n, fromWordsUnsafe: i, toWords: o };
}
const Pa = /* @__PURE__ */ em("bech32"), Oa = /* @__PURE__ */ em("bech32m"), tn = {
  b58chk: {
    encode: (e) => Op(of).encode(e),
    decode: (e) => Op(of).decode(e)
  },
  base64: {
    encode: (e) => Ip.encode(e),
    decode: (e) => Ip.decode(e)
  },
  b64url: {
    encode: (e) => Pp.encode(e),
    decode: (e) => Pp.decode(e)
  },
  bech32: {
    to_words: Pa.toWords,
    to_bytes: Pa.fromWords,
    encode: (e, t, r = !1) => Pa.encode(e, t, r),
    decode: (e, t = !1) => {
      const { prefix: r, words: n } = Pa.decode(e, t);
      return { prefix: r, words: n };
    }
  },
  bech32m: {
    to_words: Oa.toWords,
    to_bytes: Oa.fromWords,
    encode: (e, t, r = !1) => Oa.encode(e, t, r),
    decode: (e, t = !1) => {
      const { prefix: r, words: n } = Oa.decode(e, t);
      return { prefix: r, words: n };
    }
  }
};
function W_(e, t) {
  if (e.length > t)
    throw new TypeError(`Data is larger than array size: ${e.length} > ${t}`);
}
function G_(e) {
  if (e.match(/[^a-fA-f0-9]/) !== null)
    throw new TypeError("Invalid characters in hex string: " + e);
  if (e.length % 2 !== 0)
    throw new Error(`Length of hex string is invalid: ${e.length}`);
}
function Z_(e) {
  if (e > Number.MAX_SAFE_INTEGER)
    throw new TypeError("Number exceeds safe bounds!");
}
function tm(e, t) {
  if (e !== t)
    throw new TypeError(`Bech32 prefix does not match: ${e} !== ${t}`);
}
const X_ = BigInt(0), Y_ = BigInt(255), rm = BigInt(256);
function J_(e) {
  if (e <= 0xffn)
    return 1;
  if (e <= 0xffffn)
    return 2;
  if (e <= 0xffffffffn)
    return 4;
  if (e <= 0xffffffffffffffffn)
    return 8;
  if (e <= 0xffffffffffffffffffffffffffffffffn)
    return 16;
  if (e <= 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffn)
    return 32;
  throw new TypeError("Must specify a fixed buffer size for bigints greater than 32 bytes.");
}
function Q_(e, t, r = "be") {
  t === void 0 && (t = J_(e));
  const n = r === "le", o = new ArrayBuffer(t), i = new DataView(o);
  let s = n ? 0 : t - 1;
  for (; e > X_; ) {
    const a = e & Y_, c = Number(a);
    n ? i.setUint8(s++, c) : i.setUint8(s--, c), e = (e - a) / rm;
  }
  return new Uint8Array(o);
}
function eS(e) {
  let t = BigInt(0);
  for (let r = e.length - 1; r >= 0; r--)
    t = t * rm + BigInt(e[r]);
  return BigInt(t);
}
function tS(e) {
  const t = e.split("").map(Number);
  if (t.length % 8 !== 0)
    throw new Error(`Binary array is invalid length: ${e.length}`);
  const r = new Uint8Array(t.length / 8);
  for (let n = 0, o = 0; n < t.length; n += 8, o++) {
    let i = 0;
    for (let s = 0; s < 8; s++)
      i |= t[n + s] << 7 - s;
    r[o] = i;
  }
  return r;
}
function rS(e) {
  const t = new Array(e.length * 8);
  let r = 0;
  for (const n of e) {
    if (n > 255)
      throw new Error(`Invalid byte value: ${n}. Byte values must be between 0 and 255.`);
    for (let o = 7; o >= 0; o--, r++)
      t[r] = n >> o & 1;
  }
  return t.join("");
}
function nS(e) {
  if (e <= 255)
    return 1;
  if (e <= 65535)
    return 2;
  if (e <= 4294967295)
    return 4;
  throw new TypeError("Numbers larger than 4 bytes must specify a fixed size!");
}
function oS(e, t, r = "be") {
  t === void 0 && (t = nS(e));
  const n = r === "le", o = new ArrayBuffer(t), i = new DataView(o);
  let s = n ? 0 : t - 1;
  for (; e > 0; ) {
    const a = e & 255;
    n ? i.setUint8(s++, e) : i.setUint8(s--, e), e = (e - a) / 256;
  }
  return new Uint8Array(o);
}
function iS(e) {
  let t = 0;
  for (let r = e.length - 1; r >= 0; r--)
    t = t * 256 + e[r], Z_(t);
  return t;
}
const sS = new TextEncoder(), aS = new TextDecoder();
function wd(e) {
  return sS.encode(e);
}
function ul(e) {
  return aS.decode(e);
}
function cS(e, t) {
  G_(e);
  const r = e.length / 2;
  if (t === void 0 && (t = r), r > t)
    throw new TypeError(`Hex string is larger than array size: ${r} > ${t}`);
  return t;
}
function uS(e, t, r = "le") {
  t = cS(e, t);
  const n = r === "le", o = new ArrayBuffer(t), i = new DataView(o);
  let s = n ? 0 : t - 1;
  for (let a = 0; a < e.length; a += 2) {
    const c = e.substring(a, a + 2), u = parseInt(c, 16);
    n ? i.setUint8(s++, u) : i.setUint8(s--, u);
  }
  return new Uint8Array(o);
}
function lS(e) {
  let t = "";
  for (let r = 0; r < e.length; r++)
    t += e[r].toString(16).padStart(2, "0");
  return t;
}
const { getRandomValues: fS } = crypto ?? globalThis.crypto ?? window.crypto;
function dS(e = 32) {
  if (typeof fS == "function")
    return crypto.getRandomValues(new Uint8Array(e));
  throw new Error("Crypto module missing getRandomValues!");
}
function nm(e) {
  return e.match(/[^a-fA-f0-9]/) === null && e.length % 2 === 0;
}
function hS(e) {
  return typeof e == "string" && nm(e) || typeof e == "number" || typeof e == "bigint" || e instanceof Uint8Array ? !0 : !!(Array.isArray(e) && e.every((t) => typeof t == "number"));
}
function pS(e, t, r = "be") {
  t === void 0 && (t = e.length), W_(e, t);
  const n = new Uint8Array(t).fill(0), o = r === "be" ? 0 : t - e.length;
  return n.set(e, o), n;
}
function om(e) {
  let t, r = 0;
  const n = e.reduce((i, s) => i + s.length, 0), o = new Uint8Array(n);
  for (t = 0; t < e.length; t++) {
    const i = e[t];
    o.set(i, r), r += i.length;
  }
  return o;
}
function gS(e, t) {
  return typeof t == "bigint" ? `${t}n` : t;
}
function mS(e, t) {
  return typeof t == "string" && /n$/.test(t) ? BigInt(t.slice(0, -1)) : t;
}
function bS(e, t, r) {
  const n = e.length, o = r / t;
  if (r % t !== 0)
    throw new TypeError(`Invalid parameters: ${r} % ${t} !== 0`);
  if (n !== r)
    throw new TypeError(`Invalid data stream: ${n} !== ${r}`);
  if (n % t !== 0)
    throw new TypeError(`Invalid data stream: ${n} % ${t} !== 0`);
  const i = new Array(o);
  for (let s = 0; s < o; s++) {
    const a = s * t;
    i[s] = e.subarray(a, a + t);
  }
  return i;
}
function vd(e, t, r) {
  if (e instanceof ArrayBuffer)
    return new Uint8Array(e);
  if (e instanceof Uint8Array)
    return pS(e, t, r);
  if (Array.isArray(e)) {
    const n = e.map((o) => vd(o, t, r));
    return om(n);
  } else {
    if (typeof e == "string")
      return uS(e, t, r);
    if (typeof e == "bigint")
      return Q_(e, t, r);
    if (typeof e == "number")
      return oS(e, t, r);
    if (typeof e == "boolean")
      return Uint8Array.of(e ? 1 : 0);
  }
  throw new TypeError("Unsupported format:" + typeof e);
}
var he;
let qe = (he = class extends Uint8Array {
  static random(t = 32) {
    const r = dS(t);
    return new he(r, t);
  }
  static now(t = 4) {
    const r = Math.floor(Date.now() / 1e3);
    return new he(r, t);
  }
  constructor(t, r, n) {
    if (t instanceof he && r === void 0)
      return t;
    const o = vd(t, r, n);
    super(o);
  }
  get arr() {
    return [...this];
  }
  get num() {
    return this.to_num();
  }
  get big() {
    return this.to_big();
  }
  get str() {
    return this.to_str();
  }
  get hex() {
    return this.to_hex();
  }
  get raw() {
    return new Uint8Array(this);
  }
  get bin() {
    return this.to_bin();
  }
  get b58chk() {
    return this.to_b58chk();
  }
  get base64() {
    return this.to_base64();
  }
  get b64url() {
    return this.to_b64url();
  }
  get digest() {
    return this.to_hash();
  }
  get id() {
    return this.to_hash().hex;
  }
  get stream() {
    return new BS(this);
  }
  to_num(t = "be") {
    const r = t === "be" ? this.reverse() : this;
    return iS(r);
  }
  to_big(t = "be") {
    const r = t === "be" ? this.reverse() : this;
    return eS(r);
  }
  to_bin() {
    return rS(this);
  }
  to_hash() {
    const t = of(this);
    return new he(t);
  }
  to_json(t) {
    t === void 0 && (t = mS);
    const r = ul(this);
    return JSON.parse(r, t);
  }
  to_bech32(t, r) {
    const { encode: n, to_words: o } = tn.bech32, i = o(this);
    return n(t, i, r);
  }
  to_bech32m(t, r) {
    const { encode: n, to_words: o } = tn.bech32m, i = o(this);
    return n(t, i, r);
  }
  to_str() {
    return ul(this);
  }
  to_hex() {
    return lS(this);
  }
  to_bytes() {
    return new Uint8Array(this);
  }
  to_b58chk() {
    return tn.b58chk.encode(this);
  }
  to_base64() {
    return tn.base64.encode(this);
  }
  to_b64url() {
    return tn.b64url.encode(this);
  }
  append(t) {
    return he.join([this, he.bytes(t)]);
  }
  prepend(t) {
    return he.join([he.bytes(t), this]);
  }
  reverse() {
    const t = new Uint8Array(this).reverse();
    return new he(t);
  }
  slice(t, r) {
    const n = new Uint8Array(this).slice(t, r);
    return new he(n);
  }
  set(t, r) {
    this.set(t, r);
  }
  subarray(t, r) {
    const n = new Uint8Array(this).subarray(t, r);
    return new he(n);
  }
  write(t, r) {
    const n = he.bytes(t);
    this.set(n, r);
  }
  add_varint(t) {
    const r = he.calc_varint(this.length, t);
    return he.join([r, this]);
  }
  static from(t) {
    return new he(Uint8Array.from(t));
  }
  static of(...t) {
    return new he(Uint8Array.of(...t));
  }
  static join(t) {
    const r = t.map((o) => he.bytes(o)), n = om(r);
    return new he(n);
  }
  static sort(t, r) {
    const n = t.map((o) => Np(o, r).hex);
    return n.sort(), n.map((o) => he.hex(o, r));
  }
  static calc_varint(t, r) {
    if (t < 253)
      return he.num(t, 1);
    if (t < 65536)
      return he.of(253, ...he.num(t, 2, r));
    if (t < 4294967296)
      return he.of(254, ...he.num(t, 4, r));
    if (BigInt(t) < 0x10000000000000000n)
      return he.of(255, ...he.num(t, 8, r));
    throw new Error(`Value is too large: ${t}`);
  }
}, he.num = yS, he.big = vS, he.bin = wS, he.raw = xS, he.str = ES, he.hex = _S, he.bytes = Np, he.json = SS, he.base64 = kS, he.b64url = AS, he.bech32 = TS, he.bech32m = IS, he.b58chk = PS, he.encode = wd, he.decode = ul, he.parse = OS, he.is_bytes = hS, he.is_hex = nm, he);
function yS(e, t, r) {
  return new qe(e, t, r);
}
function wS(e, t, r) {
  return new qe(tS(e), t, r);
}
function vS(e, t, r) {
  return new qe(e, t, r);
}
function xS(e, t, r) {
  return new qe(e, t, r);
}
function ES(e, t, r) {
  return new qe(wd(e), t, r);
}
function _S(e, t, r) {
  return new qe(e, t, r);
}
function SS(e, t) {
  t === void 0 && (t = gS);
  const r = JSON.stringify(e, t);
  return new qe(wd(r));
}
function kS(e) {
  return new qe(tn.base64.decode(e));
}
function AS(e) {
  return new qe(tn.b64url.decode(e));
}
function TS(e, t, r) {
  const { decode: n, to_bytes: o } = tn.bech32, { prefix: i, words: s } = n(e, t), a = o(s);
  return typeof r == "string" && tm(i, r), new qe(a);
}
function IS(e, t, r) {
  const { decode: n, to_bytes: o } = tn.bech32m, { prefix: i, words: s } = n(e, t), a = o(s);
  return typeof r == "string" && tm(i, r), new qe(a);
}
function PS(e) {
  return new qe(tn.b58chk.decode(e));
}
function OS(e, t, r) {
  const n = vd(e);
  return bS(n, t, r).map((i) => qe.bytes(i));
}
let BS = class {
  constructor(t) {
    this.data = qe.bytes(t), this.size = this.data.length;
  }
  peek(t) {
    if (t > this.size)
      throw new Error(`Size greater than stream: ${t} > ${this.size}`);
    return new qe(this.data.slice(0, t));
  }
  read(t) {
    const r = this.peek(t);
    return this.data = this.data.slice(t), this.size = this.data.length, r;
  }
  read_varint(t) {
    const r = this.read(1).num;
    switch (!0) {
      case (r >= 0 && r < 253):
        return r;
      case r === 253:
        return this.read(2).to_num(t);
      case r === 254:
        return this.read(4).to_num(t);
      case r === 255:
        return this.read(8).to_num(t);
      default:
        throw new Error(`Varint is out of range: ${r}`);
    }
  }
};
function Np(e, t, r) {
  return new qe(e, t, r);
}
const uc = Wo.CURVE, eu = uc.n, $S = uc.p, Up = { x: uc.Gx, y: uc.Gy }, NS = BigInt(0);
BigInt(1);
BigInt(2);
BigInt(3);
BigInt(4);
const US = (e) => Vt(e, eu);
function im(e, t = !1) {
  if (!t)
    return !1;
  throw new Error(e);
}
function CS(e, t, r) {
  const n = qe.bytes(e);
  return n.length !== t ? im(`Invalid byte size: ${n.hex} !== ${t}`, r) : !0;
}
function HS(e, t) {
  return typeof e == "bigint" && NS < e && e < eu || im("x value is not in the field!", t), !0;
}
const RS = bd(eu, 32, !0), Cp = Wo.ProjectivePoint, fs = RS;
var We;
let Ri = (We = class extends Uint8Array {
  static add(t) {
    return t.map((r) => We.mod(r)).reduce((r, n) => r.add(n));
  }
  static mod(t) {
    return new We(t);
  }
  static mul(t) {
    return t.map((r) => We.mod(r)).reduce((r, n) => r.mul(n));
  }
  static is_valid(t, r) {
    const n = qe.bytes(t, 32).big;
    return HS(n, r);
  }
  constructor(t) {
    const r = US(LS(t));
    We.is_valid(r, !0), super(qe.big(r, 32), 32);
  }
  get buff() {
    return new qe(this);
  }
  get raw() {
    return this.buff.raw;
  }
  get big() {
    return this.buff.big;
  }
  get hex() {
    return this.buff.hex;
  }
  get point() {
    return this.generate();
  }
  get hasOddY() {
    return this.point.hasOddY;
  }
  get negated() {
    return this.hasOddY ? this.negate() : this;
  }
  gt(t) {
    return new We(t).big > this.big;
  }
  lt(t) {
    return new We(t).big < this.big;
  }
  eq(t) {
    return new We(t).big === this.big;
  }
  ne(t) {
    return new We(t).big !== this.big;
  }
  add(t) {
    const r = We.mod(t), n = fs.add(this.big, r.big);
    return new We(n);
  }
  sub(t) {
    const r = We.mod(t), n = fs.sub(this.big, r.big);
    return new We(n);
  }
  mul(t) {
    const r = We.mod(t), n = fs.mul(this.big, r.big);
    return new We(n);
  }
  pow(t) {
    const r = We.mod(t), n = fs.pow(this.big, r.big);
    return new We(n);
  }
  div(t) {
    const r = We.mod(t), n = fs.div(this.big, r.big);
    return new We(n);
  }
  negate() {
    return new We(We.N - this.big);
  }
  generate() {
    const r = Wo.ProjectivePoint.BASE.multiply(this.big);
    return xd.import(r);
  }
}, We.N = eu, We);
var je;
let xd = (je = class {
  static from_x(t, r = !1) {
    let n = zS(t);
    n.length === 32 ? n = n.prepend(2) : r && (n[0] = 2), CS(n, 33);
    const o = Cp.fromHex(n.hex);
    return o.assertValidity(), new je(o.x, o.y);
  }
  static generate(t) {
    const r = Ri.mod(t), n = je.base.multiply(r.big);
    return je.import(n);
  }
  static import(t) {
    const r = t instanceof je ? { x: t.x.big, y: t.y.big } : { x: t.x, y: t.y };
    return new je(r.x, r.y);
  }
  constructor(t, r) {
    this._p = new Cp(t, r, 1n), this.p.assertValidity();
  }
  get p() {
    return this._p;
  }
  get x() {
    return qe.big(this.p.x, 32);
  }
  get y() {
    return qe.big(this.p.y, 32);
  }
  get buff() {
    return qe.raw(this.p.toRawBytes(!0));
  }
  get raw() {
    return this.buff.raw;
  }
  get hex() {
    return this.buff.hex;
  }
  get hasEvenY() {
    return this.p.hasEvenY();
  }
  get hasOddY() {
    return !this.p.hasEvenY();
  }
  get negated() {
    return this.hasOddY ? this.negate() : this;
  }
  eq(t) {
    const r = t instanceof je ? t : je.from_x(t);
    return this.x.big === r.x.big && this.y.big === r.y.big;
  }
  add(t) {
    return t instanceof je ? je.import(this.p.add(t.p)) : je.import(this.p.add(je.generate(t).p));
  }
  sub(t) {
    return t instanceof je ? je.import(this.p.subtract(t.p)) : je.import(this.p.subtract(je.generate(t).p));
  }
  mul(t) {
    return t instanceof je ? je.import(this.p.multiply(t.x.big)) : je.import(this.p.multiply(Ri.mod(t).big));
  }
  negate() {
    return je.import(this.p.negate());
  }
}, je.P = $S, je.G = new je(Up.x, Up.y), je.curve = Wo.CURVE, je.base = Wo.ProjectivePoint.BASE, je.mul = je.generate, je);
function LS(e) {
  if (e instanceof Ri)
    return e.big;
  if (e instanceof xd)
    return e.x.big;
  if (e instanceof Uint8Array)
    return qe.raw(e).big;
  if (typeof e == "string")
    return qe.hex(e).big;
  if (typeof e == "number")
    return qe.num(e).big;
  if (typeof e == "bigint")
    return BigInt(e);
  throw TypeError("Invalid input type:" + typeof e);
}
function zS(e) {
  if (e instanceof Ri)
    return e.point.buff;
  if (e instanceof xd)
    return e.buff;
  if (e instanceof Uint8Array || typeof e == "string")
    return qe.bytes(e);
  if (typeof e == "number" || typeof e == "bigint")
    return qe.bytes(e, 32);
  throw new TypeError(`Unknown type: ${typeof e}`);
}
const Ba = /* @__PURE__ */ BigInt(2 ** 32 - 1), cf = /* @__PURE__ */ BigInt(32);
function sm(e, t = !1) {
  return t ? { h: Number(e & Ba), l: Number(e >> cf & Ba) } : { h: Number(e >> cf & Ba) | 0, l: Number(e & Ba) | 0 };
}
function jS(e, t = !1) {
  let r = new Uint32Array(e.length), n = new Uint32Array(e.length);
  for (let o = 0; o < e.length; o++) {
    const { h: i, l: s } = sm(e[o], t);
    [r[o], n[o]] = [i, s];
  }
  return [r, n];
}
const MS = (e, t) => BigInt(e >>> 0) << cf | BigInt(t >>> 0), DS = (e, t, r) => e >>> r, FS = (e, t, r) => e << 32 - r | t >>> r, KS = (e, t, r) => e >>> r | t << 32 - r, qS = (e, t, r) => e << 32 - r | t >>> r, VS = (e, t, r) => e << 64 - r | t >>> r - 32, WS = (e, t, r) => e >>> r - 32 | t << 64 - r, GS = (e, t) => t, ZS = (e, t) => e, XS = (e, t, r) => e << r | t >>> 32 - r, YS = (e, t, r) => t << r | e >>> 32 - r, JS = (e, t, r) => t << r - 32 | e >>> 64 - r, QS = (e, t, r) => e << r - 32 | t >>> 64 - r;
function ek(e, t, r, n) {
  const o = (t >>> 0) + (n >>> 0);
  return { h: e + r + (o / 2 ** 32 | 0) | 0, l: o | 0 };
}
const tk = (e, t, r) => (e >>> 0) + (t >>> 0) + (r >>> 0), rk = (e, t, r, n) => t + r + n + (e / 2 ** 32 | 0) | 0, nk = (e, t, r, n) => (e >>> 0) + (t >>> 0) + (r >>> 0) + (n >>> 0), ok = (e, t, r, n, o) => t + r + n + o + (e / 2 ** 32 | 0) | 0, ik = (e, t, r, n, o) => (e >>> 0) + (t >>> 0) + (r >>> 0) + (n >>> 0) + (o >>> 0), sk = (e, t, r, n, o, i) => t + r + n + o + i + (e / 2 ** 32 | 0) | 0, Te = {
  fromBig: sm,
  split: jS,
  toBig: MS,
  shrSH: DS,
  shrSL: FS,
  rotrSH: KS,
  rotrSL: qS,
  rotrBH: VS,
  rotrBL: WS,
  rotr32H: GS,
  rotr32L: ZS,
  rotlSH: XS,
  rotlSL: YS,
  rotlBH: JS,
  rotlBL: QS,
  add: ek,
  add3L: tk,
  add3H: rk,
  add4L: nk,
  add4H: ok,
  add5H: sk,
  add5L: ik
}, [ak, ck] = Te.split([
  "0x428a2f98d728ae22",
  "0x7137449123ef65cd",
  "0xb5c0fbcfec4d3b2f",
  "0xe9b5dba58189dbbc",
  "0x3956c25bf348b538",
  "0x59f111f1b605d019",
  "0x923f82a4af194f9b",
  "0xab1c5ed5da6d8118",
  "0xd807aa98a3030242",
  "0x12835b0145706fbe",
  "0x243185be4ee4b28c",
  "0x550c7dc3d5ffb4e2",
  "0x72be5d74f27b896f",
  "0x80deb1fe3b1696b1",
  "0x9bdc06a725c71235",
  "0xc19bf174cf692694",
  "0xe49b69c19ef14ad2",
  "0xefbe4786384f25e3",
  "0x0fc19dc68b8cd5b5",
  "0x240ca1cc77ac9c65",
  "0x2de92c6f592b0275",
  "0x4a7484aa6ea6e483",
  "0x5cb0a9dcbd41fbd4",
  "0x76f988da831153b5",
  "0x983e5152ee66dfab",
  "0xa831c66d2db43210",
  "0xb00327c898fb213f",
  "0xbf597fc7beef0ee4",
  "0xc6e00bf33da88fc2",
  "0xd5a79147930aa725",
  "0x06ca6351e003826f",
  "0x142929670a0e6e70",
  "0x27b70a8546d22ffc",
  "0x2e1b21385c26c926",
  "0x4d2c6dfc5ac42aed",
  "0x53380d139d95b3df",
  "0x650a73548baf63de",
  "0x766a0abb3c77b2a8",
  "0x81c2c92e47edaee6",
  "0x92722c851482353b",
  "0xa2bfe8a14cf10364",
  "0xa81a664bbc423001",
  "0xc24b8b70d0f89791",
  "0xc76c51a30654be30",
  "0xd192e819d6ef5218",
  "0xd69906245565a910",
  "0xf40e35855771202a",
  "0x106aa07032bbd1b8",
  "0x19a4c116b8d2d0c8",
  "0x1e376c085141ab53",
  "0x2748774cdf8eeb99",
  "0x34b0bcb5e19b48a8",
  "0x391c0cb3c5c95a63",
  "0x4ed8aa4ae3418acb",
  "0x5b9cca4f7763e373",
  "0x682e6ff3d6b2b8a3",
  "0x748f82ee5defb2fc",
  "0x78a5636f43172f60",
  "0x84c87814a1f0ab72",
  "0x8cc702081a6439ec",
  "0x90befffa23631e28",
  "0xa4506cebde82bde9",
  "0xbef9a3f7b2c67915",
  "0xc67178f2e372532b",
  "0xca273eceea26619c",
  "0xd186b8c721c0c207",
  "0xeada7dd6cde0eb1e",
  "0xf57d4f7fee6ed178",
  "0x06f067aa72176fba",
  "0x0a637dc5a2c898a6",
  "0x113f9804bef90dae",
  "0x1b710b35131c471b",
  "0x28db77f523047d84",
  "0x32caab7b40c72493",
  "0x3c9ebe0a15c9bebc",
  "0x431d67c49c100d4c",
  "0x4cc5d4becb3e42b6",
  "0x597f299cfc657e2a",
  "0x5fcb6fab3ad6faec",
  "0x6c44198c4a475817"
].map((e) => BigInt(e))), Kn = /* @__PURE__ */ new Uint32Array(80), qn = /* @__PURE__ */ new Uint32Array(80);
let uk = class extends Qf {
  constructor() {
    super(128, 64, 16, !1), this.Ah = 1779033703, this.Al = -205731576, this.Bh = -1150833019, this.Bl = -2067093701, this.Ch = 1013904242, this.Cl = -23791573, this.Dh = -1521486534, this.Dl = 1595750129, this.Eh = 1359893119, this.El = -1377402159, this.Fh = -1694144372, this.Fl = 725511199, this.Gh = 528734635, this.Gl = -79577749, this.Hh = 1541459225, this.Hl = 327033209;
  }
  // prettier-ignore
  get() {
    const { Ah: t, Al: r, Bh: n, Bl: o, Ch: i, Cl: s, Dh: a, Dl: c, Eh: u, El: f, Fh: l, Fl: h, Gh: m, Gl: b, Hh: y, Hl: g } = this;
    return [t, r, n, o, i, s, a, c, u, f, l, h, m, b, y, g];
  }
  // prettier-ignore
  set(t, r, n, o, i, s, a, c, u, f, l, h, m, b, y, g) {
    this.Ah = t | 0, this.Al = r | 0, this.Bh = n | 0, this.Bl = o | 0, this.Ch = i | 0, this.Cl = s | 0, this.Dh = a | 0, this.Dl = c | 0, this.Eh = u | 0, this.El = f | 0, this.Fh = l | 0, this.Fl = h | 0, this.Gh = m | 0, this.Gl = b | 0, this.Hh = y | 0, this.Hl = g | 0;
  }
  process(t, r) {
    for (let v = 0; v < 16; v++, r += 4)
      Kn[v] = t.getUint32(r), qn[v] = t.getUint32(r += 4);
    for (let v = 16; v < 80; v++) {
      const T = Kn[v - 15] | 0, I = qn[v - 15] | 0, P = Te.rotrSH(T, I, 1) ^ Te.rotrSH(T, I, 8) ^ Te.shrSH(T, I, 7), H = Te.rotrSL(T, I, 1) ^ Te.rotrSL(T, I, 8) ^ Te.shrSL(T, I, 7), j = Kn[v - 2] | 0, V = qn[v - 2] | 0, te = Te.rotrSH(j, V, 19) ^ Te.rotrBH(j, V, 61) ^ Te.shrSH(j, V, 6), Z = Te.rotrSL(j, V, 19) ^ Te.rotrBL(j, V, 61) ^ Te.shrSL(j, V, 6), N = Te.add4L(H, Z, qn[v - 7], qn[v - 16]), W = Te.add4H(N, P, te, Kn[v - 7], Kn[v - 16]);
      Kn[v] = W | 0, qn[v] = N | 0;
    }
    let { Ah: n, Al: o, Bh: i, Bl: s, Ch: a, Cl: c, Dh: u, Dl: f, Eh: l, El: h, Fh: m, Fl: b, Gh: y, Gl: g, Hh: x, Hl: S } = this;
    for (let v = 0; v < 80; v++) {
      const T = Te.rotrSH(l, h, 14) ^ Te.rotrSH(l, h, 18) ^ Te.rotrBH(l, h, 41), I = Te.rotrSL(l, h, 14) ^ Te.rotrSL(l, h, 18) ^ Te.rotrBL(l, h, 41), P = l & m ^ ~l & y, H = h & b ^ ~h & g, j = Te.add5L(S, I, H, ck[v], qn[v]), V = Te.add5H(j, x, T, P, ak[v], Kn[v]), te = j | 0, Z = Te.rotrSH(n, o, 28) ^ Te.rotrBH(n, o, 34) ^ Te.rotrBH(n, o, 39), N = Te.rotrSL(n, o, 28) ^ Te.rotrBL(n, o, 34) ^ Te.rotrBL(n, o, 39), W = n & i ^ n & a ^ i & a, D = o & s ^ o & c ^ s & c;
      x = y | 0, S = g | 0, y = m | 0, g = b | 0, m = l | 0, b = h | 0, { h: l, l: h } = Te.add(u | 0, f | 0, V | 0, te | 0), u = a | 0, f = c | 0, a = i | 0, c = s | 0, i = n | 0, s = o | 0;
      const $ = Te.add3L(te, N, D);
      n = Te.add3H($, V, Z, W), o = $ | 0;
    }
    ({ h: n, l: o } = Te.add(this.Ah | 0, this.Al | 0, n | 0, o | 0)), { h: i, l: s } = Te.add(this.Bh | 0, this.Bl | 0, i | 0, s | 0), { h: a, l: c } = Te.add(this.Ch | 0, this.Cl | 0, a | 0, c | 0), { h: u, l: f } = Te.add(this.Dh | 0, this.Dl | 0, u | 0, f | 0), { h: l, l: h } = Te.add(this.Eh | 0, this.El | 0, l | 0, h | 0), { h: m, l: b } = Te.add(this.Fh | 0, this.Fl | 0, m | 0, b | 0), { h: y, l: g } = Te.add(this.Gh | 0, this.Gl | 0, y | 0, g | 0), { h: x, l: S } = Te.add(this.Hh | 0, this.Hl | 0, x | 0, S | 0), this.set(n, o, i, s, a, c, u, f, l, h, m, b, y, g, x, S);
  }
  roundClean() {
    Kn.fill(0), qn.fill(0);
  }
  destroy() {
    this.buffer.fill(0), this.set(0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
  }
};
const lk = /* @__PURE__ */ Jf(() => new uk());
function fk(e, t = !1) {
  const r = Ri.mod(e);
  return t ? r.negated.buff : r.buff;
}
function am(e, t = !1) {
  const r = Ri.mod(e).point;
  return t ? r.x : r.buff;
}
Wo.ProjectivePoint;
function uf(e) {
  if (!Number.isSafeInteger(e) || e < 0)
    throw new Error(`Wrong positive integer: ${e}`);
}
function dk(e) {
  if (typeof e != "boolean")
    throw new Error(`Expected boolean, not ${e}`);
}
function cm(e, ...t) {
  if (!(e instanceof Uint8Array))
    throw new TypeError("Expected Uint8Array");
  if (t.length > 0 && !t.includes(e.length))
    throw new TypeError(`Expected Uint8Array of length ${t}, not of length=${e.length}`);
}
function hk(e) {
  if (typeof e != "function" || typeof e.create != "function")
    throw new Error("Hash should be wrapped by utils.wrapConstructor");
  uf(e.outputLen), uf(e.blockLen);
}
function pk(e, t = !0) {
  if (e.destroyed)
    throw new Error("Hash instance has been destroyed");
  if (t && e.finished)
    throw new Error("Hash#digest() has already been called");
}
function gk(e, t) {
  cm(e);
  const r = t.outputLen;
  if (e.length < r)
    throw new Error(`digestInto() expects output buffer of length at least ${r}`);
}
const mk = {
  number: uf,
  bool: dk,
  bytes: cm,
  hash: hk,
  exists: pk,
  output: gk
};
var ll = mk;
/*! noble-hashes - MIT License (c) 2022 Paul Miller (paulmillr.com) */
const fl = (e) => new DataView(e.buffer, e.byteOffset, e.byteLength), Zr = (e, t) => e << 32 - t | e >>> t, bk = new Uint8Array(new Uint32Array([287454020]).buffer)[0] === 68;
if (!bk)
  throw new Error("Non little-endian hardware is not supported");
Array.from({ length: 256 }, (e, t) => t.toString(16).padStart(2, "0"));
function yk(e) {
  if (typeof e != "string")
    throw new TypeError(`utf8ToBytes expected string, got ${typeof e}`);
  return new TextEncoder().encode(e);
}
function um(e) {
  if (typeof e == "string" && (e = yk(e)), !(e instanceof Uint8Array))
    throw new TypeError(`Expected input type is Uint8Array (got ${typeof e})`);
  return e;
}
let wk = class {
  // Safe version that clones internal state
  clone() {
    return this._cloneInto();
  }
};
function lm(e) {
  const t = (n) => e().update(um(n)).digest(), r = e();
  return t.outputLen = r.outputLen, t.blockLen = r.blockLen, t.create = () => e(), t;
}
function vk(e, t, r, n) {
  if (typeof e.setBigUint64 == "function")
    return e.setBigUint64(t, r, n);
  const o = BigInt(32), i = BigInt(4294967295), s = Number(r >> o & i), a = Number(r & i), c = n ? 4 : 0, u = n ? 0 : 4;
  e.setUint32(t + c, s, n), e.setUint32(t + u, a, n);
}
let xk = class extends wk {
  constructor(t, r, n, o) {
    super(), this.blockLen = t, this.outputLen = r, this.padOffset = n, this.isLE = o, this.finished = !1, this.length = 0, this.pos = 0, this.destroyed = !1, this.buffer = new Uint8Array(t), this.view = fl(this.buffer);
  }
  update(t) {
    ll.exists(this);
    const { view: r, buffer: n, blockLen: o } = this;
    t = um(t);
    const i = t.length;
    for (let s = 0; s < i; ) {
      const a = Math.min(o - this.pos, i - s);
      if (a === o) {
        const c = fl(t);
        for (; o <= i - s; s += o)
          this.process(c, s);
        continue;
      }
      n.set(t.subarray(s, s + a), this.pos), this.pos += a, s += a, this.pos === o && (this.process(r, 0), this.pos = 0);
    }
    return this.length += t.length, this.roundClean(), this;
  }
  digestInto(t) {
    ll.exists(this), ll.output(t, this), this.finished = !0;
    const { buffer: r, view: n, blockLen: o, isLE: i } = this;
    let { pos: s } = this;
    r[s++] = 128, this.buffer.subarray(s).fill(0), this.padOffset > o - s && (this.process(n, 0), s = 0);
    for (let l = s; l < o; l++)
      r[l] = 0;
    vk(n, o - 8, BigInt(this.length * 8), i), this.process(n, 0);
    const a = fl(t), c = this.outputLen;
    if (c % 4)
      throw new Error("_sha2: outputLen should be aligned to 32bit");
    const u = c / 4, f = this.get();
    if (u > f.length)
      throw new Error("_sha2: outputLen bigger than state");
    for (let l = 0; l < u; l++)
      a.setUint32(4 * l, f[l], i);
  }
  digest() {
    const { buffer: t, outputLen: r } = this;
    this.digestInto(t);
    const n = t.slice(0, r);
    return this.destroy(), n;
  }
  _cloneInto(t) {
    t || (t = new this.constructor()), t.set(...this.get());
    const { blockLen: r, buffer: n, length: o, finished: i, destroyed: s, pos: a } = this;
    return t.length = o, t.pos = a, t.finished = i, t.destroyed = s, o % r && t.buffer.set(n), t;
  }
};
const Ek = (e, t, r) => e & t ^ ~e & r, _k = (e, t, r) => e & t ^ e & r ^ t & r, Sk = new Uint32Array([
  1116352408,
  1899447441,
  3049323471,
  3921009573,
  961987163,
  1508970993,
  2453635748,
  2870763221,
  3624381080,
  310598401,
  607225278,
  1426881987,
  1925078388,
  2162078206,
  2614888103,
  3248222580,
  3835390401,
  4022224774,
  264347078,
  604807628,
  770255983,
  1249150122,
  1555081692,
  1996064986,
  2554220882,
  2821834349,
  2952996808,
  3210313671,
  3336571891,
  3584528711,
  113926993,
  338241895,
  666307205,
  773529912,
  1294757372,
  1396182291,
  1695183700,
  1986661051,
  2177026350,
  2456956037,
  2730485921,
  2820302411,
  3259730800,
  3345764771,
  3516065817,
  3600352804,
  4094571909,
  275423344,
  430227734,
  506948616,
  659060556,
  883997877,
  958139571,
  1322822218,
  1537002063,
  1747873779,
  1955562222,
  2024104815,
  2227730452,
  2361852424,
  2428436474,
  2756734187,
  3204031479,
  3329325298
]), Vn = new Uint32Array([
  1779033703,
  3144134277,
  1013904242,
  2773480762,
  1359893119,
  2600822924,
  528734635,
  1541459225
]), Wn = new Uint32Array(64);
let fm = class extends xk {
  constructor() {
    super(64, 32, 8, !1), this.A = Vn[0] | 0, this.B = Vn[1] | 0, this.C = Vn[2] | 0, this.D = Vn[3] | 0, this.E = Vn[4] | 0, this.F = Vn[5] | 0, this.G = Vn[6] | 0, this.H = Vn[7] | 0;
  }
  get() {
    const { A: t, B: r, C: n, D: o, E: i, F: s, G: a, H: c } = this;
    return [t, r, n, o, i, s, a, c];
  }
  // prettier-ignore
  set(t, r, n, o, i, s, a, c) {
    this.A = t | 0, this.B = r | 0, this.C = n | 0, this.D = o | 0, this.E = i | 0, this.F = s | 0, this.G = a | 0, this.H = c | 0;
  }
  process(t, r) {
    for (let l = 0; l < 16; l++, r += 4)
      Wn[l] = t.getUint32(r, !1);
    for (let l = 16; l < 64; l++) {
      const h = Wn[l - 15], m = Wn[l - 2], b = Zr(h, 7) ^ Zr(h, 18) ^ h >>> 3, y = Zr(m, 17) ^ Zr(m, 19) ^ m >>> 10;
      Wn[l] = y + Wn[l - 7] + b + Wn[l - 16] | 0;
    }
    let { A: n, B: o, C: i, D: s, E: a, F: c, G: u, H: f } = this;
    for (let l = 0; l < 64; l++) {
      const h = Zr(a, 6) ^ Zr(a, 11) ^ Zr(a, 25), m = f + h + Ek(a, c, u) + Sk[l] + Wn[l] | 0, y = (Zr(n, 2) ^ Zr(n, 13) ^ Zr(n, 22)) + _k(n, o, i) | 0;
      f = u, u = c, c = a, a = s + m | 0, s = i, i = o, o = n, n = m + y | 0;
    }
    n = n + this.A | 0, o = o + this.B | 0, i = i + this.C | 0, s = s + this.D | 0, a = a + this.E | 0, c = c + this.F | 0, u = u + this.G | 0, f = f + this.H | 0, this.set(n, o, i, s, a, c, u, f);
  }
  roundClean() {
    Wn.fill(0);
  }
  destroy() {
    this.set(0, 0, 0, 0, 0, 0, 0, 0), this.buffer.fill(0);
  }
}, kk = class extends fm {
  constructor() {
    super(), this.A = -1056596264, this.B = 914150663, this.C = 812702999, this.D = -150054599, this.E = -4191439, this.F = 1750603025, this.G = 1694076839, this.H = -1090891868, this.outputLen = 28;
  }
};
const lf = lm(() => new fm());
lm(() => new kk());
function Ak(e, t) {
  if (e.length > t)
    throw new TypeError(`Data is larger than array size: ${e.length} > ${t}`);
}
function Tk(e) {
  if (e.match(/[^a-fA-f0-9]/) !== null)
    throw new TypeError("Invalid characters in hex string: " + e);
  if (e.length % 2 !== 0)
    throw new Error(`Length of hex string is invalid: ${e.length}`);
}
function Ik(e) {
  if (e > Number.MAX_SAFE_INTEGER)
    throw new TypeError("Number exceeds safe bounds!");
}
const { getRandomValues: Pk } = crypto ?? globalThis.crypto ?? window.crypto;
function Ok(e = 32) {
  if (typeof Pk == "function")
    return crypto.getRandomValues(new Uint8Array(e));
  throw new Error("Crypto module missing getRandomValues!");
}
function Bk(e, t, r = "be") {
  t === void 0 && (t = e.length), Ak(e, t);
  const n = new Uint8Array(t).fill(0), o = r === "be" ? 0 : t - e.length;
  return n.set(e, o), n;
}
function dm(e) {
  let t, r = 0;
  const n = e.reduce((i, s) => i + s.length, 0), o = new Uint8Array(n);
  for (t = 0; t < e.length; t++) {
    const i = e[t];
    o.set(i, r), r += i.length;
  }
  return o;
}
const $k = new TextEncoder(), Nk = [
  {
    name: "base58",
    charset: "123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz"
  }
];
function hm(e) {
  for (const t of Nk)
    if (t.name === e)
      return t.charset;
  throw TypeError("Charset does not exist: " + e);
}
function Uk(e, t, r = !1) {
  typeof e == "string" && (e = $k.encode(e));
  const n = hm(t), o = n.length, i = [];
  let s = "", a, c = 0, u, f;
  for (a = 0; a < e.length; a++)
    for (c = 0, u = e[a], s += u > 0 || (s.length ^ a) > 0 ? "" : "1"; c in i || u > 0; )
      f = i[c], f = f > 0 ? f * 256 + u : u, u = f / o | 0, i[c] = f % o, c++;
  for (; c-- > 0; )
    s += n[i[c]];
  return r && s.length % 4 > 0 ? s + "=".repeat(4 - s.length % 4) : s;
}
function Ck(e, t) {
  const r = hm(t), n = r.length, o = [], i = [];
  e = e.replace("=", "");
  let s, a = 0, c, u;
  for (s = 0; s < e.length; s++) {
    if (a = 0, c = r.indexOf(e[s]), c < 0)
      throw new Error(`Character range out of bounds: ${c}`);
    for (c > 0 || (i.length ^ s) > 0 || i.push(0); a in o || c > 0; )
      u = o[a], u = u > 0 ? u * n + c : c, c = u >> 8, o[a] = u % 256, a++;
  }
  for (; a-- > 0; )
    i.push(o[a]);
  return new Uint8Array(i);
}
function pm(e) {
  return lf(lf(e));
}
function Hk(e) {
  const t = pm(e);
  return dm([e, t.slice(0, 4)]);
}
function Rk(e) {
  const t = e.slice(0, -4), r = e.slice(-4);
  if (pm(t).slice(0, 4).toString() !== r.toString())
    throw new Error("Invalid checksum!");
  return t;
}
const Hp = {
  encode: Uk,
  decode: Ck
}, gm = {
  encode: (e) => {
    const t = Hk(e);
    return Hp.encode(t, "base58");
  },
  decode: (e) => {
    const t = Hp.decode(e, "base58");
    return Rk(t);
  }
}, mm = "qpzry9x8gf2tvdw0s3jn54khce6mua7l", Lk = [996825010, 642813549, 513874426, 1027748829, 705979059], lc = [
  { version: 0, name: "bech32", const: 1 },
  { version: 1, name: "bech32m", const: 734539939 }
];
function bm(e) {
  let t = 1;
  for (let r = 0; r < e.length; ++r) {
    const n = t >> 25;
    t = (t & 33554431) << 5 ^ e[r];
    for (let o = 0; o < 5; ++o)
      n >> o & 1 && (t ^= Lk[o]);
  }
  return t;
}
function ym(e) {
  const t = [];
  let r;
  for (r = 0; r < e.length; ++r)
    t.push(e.charCodeAt(r) >> 5);
  for (t.push(0), r = 0; r < e.length; ++r)
    t.push(e.charCodeAt(r) & 31);
  return t;
}
function zk(e, t, r) {
  const n = ym(e).concat(t);
  return bm(n) === r.const;
}
function jk(e, t, r) {
  const n = ym(e).concat(t).concat([0, 0, 0, 0, 0, 0]), o = bm(n) ^ r.const, i = [];
  for (let s = 0; s < 6; ++s)
    i.push(o >> 5 * (5 - s) & 31);
  return i;
}
function wm(e, t, r, n = !0) {
  const o = [];
  let i = 0, s = 0;
  const a = (1 << r) - 1, c = (1 << t + r - 1) - 1;
  for (const u of e) {
    if (u < 0 || u >> t > 0)
      throw new Error("Failed to perform base conversion. Invalid value: " + String(u));
    for (i = (i << t | u) & c, s += t; s >= r; )
      s -= r, o.push(i >> s & a);
  }
  if (n)
    s > 0 && o.push(i << r - s & a);
  else if (s >= t || (i << r - s & a) > 0)
    throw new Error("Failed to perform base conversion. Invalid Size!");
  return o;
}
function Mk(e, t, r) {
  const n = t.concat(jk(e, t, r));
  let o = e + "1";
  for (let i = 0; i < n.length; ++i)
    o += mm.charAt(n[i]);
  return o;
}
function vm(e) {
  if (!Dk(e))
    throw new Error("Encoded string goes out of bounds!");
  if (e = e.toLowerCase(), !Fk(e))
    throw new Error("Encoded string has invalid separator!");
  const t = [], r = e.lastIndexOf("1"), n = e.substring(0, r);
  for (let i = r + 1; i < e.length; ++i) {
    const s = mm.indexOf(e.charAt(i));
    if (s === -1)
      throw new Error("Character idx out of bounds: " + String(i));
    t.push(s);
  }
  const o = lc.find((i) => i.version === t[0]) ?? lc[0];
  if (!zk(n, t, o))
    throw new Error("Checksum verification failed!");
  return [n, t.slice(0, t.length - 6)];
}
function Dk(e) {
  let t, r, n = !1, o = !1;
  for (t = 0; t < e.length; ++t) {
    if (r = e.charCodeAt(t), r < 33 || r > 126)
      return !1;
    r >= 97 && r <= 122 && (n = !0), r >= 65 && r <= 90 && (o = !0);
  }
  return !(n && o);
}
function Fk(e) {
  const t = e.lastIndexOf("1");
  return !(t < 1 || t + 7 > e.length || e.length > 90);
}
function Kk(e, t = "bc", r = 0) {
  const n = [r, ...wm([...e], 8, 5)], o = lc.find((s) => s.version === r) ?? lc[0], i = Mk(t, n, o);
  return xm(i), i;
}
function xm(e) {
  e = e.toLowerCase();
  const t = e.split("1", 1)[0], [r, n] = vm(e), o = wm(n.slice(1), 5, 8, !1), i = o.length;
  switch (!0) {
    case t !== r:
      throw new Error("Returned hrp string is invalid.");
    case (o === null || i < 2 || i > 40):
      throw new Error("Decoded string is invalid or out of spec.");
    case n[0] > 16:
      throw new Error("Returned version bit is out of range.");
    default:
      return Uint8Array.from(o);
  }
}
function qk(e) {
  e = e.toLowerCase();
  const [t, r] = vm(e);
  return r[0];
}
const Em = {
  encode: Kk,
  decode: xm,
  version: qk
}, _m = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/", Sm = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789-_", Vk = new TextEncoder();
function km(e, t = !1, r = !0) {
  typeof e == "string" && (e = Vk.encode(e));
  const n = t ? Sm : _m;
  let o = "", i = 0, s = 0;
  for (let a = 0; a < e.length; a++)
    for (s = s << 8 | e[a], i += 8; i >= 6; )
      i -= 6, o += n[s >> i & 63];
  if (i > 0)
    for (s <<= 6 - i, o += n[s & 63]; i < 6; )
      o += r ? "=" : "", i += 2;
  return o;
}
function Am(e, t = !1) {
  const r = t || e.includes("-") || e.includes("_") ? Sm.split("") : _m.split("");
  e = e.replace(/=+$/, "");
  const n = e.split("");
  let o = 0, i = 0;
  const s = [];
  for (let a = 0; a < n.length; a++) {
    const c = n[a], u = r.indexOf(c);
    if (u === -1)
      throw new Error("Invalid character: " + c);
    o += 6, i <<= 6, i |= u, o >= 8 && (o -= 8, s.push(i >>> o & 255));
  }
  return new Uint8Array(s);
}
const Tm = {
  encode: km,
  decode: Am
}, Im = {
  encode: (e) => km(e, !0, !1),
  decode: (e) => Am(e, !0)
}, Wk = BigInt(0), Gk = BigInt(255), Pm = BigInt(256);
function Zk(e) {
  if (e <= 0xffn)
    return 1;
  if (e <= 0xffffn)
    return 2;
  if (e <= 0xffffffffn)
    return 4;
  if (e <= 0xffffffffffffffffn)
    return 8;
  if (e <= 0xffffffffffffffffffffffffffffffffn)
    return 16;
  if (e <= 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffn)
    return 32;
  throw new TypeError("Must specify a fixed buffer size for bigints greater than 32 bytes.");
}
function Xk(e, t, r = "be") {
  t === void 0 && (t = Zk(e));
  const n = r === "le", o = new ArrayBuffer(t), i = new DataView(o);
  let s = n ? 0 : t - 1;
  for (; e > Wk; ) {
    const a = e & Gk, c = Number(a);
    n ? i.setUint8(s++, c) : i.setUint8(s--, c), e = (e - a) / Pm;
  }
  return new Uint8Array(o);
}
function Yk(e) {
  let t = BigInt(0);
  for (let r = e.length - 1; r >= 0; r--)
    t = t * Pm + BigInt(e[r]);
  return BigInt(t);
}
function Jk(e) {
  const t = e.split("").map(Number);
  if (t.length % 8 !== 0)
    throw new Error(`Binary array is invalid length: ${e.length}`);
  const r = new Uint8Array(t.length / 8);
  for (let n = 0, o = 0; n < t.length; n += 8, o++) {
    let i = 0;
    for (let s = 0; s < 8; s++)
      i |= t[n + s] << 7 - s;
    r[o] = i;
  }
  return r;
}
function Qk(e) {
  const t = new Array(e.length * 8);
  let r = 0;
  for (const n of e) {
    if (n > 255)
      throw new Error(`Invalid byte value: ${n}. Byte values must be between 0 and 255.`);
    for (let o = 7; o >= 0; o--, r++)
      t[r] = n >> o & 1;
  }
  return t.join("");
}
function eA(e) {
  if (e <= 255)
    return 1;
  if (e <= 65535)
    return 2;
  if (e <= 4294967295)
    return 4;
  throw new TypeError("Numbers larger than 4 bytes must specify a fixed size!");
}
function tA(e, t, r = "be") {
  t === void 0 && (t = eA(e));
  const n = r === "le", o = new ArrayBuffer(t), i = new DataView(o);
  let s = n ? 0 : t - 1;
  for (; e > 0; ) {
    const a = e & 255;
    n ? i.setUint8(s++, e) : i.setUint8(s--, e), e = (e - a) / 256;
  }
  return new Uint8Array(o);
}
function rA(e) {
  let t = 0;
  for (let r = e.length - 1; r >= 0; r--)
    t = t * 256 + e[r], Ik(t);
  return t;
}
const nA = new TextEncoder(), oA = new TextDecoder();
function Ed(e) {
  return nA.encode(e);
}
function dl(e) {
  return oA.decode(e);
}
function iA(e, t) {
  Tk(e);
  const r = e.length / 2;
  if (t === void 0 && (t = r), r > t)
    throw new TypeError(`Hex string is larger than array size: ${r} > ${t}`);
  return t;
}
function sA(e, t, r = "le") {
  t = iA(e, t);
  const n = r === "le", o = new ArrayBuffer(t), i = new DataView(o);
  let s = n ? 0 : t - 1;
  for (let a = 0; a < e.length; a += 2) {
    const c = e.substring(a, a + 2), u = parseInt(c, 16);
    n ? i.setUint8(s++, u) : i.setUint8(s--, u);
  }
  return new Uint8Array(o);
}
function aA(e) {
  let t = "";
  for (let r = 0; r < e.length; r++)
    t += e[r].toString(16).padStart(2, "0");
  return t;
}
function cA(e) {
  const t = JSON.stringify(e, (r, n) => typeof n == "bigint" ? `${n}n` : n);
  return Ed(t);
}
function uA(e, t, r) {
  if (e instanceof ArrayBuffer)
    return new Uint8Array(e);
  if (e instanceof Uint8Array)
    return Bk(e, t, r);
  if (typeof e == "string")
    return sA(e, t, r);
  if (typeof e == "bigint")
    return Xk(e, t, r);
  if (typeof e == "number")
    return tA(e, t, r);
  if (typeof e == "boolean")
    return Uint8Array.of(e ? 1 : 0);
  throw TypeError("Unsupported format:" + typeof e);
}
var Ee;
let U = (Ee = class extends Uint8Array {
  static random(t = 32) {
    const r = Ok(t);
    return new Ee(r, t);
  }
  constructor(t, r, n) {
    const o = uA(t, r, n);
    super(o);
  }
  get arr() {
    return [...this];
  }
  get num() {
    return this.toNum();
  }
  get big() {
    return this.toBig();
  }
  get str() {
    return this.toStr();
  }
  get hex() {
    return this.toHex();
  }
  get raw() {
    return new Uint8Array(this);
  }
  get bin() {
    return this.toBin();
  }
  get b58chk() {
    return this.tob58chk();
  }
  get base64() {
    return this.toBase64();
  }
  get b64url() {
    return this.toB64url();
  }
  get digest() {
    return this.toHash();
  }
  get id() {
    return this.toHash().hex;
  }
  get stream() {
    return new Yi(this);
  }
  toNum(t = "be") {
    const r = t === "be" ? this.reverse() : this;
    return rA(r);
  }
  toBin() {
    return Qk(this);
  }
  toBig(t = "be") {
    const r = t === "be" ? this.reverse() : this;
    return Yk(r);
  }
  toHash() {
    const t = lf(this);
    return new Ee(t);
  }
  toJson() {
    const t = dl(this);
    return JSON.parse(t);
  }
  toBech32(t, r = 0) {
    return Em.encode(this, t, r);
  }
  toStr() {
    return dl(this);
  }
  toHex() {
    return aA(this);
  }
  toBytes() {
    return new Uint8Array(this);
  }
  tob58chk() {
    return gm.encode(this);
  }
  toBase64() {
    return Tm.encode(this);
  }
  toB64url() {
    return Im.encode(this);
  }
  prepend(t) {
    return Ee.join([Ee.bytes(t), this]);
  }
  append(t) {
    return Ee.join([this, Ee.bytes(t)]);
  }
  slice(t, r) {
    const n = new Uint8Array(this).slice(t, r);
    return new Ee(n);
  }
  subarray(t, r) {
    const n = new Uint8Array(this).subarray(t, r);
    return new Ee(n);
  }
  reverse() {
    const t = new Uint8Array(this).reverse();
    return new Ee(t);
  }
  write(t, r) {
    const n = Ee.bytes(t);
    this.set(n, r);
  }
  prefixSize(t) {
    const r = Ee.varInt(this.length, t);
    return Ee.join([r, this]);
  }
  static from(t) {
    return new Ee(Uint8Array.from(t));
  }
  static of(...t) {
    return new Ee(Uint8Array.of(...t));
  }
  static join(t) {
    const r = t.map((o) => Ee.bytes(o)), n = dm(r);
    return new Ee(n);
  }
  static varInt(t, r) {
    if (t < 253)
      return Ee.num(t, 1);
    if (t < 65536)
      return Ee.of(253, ...Ee.num(t, 2, r));
    if (t < 4294967296)
      return Ee.of(254, ...Ee.num(t, 4, r));
    if (BigInt(t) < 0x10000000000000000n)
      return Ee.of(255, ...Ee.num(t, 8, r));
    throw new Error(`Value is too large: ${t}`);
  }
}, Ee.num = lA, Ee.big = dA, Ee.bin = fA, Ee.raw = hA, Ee.str = pA, Ee.hex = gA, Ee.bytes = mA, Ee.json = bA, Ee.base64 = yA, Ee.b64url = wA, Ee.bech32 = vA, Ee.b58chk = xA, Ee.encode = Ed, Ee.decode = dl, Ee);
function lA(e, t, r) {
  return new U(e, t, r);
}
function fA(e, t, r) {
  return new U(Jk(e), t, r);
}
function dA(e, t, r) {
  return new U(e, t, r);
}
function hA(e, t, r) {
  return new U(e, t, r);
}
function pA(e, t, r) {
  return new U(Ed(e), t, r);
}
function gA(e, t, r) {
  return new U(e, t, r);
}
function mA(e, t, r) {
  return new U(e, t, r);
}
function bA(e) {
  return new U(cA(e));
}
function yA(e) {
  return new U(Tm.decode(e));
}
function wA(e) {
  return new U(Im.decode(e));
}
function vA(e) {
  return new U(Em.decode(e));
}
function xA(e) {
  return new U(gm.decode(e));
}
let Yi = class {
  constructor(t) {
    this.data = U.bytes(t), this.size = this.data.length;
  }
  peek(t) {
    if (t > this.size)
      throw new Error(`Size greater than stream: ${t} > ${this.size}`);
    return new U(this.data.slice(0, t));
  }
  read(t) {
    t = t ?? this.readSize();
    const r = this.peek(t);
    return this.data = this.data.slice(t), this.size = this.data.length, r;
  }
  readSize(t) {
    const r = this.read(1).num;
    switch (!0) {
      case (r >= 0 && r < 253):
        return r;
      case r === 253:
        return this.read(2).toNum(t);
      case r === 254:
        return this.read(4).toNum(t);
      case r === 255:
        return this.read(8).toNum(t);
      default:
        throw new Error(`Varint is out of range: ${r}`);
    }
  }
};
function un(e, t) {
  const r = U.bytes(e);
  if (r.length !== t)
    throw new Error(`Invalid input size: ${r.hex} !== ${t}`);
}
function Ft(e, t) {
  if (t)
    throw new Error(e);
  return !1;
}
function Ka(e, ...t) {
  const r = U.str(e).digest.raw, n = t.map((o) => U.bytes(o));
  return U.join([r, r, U.join(n)]).digest;
}
const Om = {
  OP_0: 0,
  OP_PUSHDATA1: 76,
  OP_PUSHDATA2: 77,
  OP_PUSHDATA4: 78,
  OP_1NEGATE: 79,
  OP_SUCCESS80: 80,
  OP_1: 81,
  OP_2: 82,
  OP_3: 83,
  OP_4: 84,
  OP_5: 85,
  OP_6: 86,
  OP_7: 87,
  OP_8: 88,
  OP_9: 89,
  OP_10: 90,
  OP_11: 91,
  OP_12: 92,
  OP_13: 93,
  OP_14: 94,
  OP_15: 95,
  OP_16: 96,
  OP_NOP: 97,
  OP_SUCCESS98: 98,
  OP_IF: 99,
  OP_NOTIF: 100,
  OP_ELSE: 103,
  OP_ENDIF: 104,
  OP_VERIFY: 105,
  OP_RETURN: 106,
  OP_TOALTSTACK: 107,
  OP_FROMALTSTACK: 108,
  OP_2DROP: 109,
  OP_2DUP: 110,
  OP_3DUP: 111,
  OP_2OVER: 112,
  OP_2ROT: 113,
  OP_2SWAP: 114,
  OP_IFDUP: 115,
  OP_DEPTH: 116,
  OP_DROP: 117,
  OP_DUP: 118,
  OP_NIP: 119,
  OP_OVER: 120,
  OP_PICK: 121,
  OP_ROLL: 122,
  OP_ROT: 123,
  OP_SWAP: 124,
  OP_TUCK: 125,
  OP_SUCCESS126: 126,
  OP_SUCCESS127: 127,
  OP_SUCCESS128: 128,
  OP_SUCCESS129: 129,
  OP_SIZE: 130,
  OP_SUCCESS131: 131,
  OP_SUCCESS132: 132,
  OP_SUCCESS133: 133,
  OP_SUCCESS134: 134,
  OP_EQUAL: 135,
  OP_EQUALVERIFY: 136,
  OP_SUCCESS137: 137,
  OP_SUCCESS138: 138,
  OP_1ADD: 139,
  OP_1SUB: 140,
  OP_SUCCESS141: 141,
  OP_SUCCESS142: 142,
  OP_NEGATE: 143,
  OP_ABS: 144,
  OP_NOT: 145,
  OP_0NOTEQUAL: 146,
  OP_ADD: 147,
  OP_SUB: 148,
  OP_SUCCESS149: 149,
  OP_SUCCESS150: 150,
  OP_SUCCESS151: 151,
  OP_SUCCESS152: 152,
  OP_SUCCESS153: 153,
  OP_BOOLAND: 154,
  OP_BOOLOR: 155,
  OP_NUMEQUAL: 156,
  OP_NUMEQUALVERIFY: 157,
  OP_NUMNOTEQUAL: 158,
  OP_LESSTHAN: 159,
  OP_GREATERTHAN: 160,
  OP_LESSTHANOREQUAL: 161,
  OP_GREATERTHANOREQUAL: 162,
  OP_MIN: 163,
  OP_MAX: 164,
  OP_WITHIN: 165,
  OP_RIPEMD160: 166,
  OP_SHA1: 167,
  OP_SHA256: 168,
  OP_HASH160: 169,
  OP_HASH256: 170,
  OP_CODESEPARATOR: 171,
  OP_CHECKSIG: 172,
  OP_CHECKSIGVERIFY: 173,
  OP_CHECKMULTISIG: 174,
  OP_CHECKMULTISIGVERIFY: 175,
  OP_NOP1: 176,
  OP_CHECKLOCKTIMEVERIFY: 177,
  OP_CHECKSEQUENCEVERIFY: 178,
  OP_NOP4: 179,
  OP_NOP5: 180,
  OP_NOP6: 181,
  OP_NOP7: 182,
  OP_NOP8: 183,
  OP_NOP9: 184,
  OP_NOP10: 185,
  OP_CHECKSIGADD: 186
};
function EA(e) {
  if (e > 186 && e < 255)
    return "OP_SUCCESS" + String(e);
  for (const [t, r] of Object.entries(Om))
    if (r === e)
      return t;
  throw new Error("OPCODE not found:" + String(e));
}
function _A(e) {
  for (const [t, r] of Object.entries(Om))
    if (t === e)
      return Number(r);
  throw new Error("OPCODE not found:" + e);
}
function SA(e) {
  switch (!0) {
    case e === 0:
      return "opcode";
    case (e >= 1 && e <= 75):
      return "varint";
    case e === 76:
      return "pushdata1";
    case e === 77:
      return "pushdata2";
    case e === 78:
      return "pushdata4";
    case e <= 254:
      return "opcode";
    default:
      throw new Error(`Invalid word range: ${e}`);
  }
}
function kA(e) {
  const n = [];
  switch (!0) {
    case typeof e != "number":
      return !1;
    case e === 0:
      return !0;
    case n.includes(e):
      return !1;
    case (75 < e && e < 254):
      return !0;
    default:
      return !1;
  }
}
function Un(e) {
  return typeof e == "string" && e.length % 2 === 0 && /[0-9a-fA-F]/.test(e);
}
function Bm(e) {
  return Un(e) || e instanceof Uint8Array;
}
const fc = 520;
function ni(e = [], t = !0) {
  let r = U.num(0);
  return Array.isArray(e) && (r = U.raw($m(e))), Un(e) && (r = U.hex(e)), e instanceof Uint8Array && (r = U.raw(e)), t && (r = r.prefixSize("le")), r;
}
function $m(e) {
  const t = [];
  for (const r of e)
    t.push(AA(r));
  return t.length > 0 ? U.join(t) : new Uint8Array();
}
function AA(e) {
  let t = new Uint8Array();
  if (typeof e == "string") {
    if (e.startsWith("OP_"))
      return U.num(_A(e), 1);
    Un(e) ? t = U.hex(e) : t = U.str(e);
  } else if (t = U.bytes(e), t.length === 1 && t[0] <= 16)
    return t[0] !== 0 && (t[0] += 80), t;
  if (t.length > fc) {
    const r = IA(t);
    return $m(r);
  }
  return U.join([TA(t.length), t]);
}
function TA(e) {
  const t = U.num(76, 1), r = U.num(77, 1);
  switch (!0) {
    case e <= 75:
      return U.num(e);
    case (e > 75 && e < 256):
      return U.join([t, U.num(e, 1, "le")]);
    case (e >= 256 && e <= fc):
      return U.join([r, U.num(e, 2, "le")]);
    default:
      throw new Error("Invalid word size:" + e.toString());
  }
}
function IA(e) {
  const t = [], r = new Yi(e);
  for (; r.size > fc; )
    t.push(r.read(fc));
  return t.push(r.read(r.size)), t;
}
function _d(e, t = !1) {
  let r = U.bytes(e);
  if (t) {
    const o = r.stream.readSize("le");
    if (r = r.slice(1), r.length !== o)
      throw new Error(`Varint does not match stream size: ${o} !== ${r.length}`);
  }
  return PA(r);
}
function PA(e) {
  const t = new Yi(e), r = [], n = t.size;
  let o, i, s, a = 0;
  for (; a < n; )
    switch (o = t.read(1).num, i = SA(o), a++, i) {
      case "varint":
        r.push(t.read(o).hex), a += o;
        break;
      case "pushdata1":
        s = t.read(1).reverse().num, r.push(t.read(s).hex), a += s + 1;
        break;
      case "pushdata2":
        s = t.read(2).reverse().num, r.push(t.read(s).hex), a += s + 2;
        break;
      case "pushdata4":
        s = t.read(4).reverse().num, r.push(t.read(s).hex), a += s + 4;
        break;
      case "opcode":
        if (!kA(o))
          throw new Error(`Invalid OPCODE: ${o}`);
        r.push(EA(o));
        break;
      default:
        throw new Error(`Word type undefined: ${o}`);
    }
  return r;
}
function OA(e, t) {
  if (Array.isArray(e) && (e = ni(e, t)), e instanceof Uint8Array || Un(e))
    return _d(e, t);
  throw new Error("Invalid format: " + typeof e);
}
function BA(e, t) {
  if ((e instanceof Uint8Array || Un(e)) && (e = _d(e, t)), Array.isArray(e))
    return ni(e, t);
  throw new Error("Invalid format: " + typeof e);
}
function $A(e) {
  if (!Array.isArray(e))
    return U.bytes(e);
  throw new Error("Invalid format: " + typeof e);
}
const NA = {
  toAsm: OA,
  toBytes: BA,
  toParam: $A
}, Xt = {
  encode: ni,
  decode: _d,
  fmt: NA
};
function ff(e) {
  if (!Number.isSafeInteger(e) || e < 0)
    throw new Error(`Wrong positive integer: ${e}`);
}
function UA(e) {
  if (typeof e != "boolean")
    throw new Error(`Expected boolean, not ${e}`);
}
function Nm(e, ...t) {
  if (!(e instanceof Uint8Array))
    throw new TypeError("Expected Uint8Array");
  if (t.length > 0 && !t.includes(e.length))
    throw new TypeError(`Expected Uint8Array of length ${t}, not of length=${e.length}`);
}
function CA(e) {
  if (typeof e != "function" || typeof e.create != "function")
    throw new Error("Hash should be wrapped by utils.wrapConstructor");
  ff(e.outputLen), ff(e.blockLen);
}
function HA(e, t = !0) {
  if (e.destroyed)
    throw new Error("Hash instance has been destroyed");
  if (t && e.finished)
    throw new Error("Hash#digest() has already been called");
}
function RA(e, t) {
  Nm(e);
  const r = t.outputLen;
  if (e.length < r)
    throw new Error(`digestInto() expects output buffer of length at least ${r}`);
}
const LA = {
  number: ff,
  bool: UA,
  bytes: Nm,
  hash: CA,
  exists: HA,
  output: RA
};
var Ro = LA;
const hl = typeof globalThis == "object" && "crypto" in globalThis ? globalThis.crypto : void 0;
/*! noble-hashes - MIT License (c) 2022 Paul Miller (paulmillr.com) */
const pl = (e) => new DataView(e.buffer, e.byteOffset, e.byteLength), Xr = (e, t) => e << 32 - t | e >>> t, zA = new Uint8Array(new Uint32Array([287454020]).buffer)[0] === 68;
if (!zA)
  throw new Error("Non little-endian hardware is not supported");
Array.from({ length: 256 }, (e, t) => t.toString(16).padStart(2, "0"));
function jA(e) {
  if (typeof e != "string")
    throw new TypeError(`utf8ToBytes expected string, got ${typeof e}`);
  return new TextEncoder().encode(e);
}
function Sd(e) {
  if (typeof e == "string" && (e = jA(e)), !(e instanceof Uint8Array))
    throw new TypeError(`Expected input type is Uint8Array (got ${typeof e})`);
  return e;
}
function MA(...e) {
  if (!e.every((n) => n instanceof Uint8Array))
    throw new Error("Uint8Array list expected");
  if (e.length === 1)
    return e[0];
  const t = e.reduce((n, o) => n + o.length, 0), r = new Uint8Array(t);
  for (let n = 0, o = 0; n < e.length; n++) {
    const i = e[n];
    r.set(i, o), o += i.length;
  }
  return r;
}
let Um = class {
  // Safe version that clones internal state
  clone() {
    return this._cloneInto();
  }
};
function Cm(e) {
  const t = (n) => e().update(Sd(n)).digest(), r = e();
  return t.outputLen = r.outputLen, t.blockLen = r.blockLen, t.create = () => e(), t;
}
function Hm(e = 32) {
  if (hl && typeof hl.getRandomValues == "function")
    return hl.getRandomValues(new Uint8Array(e));
  throw new Error("crypto.getRandomValues must be defined");
}
function DA(e, t, r, n) {
  if (typeof e.setBigUint64 == "function")
    return e.setBigUint64(t, r, n);
  const o = BigInt(32), i = BigInt(4294967295), s = Number(r >> o & i), a = Number(r & i), c = n ? 4 : 0, u = n ? 0 : 4;
  e.setUint32(t + c, s, n), e.setUint32(t + u, a, n);
}
let FA = class extends Um {
  constructor(t, r, n, o) {
    super(), this.blockLen = t, this.outputLen = r, this.padOffset = n, this.isLE = o, this.finished = !1, this.length = 0, this.pos = 0, this.destroyed = !1, this.buffer = new Uint8Array(t), this.view = pl(this.buffer);
  }
  update(t) {
    Ro.exists(this);
    const { view: r, buffer: n, blockLen: o } = this;
    t = Sd(t);
    const i = t.length;
    for (let s = 0; s < i; ) {
      const a = Math.min(o - this.pos, i - s);
      if (a === o) {
        const c = pl(t);
        for (; o <= i - s; s += o)
          this.process(c, s);
        continue;
      }
      n.set(t.subarray(s, s + a), this.pos), this.pos += a, s += a, this.pos === o && (this.process(r, 0), this.pos = 0);
    }
    return this.length += t.length, this.roundClean(), this;
  }
  digestInto(t) {
    Ro.exists(this), Ro.output(t, this), this.finished = !0;
    const { buffer: r, view: n, blockLen: o, isLE: i } = this;
    let { pos: s } = this;
    r[s++] = 128, this.buffer.subarray(s).fill(0), this.padOffset > o - s && (this.process(n, 0), s = 0);
    for (let l = s; l < o; l++)
      r[l] = 0;
    DA(n, o - 8, BigInt(this.length * 8), i), this.process(n, 0);
    const a = pl(t), c = this.outputLen;
    if (c % 4)
      throw new Error("_sha2: outputLen should be aligned to 32bit");
    const u = c / 4, f = this.get();
    if (u > f.length)
      throw new Error("_sha2: outputLen bigger than state");
    for (let l = 0; l < u; l++)
      a.setUint32(4 * l, f[l], i);
  }
  digest() {
    const { buffer: t, outputLen: r } = this;
    this.digestInto(t);
    const n = t.slice(0, r);
    return this.destroy(), n;
  }
  _cloneInto(t) {
    t || (t = new this.constructor()), t.set(...this.get());
    const { blockLen: r, buffer: n, length: o, finished: i, destroyed: s, pos: a } = this;
    return t.length = o, t.pos = a, t.finished = i, t.destroyed = s, o % r && t.buffer.set(n), t;
  }
};
const KA = (e, t, r) => e & t ^ ~e & r, qA = (e, t, r) => e & t ^ e & r ^ t & r, VA = new Uint32Array([
  1116352408,
  1899447441,
  3049323471,
  3921009573,
  961987163,
  1508970993,
  2453635748,
  2870763221,
  3624381080,
  310598401,
  607225278,
  1426881987,
  1925078388,
  2162078206,
  2614888103,
  3248222580,
  3835390401,
  4022224774,
  264347078,
  604807628,
  770255983,
  1249150122,
  1555081692,
  1996064986,
  2554220882,
  2821834349,
  2952996808,
  3210313671,
  3336571891,
  3584528711,
  113926993,
  338241895,
  666307205,
  773529912,
  1294757372,
  1396182291,
  1695183700,
  1986661051,
  2177026350,
  2456956037,
  2730485921,
  2820302411,
  3259730800,
  3345764771,
  3516065817,
  3600352804,
  4094571909,
  275423344,
  430227734,
  506948616,
  659060556,
  883997877,
  958139571,
  1322822218,
  1537002063,
  1747873779,
  1955562222,
  2024104815,
  2227730452,
  2361852424,
  2428436474,
  2756734187,
  3204031479,
  3329325298
]), Gn = new Uint32Array([
  1779033703,
  3144134277,
  1013904242,
  2773480762,
  1359893119,
  2600822924,
  528734635,
  1541459225
]), Zn = new Uint32Array(64);
let Rm = class extends FA {
  constructor() {
    super(64, 32, 8, !1), this.A = Gn[0] | 0, this.B = Gn[1] | 0, this.C = Gn[2] | 0, this.D = Gn[3] | 0, this.E = Gn[4] | 0, this.F = Gn[5] | 0, this.G = Gn[6] | 0, this.H = Gn[7] | 0;
  }
  get() {
    const { A: t, B: r, C: n, D: o, E: i, F: s, G: a, H: c } = this;
    return [t, r, n, o, i, s, a, c];
  }
  // prettier-ignore
  set(t, r, n, o, i, s, a, c) {
    this.A = t | 0, this.B = r | 0, this.C = n | 0, this.D = o | 0, this.E = i | 0, this.F = s | 0, this.G = a | 0, this.H = c | 0;
  }
  process(t, r) {
    for (let l = 0; l < 16; l++, r += 4)
      Zn[l] = t.getUint32(r, !1);
    for (let l = 16; l < 64; l++) {
      const h = Zn[l - 15], m = Zn[l - 2], b = Xr(h, 7) ^ Xr(h, 18) ^ h >>> 3, y = Xr(m, 17) ^ Xr(m, 19) ^ m >>> 10;
      Zn[l] = y + Zn[l - 7] + b + Zn[l - 16] | 0;
    }
    let { A: n, B: o, C: i, D: s, E: a, F: c, G: u, H: f } = this;
    for (let l = 0; l < 64; l++) {
      const h = Xr(a, 6) ^ Xr(a, 11) ^ Xr(a, 25), m = f + h + KA(a, c, u) + VA[l] + Zn[l] | 0, y = (Xr(n, 2) ^ Xr(n, 13) ^ Xr(n, 22)) + qA(n, o, i) | 0;
      f = u, u = c, c = a, a = s + m | 0, s = i, i = o, o = n, n = m + y | 0;
    }
    n = n + this.A | 0, o = o + this.B | 0, i = i + this.C | 0, s = s + this.D | 0, a = a + this.E | 0, c = c + this.F | 0, u = u + this.G | 0, f = f + this.H | 0, this.set(n, o, i, s, a, c, u, f);
  }
  roundClean() {
    Zn.fill(0);
  }
  destroy() {
    this.set(0, 0, 0, 0, 0, 0, 0, 0), this.buffer.fill(0);
  }
}, WA = class extends Rm {
  constructor() {
    super(), this.A = -1056596264, this.B = 914150663, this.C = 812702999, this.D = -150054599, this.E = -4191439, this.F = 1750603025, this.G = 1694076839, this.H = -1090891868, this.outputLen = 28;
  }
};
const dc = Cm(() => new Rm());
Cm(() => new WA());
/*! noble-curves - MIT License (c) 2022 Paul Miller (paulmillr.com) */
const GA = BigInt(0), kd = BigInt(1), ZA = BigInt(2), tu = (e) => e instanceof Uint8Array, XA = Array.from({ length: 256 }, (e, t) => t.toString(16).padStart(2, "0"));
function Li(e) {
  if (!tu(e))
    throw new Error("Uint8Array expected");
  let t = "";
  for (let r = 0; r < e.length; r++)
    t += XA[e[r]];
  return t;
}
function Lm(e) {
  const t = e.toString(16);
  return t.length & 1 ? `0${t}` : t;
}
function Ad(e) {
  if (typeof e != "string")
    throw new Error("hex string expected, got " + typeof e);
  return BigInt(e === "" ? "0" : `0x${e}`);
}
function zi(e) {
  if (typeof e != "string")
    throw new Error("hex string expected, got " + typeof e);
  if (e.length % 2)
    throw new Error("hex string is invalid: unpadded " + e.length);
  const t = new Uint8Array(e.length / 2);
  for (let r = 0; r < t.length; r++) {
    const n = r * 2, o = e.slice(n, n + 2), i = Number.parseInt(o, 16);
    if (Number.isNaN(i) || i < 0)
      throw new Error("invalid byte sequence");
    t[r] = i;
  }
  return t;
}
function Gt(e) {
  return Ad(Li(e));
}
function Td(e) {
  if (!tu(e))
    throw new Error("Uint8Array expected");
  return Ad(Li(Uint8Array.from(e).reverse()));
}
const ho = (e, t) => zi(e.toString(16).padStart(t * 2, "0")), zm = (e, t) => ho(e, t).reverse(), YA = (e) => zi(Lm(e));
function Lt(e, t, r) {
  let n;
  if (typeof t == "string")
    try {
      n = zi(t);
    } catch (i) {
      throw new Error(`${e} must be valid hex string, got "${t}". Cause: ${i}`);
    }
  else if (tu(t))
    n = Uint8Array.from(t);
  else
    throw new Error(`${e} must be hex string or Uint8Array`);
  const o = n.length;
  if (typeof r == "number" && o !== r)
    throw new Error(`${e} expected ${r} bytes, got ${o}`);
  return n;
}
function cr(...e) {
  const t = new Uint8Array(e.reduce((n, o) => n + o.length, 0));
  let r = 0;
  return e.forEach((n) => {
    if (!tu(n))
      throw new Error("Uint8Array expected");
    t.set(n, r), r += n.length;
  }), t;
}
function JA(e, t) {
  if (e.length !== t.length)
    return !1;
  for (let r = 0; r < e.length; r++)
    if (e[r] !== t[r])
      return !1;
  return !0;
}
function ru(e) {
  if (typeof e != "string")
    throw new Error(`utf8ToBytes expected string, got ${typeof e}`);
  return new TextEncoder().encode(e);
}
function QA(e) {
  let t;
  for (t = 0; e > 0n; e >>= kd, t += 1)
    ;
  return t;
}
const e8 = (e, t) => e >> BigInt(t) & 1n, t8 = (e, t, r) => e | (r ? kd : GA) << BigInt(t), Id = (e) => (ZA << BigInt(e - 1)) - kd, gl = (e) => new Uint8Array(e), Rp = (e) => Uint8Array.from(e);
function jm(e, t, r) {
  if (typeof e != "number" || e < 2)
    throw new Error("hashLen must be a number");
  if (typeof t != "number" || t < 2)
    throw new Error("qByteLen must be a number");
  if (typeof r != "function")
    throw new Error("hmacFn must be a function");
  let n = gl(e), o = gl(e), i = 0;
  const s = () => {
    n.fill(1), o.fill(0), i = 0;
  }, a = (...l) => r(o, n, ...l), c = (l = gl()) => {
    o = a(Rp([0]), l), n = a(), l.length !== 0 && (o = a(Rp([1]), l), n = a());
  }, u = () => {
    if (i++ >= 1e3)
      throw new Error("drbg: tried 1000 values");
    let l = 0;
    const h = [];
    for (; l < t; ) {
      n = a();
      const m = n.slice();
      h.push(m), l += n.length;
    }
    return cr(...h);
  };
  return (l, h) => {
    s(), c(l);
    let m;
    for (; !(m = h(u())); )
      c();
    return s(), m;
  };
}
const r8 = {
  bigint: (e) => typeof e == "bigint",
  function: (e) => typeof e == "function",
  boolean: (e) => typeof e == "boolean",
  string: (e) => typeof e == "string",
  isSafeInteger: (e) => Number.isSafeInteger(e),
  array: (e) => Array.isArray(e),
  field: (e, t) => t.Fp.isValid(e),
  hash: (e) => typeof e == "function" && Number.isSafeInteger(e.outputLen)
};
function Ji(e, t, r = {}) {
  const n = (o, i, s) => {
    const a = r8[i];
    if (typeof a != "function")
      throw new Error(`Invalid validator "${i}", expected function`);
    const c = e[o];
    if (!(s && c === void 0) && !a(c, e))
      throw new Error(`Invalid param ${String(o)}=${c} (${typeof c}), expected ${i}`);
  };
  for (const [o, i] of Object.entries(t))
    n(o, i, !1);
  for (const [o, i] of Object.entries(r))
    n(o, i, !0);
  return e;
}
var n8 = /* @__PURE__ */ Object.freeze({
  __proto__: null,
  bitGet: e8,
  bitLen: QA,
  bitMask: Id,
  bitSet: t8,
  bytesToHex: Li,
  bytesToNumberBE: Gt,
  bytesToNumberLE: Td,
  concatBytes: cr,
  createHmacDrbg: jm,
  ensureBytes: Lt,
  equalBytes: JA,
  hexToBytes: zi,
  hexToNumber: Ad,
  numberToBytesBE: ho,
  numberToBytesLE: zm,
  numberToHexUnpadded: Lm,
  numberToVarBytesBE: YA,
  utf8ToBytes: ru,
  validateObject: Ji
});
/*! noble-curves - MIT License (c) 2022 Paul Miller (paulmillr.com) */
const Bt = BigInt(0), pt = BigInt(1), Ho = BigInt(2), o8 = BigInt(3), df = BigInt(4), Lp = BigInt(5), zp = BigInt(8);
BigInt(9);
BigInt(16);
function kt(e, t) {
  const r = e % t;
  return r >= Bt ? r : t + r;
}
function i8(e, t, r) {
  if (r <= Bt || t < Bt)
    throw new Error("Expected power/modulo > 0");
  if (r === pt)
    return Bt;
  let n = pt;
  for (; t > Bt; )
    t & pt && (n = n * e % r), e = e * e % r, t >>= pt;
  return n;
}
function wr(e, t, r) {
  let n = e;
  for (; t-- > Bt; )
    n *= n, n %= r;
  return n;
}
function hf(e, t) {
  if (e === Bt || t <= Bt)
    throw new Error(`invert: expected positive integers, got n=${e} mod=${t}`);
  let r = kt(e, t), n = t, o = Bt, i = pt;
  for (; r !== Bt; ) {
    const a = n / r, c = n % r, u = o - i * a;
    n = r, r = c, o = i, i = u;
  }
  if (n !== pt)
    throw new Error("invert: does not exist");
  return kt(o, t);
}
function s8(e) {
  const t = (e - pt) / Ho;
  let r, n, o;
  for (r = e - pt, n = 0; r % Ho === Bt; r /= Ho, n++)
    ;
  for (o = Ho; o < e && i8(o, t, e) !== e - pt; o++)
    ;
  if (n === 1) {
    const s = (e + pt) / df;
    return function(c, u) {
      const f = c.pow(u, s);
      if (!c.eql(c.sqr(f), u))
        throw new Error("Cannot find square root");
      return f;
    };
  }
  const i = (r + pt) / Ho;
  return function(a, c) {
    if (a.pow(c, t) === a.neg(a.ONE))
      throw new Error("Cannot find square root");
    let u = n, f = a.pow(a.mul(a.ONE, o), r), l = a.pow(c, i), h = a.pow(c, r);
    for (; !a.eql(h, a.ONE); ) {
      if (a.eql(h, a.ZERO))
        return a.ZERO;
      let m = 1;
      for (let y = a.sqr(h); m < u && !a.eql(y, a.ONE); m++)
        y = a.sqr(y);
      const b = a.pow(f, pt << BigInt(u - m - 1));
      f = a.sqr(b), l = a.mul(l, b), h = a.mul(h, f), u = m;
    }
    return l;
  };
}
function a8(e) {
  if (e % df === o8) {
    const t = (e + pt) / df;
    return function(n, o) {
      const i = n.pow(o, t);
      if (!n.eql(n.sqr(i), o))
        throw new Error("Cannot find square root");
      return i;
    };
  }
  if (e % zp === Lp) {
    const t = (e - Lp) / zp;
    return function(n, o) {
      const i = n.mul(o, Ho), s = n.pow(i, t), a = n.mul(o, s), c = n.mul(n.mul(a, Ho), s), u = n.mul(a, n.sub(c, n.ONE));
      if (!n.eql(n.sqr(u), o))
        throw new Error("Cannot find square root");
      return u;
    };
  }
  return s8(e);
}
const c8 = [
  "create",
  "isValid",
  "is0",
  "neg",
  "inv",
  "sqrt",
  "sqr",
  "eql",
  "add",
  "sub",
  "mul",
  "pow",
  "div",
  "addN",
  "subN",
  "mulN",
  "sqrN"
];
function Mm(e) {
  const t = {
    ORDER: "bigint",
    MASK: "bigint",
    BYTES: "isSafeInteger",
    BITS: "isSafeInteger"
  }, r = c8.reduce((n, o) => (n[o] = "function", n), t);
  return Ji(e, r);
}
function u8(e, t, r) {
  if (r < Bt)
    throw new Error("Expected power > 0");
  if (r === Bt)
    return e.ONE;
  if (r === pt)
    return t;
  let n = e.ONE, o = t;
  for (; r > Bt; )
    r & pt && (n = e.mul(n, o)), o = e.sqr(o), r >>= pt;
  return n;
}
function l8(e, t) {
  const r = new Array(t.length), n = t.reduce((i, s, a) => e.is0(s) ? i : (r[a] = i, e.mul(i, s)), e.ONE), o = e.inv(n);
  return t.reduceRight((i, s, a) => e.is0(s) ? i : (r[a] = e.mul(i, r[a]), e.mul(i, s)), o), r;
}
function Pd(e, t) {
  const r = t !== void 0 ? t : e.toString(2).length, n = Math.ceil(r / 8);
  return { nBitLength: r, nByteLength: n };
}
function Dm(e, t, r = !1, n = {}) {
  if (e <= Bt)
    throw new Error(`Expected Fp ORDER > 0, got ${e}`);
  const { nBitLength: o, nByteLength: i } = Pd(e, t);
  if (i > 2048)
    throw new Error("Field lengths over 2048 bytes are not supported");
  const s = a8(e), a = Object.freeze({
    ORDER: e,
    BITS: o,
    BYTES: i,
    MASK: Id(o),
    ZERO: Bt,
    ONE: pt,
    create: (c) => kt(c, e),
    isValid: (c) => {
      if (typeof c != "bigint")
        throw new Error(`Invalid field element: expected bigint, got ${typeof c}`);
      return Bt <= c && c < e;
    },
    is0: (c) => c === Bt,
    isOdd: (c) => (c & pt) === pt,
    neg: (c) => kt(-c, e),
    eql: (c, u) => c === u,
    sqr: (c) => kt(c * c, e),
    add: (c, u) => kt(c + u, e),
    sub: (c, u) => kt(c - u, e),
    mul: (c, u) => kt(c * u, e),
    pow: (c, u) => u8(a, c, u),
    div: (c, u) => kt(c * hf(u, e), e),
    // Same as above, but doesn't normalize
    sqrN: (c) => c * c,
    addN: (c, u) => c + u,
    subN: (c, u) => c - u,
    mulN: (c, u) => c * u,
    inv: (c) => hf(c, e),
    sqrt: n.sqrt || ((c) => s(a, c)),
    invertBatch: (c) => l8(a, c),
    // TODO: do we really need constant cmov?
    // We don't have const-time bigints anyway, so probably will be not very useful
    cmov: (c, u, f) => f ? u : c,
    toBytes: (c) => r ? zm(c, i) : ho(c, i),
    fromBytes: (c) => {
      if (c.length !== i)
        throw new Error(`Fp.fromBytes: expected ${i}, got ${c.length}`);
      return r ? Td(c) : Gt(c);
    }
  });
  return Object.freeze(a);
}
function f8(e, t, r = !1) {
  e = Lt("privateHash", e);
  const n = e.length, o = Pd(t).nByteLength + 8;
  if (o < 24 || n < o || n > 1024)
    throw new Error(`hashToPrivateScalar: expected ${o}-1024 bytes of input, got ${n}`);
  const i = r ? Td(e) : Gt(e);
  return kt(i, t - pt) + pt;
}
/*! noble-curves - MIT License (c) 2022 Paul Miller (paulmillr.com) */
const d8 = BigInt(0), ml = BigInt(1);
function h8(e, t) {
  const r = (o, i) => {
    const s = i.negate();
    return o ? s : i;
  }, n = (o) => {
    const i = Math.ceil(t / o) + 1, s = 2 ** (o - 1);
    return { windows: i, windowSize: s };
  };
  return {
    constTimeNegate: r,
    // non-const time multiplication ladder
    unsafeLadder(o, i) {
      let s = e.ZERO, a = o;
      for (; i > d8; )
        i & ml && (s = s.add(a)), a = a.double(), i >>= ml;
      return s;
    },
    /**
     * Creates a wNAF precomputation window. Used for caching.
     * Default window size is set by `utils.precompute()` and is equal to 8.
     * Number of precomputed points depends on the curve size:
     * 2^(𝑊−1) * (Math.ceil(𝑛 / 𝑊) + 1), where:
     * - 𝑊 is the window size
     * - 𝑛 is the bitlength of the curve order.
     * For a 256-bit curve and window size 8, the number of precomputed points is 128 * 33 = 4224.
     * @returns precomputed point tables flattened to a single array
     */
    precomputeWindow(o, i) {
      const { windows: s, windowSize: a } = n(i), c = [];
      let u = o, f = u;
      for (let l = 0; l < s; l++) {
        f = u, c.push(f);
        for (let h = 1; h < a; h++)
          f = f.add(u), c.push(f);
        u = f.double();
      }
      return c;
    },
    /**
     * Implements ec multiplication using precomputed tables and w-ary non-adjacent form.
     * @param W window size
     * @param precomputes precomputed tables
     * @param n scalar (we don't check here, but should be less than curve order)
     * @returns real and fake (for const-time) points
     */
    wNAF(o, i, s) {
      const { windows: a, windowSize: c } = n(o);
      let u = e.ZERO, f = e.BASE;
      const l = BigInt(2 ** o - 1), h = 2 ** o, m = BigInt(o);
      for (let b = 0; b < a; b++) {
        const y = b * c;
        let g = Number(s & l);
        s >>= m, g > c && (g -= h, s += ml);
        const x = y, S = y + Math.abs(g) - 1, v = b % 2 !== 0, T = g < 0;
        g === 0 ? f = f.add(r(v, i[x])) : u = u.add(r(T, i[S]));
      }
      return { p: u, f };
    },
    wNAFCached(o, i, s, a) {
      const c = o._WINDOW_SIZE || 1;
      let u = i.get(o);
      return u || (u = this.precomputeWindow(o, c), c !== 1 && i.set(o, a(u))), this.wNAF(c, u, s);
    }
  };
}
function Fm(e) {
  return Mm(e.Fp), Ji(e, {
    n: "bigint",
    h: "bigint",
    Gx: "field",
    Gy: "field"
  }, {
    nBitLength: "isSafeInteger",
    nByteLength: "isSafeInteger"
  }), Object.freeze({
    ...Pd(e.n, e.nBitLength),
    ...e,
    p: e.Fp.ORDER
  });
}
/*! noble-curves - MIT License (c) 2022 Paul Miller (paulmillr.com) */
function p8(e) {
  const t = Fm(e);
  Ji(t, {
    a: "field",
    b: "field"
  }, {
    allowedPrivateKeyLengths: "array",
    wrapPrivateKey: "boolean",
    isTorsionFree: "function",
    clearCofactor: "function",
    allowInfinityPoint: "boolean",
    fromBytes: "function",
    toBytes: "function"
  });
  const { endo: r, Fp: n, a: o } = t;
  if (r) {
    if (!n.eql(o, n.ZERO))
      throw new Error("Endomorphism can only be defined for Koblitz curves that have a=0");
    if (typeof r != "object" || typeof r.beta != "bigint" || typeof r.splitScalar != "function")
      throw new Error("Expected endomorphism with beta: bigint and splitScalar: function");
  }
  return Object.freeze({ ...t });
}
const { bytesToNumberBE: g8, hexToBytes: m8 } = n8, Lo = {
  // asn.1 DER encoding utils
  Err: class extends Error {
    constructor(t = "") {
      super(t);
    }
  },
  _parseInt(e) {
    const { Err: t } = Lo;
    if (e.length < 2 || e[0] !== 2)
      throw new t("Invalid signature integer tag");
    const r = e[1], n = e.subarray(2, r + 2);
    if (!r || n.length !== r)
      throw new t("Invalid signature integer: wrong length");
    if (n[0] === 0 && n[1] <= 127)
      throw new t("Invalid signature integer: trailing length");
    return { d: g8(n), l: e.subarray(r + 2) };
  },
  toSig(e) {
    const { Err: t } = Lo, r = typeof e == "string" ? m8(e) : e;
    if (!(r instanceof Uint8Array))
      throw new Error("ui8a expected");
    let n = r.length;
    if (n < 2 || r[0] != 48)
      throw new t("Invalid signature tag");
    if (r[1] !== n - 2)
      throw new t("Invalid signature: incorrect length");
    const { d: o, l: i } = Lo._parseInt(r.subarray(2)), { d: s, l: a } = Lo._parseInt(i);
    if (a.length)
      throw new t("Invalid signature: left bytes after parsing");
    return { r: o, s };
  },
  hexFromSig(e) {
    const t = (u) => Number.parseInt(u[0], 16) >= 8 ? "00" + u : u, r = (u) => {
      const f = u.toString(16);
      return f.length & 1 ? `0${f}` : f;
    }, n = t(r(e.s)), o = t(r(e.r)), i = n.length / 2, s = o.length / 2, a = r(i), c = r(s);
    return `30${r(s + i + 4)}02${c}${o}02${a}${n}`;
  }
}, Br = BigInt(0), _t = BigInt(1), mn = BigInt(2), hc = BigInt(3), jp = BigInt(4);
function b8(e) {
  const t = p8(e), { Fp: r } = t, n = t.toBytes || ((b, y, g) => {
    const x = y.toAffine();
    return cr(Uint8Array.from([4]), r.toBytes(x.x), r.toBytes(x.y));
  }), o = t.fromBytes || ((b) => {
    const y = b.subarray(1), g = r.fromBytes(y.subarray(0, r.BYTES)), x = r.fromBytes(y.subarray(r.BYTES, 2 * r.BYTES));
    return { x: g, y: x };
  });
  function i(b) {
    const { a: y, b: g } = t, x = r.sqr(b), S = r.mul(x, b);
    return r.add(r.add(S, r.mul(b, y)), g);
  }
  function s(b) {
    return typeof b == "bigint" && Br < b && b < t.n;
  }
  function a(b) {
    if (!s(b))
      throw new Error("Expected valid bigint: 0 < bigint < curve.n");
  }
  function c(b) {
    const { allowedPrivateKeyLengths: y, nByteLength: g, wrapPrivateKey: x, n: S } = t;
    if (y && typeof b != "bigint") {
      if (b instanceof Uint8Array && (b = Li(b)), typeof b != "string" || !y.includes(b.length))
        throw new Error("Invalid key");
      b = b.padStart(g * 2, "0");
    }
    let v;
    try {
      v = typeof b == "bigint" ? b : Gt(Lt("private key", b, g));
    } catch {
      throw new Error(`private key must be ${g} bytes, hex or bigint, not ${typeof b}`);
    }
    return x && (v = kt(v, S)), a(v), v;
  }
  const u = /* @__PURE__ */ new Map();
  function f(b) {
    if (!(b instanceof l))
      throw new Error("ProjectivePoint expected");
  }
  class l {
    constructor(y, g, x) {
      if (this.px = y, this.py = g, this.pz = x, y == null || !r.isValid(y))
        throw new Error("x required");
      if (g == null || !r.isValid(g))
        throw new Error("y required");
      if (x == null || !r.isValid(x))
        throw new Error("z required");
    }
    // Does not validate if the point is on-curve.
    // Use fromHex instead, or call assertValidity() later.
    static fromAffine(y) {
      const { x: g, y: x } = y || {};
      if (!y || !r.isValid(g) || !r.isValid(x))
        throw new Error("invalid affine point");
      if (y instanceof l)
        throw new Error("projective point not allowed");
      const S = (v) => r.eql(v, r.ZERO);
      return S(g) && S(x) ? l.ZERO : new l(g, x, r.ONE);
    }
    get x() {
      return this.toAffine().x;
    }
    get y() {
      return this.toAffine().y;
    }
    /**
     * Takes a bunch of Projective Points but executes only one
     * inversion on all of them. Inversion is very slow operation,
     * so this improves performance massively.
     * Optimization: converts a list of projective points to a list of identical points with Z=1.
     */
    static normalizeZ(y) {
      const g = r.invertBatch(y.map((x) => x.pz));
      return y.map((x, S) => x.toAffine(g[S])).map(l.fromAffine);
    }
    /**
     * Converts hash string or Uint8Array to Point.
     * @param hex short/long ECDSA hex
     */
    static fromHex(y) {
      const g = l.fromAffine(o(Lt("pointHex", y)));
      return g.assertValidity(), g;
    }
    // Multiplies generator point by privateKey.
    static fromPrivateKey(y) {
      return l.BASE.multiply(c(y));
    }
    // "Private method", don't use it directly
    _setWindowSize(y) {
      this._WINDOW_SIZE = y, u.delete(this);
    }
    // A point on curve is valid if it conforms to equation.
    assertValidity() {
      if (this.is0()) {
        if (t.allowInfinityPoint)
          return;
        throw new Error("bad point: ZERO");
      }
      const { x: y, y: g } = this.toAffine();
      if (!r.isValid(y) || !r.isValid(g))
        throw new Error("bad point: x or y not FE");
      const x = r.sqr(g), S = i(y);
      if (!r.eql(x, S))
        throw new Error("bad point: equation left != right");
      if (!this.isTorsionFree())
        throw new Error("bad point: not in prime-order subgroup");
    }
    hasEvenY() {
      const { y } = this.toAffine();
      if (r.isOdd)
        return !r.isOdd(y);
      throw new Error("Field doesn't support isOdd");
    }
    /**
     * Compare one point to another.
     */
    equals(y) {
      f(y);
      const { px: g, py: x, pz: S } = this, { px: v, py: T, pz: I } = y, P = r.eql(r.mul(g, I), r.mul(v, S)), H = r.eql(r.mul(x, I), r.mul(T, S));
      return P && H;
    }
    /**
     * Flips point to one corresponding to (x, -y) in Affine coordinates.
     */
    negate() {
      return new l(this.px, r.neg(this.py), this.pz);
    }
    // Renes-Costello-Batina exception-free doubling formula.
    // There is 30% faster Jacobian formula, but it is not complete.
    // https://eprint.iacr.org/2015/1060, algorithm 3
    // Cost: 8M + 3S + 3*a + 2*b3 + 15add.
    double() {
      const { a: y, b: g } = t, x = r.mul(g, hc), { px: S, py: v, pz: T } = this;
      let I = r.ZERO, P = r.ZERO, H = r.ZERO, j = r.mul(S, S), V = r.mul(v, v), te = r.mul(T, T), Z = r.mul(S, v);
      return Z = r.add(Z, Z), H = r.mul(S, T), H = r.add(H, H), I = r.mul(y, H), P = r.mul(x, te), P = r.add(I, P), I = r.sub(V, P), P = r.add(V, P), P = r.mul(I, P), I = r.mul(Z, I), H = r.mul(x, H), te = r.mul(y, te), Z = r.sub(j, te), Z = r.mul(y, Z), Z = r.add(Z, H), H = r.add(j, j), j = r.add(H, j), j = r.add(j, te), j = r.mul(j, Z), P = r.add(P, j), te = r.mul(v, T), te = r.add(te, te), j = r.mul(te, Z), I = r.sub(I, j), H = r.mul(te, V), H = r.add(H, H), H = r.add(H, H), new l(I, P, H);
    }
    // Renes-Costello-Batina exception-free addition formula.
    // There is 30% faster Jacobian formula, but it is not complete.
    // https://eprint.iacr.org/2015/1060, algorithm 1
    // Cost: 12M + 0S + 3*a + 3*b3 + 23add.
    add(y) {
      f(y);
      const { px: g, py: x, pz: S } = this, { px: v, py: T, pz: I } = y;
      let P = r.ZERO, H = r.ZERO, j = r.ZERO;
      const V = t.a, te = r.mul(t.b, hc);
      let Z = r.mul(g, v), N = r.mul(x, T), W = r.mul(S, I), D = r.add(g, x), $ = r.add(v, T);
      D = r.mul(D, $), $ = r.add(Z, N), D = r.sub(D, $), $ = r.add(g, S);
      let R = r.add(v, I);
      return $ = r.mul($, R), R = r.add(Z, W), $ = r.sub($, R), R = r.add(x, S), P = r.add(T, I), R = r.mul(R, P), P = r.add(N, W), R = r.sub(R, P), j = r.mul(V, $), P = r.mul(te, W), j = r.add(P, j), P = r.sub(N, j), j = r.add(N, j), H = r.mul(P, j), N = r.add(Z, Z), N = r.add(N, Z), W = r.mul(V, W), $ = r.mul(te, $), N = r.add(N, W), W = r.sub(Z, W), W = r.mul(V, W), $ = r.add($, W), Z = r.mul(N, $), H = r.add(H, Z), Z = r.mul(R, $), P = r.mul(D, P), P = r.sub(P, Z), Z = r.mul(D, N), j = r.mul(R, j), j = r.add(j, Z), new l(P, H, j);
    }
    subtract(y) {
      return this.add(y.negate());
    }
    is0() {
      return this.equals(l.ZERO);
    }
    wNAF(y) {
      return m.wNAFCached(this, u, y, (g) => {
        const x = r.invertBatch(g.map((S) => S.pz));
        return g.map((S, v) => S.toAffine(x[v])).map(l.fromAffine);
      });
    }
    /**
     * Non-constant-time multiplication. Uses double-and-add algorithm.
     * It's faster, but should only be used when you don't care about
     * an exposed private key e.g. sig verification, which works over *public* keys.
     */
    multiplyUnsafe(y) {
      const g = l.ZERO;
      if (y === Br)
        return g;
      if (a(y), y === _t)
        return this;
      const { endo: x } = t;
      if (!x)
        return m.unsafeLadder(this, y);
      let { k1neg: S, k1: v, k2neg: T, k2: I } = x.splitScalar(y), P = g, H = g, j = this;
      for (; v > Br || I > Br; )
        v & _t && (P = P.add(j)), I & _t && (H = H.add(j)), j = j.double(), v >>= _t, I >>= _t;
      return S && (P = P.negate()), T && (H = H.negate()), H = new l(r.mul(H.px, x.beta), H.py, H.pz), P.add(H);
    }
    /**
     * Constant time multiplication.
     * Uses wNAF method. Windowed method may be 10% faster,
     * but takes 2x longer to generate and consumes 2x memory.
     * Uses precomputes when available.
     * Uses endomorphism for Koblitz curves.
     * @param scalar by which the point would be multiplied
     * @returns New point
     */
    multiply(y) {
      a(y);
      let g = y, x, S;
      const { endo: v } = t;
      if (v) {
        const { k1neg: T, k1: I, k2neg: P, k2: H } = v.splitScalar(g);
        let { p: j, f: V } = this.wNAF(I), { p: te, f: Z } = this.wNAF(H);
        j = m.constTimeNegate(T, j), te = m.constTimeNegate(P, te), te = new l(r.mul(te.px, v.beta), te.py, te.pz), x = j.add(te), S = V.add(Z);
      } else {
        const { p: T, f: I } = this.wNAF(g);
        x = T, S = I;
      }
      return l.normalizeZ([x, S])[0];
    }
    /**
     * Efficiently calculate `aP + bQ`. Unsafe, can expose private key, if used incorrectly.
     * Not using Strauss-Shamir trick: precomputation tables are faster.
     * The trick could be useful if both P and Q are not G (not in our case).
     * @returns non-zero affine point
     */
    multiplyAndAddUnsafe(y, g, x) {
      const S = l.BASE, v = (I, P) => P === Br || P === _t || !I.equals(S) ? I.multiplyUnsafe(P) : I.multiply(P), T = v(this, g).add(v(y, x));
      return T.is0() ? void 0 : T;
    }
    // Converts Projective point to affine (x, y) coordinates.
    // Can accept precomputed Z^-1 - for example, from invertBatch.
    // (x, y, z) ∋ (x=x/z, y=y/z)
    toAffine(y) {
      const { px: g, py: x, pz: S } = this, v = this.is0();
      y == null && (y = v ? r.ONE : r.inv(S));
      const T = r.mul(g, y), I = r.mul(x, y), P = r.mul(S, y);
      if (v)
        return { x: r.ZERO, y: r.ZERO };
      if (!r.eql(P, r.ONE))
        throw new Error("invZ was invalid");
      return { x: T, y: I };
    }
    isTorsionFree() {
      const { h: y, isTorsionFree: g } = t;
      if (y === _t)
        return !0;
      if (g)
        return g(l, this);
      throw new Error("isTorsionFree() has not been declared for the elliptic curve");
    }
    clearCofactor() {
      const { h: y, clearCofactor: g } = t;
      return y === _t ? this : g ? g(l, this) : this.multiplyUnsafe(t.h);
    }
    toRawBytes(y = !0) {
      return this.assertValidity(), n(l, this, y);
    }
    toHex(y = !0) {
      return Li(this.toRawBytes(y));
    }
  }
  l.BASE = new l(t.Gx, t.Gy, r.ONE), l.ZERO = new l(r.ZERO, r.ONE, r.ZERO);
  const h = t.nBitLength, m = h8(l, t.endo ? Math.ceil(h / 2) : h);
  return {
    CURVE: t,
    ProjectivePoint: l,
    normPrivateKeyToScalar: c,
    weierstrassEquation: i,
    isWithinCurveOrder: s
  };
}
function y8(e) {
  const t = Fm(e);
  return Ji(t, {
    hash: "hash",
    hmac: "function",
    randomBytes: "function"
  }, {
    bits2int: "function",
    bits2int_modN: "function",
    lowS: "boolean"
  }), Object.freeze({ lowS: !0, ...t });
}
function w8(e) {
  const t = y8(e), { Fp: r, n } = t, o = r.BYTES + 1, i = 2 * r.BYTES + 1;
  function s($) {
    return Br < $ && $ < r.ORDER;
  }
  function a($) {
    return kt($, n);
  }
  function c($) {
    return hf($, n);
  }
  const { ProjectivePoint: u, normPrivateKeyToScalar: f, weierstrassEquation: l, isWithinCurveOrder: h } = b8({
    ...t,
    toBytes($, R, K) {
      const re = R.toAffine(), oe = r.toBytes(re.x), pe = cr;
      return K ? pe(Uint8Array.from([R.hasEvenY() ? 2 : 3]), oe) : pe(Uint8Array.from([4]), oe, r.toBytes(re.y));
    },
    fromBytes($) {
      const R = $.length, K = $[0], re = $.subarray(1);
      if (R === o && (K === 2 || K === 3)) {
        const oe = Gt(re);
        if (!s(oe))
          throw new Error("Point is not on curve");
        const pe = l(oe);
        let se = r.sqrt(pe);
        const Ae = (se & _t) === _t;
        return (K & 1) === 1 !== Ae && (se = r.neg(se)), { x: oe, y: se };
      } else if (R === i && K === 4) {
        const oe = r.fromBytes(re.subarray(0, r.BYTES)), pe = r.fromBytes(re.subarray(r.BYTES, 2 * r.BYTES));
        return { x: oe, y: pe };
      } else
        throw new Error(`Point of length ${R} was invalid. Expected ${o} compressed bytes or ${i} uncompressed bytes`);
    }
  }), m = ($) => Li(ho($, t.nByteLength));
  function b($) {
    const R = n >> _t;
    return $ > R;
  }
  function y($) {
    return b($) ? a(-$) : $;
  }
  const g = ($, R, K) => Gt($.slice(R, K));
  class x {
    constructor(R, K, re) {
      this.r = R, this.s = K, this.recovery = re, this.assertValidity();
    }
    // pair (bytes of r, bytes of s)
    static fromCompact(R) {
      const K = t.nByteLength;
      return R = Lt("compactSignature", R, K * 2), new x(g(R, 0, K), g(R, K, 2 * K));
    }
    // DER encoded ECDSA signature
    // https://bitcoin.stackexchange.com/questions/57644/what-are-the-parts-of-a-bitcoin-transaction-input-script
    static fromDER(R) {
      const { r: K, s: re } = Lo.toSig(Lt("DER", R));
      return new x(K, re);
    }
    assertValidity() {
      if (!h(this.r))
        throw new Error("r must be 0 < r < CURVE.n");
      if (!h(this.s))
        throw new Error("s must be 0 < s < CURVE.n");
    }
    addRecoveryBit(R) {
      return new x(this.r, this.s, R);
    }
    recoverPublicKey(R) {
      const { r: K, s: re, recovery: oe } = this, pe = H(Lt("msgHash", R));
      if (oe == null || ![0, 1, 2, 3].includes(oe))
        throw new Error("recovery id invalid");
      const se = oe === 2 || oe === 3 ? K + t.n : K;
      if (se >= r.ORDER)
        throw new Error("recovery id 2 or 3 invalid");
      const Ae = oe & 1 ? "03" : "02", q = u.fromHex(Ae + m(se)), Ce = c(se), Ut = a(-pe * Ce), Xe = a(re * Ce), Ct = u.BASE.multiplyAndAddUnsafe(q, Ut, Xe);
      if (!Ct)
        throw new Error("point at infinify");
      return Ct.assertValidity(), Ct;
    }
    // Signatures should be low-s, to prevent malleability.
    hasHighS() {
      return b(this.s);
    }
    normalizeS() {
      return this.hasHighS() ? new x(this.r, a(-this.s), this.recovery) : this;
    }
    // DER-encoded
    toDERRawBytes() {
      return zi(this.toDERHex());
    }
    toDERHex() {
      return Lo.hexFromSig({ r: this.r, s: this.s });
    }
    // padded bytes of r, then padded bytes of s
    toCompactRawBytes() {
      return zi(this.toCompactHex());
    }
    toCompactHex() {
      return m(this.r) + m(this.s);
    }
  }
  const S = {
    isValidPrivateKey($) {
      try {
        return f($), !0;
      } catch {
        return !1;
      }
    },
    normPrivateKeyToScalar: f,
    /**
     * Produces cryptographically secure private key from random of size (nBitLength+64)
     * as per FIPS 186 B.4.1 with modulo bias being neglible.
     */
    randomPrivateKey: () => {
      const $ = t.randomBytes(r.BYTES + 8), R = f8($, n);
      return ho(R, t.nByteLength);
    },
    /**
     * Creates precompute table for an arbitrary EC point. Makes point "cached".
     * Allows to massively speed-up `point.multiply(scalar)`.
     * @returns cached point
     * @example
     * const fast = utils.precompute(8, ProjectivePoint.fromHex(someonesPubKey));
     * fast.multiply(privKey); // much faster ECDH now
     */
    precompute($ = 8, R = u.BASE) {
      return R._setWindowSize($), R.multiply(BigInt(3)), R;
    }
  };
  function v($, R = !0) {
    return u.fromPrivateKey($).toRawBytes(R);
  }
  function T($) {
    const R = $ instanceof Uint8Array, K = typeof $ == "string", re = (R || K) && $.length;
    return R ? re === o || re === i : K ? re === 2 * o || re === 2 * i : $ instanceof u;
  }
  function I($, R, K = !0) {
    if (T($))
      throw new Error("first arg must be private key");
    if (!T(R))
      throw new Error("second arg must be public key");
    return u.fromHex(R).multiply(f($)).toRawBytes(K);
  }
  const P = t.bits2int || function($) {
    const R = Gt($), K = $.length * 8 - t.nBitLength;
    return K > 0 ? R >> BigInt(K) : R;
  }, H = t.bits2int_modN || function($) {
    return a(P($));
  }, j = Id(t.nBitLength);
  function V($) {
    if (typeof $ != "bigint")
      throw new Error("bigint expected");
    if (!(Br <= $ && $ < j))
      throw new Error(`bigint expected < 2^${t.nBitLength}`);
    return ho($, t.nByteLength);
  }
  function te($, R, K = Z) {
    if (["recovered", "canonical"].some((lt) => lt in K))
      throw new Error("sign() legacy options not supported");
    const { hash: re, randomBytes: oe } = t;
    let { lowS: pe, prehash: se, extraEntropy: Ae } = K;
    pe == null && (pe = !0), $ = Lt("msgHash", $), se && ($ = Lt("prehashed msgHash", re($)));
    const q = H($), Ce = f(R), Ut = [V(Ce), V(q)];
    if (Ae != null) {
      const lt = Ae === !0 ? oe(r.BYTES) : Ae;
      Ut.push(Lt("extraEntropy", lt, r.BYTES));
    }
    const Xe = cr(...Ut), Ct = q;
    function gt(lt) {
      const wt = P(lt);
      if (!h(wt))
        return;
      const Ht = c(wt), Ye = u.BASE.multiply(wt).toAffine(), Le = a(Ye.x);
      if (Le === Br)
        return;
      const mt = a(Ht * a(Ct + Le * Ce));
      if (mt === Br)
        return;
      let Vr = (Ye.x === Le ? 0 : 2) | Number(Ye.y & _t), gr = mt;
      return pe && b(mt) && (gr = y(mt), Vr ^= 1), new x(Le, gr, Vr);
    }
    return { seed: Xe, k2sig: gt };
  }
  const Z = { lowS: t.lowS, prehash: !1 }, N = { lowS: t.lowS, prehash: !1 };
  function W($, R, K = Z) {
    const { seed: re, k2sig: oe } = te($, R, K);
    return jm(t.hash.outputLen, t.nByteLength, t.hmac)(re, oe);
  }
  u.BASE._setWindowSize(8);
  function D($, R, K, re = N) {
    var Ye;
    const oe = $;
    if (R = Lt("msgHash", R), K = Lt("publicKey", K), "strict" in re)
      throw new Error("options.strict was renamed to lowS");
    const { lowS: pe, prehash: se } = re;
    let Ae, q;
    try {
      if (typeof oe == "string" || oe instanceof Uint8Array)
        try {
          Ae = x.fromDER(oe);
        } catch (Le) {
          if (!(Le instanceof Lo.Err))
            throw Le;
          Ae = x.fromCompact(oe);
        }
      else if (typeof oe == "object" && typeof oe.r == "bigint" && typeof oe.s == "bigint") {
        const { r: Le, s: mt } = oe;
        Ae = new x(Le, mt);
      } else
        throw new Error("PARSE");
      q = u.fromHex(K);
    } catch (Le) {
      if (Le.message === "PARSE")
        throw new Error("signature must be Signature instance, Uint8Array or hex string");
      return !1;
    }
    if (pe && Ae.hasHighS())
      return !1;
    se && (R = t.hash(R));
    const { r: Ce, s: Ut } = Ae, Xe = H(R), Ct = c(Ut), gt = a(Xe * Ct), lt = a(Ce * Ct), wt = (Ye = u.BASE.multiplyAndAddUnsafe(q, gt, lt)) == null ? void 0 : Ye.toAffine();
    return wt ? a(wt.x) === Ce : !1;
  }
  return {
    CURVE: t,
    getPublicKey: v,
    getSharedSecret: I,
    sign: W,
    verify: D,
    ProjectivePoint: u,
    Signature: x,
    utils: S
  };
}
function v8(e, t) {
  const r = e.ORDER;
  let n = Br;
  for (let h = r - _t; h % mn === Br; h /= mn)
    n += _t;
  const o = n, i = (r - _t) / mn ** o, s = (i - _t) / mn, a = mn ** o - _t, c = mn ** (o - _t), u = e.pow(t, i), f = e.pow(t, (i + _t) / mn);
  let l = (h, m) => {
    let b = u, y = e.pow(m, a), g = e.sqr(y);
    g = e.mul(g, m);
    let x = e.mul(h, g);
    x = e.pow(x, s), x = e.mul(x, y), y = e.mul(x, m), g = e.mul(x, h);
    let S = e.mul(g, y);
    x = e.pow(S, c);
    let v = e.eql(x, e.ONE);
    y = e.mul(g, f), x = e.mul(S, b), g = e.cmov(y, g, v), S = e.cmov(x, S, v);
    for (let T = o; T > 1; T--) {
      let I = mn ** (T - mn), P = e.pow(S, I);
      const H = e.eql(P, e.ONE);
      y = e.mul(g, b), b = e.mul(b, b), P = e.mul(S, b), g = e.cmov(y, g, H), S = e.cmov(P, S, H);
    }
    return { isValid: v, value: g };
  };
  if (e.ORDER % jp === hc) {
    const h = (e.ORDER - hc) / jp, m = e.sqrt(e.neg(t));
    l = (b, y) => {
      let g = e.sqr(y);
      const x = e.mul(b, y);
      g = e.mul(g, x);
      let S = e.pow(g, h);
      S = e.mul(S, x);
      const v = e.mul(S, m), T = e.mul(e.sqr(S), y), I = e.eql(T, b);
      let P = e.cmov(v, S, I);
      return { isValid: I, value: P };
    };
  }
  return l;
}
function x8(e, t) {
  if (Mm(e), !e.isValid(t.A) || !e.isValid(t.B) || !e.isValid(t.Z))
    throw new Error("mapToCurveSimpleSWU: invalid opts");
  const r = v8(e, t.Z);
  if (!e.isOdd)
    throw new Error("Fp.isOdd is not implemented!");
  return (n) => {
    let o, i, s, a, c, u, f, l;
    o = e.sqr(n), o = e.mul(o, t.Z), i = e.sqr(o), i = e.add(i, o), s = e.add(i, e.ONE), s = e.mul(s, t.B), a = e.cmov(t.Z, e.neg(i), !e.eql(i, e.ZERO)), a = e.mul(a, t.A), i = e.sqr(s), u = e.sqr(a), c = e.mul(u, t.A), i = e.add(i, c), i = e.mul(i, s), u = e.mul(u, a), c = e.mul(u, t.B), i = e.add(i, c), f = e.mul(o, s);
    const { isValid: h, value: m } = r(i, u);
    l = e.mul(o, n), l = e.mul(l, m), f = e.cmov(f, s, h), l = e.cmov(l, m, h);
    const b = e.isOdd(n) === e.isOdd(l);
    return l = e.cmov(e.neg(l), l, b), f = e.div(f, a), { x: f, y: l };
  };
}
function E8(e) {
  if (e instanceof Uint8Array)
    return e;
  if (typeof e == "string")
    return ru(e);
  throw new Error("DST must be Uint8Array or string");
}
const _8 = Gt;
function lo(e, t) {
  if (e < 0 || e >= 1 << 8 * t)
    throw new Error(`bad I2OSP call: value=${e} length=${t}`);
  const r = Array.from({ length: t }).fill(0);
  for (let n = t - 1; n >= 0; n--)
    r[n] = e & 255, e >>>= 8;
  return new Uint8Array(r);
}
function S8(e, t) {
  const r = new Uint8Array(e.length);
  for (let n = 0; n < e.length; n++)
    r[n] = e[n] ^ t[n];
  return r;
}
function Os(e) {
  if (!(e instanceof Uint8Array))
    throw new Error("Uint8Array expected");
}
function Od(e) {
  if (!Number.isSafeInteger(e))
    throw new Error("number expected");
}
function k8(e, t, r, n) {
  Os(e), Os(t), Od(r), t.length > 255 && (t = n(cr(ru("H2C-OVERSIZE-DST-"), t)));
  const { outputLen: o, blockLen: i } = n, s = Math.ceil(r / o);
  if (s > 255)
    throw new Error("Invalid xmd length");
  const a = cr(t, lo(t.length, 1)), c = lo(0, i), u = lo(r, 2), f = new Array(s), l = n(cr(c, e, u, lo(0, 1), a));
  f[0] = n(cr(l, lo(1, 1), a));
  for (let m = 1; m <= s; m++) {
    const b = [S8(l, f[m - 1]), lo(m + 1, 1), a];
    f[m] = n(cr(...b));
  }
  return cr(...f).slice(0, r);
}
function A8(e, t, r, n, o) {
  if (Os(e), Os(t), Od(r), t.length > 255) {
    const i = Math.ceil(2 * n / 8);
    t = o.create({ dkLen: i }).update(ru("H2C-OVERSIZE-DST-")).update(t).digest();
  }
  if (r > 65535 || t.length > 255)
    throw new Error("expand_message_xof: invalid lenInBytes");
  return o.create({ dkLen: r }).update(e).update(lo(r, 2)).update(t).update(lo(t.length, 1)).digest();
}
function Mp(e, t, r) {
  Ji(r, {
    DST: "string",
    p: "bigint",
    m: "isSafeInteger",
    k: "isSafeInteger",
    hash: "hash"
  });
  const { p: n, k: o, m: i, hash: s, expand: a, DST: c } = r;
  Os(e), Od(t);
  const u = E8(c), f = n.toString(2).length, l = Math.ceil((f + o) / 8), h = t * i * l;
  let m;
  if (a === "xmd")
    m = k8(e, u, h, s);
  else if (a === "xof")
    m = A8(e, u, h, o, s);
  else if (a === void 0)
    m = e;
  else
    throw new Error('expand must be "xmd", "xof" or undefined');
  const b = new Array(t);
  for (let y = 0; y < t; y++) {
    const g = new Array(i);
    for (let x = 0; x < i; x++) {
      const S = l * (x + y * i), v = m.subarray(S, S + l);
      g[x] = kt(_8(v), n);
    }
    b[y] = g;
  }
  return b;
}
function T8(e, t) {
  const r = t.map((n) => Array.from(n).reverse());
  return (n, o) => {
    const [i, s, a, c] = r.map((u) => u.reduce((f, l) => e.add(e.mul(f, n), l)));
    return n = e.div(i, s), o = e.mul(o, e.div(a, c)), { x: n, y: o };
  };
}
function I8(e, t, r) {
  if (typeof t != "function")
    throw new Error("mapToCurve() must be defined");
  return {
    // Encodes byte string to elliptic curve
    // https://datatracker.ietf.org/doc/html/draft-irtf-cfrg-hash-to-curve-16#section-3
    hashToCurve(n, o) {
      const i = Mp(n, 2, { ...r, DST: r.DST, ...o }), s = e.fromAffine(t(i[0])), a = e.fromAffine(t(i[1])), c = s.add(a).clearCofactor();
      return c.assertValidity(), c;
    },
    // https://datatracker.ietf.org/doc/html/draft-irtf-cfrg-hash-to-curve-16#section-3
    encodeToCurve(n, o) {
      const i = Mp(n, 1, { ...r, DST: r.encodeDST, ...o }), s = e.fromAffine(t(i[0])).clearCofactor();
      return s.assertValidity(), s;
    }
  };
}
let Km = class extends Um {
  constructor(t, r) {
    super(), this.finished = !1, this.destroyed = !1, Ro.hash(t);
    const n = Sd(r);
    if (this.iHash = t.create(), typeof this.iHash.update != "function")
      throw new TypeError("Expected instance of class which extends utils.Hash");
    this.blockLen = this.iHash.blockLen, this.outputLen = this.iHash.outputLen;
    const o = this.blockLen, i = new Uint8Array(o);
    i.set(n.length > o ? t.create().update(n).digest() : n);
    for (let s = 0; s < i.length; s++)
      i[s] ^= 54;
    this.iHash.update(i), this.oHash = t.create();
    for (let s = 0; s < i.length; s++)
      i[s] ^= 106;
    this.oHash.update(i), i.fill(0);
  }
  update(t) {
    return Ro.exists(this), this.iHash.update(t), this;
  }
  digestInto(t) {
    Ro.exists(this), Ro.bytes(t, this.outputLen), this.finished = !0, this.iHash.digestInto(t), this.oHash.update(t), this.oHash.digestInto(t), this.destroy();
  }
  digest() {
    const t = new Uint8Array(this.oHash.outputLen);
    return this.digestInto(t), t;
  }
  _cloneInto(t) {
    t || (t = Object.create(Object.getPrototypeOf(this), {}));
    const { oHash: r, iHash: n, finished: o, destroyed: i, blockLen: s, outputLen: a } = this;
    return t = t, t.finished = o, t.destroyed = i, t.blockLen = s, t.outputLen = a, t.oHash = r._cloneInto(t.oHash), t.iHash = n._cloneInto(t.iHash), t;
  }
  destroy() {
    this.destroyed = !0, this.oHash.destroy(), this.iHash.destroy();
  }
};
const qm = (e, t, r) => new Km(e, t).update(r).digest();
qm.create = (e, t) => new Km(e, t);
/*! noble-curves - MIT License (c) 2022 Paul Miller (paulmillr.com) */
function P8(e) {
  return {
    hash: e,
    hmac: (t, ...r) => qm(e, t, MA(...r)),
    randomBytes: Hm
  };
}
function O8(e, t) {
  const r = (n) => w8({ ...e, ...P8(n) });
  return Object.freeze({ ...r(t), create: r });
}
/*! noble-curves - MIT License (c) 2022 Paul Miller (paulmillr.com) */
const nu = BigInt("0xfffffffffffffffffffffffffffffffffffffffffffffffffffffffefffffc2f"), pc = BigInt("0xfffffffffffffffffffffffffffffffebaaedce6af48a03bbfd25e8cd0364141"), Vm = BigInt(1), gc = BigInt(2), Dp = (e, t) => (e + t / gc) / t;
function Wm(e) {
  const t = nu, r = BigInt(3), n = BigInt(6), o = BigInt(11), i = BigInt(22), s = BigInt(23), a = BigInt(44), c = BigInt(88), u = e * e * e % t, f = u * u * e % t, l = wr(f, r, t) * f % t, h = wr(l, r, t) * f % t, m = wr(h, gc, t) * u % t, b = wr(m, o, t) * m % t, y = wr(b, i, t) * b % t, g = wr(y, a, t) * y % t, x = wr(g, c, t) * g % t, S = wr(x, a, t) * y % t, v = wr(S, r, t) * f % t, T = wr(v, s, t) * b % t, I = wr(T, n, t) * u % t, P = wr(I, gc, t);
  if (!mo.eql(mo.sqr(P), e))
    throw new Error("Cannot find square root");
  return P;
}
const mo = Dm(nu, void 0, void 0, { sqrt: Wm }), sn = O8({
  a: BigInt(0),
  b: BigInt(7),
  Fp: mo,
  n: pc,
  // Base point (x, y) aka generator point
  Gx: BigInt("55066263022277343669578718895168534326250603453777594175500187360389116729240"),
  Gy: BigInt("32670510020758816978083085130507043184471273380659243275938904335757337482424"),
  h: BigInt(1),
  lowS: !0,
  /**
   * secp256k1 belongs to Koblitz curves: it has efficiently computable endomorphism.
   * Endomorphism uses 2x less RAM, speeds up precomputation by 2x and ECDH / key recovery by 20%.
   * For precomputed wNAF it trades off 1/2 init time & 1/3 ram for 20% perf hit.
   * Explanation: https://gist.github.com/paulmillr/eb670806793e84df628a7c434a873066
   */
  endo: {
    beta: BigInt("0x7ae96a2b657c07106e64479eac3434e99cf0497512f58995c1396c28719501ee"),
    splitScalar: (e) => {
      const t = pc, r = BigInt("0x3086d221a7d46bcde86c90e49284eb15"), n = -Vm * BigInt("0xe4437ed6010e88286f547fa90abfe4c3"), o = BigInt("0x114ca50f7a8e2f3f657c1108d9d44cfd8"), i = r, s = BigInt("0x100000000000000000000000000000000"), a = Dp(i * e, t), c = Dp(-n * e, t);
      let u = kt(e - a * r - c * o, t), f = kt(-a * n - c * i, t);
      const l = u > s, h = f > s;
      if (l && (u = t - u), h && (f = t - f), u > s || f > s)
        throw new Error("splitScalar: Endomorphism failed, k=" + e);
      return { k1neg: l, k1: u, k2neg: h, k2: f };
    }
  }
}, dc), ou = BigInt(0), Gm = (e) => typeof e == "bigint" && ou < e && e < nu, B8 = (e) => typeof e == "bigint" && ou < e && e < pc, Fp = {};
function mc(e, ...t) {
  let r = Fp[e];
  if (r === void 0) {
    const n = dc(Uint8Array.from(e, (o) => o.charCodeAt(0)));
    r = cr(n, n), Fp[e] = r;
  }
  return dc(cr(r, ...t));
}
const Bd = (e) => e.toRawBytes(!0).slice(1), pf = (e) => ho(e, 32), bl = (e) => kt(e, nu), Bs = (e) => kt(e, pc), $d = sn.ProjectivePoint, $8 = (e, t, r) => $d.BASE.multiplyAndAddUnsafe(e, t, r);
function gf(e) {
  let t = sn.utils.normPrivateKeyToScalar(e), r = $d.fromPrivateKey(t);
  return { scalar: r.hasEvenY() ? t : Bs(-t), bytes: Bd(r) };
}
function Zm(e) {
  if (!Gm(e))
    throw new Error("bad x: need 0 < x < p");
  const t = bl(e * e), r = bl(t * e + BigInt(7));
  let n = Wm(r);
  n % gc !== ou && (n = bl(-n));
  const o = new $d(e, n, Vm);
  return o.assertValidity(), o;
}
function Xm(...e) {
  return Bs(Gt(mc("BIP0340/challenge", ...e)));
}
function N8(e) {
  return gf(e).bytes;
}
function U8(e, t, r = Hm(32)) {
  const n = Lt("message", e), { bytes: o, scalar: i } = gf(t), s = Lt("auxRand", r, 32), a = pf(i ^ Gt(mc("BIP0340/aux", s))), c = mc("BIP0340/nonce", a, o, n), u = Bs(Gt(c));
  if (u === ou)
    throw new Error("sign failed: k is zero");
  const { bytes: f, scalar: l } = gf(u), h = Xm(f, o, n), m = new Uint8Array(64);
  if (m.set(f, 0), m.set(pf(Bs(l + h * i)), 32), !Ym(m, n, o))
    throw new Error("sign: Invalid signature produced");
  return m;
}
function Ym(e, t, r) {
  const n = Lt("signature", e, 64), o = Lt("message", t), i = Lt("publicKey", r, 32);
  try {
    const s = Zm(Gt(i)), a = Gt(n.subarray(0, 32));
    if (!Gm(a))
      return !1;
    const c = Gt(n.subarray(32, 64));
    if (!B8(c))
      return !1;
    const u = Xm(pf(a), Bd(s), o), f = $8(s, c, Bs(-u));
    return !(!f || !f.hasEvenY() || f.toAffine().x !== a);
  } catch {
    return !1;
  }
}
const C8 = {
  getPublicKey: N8,
  sign: U8,
  verify: Ym,
  utils: {
    randomPrivateKey: sn.utils.randomPrivateKey,
    lift_x: Zm,
    pointToBytes: Bd,
    numberToBytesBE: ho,
    bytesToNumberBE: Gt,
    taggedHash: mc,
    mod: kt
  }
}, H8 = T8(mo, [
  // xNum
  [
    "0x8e38e38e38e38e38e38e38e38e38e38e38e38e38e38e38e38e38e38daaaaa8c7",
    "0x7d3d4c80bc321d5b9f315cea7fd44c5d595d2fc0bf63b92dfff1044f17c6581",
    "0x534c328d23f234e6e2a413deca25caece4506144037c40314ecbd0b53d9dd262",
    "0x8e38e38e38e38e38e38e38e38e38e38e38e38e38e38e38e38e38e38daaaaa88c"
  ],
  // xDen
  [
    "0xd35771193d94918a9ca34ccbb7b640dd86cd409542f8487d9fe6b745781eb49b",
    "0xedadc6f64383dc1df7c4b2d51b54225406d36b641f5e41bbc52a56612a8c6d14",
    "0x0000000000000000000000000000000000000000000000000000000000000001"
    // LAST 1
  ],
  // yNum
  [
    "0x4bda12f684bda12f684bda12f684bda12f684bda12f684bda12f684b8e38e23c",
    "0xc75e0c32d5cb7c0fa9d0a54b12a0a6d5647ab046d686da6fdffc90fc201d71a3",
    "0x29a6194691f91a73715209ef6512e576722830a201be2018a765e85a9ecee931",
    "0x2f684bda12f684bda12f684bda12f684bda12f684bda12f684bda12f38e38d84"
  ],
  // yDen
  [
    "0xfffffffffffffffffffffffffffffffffffffffffffffffffffffffefffff93b",
    "0x7a06534bb8bdb49fd5e9e6632722c2989467c1bfc8e8d978dfb425d2685c2573",
    "0x6484aa716545ca2cf3a70c3fa8fe337e0a3d21162f0d6299a7bf8192bfd2a76f",
    "0x0000000000000000000000000000000000000000000000000000000000000001"
    // LAST 1
  ]
].map((e) => e.map((t) => BigInt(t)))), R8 = x8(mo, {
  A: BigInt("0x3f8731abdd661adca08a5558f0f5d272e953d363cb6f0e5d405447c01a444533"),
  B: BigInt("1771"),
  Z: mo.create(BigInt("-11"))
});
I8(sn.ProjectivePoint, (e) => {
  const { x: t, y: r } = R8(mo.create(e[0]));
  return H8(t, r);
}, {
  DST: "secp256k1_XMD:SHA-256_SSWU_RO_",
  encodeDST: "secp256k1_XMD:SHA-256_SSWU_NU_",
  p: mo.ORDER,
  m: 1,
  k: 128,
  expand: "xmd",
  hash: dc
});
function mf(e) {
  if (!Number.isSafeInteger(e) || e < 0)
    throw new Error(`Wrong positive integer: ${e}`);
}
function L8(e) {
  if (typeof e != "boolean")
    throw new Error(`Expected boolean, not ${e}`);
}
function Jm(e, ...t) {
  if (!(e instanceof Uint8Array))
    throw new TypeError("Expected Uint8Array");
  if (t.length > 0 && !t.includes(e.length))
    throw new TypeError(`Expected Uint8Array of length ${t}, not of length=${e.length}`);
}
function z8(e) {
  if (typeof e != "function" || typeof e.create != "function")
    throw new Error("Hash should be wrapped by utils.wrapConstructor");
  mf(e.outputLen), mf(e.blockLen);
}
function j8(e, t = !0) {
  if (e.destroyed)
    throw new Error("Hash instance has been destroyed");
  if (t && e.finished)
    throw new Error("Hash#digest() has already been called");
}
function M8(e, t) {
  Jm(e);
  const r = t.outputLen;
  if (e.length < r)
    throw new Error(`digestInto() expects output buffer of length at least ${r}`);
}
const D8 = {
  number: mf,
  bool: L8,
  bytes: Jm,
  hash: z8,
  exists: j8,
  output: M8
};
var yl = D8;
/*! noble-hashes - MIT License (c) 2022 Paul Miller (paulmillr.com) */
const wl = (e) => new DataView(e.buffer, e.byteOffset, e.byteLength), Yr = (e, t) => e << 32 - t | e >>> t, F8 = new Uint8Array(new Uint32Array([287454020]).buffer)[0] === 68;
if (!F8)
  throw new Error("Non little-endian hardware is not supported");
Array.from({ length: 256 }, (e, t) => t.toString(16).padStart(2, "0"));
function K8(e) {
  if (typeof e != "string")
    throw new TypeError(`utf8ToBytes expected string, got ${typeof e}`);
  return new TextEncoder().encode(e);
}
function Qm(e) {
  if (typeof e == "string" && (e = K8(e)), !(e instanceof Uint8Array))
    throw new TypeError(`Expected input type is Uint8Array (got ${typeof e})`);
  return e;
}
let q8 = class {
  // Safe version that clones internal state
  clone() {
    return this._cloneInto();
  }
};
function eb(e) {
  const t = (n) => e().update(Qm(n)).digest(), r = e();
  return t.outputLen = r.outputLen, t.blockLen = r.blockLen, t.create = () => e(), t;
}
function V8(e, t, r, n) {
  if (typeof e.setBigUint64 == "function")
    return e.setBigUint64(t, r, n);
  const o = BigInt(32), i = BigInt(4294967295), s = Number(r >> o & i), a = Number(r & i), c = n ? 4 : 0, u = n ? 0 : 4;
  e.setUint32(t + c, s, n), e.setUint32(t + u, a, n);
}
let W8 = class extends q8 {
  constructor(t, r, n, o) {
    super(), this.blockLen = t, this.outputLen = r, this.padOffset = n, this.isLE = o, this.finished = !1, this.length = 0, this.pos = 0, this.destroyed = !1, this.buffer = new Uint8Array(t), this.view = wl(this.buffer);
  }
  update(t) {
    yl.exists(this);
    const { view: r, buffer: n, blockLen: o } = this;
    t = Qm(t);
    const i = t.length;
    for (let s = 0; s < i; ) {
      const a = Math.min(o - this.pos, i - s);
      if (a === o) {
        const c = wl(t);
        for (; o <= i - s; s += o)
          this.process(c, s);
        continue;
      }
      n.set(t.subarray(s, s + a), this.pos), this.pos += a, s += a, this.pos === o && (this.process(r, 0), this.pos = 0);
    }
    return this.length += t.length, this.roundClean(), this;
  }
  digestInto(t) {
    yl.exists(this), yl.output(t, this), this.finished = !0;
    const { buffer: r, view: n, blockLen: o, isLE: i } = this;
    let { pos: s } = this;
    r[s++] = 128, this.buffer.subarray(s).fill(0), this.padOffset > o - s && (this.process(n, 0), s = 0);
    for (let l = s; l < o; l++)
      r[l] = 0;
    V8(n, o - 8, BigInt(this.length * 8), i), this.process(n, 0);
    const a = wl(t), c = this.outputLen;
    if (c % 4)
      throw new Error("_sha2: outputLen should be aligned to 32bit");
    const u = c / 4, f = this.get();
    if (u > f.length)
      throw new Error("_sha2: outputLen bigger than state");
    for (let l = 0; l < u; l++)
      a.setUint32(4 * l, f[l], i);
  }
  digest() {
    const { buffer: t, outputLen: r } = this;
    this.digestInto(t);
    const n = t.slice(0, r);
    return this.destroy(), n;
  }
  _cloneInto(t) {
    t || (t = new this.constructor()), t.set(...this.get());
    const { blockLen: r, buffer: n, length: o, finished: i, destroyed: s, pos: a } = this;
    return t.length = o, t.pos = a, t.finished = i, t.destroyed = s, o % r && t.buffer.set(n), t;
  }
};
const G8 = (e, t, r) => e & t ^ ~e & r, Z8 = (e, t, r) => e & t ^ e & r ^ t & r, X8 = new Uint32Array([
  1116352408,
  1899447441,
  3049323471,
  3921009573,
  961987163,
  1508970993,
  2453635748,
  2870763221,
  3624381080,
  310598401,
  607225278,
  1426881987,
  1925078388,
  2162078206,
  2614888103,
  3248222580,
  3835390401,
  4022224774,
  264347078,
  604807628,
  770255983,
  1249150122,
  1555081692,
  1996064986,
  2554220882,
  2821834349,
  2952996808,
  3210313671,
  3336571891,
  3584528711,
  113926993,
  338241895,
  666307205,
  773529912,
  1294757372,
  1396182291,
  1695183700,
  1986661051,
  2177026350,
  2456956037,
  2730485921,
  2820302411,
  3259730800,
  3345764771,
  3516065817,
  3600352804,
  4094571909,
  275423344,
  430227734,
  506948616,
  659060556,
  883997877,
  958139571,
  1322822218,
  1537002063,
  1747873779,
  1955562222,
  2024104815,
  2227730452,
  2361852424,
  2428436474,
  2756734187,
  3204031479,
  3329325298
]), Xn = new Uint32Array([
  1779033703,
  3144134277,
  1013904242,
  2773480762,
  1359893119,
  2600822924,
  528734635,
  1541459225
]), Yn = new Uint32Array(64);
let tb = class extends W8 {
  constructor() {
    super(64, 32, 8, !1), this.A = Xn[0] | 0, this.B = Xn[1] | 0, this.C = Xn[2] | 0, this.D = Xn[3] | 0, this.E = Xn[4] | 0, this.F = Xn[5] | 0, this.G = Xn[6] | 0, this.H = Xn[7] | 0;
  }
  get() {
    const { A: t, B: r, C: n, D: o, E: i, F: s, G: a, H: c } = this;
    return [t, r, n, o, i, s, a, c];
  }
  // prettier-ignore
  set(t, r, n, o, i, s, a, c) {
    this.A = t | 0, this.B = r | 0, this.C = n | 0, this.D = o | 0, this.E = i | 0, this.F = s | 0, this.G = a | 0, this.H = c | 0;
  }
  process(t, r) {
    for (let l = 0; l < 16; l++, r += 4)
      Yn[l] = t.getUint32(r, !1);
    for (let l = 16; l < 64; l++) {
      const h = Yn[l - 15], m = Yn[l - 2], b = Yr(h, 7) ^ Yr(h, 18) ^ h >>> 3, y = Yr(m, 17) ^ Yr(m, 19) ^ m >>> 10;
      Yn[l] = y + Yn[l - 7] + b + Yn[l - 16] | 0;
    }
    let { A: n, B: o, C: i, D: s, E: a, F: c, G: u, H: f } = this;
    for (let l = 0; l < 64; l++) {
      const h = Yr(a, 6) ^ Yr(a, 11) ^ Yr(a, 25), m = f + h + G8(a, c, u) + X8[l] + Yn[l] | 0, y = (Yr(n, 2) ^ Yr(n, 13) ^ Yr(n, 22)) + Z8(n, o, i) | 0;
      f = u, u = c, c = a, a = s + m | 0, s = i, i = o, o = n, n = m + y | 0;
    }
    n = n + this.A | 0, o = o + this.B | 0, i = i + this.C | 0, s = s + this.D | 0, a = a + this.E | 0, c = c + this.F | 0, u = u + this.G | 0, f = f + this.H | 0, this.set(n, o, i, s, a, c, u, f);
  }
  roundClean() {
    Yn.fill(0);
  }
  destroy() {
    this.set(0, 0, 0, 0, 0, 0, 0, 0), this.buffer.fill(0);
  }
}, Y8 = class extends tb {
  constructor() {
    super(), this.A = -1056596264, this.B = 914150663, this.C = 812702999, this.D = -150054599, this.E = -4191439, this.F = 1750603025, this.G = 1694076839, this.H = -1090891868, this.outputLen = 28;
  }
};
const bf = eb(() => new tb());
eb(() => new Y8());
function J8(e, t) {
  if (e.length > t)
    throw new TypeError(`Data is larger than array size: ${e.length} > ${t}`);
}
function Q8(e) {
  if (e.match(/[^a-fA-f0-9]/) !== null)
    throw new TypeError("Invalid characters in hex string: " + e);
  if (e.length % 2 !== 0)
    throw new Error(`Length of hex string is invalid: ${e.length}`);
}
function e3(e) {
  if (e > Number.MAX_SAFE_INTEGER)
    throw new TypeError("Number exceeds safe bounds!");
}
const { getRandomValues: t3 } = crypto ?? globalThis.crypto ?? window.crypto;
function r3(e = 32) {
  if (typeof t3 == "function")
    return crypto.getRandomValues(new Uint8Array(e));
  throw new Error("Crypto module missing getRandomValues!");
}
function n3(e, t, r = "be") {
  t === void 0 && (t = e.length), J8(e, t);
  const n = new Uint8Array(t).fill(0), o = r === "be" ? 0 : t - e.length;
  return n.set(e, o), n;
}
function rb(e) {
  let t, r = 0;
  const n = e.reduce((i, s) => i + s.length, 0), o = new Uint8Array(n);
  for (t = 0; t < e.length; t++) {
    const i = e[t];
    o.set(i, r), r += i.length;
  }
  return o;
}
const o3 = new TextEncoder(), i3 = [
  {
    name: "base58",
    charset: "123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz"
  }
];
function nb(e) {
  for (const t of i3)
    if (t.name === e)
      return t.charset;
  throw TypeError("Charset does not exist: " + e);
}
function s3(e, t, r = !1) {
  typeof e == "string" && (e = o3.encode(e));
  const n = nb(t), o = n.length, i = [];
  let s = "", a, c = 0, u, f;
  for (a = 0; a < e.length; a++)
    for (c = 0, u = e[a], s += u > 0 || (s.length ^ a) > 0 ? "" : "1"; c in i || u > 0; )
      f = i[c], f = f > 0 ? f * 256 + u : u, u = f / o | 0, i[c] = f % o, c++;
  for (; c-- > 0; )
    s += n[i[c]];
  return r && s.length % 4 > 0 ? s + "=".repeat(4 - s.length % 4) : s;
}
function a3(e, t) {
  const r = nb(t), n = r.length, o = [], i = [];
  e = e.replace("=", "");
  let s, a = 0, c, u;
  for (s = 0; s < e.length; s++) {
    if (a = 0, c = r.indexOf(e[s]), c < 0)
      throw new Error(`Character range out of bounds: ${c}`);
    for (c > 0 || (i.length ^ s) > 0 || i.push(0); a in o || c > 0; )
      u = o[a], u = u > 0 ? u * n + c : c, c = u >> 8, o[a] = u % 256, a++;
  }
  for (; a-- > 0; )
    i.push(o[a]);
  return new Uint8Array(i);
}
function ob(e) {
  return bf(bf(e));
}
function c3(e) {
  const t = ob(e);
  return rb([e, t.slice(0, 4)]);
}
function u3(e) {
  const t = e.slice(0, -4), r = e.slice(-4);
  if (ob(t).slice(0, 4).toString() !== r.toString())
    throw new Error("Invalid checksum!");
  return t;
}
const Kp = {
  encode: s3,
  decode: a3
}, ib = {
  encode: (e) => {
    const t = c3(e);
    return Kp.encode(t, "base58");
  },
  decode: (e) => {
    const t = Kp.decode(e, "base58");
    return u3(t);
  }
}, sb = "qpzry9x8gf2tvdw0s3jn54khce6mua7l", l3 = [996825010, 642813549, 513874426, 1027748829, 705979059], bc = [
  { version: 0, name: "bech32", const: 1 },
  { version: 1, name: "bech32m", const: 734539939 }
];
function ab(e) {
  let t = 1;
  for (let r = 0; r < e.length; ++r) {
    const n = t >> 25;
    t = (t & 33554431) << 5 ^ e[r];
    for (let o = 0; o < 5; ++o)
      n >> o & 1 && (t ^= l3[o]);
  }
  return t;
}
function cb(e) {
  const t = [];
  let r;
  for (r = 0; r < e.length; ++r)
    t.push(e.charCodeAt(r) >> 5);
  for (t.push(0), r = 0; r < e.length; ++r)
    t.push(e.charCodeAt(r) & 31);
  return t;
}
function f3(e, t, r) {
  const n = cb(e).concat(t);
  return ab(n) === r.const;
}
function d3(e, t, r) {
  const n = cb(e).concat(t).concat([0, 0, 0, 0, 0, 0]), o = ab(n) ^ r.const, i = [];
  for (let s = 0; s < 6; ++s)
    i.push(o >> 5 * (5 - s) & 31);
  return i;
}
function ub(e, t, r, n = !0) {
  const o = [];
  let i = 0, s = 0;
  const a = (1 << r) - 1, c = (1 << t + r - 1) - 1;
  for (const u of e) {
    if (u < 0 || u >> t > 0)
      throw new Error("Failed to perform base conversion. Invalid value: " + String(u));
    for (i = (i << t | u) & c, s += t; s >= r; )
      s -= r, o.push(i >> s & a);
  }
  if (n)
    s > 0 && o.push(i << r - s & a);
  else if (s >= t || (i << r - s & a) > 0)
    throw new Error("Failed to perform base conversion. Invalid Size!");
  return o;
}
function h3(e, t, r) {
  const n = t.concat(d3(e, t, r));
  let o = e + "1";
  for (let i = 0; i < n.length; ++i)
    o += sb.charAt(n[i]);
  return o;
}
function lb(e) {
  if (!p3(e))
    throw new Error("Encoded string goes out of bounds!");
  if (e = e.toLowerCase(), !g3(e))
    throw new Error("Encoded string has invalid separator!");
  const t = [], r = e.lastIndexOf("1"), n = e.substring(0, r);
  for (let i = r + 1; i < e.length; ++i) {
    const s = sb.indexOf(e.charAt(i));
    if (s === -1)
      throw new Error("Character idx out of bounds: " + String(i));
    t.push(s);
  }
  const o = bc.find((i) => i.version === t[0]) ?? bc[0];
  if (!f3(n, t, o))
    throw new Error("Checksum verification failed!");
  return [n, t.slice(0, t.length - 6)];
}
function p3(e) {
  let t, r, n = !1, o = !1;
  for (t = 0; t < e.length; ++t) {
    if (r = e.charCodeAt(t), r < 33 || r > 126)
      return !1;
    r >= 97 && r <= 122 && (n = !0), r >= 65 && r <= 90 && (o = !0);
  }
  return !(n && o);
}
function g3(e) {
  const t = e.lastIndexOf("1");
  return !(t < 1 || t + 7 > e.length || e.length > 90);
}
function m3(e, t = "bc", r = 0) {
  const n = [r, ...ub([...e], 8, 5)], o = bc.find((s) => s.version === r) ?? bc[0], i = h3(t, n, o);
  return fb(i), i;
}
function fb(e) {
  e = e.toLowerCase();
  const t = e.split("1", 1)[0], [r, n] = lb(e), o = ub(n.slice(1), 5, 8, !1), i = o.length;
  switch (!0) {
    case t !== r:
      throw new Error("Returned hrp string is invalid.");
    case (o === null || i < 2 || i > 40):
      throw new Error("Decoded string is invalid or out of spec.");
    case n[0] > 16:
      throw new Error("Returned version bit is out of range.");
    default:
      return Uint8Array.from(o);
  }
}
function b3(e) {
  e = e.toLowerCase();
  const [t, r] = lb(e);
  return r[0];
}
const db = {
  encode: m3,
  decode: fb,
  version: b3
}, hb = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/", pb = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789-_", y3 = new TextEncoder();
function gb(e, t = !1, r = !0) {
  typeof e == "string" && (e = y3.encode(e));
  const n = t ? pb : hb;
  let o = "", i = 0, s = 0;
  for (let a = 0; a < e.length; a++)
    for (s = s << 8 | e[a], i += 8; i >= 6; )
      i -= 6, o += n[s >> i & 63];
  if (i > 0)
    for (s <<= 6 - i, o += n[s & 63]; i < 6; )
      o += r ? "=" : "", i += 2;
  return o;
}
function mb(e, t = !1) {
  const r = t || e.includes("-") || e.includes("_") ? pb.split("") : hb.split("");
  e = e.replace(/=+$/, "");
  const n = e.split("");
  let o = 0, i = 0;
  const s = [];
  for (let a = 0; a < n.length; a++) {
    const c = n[a], u = r.indexOf(c);
    if (u === -1)
      throw new Error("Invalid character: " + c);
    o += 6, i <<= 6, i |= u, o >= 8 && (o -= 8, s.push(i >>> o & 255));
  }
  return new Uint8Array(s);
}
const bb = {
  encode: gb,
  decode: mb
}, yb = {
  encode: (e) => gb(e, !0, !1),
  decode: (e) => mb(e, !0)
}, w3 = BigInt(0), v3 = BigInt(255), wb = BigInt(256);
function x3(e) {
  if (e <= 0xffn)
    return 1;
  if (e <= 0xffffn)
    return 2;
  if (e <= 0xffffffffn)
    return 4;
  if (e <= 0xffffffffffffffffn)
    return 8;
  if (e <= 0xffffffffffffffffffffffffffffffffn)
    return 16;
  if (e <= 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffn)
    return 32;
  throw new TypeError("Must specify a fixed buffer size for bigints greater than 32 bytes.");
}
function E3(e, t, r = "be") {
  t === void 0 && (t = x3(e));
  const n = r === "le", o = new ArrayBuffer(t), i = new DataView(o);
  let s = n ? 0 : t - 1;
  for (; e > w3; ) {
    const a = e & v3, c = Number(a);
    n ? i.setUint8(s++, c) : i.setUint8(s--, c), e = (e - a) / wb;
  }
  return new Uint8Array(o);
}
function _3(e) {
  let t = BigInt(0);
  for (let r = e.length - 1; r >= 0; r--)
    t = t * wb + BigInt(e[r]);
  return BigInt(t);
}
function S3(e) {
  const t = e.split("").map(Number);
  if (t.length % 8 !== 0)
    throw new Error(`Binary array is invalid length: ${e.length}`);
  const r = new Uint8Array(t.length / 8);
  for (let n = 0, o = 0; n < t.length; n += 8, o++) {
    let i = 0;
    for (let s = 0; s < 8; s++)
      i |= t[n + s] << 7 - s;
    r[o] = i;
  }
  return r;
}
function k3(e) {
  const t = new Array(e.length * 8);
  let r = 0;
  for (const n of e) {
    if (n > 255)
      throw new Error(`Invalid byte value: ${n}. Byte values must be between 0 and 255.`);
    for (let o = 7; o >= 0; o--, r++)
      t[r] = n >> o & 1;
  }
  return t.join("");
}
function A3(e) {
  if (e <= 255)
    return 1;
  if (e <= 65535)
    return 2;
  if (e <= 4294967295)
    return 4;
  throw new TypeError("Numbers larger than 4 bytes must specify a fixed size!");
}
function T3(e, t, r = "be") {
  t === void 0 && (t = A3(e));
  const n = r === "le", o = new ArrayBuffer(t), i = new DataView(o);
  let s = n ? 0 : t - 1;
  for (; e > 0; ) {
    const a = e & 255;
    n ? i.setUint8(s++, e) : i.setUint8(s--, e), e = (e - a) / 256;
  }
  return new Uint8Array(o);
}
function I3(e) {
  let t = 0;
  for (let r = e.length - 1; r >= 0; r--)
    t = t * 256 + e[r], e3(t);
  return t;
}
const P3 = new TextEncoder(), O3 = new TextDecoder();
function Nd(e) {
  return P3.encode(e);
}
function vl(e) {
  return O3.decode(e);
}
function B3(e, t) {
  Q8(e);
  const r = e.length / 2;
  if (t === void 0 && (t = r), r > t)
    throw new TypeError(`Hex string is larger than array size: ${r} > ${t}`);
  return t;
}
function $3(e, t, r = "le") {
  t = B3(e, t);
  const n = r === "le", o = new ArrayBuffer(t), i = new DataView(o);
  let s = n ? 0 : t - 1;
  for (let a = 0; a < e.length; a += 2) {
    const c = e.substring(a, a + 2), u = parseInt(c, 16);
    n ? i.setUint8(s++, u) : i.setUint8(s--, u);
  }
  return new Uint8Array(o);
}
function N3(e) {
  let t = "";
  for (let r = 0; r < e.length; r++)
    t += e[r].toString(16).padStart(2, "0");
  return t;
}
function U3(e) {
  const t = JSON.stringify(e, (r, n) => typeof n == "bigint" ? `${n}n` : n);
  return Nd(t);
}
function C3(e, t, r) {
  if (e instanceof ArrayBuffer)
    return new Uint8Array(e);
  if (e instanceof Uint8Array)
    return n3(e, t, r);
  if (typeof e == "string")
    return $3(e, t, r);
  if (typeof e == "bigint")
    return E3(e, t, r);
  if (typeof e == "number")
    return T3(e, t, r);
  if (typeof e == "boolean")
    return Uint8Array.of(e ? 1 : 0);
  throw TypeError("Unsupported format:" + typeof e);
}
const Be = class Be extends Uint8Array {
  static random(t = 32) {
    const r = r3(t);
    return new Be(r, t);
  }
  constructor(t, r, n) {
    const o = C3(t, r, n);
    super(o);
  }
  get arr() {
    return [...this];
  }
  get num() {
    return this.toNum();
  }
  get big() {
    return this.toBig();
  }
  get str() {
    return this.toStr();
  }
  get hex() {
    return this.toHex();
  }
  get raw() {
    return new Uint8Array(this);
  }
  get bin() {
    return this.toBin();
  }
  get b58chk() {
    return this.tob58chk();
  }
  get base64() {
    return this.toBase64();
  }
  get b64url() {
    return this.toB64url();
  }
  get digest() {
    return this.toHash();
  }
  get id() {
    return this.toHash().hex;
  }
  get stream() {
    return new G3(this);
  }
  toNum(t = "be") {
    const r = t === "be" ? this.reverse() : this;
    return I3(r);
  }
  toBin() {
    return k3(this);
  }
  toBig(t = "be") {
    const r = t === "be" ? this.reverse() : this;
    return _3(r);
  }
  toHash() {
    const t = bf(this);
    return new Be(t);
  }
  toJson() {
    const t = vl(this);
    return JSON.parse(t);
  }
  toBech32(t, r = 0) {
    return db.encode(this, t, r);
  }
  toStr() {
    return vl(this);
  }
  toHex() {
    return N3(this);
  }
  toBytes() {
    return new Uint8Array(this);
  }
  tob58chk() {
    return ib.encode(this);
  }
  toBase64() {
    return bb.encode(this);
  }
  toB64url() {
    return yb.encode(this);
  }
  prepend(t) {
    return Be.join([Be.bytes(t), this]);
  }
  append(t) {
    return Be.join([this, Be.bytes(t)]);
  }
  slice(t, r) {
    const n = new Uint8Array(this).slice(t, r);
    return new Be(n);
  }
  subarray(t, r) {
    const n = new Uint8Array(this).subarray(t, r);
    return new Be(n);
  }
  reverse() {
    const t = new Uint8Array(this).reverse();
    return new Be(t);
  }
  write(t, r) {
    const n = Be.bytes(t);
    this.set(n, r);
  }
  prefixSize(t) {
    const r = Be.varInt(this.length, t);
    return Be.join([r, this]);
  }
  static from(t) {
    return new Be(Uint8Array.from(t));
  }
  static of(...t) {
    return new Be(Uint8Array.of(...t));
  }
  static join(t) {
    const r = t.map((o) => Be.bytes(o)), n = rb(r);
    return new Be(n);
  }
  static varInt(t, r) {
    if (t < 253)
      return Be.num(t, 1);
    if (t < 65536)
      return Be.of(253, ...Be.num(t, 2, r));
    if (t < 4294967296)
      return Be.of(254, ...Be.num(t, 4, r));
    if (BigInt(t) < 0x10000000000000000n)
      return Be.of(255, ...Be.num(t, 8, r));
    throw new Error(`Value is too large: ${t}`);
  }
};
Be.num = H3, Be.big = L3, Be.bin = R3, Be.raw = z3, Be.str = j3, Be.hex = M3, Be.bytes = D3, Be.json = F3, Be.base64 = K3, Be.b64url = q3, Be.bech32 = V3, Be.b58chk = W3, Be.encode = Nd, Be.decode = vl;
let be = Be;
function H3(e, t, r) {
  return new be(e, t, r);
}
function R3(e, t, r) {
  return new be(S3(e), t, r);
}
function L3(e, t, r) {
  return new be(e, t, r);
}
function z3(e, t, r) {
  return new be(e, t, r);
}
function j3(e, t, r) {
  return new be(Nd(e), t, r);
}
function M3(e, t, r) {
  return new be(e, t, r);
}
function D3(e, t, r) {
  return new be(e, t, r);
}
function F3(e) {
  return new be(U3(e));
}
function K3(e) {
  return new be(bb.decode(e));
}
function q3(e) {
  return new be(yb.decode(e));
}
function V3(e) {
  return new be(db.decode(e));
}
function W3(e) {
  return new be(ib.decode(e));
}
class G3 {
  constructor(t) {
    this.data = be.bytes(t), this.size = this.data.length;
  }
  peek(t) {
    if (t > this.size)
      throw new Error(`Size greater than stream: ${t} > ${this.size}`);
    return new be(this.data.slice(0, t));
  }
  read(t) {
    t = t ?? this.readSize();
    const r = this.peek(t);
    return this.data = this.data.slice(t), this.size = this.data.length, r;
  }
  readSize(t) {
    const r = this.read(1).num;
    switch (!0) {
      case (r >= 0 && r < 253):
        return r;
      case r === 253:
        return this.read(2).toNum(t);
      case r === 254:
        return this.read(4).toNum(t);
      case r === 255:
        return this.read(8).toNum(t);
      default:
        throw new Error(`Varint is out of range: ${r}`);
    }
  }
}
const yc = sn.CURVE, Ud = yc.n, Z3 = yc.p, X3 = { x: yc.Gx, y: yc.Gy }, Y3 = BigInt(0), J3 = BigInt(1), Q3 = BigInt(2), eT = BigInt(3), tT = BigInt(4), yf = { N: Ud, P: Z3, G: X3, _0n: Y3, _1n: J3, _2n: Q3, _3n: eT, _4n: tT }, ds = Dm(Ud, 32, !0), vb = (e) => kt(e, Ud);
function Cd(e, t = !1) {
  if (t)
    throw new Error(e);
  return !1;
}
function xb(e) {
  return be.random(e);
}
function rT(e) {
  const t = be.bytes(e).big;
  return be.big(vb(t), 32);
}
var nT = /* @__PURE__ */ Object.freeze({
  __proto__: null,
  fail: Cd,
  mod_bytes: rT,
  random: xb
});
const { N: oT, P: ZU, _0n: iT } = yf;
function sT(e, t, r) {
  const n = be.bytes(e);
  return n.length !== t ? Cd(`Invalid byte size: ${n.hex} !== ${t}`, r) : !0;
}
function aT(e, t) {
  return typeof e == "bigint" && iT < e && e < oT || Cd("x value is not in the field!", t), !0;
}
const qp = sn.ProjectivePoint, ft = class ft extends Uint8Array {
  static mod(t) {
    return new ft(t);
  }
  static is_valid(t, r) {
    const n = be.bytes(t, 32).big;
    return aT(n, r);
  }
  constructor(t) {
    let r = cT(t);
    r = vb(r), ft.is_valid(r, !0), super(be.big(r, 32), 32);
  }
  get buff() {
    return new be(this);
  }
  get raw() {
    return this.buff.raw;
  }
  get big() {
    return this.buff.big;
  }
  get hex() {
    return this.buff.hex;
  }
  get point() {
    return this.generate();
  }
  get hasOddY() {
    return this.point.hasOddY;
  }
  get negated() {
    return this.hasOddY ? this.negate() : this;
  }
  gt(t) {
    return new ft(t).big > this.big;
  }
  lt(t) {
    return new ft(t).big < this.big;
  }
  eq(t) {
    return new ft(t).big === this.big;
  }
  ne(t) {
    return new ft(t).big !== this.big;
  }
  add(t) {
    const r = ft.mod(t), n = ds.add(this.big, r.big);
    return new ft(n);
  }
  sub(t) {
    const r = ft.mod(t), n = ds.sub(this.big, r.big);
    return new ft(n);
  }
  mul(t) {
    const r = ft.mod(t), n = ds.mul(this.big, r.big);
    return new ft(n);
  }
  pow(t) {
    const r = ft.mod(t), n = ds.pow(this.big, r.big);
    return new ft(n);
  }
  div(t) {
    const r = ft.mod(t), n = ds.div(this.big, r.big);
    return new ft(n);
  }
  negate() {
    return new ft(ft.N - this.big);
  }
  generate() {
    const r = sn.ProjectivePoint.BASE.multiply(this.big);
    return On.import(r);
  }
};
ft.N = sn.CURVE.n;
let zt = ft;
const Qe = class Qe {
  static from_x(t) {
    let r = uT(t);
    r.length === 32 && (r = r.prepend(2)), sT(r, 33);
    const n = qp.fromHex(r.hex);
    return n.assertValidity(), new Qe(n.x, n.y);
  }
  static generate(t) {
    const r = zt.mod(t), n = Qe.base.multiply(r.big);
    return Qe.import(n);
  }
  static import(t) {
    const r = t instanceof Qe ? { x: t.x.big, y: t.y.big } : { x: t.x, y: t.y };
    return new Qe(r.x, r.y);
  }
  constructor(t, r) {
    this._p = new qp(t, r, 1n), this.p.assertValidity();
  }
  get p() {
    return this._p;
  }
  get x() {
    return be.big(this.p.x, 32);
  }
  get y() {
    return be.big(this.p.y, 32);
  }
  get buff() {
    return be.raw(this.p.toRawBytes(!0));
  }
  get raw() {
    return this.buff.raw;
  }
  get hex() {
    return this.buff.hex;
  }
  get hasEvenY() {
    return this.p.hasEvenY();
  }
  get hasOddY() {
    return !this.p.hasEvenY();
  }
  eq(t) {
    const r = t instanceof Qe ? t : Qe.from_x(t);
    return this.x.big === r.x.big && this.y.big === r.y.big;
  }
  add(t) {
    return t instanceof Qe ? Qe.import(this.p.add(t.p)) : Qe.import(this.p.add(Qe.generate(t).p));
  }
  sub(t) {
    return t instanceof Qe ? Qe.import(this.p.subtract(t.p)) : Qe.import(this.p.subtract(Qe.generate(t).p));
  }
  mul(t) {
    return t instanceof Qe ? Qe.import(this.p.multiply(t.x.big)) : Qe.import(this.p.multiply(zt.mod(t).big));
  }
  negate() {
    return Qe.import(this.p.negate());
  }
};
Qe.P = yf.P, Qe.G = yf.G, Qe.base = sn.ProjectivePoint.BASE;
let On = Qe;
function cT(e) {
  if (e instanceof zt)
    return e.big;
  if (e instanceof On)
    return e.x.big;
  if (e instanceof Uint8Array)
    return be.raw(e).big;
  if (typeof e == "string")
    return be.hex(e).big;
  if (typeof e == "number")
    return be.num(e).big;
  if (typeof e == "bigint")
    return BigInt(e);
  throw TypeError("Invalid input type:" + typeof e);
}
function uT(e) {
  if (e instanceof zt)
    return e.point.buff;
  if (e instanceof On)
    return e.buff;
  if (e instanceof Uint8Array || typeof e == "string")
    return be.bytes(e);
  if (typeof e == "number" || typeof e == "bigint")
    return be.bytes(e, 32);
  throw new TypeError(`Unknown type: ${typeof e}`);
}
function wf(e) {
  if (!Number.isSafeInteger(e) || e < 0)
    throw new Error(`Wrong positive integer: ${e}`);
}
function lT(e) {
  if (typeof e != "boolean")
    throw new Error(`Expected boolean, not ${e}`);
}
function Eb(e, ...t) {
  if (!(e instanceof Uint8Array))
    throw new Error("Expected Uint8Array");
  if (t.length > 0 && !t.includes(e.length))
    throw new Error(`Expected Uint8Array of length ${t}, not of length=${e.length}`);
}
function fT(e) {
  if (typeof e != "function" || typeof e.create != "function")
    throw new Error("Hash should be wrapped by utils.wrapConstructor");
  wf(e.outputLen), wf(e.blockLen);
}
function dT(e, t = !0) {
  if (e.destroyed)
    throw new Error("Hash instance has been destroyed");
  if (t && e.finished)
    throw new Error("Hash#digest() has already been called");
}
function hT(e, t) {
  Eb(e);
  const r = t.outputLen;
  if (e.length < r)
    throw new Error(`digestInto() expects output buffer of length at least ${r}`);
}
const pT = {
  number: wf,
  bool: lT,
  bytes: Eb,
  hash: fT,
  exists: dT,
  output: hT
};
var zo = pT;
/*! noble-hashes - MIT License (c) 2022 Paul Miller (paulmillr.com) */
const gT = (e) => e instanceof Uint8Array, xl = (e) => new DataView(e.buffer, e.byteOffset, e.byteLength), Jr = (e, t) => e << 32 - t | e >>> t, mT = new Uint8Array(new Uint32Array([287454020]).buffer)[0] === 68;
if (!mT)
  throw new Error("Non little-endian hardware is not supported");
Array.from({ length: 256 }, (e, t) => t.toString(16).padStart(2, "0"));
function bT(e) {
  if (typeof e != "string")
    throw new Error(`utf8ToBytes expected string, got ${typeof e}`);
  return new Uint8Array(new TextEncoder().encode(e));
}
function Hd(e) {
  if (typeof e == "string" && (e = bT(e)), !gT(e))
    throw new Error(`expected Uint8Array, got ${typeof e}`);
  return e;
}
class _b {
  // Safe version that clones internal state
  clone() {
    return this._cloneInto();
  }
}
function oi(e) {
  const t = (n) => e().update(Hd(n)).digest(), r = e();
  return t.outputLen = r.outputLen, t.blockLen = r.blockLen, t.create = () => e(), t;
}
function yT(e, t, r, n) {
  if (typeof e.setBigUint64 == "function")
    return e.setBigUint64(t, r, n);
  const o = BigInt(32), i = BigInt(4294967295), s = Number(r >> o & i), a = Number(r & i), c = n ? 4 : 0, u = n ? 0 : 4;
  e.setUint32(t + c, s, n), e.setUint32(t + u, a, n);
}
class Rd extends _b {
  constructor(t, r, n, o) {
    super(), this.blockLen = t, this.outputLen = r, this.padOffset = n, this.isLE = o, this.finished = !1, this.length = 0, this.pos = 0, this.destroyed = !1, this.buffer = new Uint8Array(t), this.view = xl(this.buffer);
  }
  update(t) {
    zo.exists(this);
    const { view: r, buffer: n, blockLen: o } = this;
    t = Hd(t);
    const i = t.length;
    for (let s = 0; s < i; ) {
      const a = Math.min(o - this.pos, i - s);
      if (a === o) {
        const c = xl(t);
        for (; o <= i - s; s += o)
          this.process(c, s);
        continue;
      }
      n.set(t.subarray(s, s + a), this.pos), this.pos += a, s += a, this.pos === o && (this.process(r, 0), this.pos = 0);
    }
    return this.length += t.length, this.roundClean(), this;
  }
  digestInto(t) {
    zo.exists(this), zo.output(t, this), this.finished = !0;
    const { buffer: r, view: n, blockLen: o, isLE: i } = this;
    let { pos: s } = this;
    r[s++] = 128, this.buffer.subarray(s).fill(0), this.padOffset > o - s && (this.process(n, 0), s = 0);
    for (let l = s; l < o; l++)
      r[l] = 0;
    yT(n, o - 8, BigInt(this.length * 8), i), this.process(n, 0);
    const a = xl(t), c = this.outputLen;
    if (c % 4)
      throw new Error("_sha2: outputLen should be aligned to 32bit");
    const u = c / 4, f = this.get();
    if (u > f.length)
      throw new Error("_sha2: outputLen bigger than state");
    for (let l = 0; l < u; l++)
      a.setUint32(4 * l, f[l], i);
  }
  digest() {
    const { buffer: t, outputLen: r } = this;
    this.digestInto(t);
    const n = t.slice(0, r);
    return this.destroy(), n;
  }
  _cloneInto(t) {
    t || (t = new this.constructor()), t.set(...this.get());
    const { blockLen: r, buffer: n, length: o, finished: i, destroyed: s, pos: a } = this;
    return t.length = o, t.pos = a, t.finished = i, t.destroyed = s, o % r && t.buffer.set(n), t;
  }
}
const wT = (e, t, r) => e & t ^ ~e & r, vT = (e, t, r) => e & t ^ e & r ^ t & r, xT = new Uint32Array([
  1116352408,
  1899447441,
  3049323471,
  3921009573,
  961987163,
  1508970993,
  2453635748,
  2870763221,
  3624381080,
  310598401,
  607225278,
  1426881987,
  1925078388,
  2162078206,
  2614888103,
  3248222580,
  3835390401,
  4022224774,
  264347078,
  604807628,
  770255983,
  1249150122,
  1555081692,
  1996064986,
  2554220882,
  2821834349,
  2952996808,
  3210313671,
  3336571891,
  3584528711,
  113926993,
  338241895,
  666307205,
  773529912,
  1294757372,
  1396182291,
  1695183700,
  1986661051,
  2177026350,
  2456956037,
  2730485921,
  2820302411,
  3259730800,
  3345764771,
  3516065817,
  3600352804,
  4094571909,
  275423344,
  430227734,
  506948616,
  659060556,
  883997877,
  958139571,
  1322822218,
  1537002063,
  1747873779,
  1955562222,
  2024104815,
  2227730452,
  2361852424,
  2428436474,
  2756734187,
  3204031479,
  3329325298
]), Jn = new Uint32Array([
  1779033703,
  3144134277,
  1013904242,
  2773480762,
  1359893119,
  2600822924,
  528734635,
  1541459225
]), Qn = new Uint32Array(64);
let Sb = class extends Rd {
  constructor() {
    super(64, 32, 8, !1), this.A = Jn[0] | 0, this.B = Jn[1] | 0, this.C = Jn[2] | 0, this.D = Jn[3] | 0, this.E = Jn[4] | 0, this.F = Jn[5] | 0, this.G = Jn[6] | 0, this.H = Jn[7] | 0;
  }
  get() {
    const { A: t, B: r, C: n, D: o, E: i, F: s, G: a, H: c } = this;
    return [t, r, n, o, i, s, a, c];
  }
  // prettier-ignore
  set(t, r, n, o, i, s, a, c) {
    this.A = t | 0, this.B = r | 0, this.C = n | 0, this.D = o | 0, this.E = i | 0, this.F = s | 0, this.G = a | 0, this.H = c | 0;
  }
  process(t, r) {
    for (let l = 0; l < 16; l++, r += 4)
      Qn[l] = t.getUint32(r, !1);
    for (let l = 16; l < 64; l++) {
      const h = Qn[l - 15], m = Qn[l - 2], b = Jr(h, 7) ^ Jr(h, 18) ^ h >>> 3, y = Jr(m, 17) ^ Jr(m, 19) ^ m >>> 10;
      Qn[l] = y + Qn[l - 7] + b + Qn[l - 16] | 0;
    }
    let { A: n, B: o, C: i, D: s, E: a, F: c, G: u, H: f } = this;
    for (let l = 0; l < 64; l++) {
      const h = Jr(a, 6) ^ Jr(a, 11) ^ Jr(a, 25), m = f + h + wT(a, c, u) + xT[l] + Qn[l] | 0, y = (Jr(n, 2) ^ Jr(n, 13) ^ Jr(n, 22)) + vT(n, o, i) | 0;
      f = u, u = c, c = a, a = s + m | 0, s = i, i = o, o = n, n = m + y | 0;
    }
    n = n + this.A | 0, o = o + this.B | 0, i = i + this.C | 0, s = s + this.D | 0, a = a + this.E | 0, c = c + this.F | 0, u = u + this.G | 0, f = f + this.H | 0, this.set(n, o, i, s, a, c, u, f);
  }
  roundClean() {
    Qn.fill(0);
  }
  destroy() {
    this.set(0, 0, 0, 0, 0, 0, 0, 0), this.buffer.fill(0);
  }
}, ET = class extends Sb {
  constructor() {
    super(), this.A = -1056596264, this.B = 914150663, this.C = 812702999, this.D = -150054599, this.E = -4191439, this.F = 1750603025, this.G = 1694076839, this.H = -1090891868, this.outputLen = 28;
  }
};
const wc = oi(() => new Sb());
oi(() => new ET());
const $a = BigInt(2 ** 32 - 1), vf = BigInt(32);
function kb(e, t = !1) {
  return t ? { h: Number(e & $a), l: Number(e >> vf & $a) } : { h: Number(e >> vf & $a) | 0, l: Number(e & $a) | 0 };
}
function _T(e, t = !1) {
  let r = new Uint32Array(e.length), n = new Uint32Array(e.length);
  for (let o = 0; o < e.length; o++) {
    const { h: i, l: s } = kb(e[o], t);
    [r[o], n[o]] = [i, s];
  }
  return [r, n];
}
const ST = (e, t) => BigInt(e >>> 0) << vf | BigInt(t >>> 0), kT = (e, t, r) => e >>> r, AT = (e, t, r) => e << 32 - r | t >>> r, TT = (e, t, r) => e >>> r | t << 32 - r, IT = (e, t, r) => e << 32 - r | t >>> r, PT = (e, t, r) => e << 64 - r | t >>> r - 32, OT = (e, t, r) => e >>> r - 32 | t << 64 - r, BT = (e, t) => t, $T = (e, t) => e, NT = (e, t, r) => e << r | t >>> 32 - r, UT = (e, t, r) => t << r | e >>> 32 - r, CT = (e, t, r) => t << r - 32 | e >>> 64 - r, HT = (e, t, r) => e << r - 32 | t >>> 64 - r;
function RT(e, t, r, n) {
  const o = (t >>> 0) + (n >>> 0);
  return { h: e + r + (o / 2 ** 32 | 0) | 0, l: o | 0 };
}
const LT = (e, t, r) => (e >>> 0) + (t >>> 0) + (r >>> 0), zT = (e, t, r, n) => t + r + n + (e / 2 ** 32 | 0) | 0, jT = (e, t, r, n) => (e >>> 0) + (t >>> 0) + (r >>> 0) + (n >>> 0), MT = (e, t, r, n, o) => t + r + n + o + (e / 2 ** 32 | 0) | 0, DT = (e, t, r, n, o) => (e >>> 0) + (t >>> 0) + (r >>> 0) + (n >>> 0) + (o >>> 0), FT = (e, t, r, n, o, i) => t + r + n + o + i + (e / 2 ** 32 | 0) | 0, KT = {
  fromBig: kb,
  split: _T,
  toBig: ST,
  shrSH: kT,
  shrSL: AT,
  rotrSH: TT,
  rotrSL: IT,
  rotrBH: PT,
  rotrBL: OT,
  rotr32H: BT,
  rotr32L: $T,
  rotlSH: NT,
  rotlSL: UT,
  rotlBH: CT,
  rotlBL: HT,
  add: RT,
  add3L: LT,
  add3H: zT,
  add4L: jT,
  add4H: MT,
  add5H: FT,
  add5L: DT
};
var Ie = KT;
const [qT, VT] = Ie.split([
  "0x428a2f98d728ae22",
  "0x7137449123ef65cd",
  "0xb5c0fbcfec4d3b2f",
  "0xe9b5dba58189dbbc",
  "0x3956c25bf348b538",
  "0x59f111f1b605d019",
  "0x923f82a4af194f9b",
  "0xab1c5ed5da6d8118",
  "0xd807aa98a3030242",
  "0x12835b0145706fbe",
  "0x243185be4ee4b28c",
  "0x550c7dc3d5ffb4e2",
  "0x72be5d74f27b896f",
  "0x80deb1fe3b1696b1",
  "0x9bdc06a725c71235",
  "0xc19bf174cf692694",
  "0xe49b69c19ef14ad2",
  "0xefbe4786384f25e3",
  "0x0fc19dc68b8cd5b5",
  "0x240ca1cc77ac9c65",
  "0x2de92c6f592b0275",
  "0x4a7484aa6ea6e483",
  "0x5cb0a9dcbd41fbd4",
  "0x76f988da831153b5",
  "0x983e5152ee66dfab",
  "0xa831c66d2db43210",
  "0xb00327c898fb213f",
  "0xbf597fc7beef0ee4",
  "0xc6e00bf33da88fc2",
  "0xd5a79147930aa725",
  "0x06ca6351e003826f",
  "0x142929670a0e6e70",
  "0x27b70a8546d22ffc",
  "0x2e1b21385c26c926",
  "0x4d2c6dfc5ac42aed",
  "0x53380d139d95b3df",
  "0x650a73548baf63de",
  "0x766a0abb3c77b2a8",
  "0x81c2c92e47edaee6",
  "0x92722c851482353b",
  "0xa2bfe8a14cf10364",
  "0xa81a664bbc423001",
  "0xc24b8b70d0f89791",
  "0xc76c51a30654be30",
  "0xd192e819d6ef5218",
  "0xd69906245565a910",
  "0xf40e35855771202a",
  "0x106aa07032bbd1b8",
  "0x19a4c116b8d2d0c8",
  "0x1e376c085141ab53",
  "0x2748774cdf8eeb99",
  "0x34b0bcb5e19b48a8",
  "0x391c0cb3c5c95a63",
  "0x4ed8aa4ae3418acb",
  "0x5b9cca4f7763e373",
  "0x682e6ff3d6b2b8a3",
  "0x748f82ee5defb2fc",
  "0x78a5636f43172f60",
  "0x84c87814a1f0ab72",
  "0x8cc702081a6439ec",
  "0x90befffa23631e28",
  "0xa4506cebde82bde9",
  "0xbef9a3f7b2c67915",
  "0xc67178f2e372532b",
  "0xca273eceea26619c",
  "0xd186b8c721c0c207",
  "0xeada7dd6cde0eb1e",
  "0xf57d4f7fee6ed178",
  "0x06f067aa72176fba",
  "0x0a637dc5a2c898a6",
  "0x113f9804bef90dae",
  "0x1b710b35131c471b",
  "0x28db77f523047d84",
  "0x32caab7b40c72493",
  "0x3c9ebe0a15c9bebc",
  "0x431d67c49c100d4c",
  "0x4cc5d4becb3e42b6",
  "0x597f299cfc657e2a",
  "0x5fcb6fab3ad6faec",
  "0x6c44198c4a475817"
].map((e) => BigInt(e))), eo = new Uint32Array(80), to = new Uint32Array(80);
let iu = class extends Rd {
  constructor() {
    super(128, 64, 16, !1), this.Ah = 1779033703, this.Al = -205731576, this.Bh = -1150833019, this.Bl = -2067093701, this.Ch = 1013904242, this.Cl = -23791573, this.Dh = -1521486534, this.Dl = 1595750129, this.Eh = 1359893119, this.El = -1377402159, this.Fh = -1694144372, this.Fl = 725511199, this.Gh = 528734635, this.Gl = -79577749, this.Hh = 1541459225, this.Hl = 327033209;
  }
  // prettier-ignore
  get() {
    const { Ah: t, Al: r, Bh: n, Bl: o, Ch: i, Cl: s, Dh: a, Dl: c, Eh: u, El: f, Fh: l, Fl: h, Gh: m, Gl: b, Hh: y, Hl: g } = this;
    return [t, r, n, o, i, s, a, c, u, f, l, h, m, b, y, g];
  }
  // prettier-ignore
  set(t, r, n, o, i, s, a, c, u, f, l, h, m, b, y, g) {
    this.Ah = t | 0, this.Al = r | 0, this.Bh = n | 0, this.Bl = o | 0, this.Ch = i | 0, this.Cl = s | 0, this.Dh = a | 0, this.Dl = c | 0, this.Eh = u | 0, this.El = f | 0, this.Fh = l | 0, this.Fl = h | 0, this.Gh = m | 0, this.Gl = b | 0, this.Hh = y | 0, this.Hl = g | 0;
  }
  process(t, r) {
    for (let v = 0; v < 16; v++, r += 4)
      eo[v] = t.getUint32(r), to[v] = t.getUint32(r += 4);
    for (let v = 16; v < 80; v++) {
      const T = eo[v - 15] | 0, I = to[v - 15] | 0, P = Ie.rotrSH(T, I, 1) ^ Ie.rotrSH(T, I, 8) ^ Ie.shrSH(T, I, 7), H = Ie.rotrSL(T, I, 1) ^ Ie.rotrSL(T, I, 8) ^ Ie.shrSL(T, I, 7), j = eo[v - 2] | 0, V = to[v - 2] | 0, te = Ie.rotrSH(j, V, 19) ^ Ie.rotrBH(j, V, 61) ^ Ie.shrSH(j, V, 6), Z = Ie.rotrSL(j, V, 19) ^ Ie.rotrBL(j, V, 61) ^ Ie.shrSL(j, V, 6), N = Ie.add4L(H, Z, to[v - 7], to[v - 16]), W = Ie.add4H(N, P, te, eo[v - 7], eo[v - 16]);
      eo[v] = W | 0, to[v] = N | 0;
    }
    let { Ah: n, Al: o, Bh: i, Bl: s, Ch: a, Cl: c, Dh: u, Dl: f, Eh: l, El: h, Fh: m, Fl: b, Gh: y, Gl: g, Hh: x, Hl: S } = this;
    for (let v = 0; v < 80; v++) {
      const T = Ie.rotrSH(l, h, 14) ^ Ie.rotrSH(l, h, 18) ^ Ie.rotrBH(l, h, 41), I = Ie.rotrSL(l, h, 14) ^ Ie.rotrSL(l, h, 18) ^ Ie.rotrBL(l, h, 41), P = l & m ^ ~l & y, H = h & b ^ ~h & g, j = Ie.add5L(S, I, H, VT[v], to[v]), V = Ie.add5H(j, x, T, P, qT[v], eo[v]), te = j | 0, Z = Ie.rotrSH(n, o, 28) ^ Ie.rotrBH(n, o, 34) ^ Ie.rotrBH(n, o, 39), N = Ie.rotrSL(n, o, 28) ^ Ie.rotrBL(n, o, 34) ^ Ie.rotrBL(n, o, 39), W = n & i ^ n & a ^ i & a, D = o & s ^ o & c ^ s & c;
      x = y | 0, S = g | 0, y = m | 0, g = b | 0, m = l | 0, b = h | 0, { h: l, l: h } = Ie.add(u | 0, f | 0, V | 0, te | 0), u = a | 0, f = c | 0, a = i | 0, c = s | 0, i = n | 0, s = o | 0;
      const $ = Ie.add3L(te, N, D);
      n = Ie.add3H($, V, Z, W), o = $ | 0;
    }
    ({ h: n, l: o } = Ie.add(this.Ah | 0, this.Al | 0, n | 0, o | 0)), { h: i, l: s } = Ie.add(this.Bh | 0, this.Bl | 0, i | 0, s | 0), { h: a, l: c } = Ie.add(this.Ch | 0, this.Cl | 0, a | 0, c | 0), { h: u, l: f } = Ie.add(this.Dh | 0, this.Dl | 0, u | 0, f | 0), { h: l, l: h } = Ie.add(this.Eh | 0, this.El | 0, l | 0, h | 0), { h: m, l: b } = Ie.add(this.Fh | 0, this.Fl | 0, m | 0, b | 0), { h: y, l: g } = Ie.add(this.Gh | 0, this.Gl | 0, y | 0, g | 0), { h: x, l: S } = Ie.add(this.Hh | 0, this.Hl | 0, x | 0, S | 0), this.set(n, o, i, s, a, c, u, f, l, h, m, b, y, g, x, S);
  }
  roundClean() {
    eo.fill(0), to.fill(0);
  }
  destroy() {
    this.buffer.fill(0), this.set(0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
  }
}, WT = class extends iu {
  constructor() {
    super(), this.Ah = -1942145080, this.Al = 424955298, this.Bh = 1944164710, this.Bl = -1982016298, this.Ch = 502970286, this.Cl = 855612546, this.Dh = 1738396948, this.Dl = 1479516111, this.Eh = 258812777, this.El = 2077511080, this.Fh = 2011393907, this.Fl = 79989058, this.Gh = 1067287976, this.Gl = 1780299464, this.Hh = 286451373, this.Hl = -1848208735, this.outputLen = 28;
  }
}, GT = class extends iu {
  constructor() {
    super(), this.Ah = 573645204, this.Al = -64227540, this.Bh = -1621794909, this.Bl = -934517566, this.Ch = 596883563, this.Cl = 1867755857, this.Dh = -1774684391, this.Dl = 1497426621, this.Eh = -1775747358, this.El = -1467023389, this.Fh = -1101128155, this.Fl = 1401305490, this.Gh = 721525244, this.Gl = 746961066, this.Hh = 246885852, this.Hl = -2117784414, this.outputLen = 32;
  }
}, ZT = class extends iu {
  constructor() {
    super(), this.Ah = -876896931, this.Al = -1056596264, this.Bh = 1654270250, this.Bl = 914150663, this.Ch = -1856437926, this.Cl = 812702999, this.Dh = 355462360, this.Dl = -150054599, this.Eh = 1731405415, this.El = -4191439, this.Fh = -1900787065, this.Fl = 1750603025, this.Gh = -619958771, this.Gl = 1694076839, this.Hh = 1203062813, this.Hl = -1090891868, this.outputLen = 48;
  }
};
const XT = oi(() => new iu());
oi(() => new WT());
oi(() => new GT());
oi(() => new ZT());
const YT = new Uint8Array([7, 4, 13, 1, 10, 6, 15, 3, 12, 0, 9, 5, 2, 14, 11, 8]), Ab = Uint8Array.from({ length: 16 }, (e, t) => t), JT = Ab.map((e) => (9 * e + 5) % 16);
let Ld = [Ab], zd = [JT];
for (let e = 0; e < 4; e++)
  for (let t of [Ld, zd])
    t.push(t[e].map((r) => YT[r]));
const Tb = [
  [11, 14, 15, 12, 5, 8, 7, 9, 11, 13, 14, 15, 6, 7, 9, 8],
  [12, 13, 11, 15, 6, 9, 9, 7, 12, 15, 11, 13, 7, 8, 7, 7],
  [13, 15, 14, 11, 7, 7, 6, 8, 13, 14, 13, 12, 5, 5, 6, 9],
  [14, 11, 12, 14, 8, 6, 5, 5, 15, 12, 15, 14, 9, 9, 8, 6],
  [15, 12, 13, 13, 9, 5, 8, 6, 14, 11, 12, 11, 8, 6, 5, 5]
].map((e) => new Uint8Array(e)), QT = Ld.map((e, t) => e.map((r) => Tb[t][r])), e4 = zd.map((e, t) => e.map((r) => Tb[t][r])), t4 = new Uint32Array([0, 1518500249, 1859775393, 2400959708, 2840853838]), r4 = new Uint32Array([1352829926, 1548603684, 1836072691, 2053994217, 0]), Na = (e, t) => e << t | e >>> 32 - t;
function Vp(e, t, r, n) {
  return e === 0 ? t ^ r ^ n : e === 1 ? t & r | ~t & n : e === 2 ? (t | ~r) ^ n : e === 3 ? t & n | r & ~n : t ^ (r | ~n);
}
const Ua = new Uint32Array(16);
class n4 extends Rd {
  constructor() {
    super(64, 20, 8, !0), this.h0 = 1732584193, this.h1 = -271733879, this.h2 = -1732584194, this.h3 = 271733878, this.h4 = -1009589776;
  }
  get() {
    const { h0: t, h1: r, h2: n, h3: o, h4: i } = this;
    return [t, r, n, o, i];
  }
  set(t, r, n, o, i) {
    this.h0 = t | 0, this.h1 = r | 0, this.h2 = n | 0, this.h3 = o | 0, this.h4 = i | 0;
  }
  process(t, r) {
    for (let m = 0; m < 16; m++, r += 4)
      Ua[m] = t.getUint32(r, !0);
    let n = this.h0 | 0, o = n, i = this.h1 | 0, s = i, a = this.h2 | 0, c = a, u = this.h3 | 0, f = u, l = this.h4 | 0, h = l;
    for (let m = 0; m < 5; m++) {
      const b = 4 - m, y = t4[m], g = r4[m], x = Ld[m], S = zd[m], v = QT[m], T = e4[m];
      for (let I = 0; I < 16; I++) {
        const P = Na(n + Vp(m, i, a, u) + Ua[x[I]] + y, v[I]) + l | 0;
        n = l, l = u, u = Na(a, 10) | 0, a = i, i = P;
      }
      for (let I = 0; I < 16; I++) {
        const P = Na(o + Vp(b, s, c, f) + Ua[S[I]] + g, T[I]) + h | 0;
        o = h, h = f, f = Na(c, 10) | 0, c = s, s = P;
      }
    }
    this.set(this.h1 + a + f | 0, this.h2 + u + h | 0, this.h3 + l + o | 0, this.h4 + n + s | 0, this.h0 + i + c | 0);
  }
  roundClean() {
    Ua.fill(0);
  }
  destroy() {
    this.destroyed = !0, this.buffer.fill(0), this.set(0, 0, 0, 0, 0);
  }
}
const o4 = oi(() => new n4());
class Ib extends _b {
  constructor(t, r) {
    super(), this.finished = !1, this.destroyed = !1, zo.hash(t);
    const n = Hd(r);
    if (this.iHash = t.create(), typeof this.iHash.update != "function")
      throw new Error("Expected instance of class which extends utils.Hash");
    this.blockLen = this.iHash.blockLen, this.outputLen = this.iHash.outputLen;
    const o = this.blockLen, i = new Uint8Array(o);
    i.set(n.length > o ? t.create().update(n).digest() : n);
    for (let s = 0; s < i.length; s++)
      i[s] ^= 54;
    this.iHash.update(i), this.oHash = t.create();
    for (let s = 0; s < i.length; s++)
      i[s] ^= 106;
    this.oHash.update(i), i.fill(0);
  }
  update(t) {
    return zo.exists(this), this.iHash.update(t), this;
  }
  digestInto(t) {
    zo.exists(this), zo.bytes(t, this.outputLen), this.finished = !0, this.iHash.digestInto(t), this.oHash.update(t), this.oHash.digestInto(t), this.destroy();
  }
  digest() {
    const t = new Uint8Array(this.oHash.outputLen);
    return this.digestInto(t), t;
  }
  _cloneInto(t) {
    t || (t = Object.create(Object.getPrototypeOf(this), {}));
    const { oHash: r, iHash: n, finished: o, destroyed: i, blockLen: s, outputLen: a } = this;
    return t = t, t.finished = o, t.destroyed = i, t.blockLen = s, t.outputLen = a, t.oHash = r._cloneInto(t.oHash), t.iHash = n._cloneInto(t.iHash), t;
  }
  destroy() {
    this.destroyed = !0, this.oHash.destroy(), this.iHash.destroy();
  }
}
const Pb = (e, t, r) => new Ib(e, t).update(r).digest();
Pb.create = (e, t) => new Ib(e, t);
function i4(e) {
  const t = be.bytes(e);
  return be.raw(wc(t));
}
function ji(e) {
  const t = be.bytes(e);
  return be.raw(wc(wc(t)));
}
function jd(e) {
  const t = be.bytes(e);
  return be.raw(o4(wc(t)));
}
function s4(e, t) {
  const r = be.bytes(e), n = be.bytes(t);
  return be.raw(Pb(XT, r, n));
}
function a4(e) {
  const t = be.str(e).digest;
  return be.join([t, t]);
}
function c4(e = 32) {
  return Md(xb(e));
}
function Md(e) {
  return zt.mod(e).buff;
}
function Ob(e, t = !1) {
  const r = zt.mod(e).point;
  return t ? r.x : r.buff;
}
function Bb(e, t) {
  const r = On.from_x(t), n = zt.mod(e);
  return r.mul(n).buff;
}
function u4(e, t, r = "ecdh/code") {
  const n = a4(r), o = Md(e), i = Ob(o), s = be.bytes(t), a = Bb(o, s), c = [i.hex, s.hex];
  return c.sort(), s4(a, be.join([n, ...c]));
}
function l4(e) {
  const t = be.bytes(e);
  switch (!0) {
    case t.length === 32:
      return !0;
    case (t.length === 33 && t[0] === 2):
      return !0;
    case (t.length === 33 && t[0] === 3):
      return !1;
    default:
      throw new TypeError(`Invalid public key: ${t.hex}`);
  }
}
function f4(e) {
  const t = be.bytes(e);
  switch (t.length) {
    case 32:
      return t;
    case 33:
      return t.slice(1, 33);
    default:
      throw new Error(`Invalid key length: ${t.length}`);
  }
}
var d4 = /* @__PURE__ */ Object.freeze({
  __proto__: null,
  genSecretKey: c4,
  getPublicKey: Ob,
  getSecretKey: Md,
  getSharedCode: u4,
  getSharedKey: Bb,
  is_even_pub: l4,
  xonly_pub: f4
});
be.random(32);
const $b = { secp: sn, schnorr: C8 }, xf = { ...d4, ...nT };
function su(e) {
  const t = U.bytes(e);
  return un(t, 33), jd(t);
}
function Nb(e) {
  const t = Xt.fmt.toBytes(e, !1);
  return jd(t);
}
function Ub(e) {
  const t = Xt.fmt.toBytes(e, !1);
  return i4(t);
}
function Cb(e, t = "main") {
  const r = t === "main" ? ["1"] : ["m", "n"];
  for (const n of r)
    if (e.startsWith(n))
      return !0;
  return !1;
}
function Hb(e, t = "main") {
  const r = U.bytes(e), n = t === "main" ? U.num(0) : U.num(111);
  return un(e, 20), r.prepend(n).tob58chk();
}
function h4(e, t = "main") {
  if (!Cb(e, t))
    throw new TypeError("Invalid p2pkh address!");
  return U.b58chk(e).slice(1);
}
function p4(e) {
  const t = U.bytes(e);
  return un(t, 20), ["OP_DUP", "OP_HASH160", t.hex, "OP_EQUALVERIFY", "OP_CHECKSIG"];
}
function g4(e, t) {
  const r = su(e);
  return Hb(r, t);
}
const Rb = { check: Cb, encode: Hb, decode: h4, hash: su, scriptPubKey: p4, fromPubKey: g4 };
function Lb(e, t = "main") {
  const r = t === "main" ? ["3"] : ["2"];
  for (const n of r)
    if (e.startsWith(n))
      return !0;
  return !1;
}
function zb(e, t = "main") {
  const r = t === "main" ? U.num(5) : U.num(196), n = U.bytes(e);
  return un(n, 20), n.prepend(r).tob58chk();
}
function m4(e, t = "main") {
  if (!Lb(e, t))
    throw new TypeError(`Invalid p2sh address for network ${t}:` + e);
  return U.b58chk(e).slice(1);
}
function b4(e) {
  return ["OP_HASH160", U.bytes(e).hex, "OP_EQUAL"];
}
function y4(e, t) {
  const r = Nb(e);
  return zb(r, t);
}
const jb = { check: Lb, encode: zb, decode: m4, hash: Nb, scriptPubKey: b4, fromScript: y4 }, Dd = {
  main: "bc",
  testnet: "tb",
  signet: "tb",
  regtest: "bcrt"
}, w4 = ["bc1q", "tb1q", "bcrt1q"];
function Mb(e) {
  for (const t of w4)
    if (e.startsWith(t))
      return !0;
  return !1;
}
function Db(e, t = "main") {
  const r = Dd[t], n = U.bytes(e);
  return un(n, 20), n.toBech32(r, 0);
}
function v4(e) {
  if (!Mb(e))
    throw new TypeError("Invalid segwit address!");
  return U.bech32(e);
}
function x4(e) {
  const t = U.bytes(e);
  return un(t, 20), ["OP_0", t.hex];
}
function E4(e, t) {
  const r = su(e);
  return Db(r, t);
}
const Fb = { check: Mb, encode: Db, decode: v4, hash: su, scriptPubKey: x4, fromPubKey: E4 }, _4 = ["bc1q", "tb1q", "bcrt1q"];
function Kb(e) {
  for (const t of _4)
    if (e.startsWith(t))
      return !0;
  return !1;
}
function qb(e, t = "main") {
  const r = Dd[t], n = U.bytes(e);
  return un(n, 32), n.toBech32(r, 0);
}
function S4(e) {
  if (!Kb(e))
    throw new TypeError("Invalid segwit address!");
  return U.bech32(e);
}
function k4(e) {
  const t = U.bytes(e);
  return un(t, 32), ["OP_0", t.hex];
}
function A4(e, t) {
  const r = Ub(e);
  return qb(r, t);
}
const Vb = { check: Kb, encode: qb, decode: S4, hash: Ub, scriptPubKey: k4, fromScript: A4 };
function Go(e) {
  const t = U.bytes(e);
  return t.length > 32 ? t.slice(1, 33) : t;
}
const T4 = ["bc1p", "tb1p", "bcrt1p"];
function Wb(e) {
  for (const t of T4)
    if (e.startsWith(t))
      return !0;
  return !1;
}
function Gb(e, t = "main") {
  const r = Dd[t], n = U.bytes(e);
  return un(n, 32), n.toBech32(r, 1);
}
function I4(e) {
  if (!Wb(e))
    throw new TypeError("Invalid taproot address!");
  return U.bech32(e);
}
function P4(e) {
  const t = U.bytes(e);
  return un(t, 32), ["OP_1", t.hex];
}
function O4(e, t) {
  const r = Go(e);
  return Gb(r, t);
}
const Zb = { check: Wb, encode: Gb, decode: I4, scriptPubKey: P4, fromPubKey: O4 }, B4 = {
  version: 2,
  vin: [],
  vout: [],
  locktime: 0
}, $4 = {
  scriptSig: [],
  sequence: 4294967293,
  witness: []
}, N4 = {
  value: 0n,
  scriptPubKey: []
};
function Fd(e) {
  const t = { ...B4, ...e };
  return t.vin = t.vin.map((r) => ({ ...$4, ...r })), t.vout = t.vout.map((r) => ({ ...N4, ...r })), t;
}
function Mi(e, t) {
  const { version: r, vin: n, vout: o, locktime: i } = Fd(e), s = t !== !0 && U4(n), a = [Kd(r)];
  s && a.push(U.hex("0001")), a.push(C4(n)), a.push(H4(o));
  for (const c of n)
    s && a.push(L4(c.witness));
  return a.push(qd(i)), U.join(a);
}
function U4(e) {
  for (const t of e) {
    const { witness: r } = t;
    if (typeof r == "string" || r instanceof Uint8Array || Array.isArray(r) && r.length > 0)
      return !0;
  }
  return !1;
}
function Kd(e) {
  return U.num(e, 4).reverse();
}
function na(e) {
  return U.hex(e, 32).reverse();
}
function oa(e) {
  return U.num(e, 4).reverse();
}
function ia(e) {
  if (typeof e == "string")
    return U.hex(e, 4).reverse();
  if (typeof e == "number")
    return U.num(e, 4).reverse();
  throw new Error("Unrecognized format: " + String(e));
}
function C4(e) {
  const t = [U.varInt(e.length, "le")];
  for (const r of e) {
    const { txid: n, vout: o, scriptSig: i, sequence: s } = r;
    t.push(na(n)), t.push(oa(o)), t.push(ni(i, !0)), t.push(ia(s));
  }
  return U.join(t);
}
function bo(e) {
  if (typeof e == "number") {
    if (e % 1 !== 0)
      throw new Error("Value must be an integer:" + String(e));
    return U.num(e, 8).reverse();
  }
  return U.big(e, 8).reverse();
}
function H4(e) {
  const t = [U.varInt(e.length, "le")];
  for (const r of e)
    t.push(R4(r));
  return U.join(t);
}
function R4(e) {
  const { value: t, scriptPubKey: r } = e, n = [];
  return n.push(bo(t)), n.push(ni(r, !0)), U.join(n);
}
function L4(e = []) {
  const t = [];
  if (Array.isArray(e)) {
    const r = U.varInt(e.length);
    t.push(r);
    for (const n of e)
      t.push(z4(n));
    return U.join(t);
  } else
    return U.bytes(e);
}
function z4(e) {
  return j4(e) ? new U(0) : ni(e, !0);
}
function j4(e) {
  if (Array.isArray(e))
    return e.length === 0;
  if (typeof e == "string" && e === "")
    return !0;
  const t = U.bytes(e);
  return t.length === 1 && t[0] === 0;
}
function qd(e) {
  if (typeof e == "string")
    return U.hex(e, 4);
  if (typeof e == "number")
    return U.num(e, 4).reverse();
  throw new Error("Unrecognized format: " + String(e));
}
function Vd(e) {
  typeof e == "string" && (e = U.hex(e).raw);
  const t = new Yi(e), r = M4(t), n = D4(t), o = F4(t), i = q4(t);
  if (n)
    for (const a of o)
      a.witness = W4(t);
  const s = G4(t);
  return { version: r, vin: o, vout: i, locktime: s };
}
function M4(e) {
  return e.read(4).reverse().toNum();
}
function D4(e) {
  const [t, r] = [...e.peek(2)];
  if (t === 0) {
    if (e.read(2), r === 1)
      return !0;
    throw new Error(`Invalid witness flag: ${r}`);
  }
  return !1;
}
function F4(e) {
  const t = [], r = e.readSize("le");
  for (let n = 0; n < r; n++)
    t.push(K4(e));
  return t;
}
function K4(e) {
  return {
    txid: e.read(32).reverse().toHex(),
    vout: e.read(4).reverse().toNum(),
    scriptSig: Yb(e),
    sequence: e.read(4).reverse().toHex(),
    witness: []
  };
}
function q4(e) {
  const t = [], r = e.readSize("le");
  for (let n = 0; n < r; n++)
    t.push(V4(e));
  return t;
}
function V4(e) {
  return {
    value: e.read(8).reverse().big,
    scriptPubKey: Yb(e)
  };
}
function W4(e) {
  const t = [], r = e.readSize();
  for (let n = 0; n < r; n++) {
    const o = Xb(e);
    t.push(o ?? "");
  }
  return t;
}
function Xb(e, t) {
  const r = e.readSize("le");
  return r > 0 ? e.read(r).hex : null;
}
function Yb(e, t) {
  const r = Xb(e);
  return r !== null ? r : [];
}
function G4(e) {
  return e.read(4).reverse().toNum();
}
function Z4(e) {
  if (Bm(e))
    return Vd(e);
  if (typeof e == "object" && !(e instanceof Uint8Array))
    return Mi(e), Fd(e);
  throw new Error("Invalid format: " + typeof e);
}
function X4(e) {
  if (Bm(e))
    return Vd(e), U.bytes(e);
  if (typeof e == "object")
    return Mi(e);
  throw new Error("Invalid format: " + typeof e);
}
const Wd = {
  toBytes: X4,
  toJson: Z4
}, Y4 = [
  ["p2pkh", /^76a914(?<hash>\w{40})88ac$/],
  ["p2sh", /^a914(?<hash>\w{40})87$/],
  ["p2w-pkh", /^0014(?<hash>\w{40})$/],
  ["p2w-sh", /^0020(?<hash>\w{64})$/],
  ["p2tr", /^5120(?<hash>\w{64})$/]
], J4 = [
  192,
  194,
  196,
  198,
  200,
  202,
  204,
  206,
  208,
  210,
  212,
  214,
  216,
  218,
  220,
  222,
  224,
  226,
  228,
  230,
  232,
  234,
  236,
  238,
  240,
  242,
  244,
  246,
  248,
  250,
  252,
  254,
  102,
  126,
  128,
  132,
  150,
  152,
  186,
  188,
  190
];
function Q4(e) {
  let t = e.at(-1);
  return Un(t) && (t = U.hex(t)), e.length > 1 && t instanceof Uint8Array && t[0] === 80 ? (e.pop(), U.raw(t)) : null;
}
function e6(e) {
  let t = e.at(-1);
  return Un(t) && (t = U.hex(t)), e.length > 1 && t instanceof Uint8Array && t.length > 32 && J4.includes(t[0] & 254) ? (e.pop(), U.raw(t)) : null;
}
function t6(e) {
  if (e.length > 1) {
    const t = e.at(-1);
    try {
      const r = Xt.fmt.toBytes(t);
      return e.pop(), r;
    } catch {
      return null;
    }
  }
  return null;
}
function r6(e) {
  const t = [];
  for (const r of e)
    if (Un(r) || r instanceof Uint8Array || typeof r == "number")
      t.push(U.bytes(r));
    else
      throw new Error("unrecognized value: " + String(r));
  return t;
}
function n6(e = []) {
  const t = [...e], r = Q4(t), n = e6(t), o = t6(t), i = r6(t);
  return { annex: r, cblock: n, script: o, params: i };
}
function o6(e) {
  const t = Xt.fmt.toBytes(e, !1).hex;
  for (const [r, n] of Y4) {
    const o = r, { groups: i } = n.exec(t) ?? {}, { hash: s } = i ?? {};
    if (Un(s))
      return { type: o, data: U.hex(s) };
  }
  return { type: "raw", data: U.hex(t) };
}
function i6(e) {
  const t = Wd.toJson(e), r = Mi(t, !0);
  return ji(r).reverse().hex;
}
function s6(e) {
  const t = Wd.toJson(e), r = Mi(t, !0).length, n = Mi(t, !1).length, o = r * 3 + n, i = o % 4 > 0 ? 1 : 0, s = Math.floor(o / 4) + i;
  return { size: n, bsize: r, vsize: s, weight: o };
}
const Ur = {
  create: Fd,
  encode: Mi,
  decode: Vd,
  fmt: Wd,
  util: {
    getTxSize: s6,
    getTxid: i6,
    readScriptPubKey: o6,
    readWitness: n6
  }
}, a6 = [
  ["1", "p2pkh", "main", 20, "base58"],
  ["3", "p2sh", "main", 20, "base58"],
  ["m", "p2pkh", "testnet", 20, "base58"],
  ["n", "p2pkh", "testnet", 20, "base58"],
  ["2", "p2sh", "testnet", 20, "base58"],
  ["bc1q", "p2w-pkh", "main", 20, "bech32"],
  ["tb1q", "p2w-pkh", "testnet", 20, "bech32"],
  ["bcrt1q", "p2w-pkh", "regtest", 20, "bech32"],
  ["bc1q", "p2w-sh", "main", 32, "bech32"],
  ["tb1q", "p2w-sh", "testnet", 32, "bech32"],
  ["bcrt1q", "p2w-sh", "regtest", 32, "bech32"],
  ["bc1p", "p2tr", "main", 32, "bech32m"],
  ["tb1p", "p2tr", "testnet", 32, "bech32m"],
  ["bcrt1p", "p2tr", "regtest", 32, "bech32m"]
];
function c6(e, t) {
  switch (t) {
    case "base58":
      return U.b58chk(e).slice(1);
    case "bech32":
      return U.bech32(e);
    case "bech32m":
      return U.bech32(e);
    default:
      throw new Error("Invalid address format: " + t);
  }
}
function u6(e) {
  for (const t of a6) {
    const [r, n, o, i, s] = t;
    if (e.startsWith(r) && c6(e, s).length === i)
      return t;
  }
  throw new Error("Invalid address: " + e);
}
function Jb(e) {
  switch (e) {
    case "p2pkh":
      return Rb;
    case "p2sh":
      return jb;
    case "p2w-pkh":
      return Fb;
    case "p2w-sh":
      return Vb;
    case "p2tr":
      return Zb;
    default:
      throw new Error("Invalid address type: " + e);
  }
}
function Qb(e) {
  const [t, r, n] = u6(e), o = Jb(r), i = o.decode(e, n), s = o.scriptPubKey(i);
  return { prefix: t, type: r, network: n, data: i, script: s };
}
function l6(e, t) {
  const { type: r, data: n } = Ur.util.readScriptPubKey(e);
  return Jb(r).encode(n, t);
}
function f6(e) {
  const { script: t } = Qb(e);
  return Xt.fmt.toAsm(t, !1);
}
const ey = {
  p2pkh: Rb,
  p2sh: jb,
  p2wpkh: Fb,
  p2wsh: Vb,
  p2tr: Zb,
  decode: Qb,
  fromScriptPubKey: l6,
  toScriptPubKey: f6
}, d6 = [1, 2, 3];
function Gd(e, t, r = {}) {
  const { sigflag: n = 1 } = r, o = (n & 128) === 128, i = n % 128;
  if (!d6.includes(i))
    throw new Error("Invalid hash type: " + String(n));
  const s = Ur.fmt.toJson(e), { version: a, vin: c, vout: u, locktime: f } = s, { txid: l, vout: h, prevout: m, sequence: b } = c[t], { value: y } = m ?? {};
  if (y === void 0)
    throw new Error("Prevout value is empty!");
  let g = r.script;
  if (g === void 0 && r.pubkey !== void 0 && (g = `76a914${jd(r.pubkey).hex}88ac`), g === void 0)
    throw new Error("No pubkey / script has been set!");
  if (Xt.fmt.toAsm(g).includes("OP_CODESEPARATOR"))
    throw new Error("This library does not currently support the use of OP_CODESEPARATOR in segwit scripts.");
  const x = [
    Kd(a),
    h6(c, o),
    p6(c, i, o),
    na(l),
    oa(h),
    Xt.encode(g, !0),
    bo(y),
    ia(b),
    g6(u, t, i),
    qd(f),
    U.num(n, 4).reverse()
  ];
  return ji(U.join(x));
}
function h6(e, t) {
  if (t === !0)
    return U.num(0, 32);
  const r = [];
  for (const { txid: n, vout: o } of e)
    r.push(na(n)), r.push(oa(o));
  return ji(U.join(r));
}
function p6(e, t, r) {
  if (r || t !== 1)
    return U.num(0, 32);
  const n = [];
  for (const { sequence: o } of e)
    n.push(ia(o));
  return ji(U.join(n));
}
function g6(e, t, r) {
  const n = [];
  if (r === 1) {
    for (const { value: o, scriptPubKey: i } of e)
      n.push(bo(o)), n.push(Xt.encode(i, !0));
    return ji(U.join(n));
  }
  if (r === 3 && t < e.length) {
    const { value: o, scriptPubKey: i } = e[t];
    return n.push(bo(o)), n.push(Xt.encode(i, !0)), ji(U.join(n));
  }
  return U.num(0, 32);
}
function m6(e, t, r, n = {}) {
  const { sigflag: o = 1 } = n, i = Gd(t, r, n), s = $b.secp.sign(i, e).toDERRawBytes(!0);
  return U.join([s, o]);
}
function b6(e, t, r = {}) {
  const n = Ur.fmt.toJson(e), { throws: o = !1 } = r, { witness: i = [] } = n.vin[t], s = Ur.util.readWitness(i), { script: a, params: c } = s;
  let u = null;
  if (c.length < 1)
    return Ft("Invalid witness data: " + String(i), o);
  if (r.script === void 0 && a !== null && (r.script = a), r.pubkey !== void 0)
    u = U.bytes(r.pubkey);
  else if (c.length > 1 && c[1].length === 33)
    u = U.bytes(c[1]);
  else
    return Ft("No pubkey provided!", o);
  const f = Xt.fmt.toParam(c[0]), l = f.slice(0, -1), h = f.slice(-1)[0], m = Gd(n, t, { ...r, sigflag: h });
  return $b.secp.verify(l, m, u) ? !0 : Ft("Invalid signature!", o);
}
const y6 = {
  hash: Gd,
  sign: m6,
  verify: b6
}, w6 = [0, 1, 2, 3, 129, 130, 131];
function Zd(e, t, r = {}) {
  const { extension: n, sigflag: o = 0, extflag: i = 0, key_version: s = 0, separator_pos: a = 4294967295 } = r, c = Ur.fmt.toJson(e), { version: u, vin: f, vout: l, locktime: h } = c;
  if (t >= f.length)
    throw new Error("Index out of bounds: " + String(t));
  if (!w6.includes(o))
    throw new Error("Invalid hash type: " + String(o));
  if (i < 0 || i > 127)
    throw new Error("Extention flag out of range: " + String(i));
  const { txid: m, vout: b, sequence: y, witness: g = [] } = f[t], x = (o & 128) === 128, S = A6(g), v = S !== void 0 ? 1 : 0, I = (i + (n !== void 0 ? 1 : 0)) * 2 + v, P = U.str("TapSighash").digest, H = [
    P,
    P,
    U.num(0, 1),
    U.num(o, 1),
    Kd(u),
    qd(h)
  ];
  if (!x) {
    const j = f.map((V) => Wp(V));
    H.push(v6(f), E6(j), _6(j), x6(f));
  }
  if (((o & 3) < 2 || (o & 3) > 3) && H.push(S6(l)), H.push(U.num(I, 1)), x) {
    const { value: j, scriptPubKey: V } = Wp(f[t]);
    H.push(na(m), oa(b), bo(j), Xt.encode(V, !0), ia(y));
  } else
    H.push(U.num(t, 4).reverse());
  return S !== void 0 && H.push(S), (o & 3) === 3 && H.push(k6(l[t])), n !== void 0 && H.push(U.bytes(n), U.num(s), U.num(a, 4)), U.join(H).digest;
}
function v6(e) {
  const t = [];
  for (const { txid: r, vout: n } of e)
    t.push(na(r)), t.push(oa(n));
  return U.join(t).digest;
}
function x6(e) {
  const t = [];
  for (const { sequence: r } of e)
    t.push(ia(r));
  return U.join(t).digest;
}
function E6(e) {
  const t = [];
  for (const { value: r } of e)
    t.push(bo(r));
  return U.join(t).digest;
}
function _6(e) {
  const t = [];
  for (const { scriptPubKey: r } of e)
    t.push(ni(r, !0));
  return U.join(t).digest;
}
function S6(e) {
  const t = [];
  for (const { value: r, scriptPubKey: n } of e)
    t.push(bo(r)), t.push(Xt.encode(n, !0));
  return U.join(t).digest;
}
function k6(e) {
  return U.join([
    bo(e.value),
    Xt.encode(e.scriptPubKey, !0)
  ]).digest;
}
function A6(e) {
  if (e === void 0 || e.length < 2)
    return;
  let t = e.at(-1);
  if (typeof t == "string" && (t = U.hex(t)), t instanceof Uint8Array && t[0] === 80)
    return U.raw(t).prefixSize("be").digest;
}
function Wp(e) {
  if (e.prevout === void 0)
    throw new Error("Prevout data missing for input: " + String(e.txid));
  return e.prevout;
}
const T6 = 0xfffffffffffffffffffffffffffffffffffffffffffffffffffffffefffffc2fn, I6 = 0xfffffffffffffffffffffffffffffffebaaedce6af48a03bbfd25e8cd0364141n;
function P6(e, t, r, n = {}) {
  const { sigflag: o = 0 } = n, i = Zd(t, r, n), s = O6(e, i);
  return o === 0 ? U.raw(s) : U.join([s, o]);
}
function O6(e, t, r = U.random(32)) {
  const n = U.bytes(t), o = new zt(e), i = o.point, s = i.hasEvenY ? o.big : o.negated.big, a = Ka("BIP0340/aux", U.bytes(r)), c = s ^ a.big, u = Ka("BIP0340/nonce", c, i.x.raw, n), f = new zt(u), l = f.point, h = l.hasEvenY ? f.big : f.negated.big, m = new zt(Ka("BIP0340/challenge", l.x.raw, i.x.raw, n)), b = new zt(h + m.big * s);
  return U.join([l.x.raw, b.raw]);
}
function B6(e, t, r, n = !1) {
  const o = On.from_x(Go(r)), i = U.bytes(t), s = U.bytes(e).stream;
  s.size < 64 && Ft("Signature length is too small: " + String(s.size), n);
  const a = s.read(32);
  a.big > T6 && Ft("Signature r value greater than field size!", n);
  const c = s.read(32);
  c.big > I6 && Ft("Signature s value greater than curve order!", n);
  const u = new zt(Ka("BIP0340/challenge", a.raw, o.x.raw, i)), f = new zt(c).point, l = o.mul(u.big), h = f.sub(l);
  return h.hasOddY && Ft("Signature R value has odd Y coordinate!", n), h.x.big === 0n && Ft("Signature R value is infinite!", n), h.x.big === a.big;
}
const $6 = 192;
function au(e) {
  const t = U.str(e).digest;
  return U.join([t, t]);
}
function Xd(e, t = $6) {
  return U.join([
    au("TapLeaf"),
    C6(t),
    U.bytes(e)
  ]).digest.hex;
}
function N6(e, t) {
  return Xd(Xt.fmt.toBytes(e), t);
}
function Yd(e, t) {
  return t < e && ([e, t] = [t, e]), U.join([
    au("TapBranch"),
    U.hex(e).raw,
    U.hex(t).raw
  ]).digest.hex;
}
function U6(e) {
  return U.hex(vc(e)[0]);
}
function vc(e, t, r = []) {
  const n = [], o = [];
  if (e.length < 1)
    throw new Error("Tree is empty!");
  for (let i = 0; i < e.length; i++) {
    const s = e[i];
    if (Array.isArray(s)) {
      const [a, c, u] = vc(s, t);
      t = c, n.push(a);
      for (const f of u)
        r.push(f);
    } else
      n.push(s);
  }
  if (n.length === 1)
    return [n[0], t, r];
  n.sort(), n.length % 2 !== 0 && n.push(n[n.length - 1]);
  for (let i = 0; i < n.length - 1; i += 2) {
    const s = Yd(n[i], n[i + 1]);
    o.push(s), typeof t == "string" && (t === n[i] ? (r.push(n[i + 1]), t = s) : t === n[i + 1] && (r.push(n[i]), t = s));
  }
  return vc(o, t, r);
}
function C6(e = 192) {
  return e & 254;
}
function ty(e, t = new Uint8Array(), r = !1) {
  const n = r ? new zt(e).point.x.raw : Go(e);
  return U.join([au("TapTweak"), n, U.bytes(t)]).digest;
}
function Pi(e, t, r = !1) {
  t === void 0 && (t = new Uint8Array());
  const n = U.bytes(e), o = ty(e, t, r);
  return r ? ry(n, o) : ny(n, o);
}
function H6(e, t) {
  return Pi(e, t);
}
function R6(e, t) {
  return Pi(e, t, !0);
}
function ry(e, t) {
  let r = new zt(e);
  return r.point.hasOddY && (r = r.negate()), U.raw(r.add(t).raw);
}
function ny(e, t) {
  e = Go(e);
  const n = On.from_x(e).add(t);
  return U.raw(n.raw);
}
function L6() {
  const e = U.hex("0479be667ef9dcbbac55a06295ce870b07029bfcdb2dce28d959f2815b16f81798483ada7726a3c4655da4fbfc0e1108a8fd17b448a68554199c47d08ffb10d4b8");
  return On.from_x(e.digest).x;
}
const z6 = L6(), j6 = 192;
function M6(e, t = {}) {
  return oy(e, { ...t, isPrivate: !0 });
}
function D6(e, t = {}) {
  return oy(e, { ...t, isPrivate: !1 });
}
function oy(e, t = {}) {
  const { isPrivate: r = !1, tree: n = [], version: o = j6 } = t, i = r ? xf.getPublicKey(e, !0) : Go(e);
  let { target: s } = t;
  s !== void 0 && (s = U.bytes(s).hex);
  let a, c = [];
  if (n.length > 0) {
    const [m, b, y] = vc(n, s);
    c = y, a = Pi(e, m, r);
  } else
    s !== void 0 ? a = Pi(e, s, r) : a = Pi(e, void 0, r);
  const u = r ? xf.getPublicKey(a)[0] : a[0], l = [U.num(o + sy(u)), i];
  c.length > 0 && c.forEach((m) => l.push(U.hex(m)));
  const h = U.join(l);
  if (s !== void 0 && !Jd(a, s, h, t))
    throw new Error("Path checking failed! Unable to generate path.");
  return [Go(a).hex, h.hex];
}
function Jd(e, t, r, n = {}) {
  const { isPrivate: o = !1, throws: i = !1 } = n, { parity: s, paths: a, intkey: c } = iy(r), u = o ? xf.getPublicKey(e, !0) : Go(e), f = U.join([s, u]);
  if (f.length !== 33)
    return Ft("Invalid tapkey: " + f.hex, i);
  let l = U.bytes(t).hex;
  for (const m of a)
    l = Yd(l, m);
  const h = Pi(c, l);
  return U.raw(h).hex === U.raw(f).hex;
}
function iy(e) {
  const t = new Yi(U.bytes(e)), r = t.read(1).num, n = t.read(32), [o, i] = r % 2 === 0 ? [r, 2] : [r - 1, 3], s = [];
  for (; t.size >= 32; )
    s.push(t.read(32).hex);
  if (t.size !== 0)
    throw new Error("Non-empty buffer on control block: " + String(t));
  return { intkey: n, paths: s, parity: i, version: o };
}
function sy(e = 2) {
  if (e === 0 || e === 1)
    return e;
  if (e === 2 || e === "02")
    return 0;
  if (e === 3 || e === "03")
    return 1;
  throw new Error("Invalid parity bit: " + String(e));
}
function F6(e, t, r = {}) {
  const n = Ur.fmt.toJson(e), { throws: o = !1 } = r, { prevout: i, witness: s = [] } = n.vin[t], a = Ur.util.readWitness(s), { cblock: c, script: u, params: f } = a;
  let l;
  if (f.length < 1)
    return Ft("Invalid witness data: " + String(s), o);
  const { scriptPubKey: h } = i ?? {};
  if (h === void 0)
    return Ft("Prevout scriptPubKey is empty!", o);
  const { type: m, data: b } = Ur.util.readScriptPubKey(h);
  if (m !== "p2tr")
    return Ft("Prevout script is not a valid taproot output:" + b.hex, o);
  if (b.length !== 32)
    return Ft("Invalid tapkey length: " + String(b.length), o);
  if (c !== null && u !== null) {
    const v = c[0] & 254, T = Xd(u, v);
    if (r.extension = T, !Jd(b, T, c, { throws: o }))
      return Ft("cblock verification failed!", o);
  }
  r.pubkey !== void 0 ? l = U.bytes(r.pubkey) : f.length > 1 && f[1].length === 32 ? l = U.bytes(f[1]) : l = U.bytes(b);
  const y = Xt.fmt.toParam(f[0]), g = new Yi(y), x = g.read(64).raw;
  if (g.size === 1 && (r.sigflag = g.read(1).num, r.sigflag === 0))
    return Ft("0x00 is not a valid appended sigflag!", o);
  const S = Zd(n, t, r);
  return B6(x, S, l, o) ? !0 : Ft("Invalid signature!", o);
}
const K6 = {
  hash: Zd,
  sign: P6,
  verify: F6
}, q6 = {
  segwit: y6,
  taproot: K6
}, V6 = {
  getTag: au,
  getLeaf: Xd,
  getBranch: Yd,
  getRoot: U6
}, W6 = {
  readCtrlBlock: iy,
  readParityBit: sy
}, G6 = {
  getPubKey: H6,
  getSecKey: R6,
  getTweak: ty,
  tweakSecKey: ry,
  tweakPubKey: ny
}, xc = {
  getPubKey: D6,
  getSecKey: M6,
  encodeScript: N6,
  checkPath: Jd,
  tree: V6,
  tweak: G6,
  util: W6,
  SCRIPT_PUBKEY: z6
};
var ze;
(function(e) {
  e.assertEqual = (o) => o;
  function t(o) {
  }
  e.assertIs = t;
  function r(o) {
    throw new Error();
  }
  e.assertNever = r, e.arrayToEnum = (o) => {
    const i = {};
    for (const s of o)
      i[s] = s;
    return i;
  }, e.getValidEnumValues = (o) => {
    const i = e.objectKeys(o).filter((a) => typeof o[o[a]] != "number"), s = {};
    for (const a of i)
      s[a] = o[a];
    return e.objectValues(s);
  }, e.objectValues = (o) => e.objectKeys(o).map(function(i) {
    return o[i];
  }), e.objectKeys = typeof Object.keys == "function" ? (o) => Object.keys(o) : (o) => {
    const i = [];
    for (const s in o)
      Object.prototype.hasOwnProperty.call(o, s) && i.push(s);
    return i;
  }, e.find = (o, i) => {
    for (const s of o)
      if (i(s))
        return s;
  }, e.isInteger = typeof Number.isInteger == "function" ? (o) => Number.isInteger(o) : (o) => typeof o == "number" && isFinite(o) && Math.floor(o) === o;
  function n(o, i = " | ") {
    return o.map((s) => typeof s == "string" ? `'${s}'` : s).join(i);
  }
  e.joinValues = n, e.jsonStringifyReplacer = (o, i) => typeof i == "bigint" ? i.toString() : i;
})(ze || (ze = {}));
var Ef;
(function(e) {
  e.mergeShapes = (t, r) => ({
    ...t,
    ...r
    // second overwrites first
  });
})(Ef || (Ef = {}));
const Q = ze.arrayToEnum([
  "string",
  "nan",
  "number",
  "integer",
  "float",
  "boolean",
  "date",
  "bigint",
  "symbol",
  "function",
  "undefined",
  "null",
  "array",
  "object",
  "unknown",
  "promise",
  "void",
  "never",
  "map",
  "set"
]), fo = (e) => {
  switch (typeof e) {
    case "undefined":
      return Q.undefined;
    case "string":
      return Q.string;
    case "number":
      return isNaN(e) ? Q.nan : Q.number;
    case "boolean":
      return Q.boolean;
    case "function":
      return Q.function;
    case "bigint":
      return Q.bigint;
    case "symbol":
      return Q.symbol;
    case "object":
      return Array.isArray(e) ? Q.array : e === null ? Q.null : e.then && typeof e.then == "function" && e.catch && typeof e.catch == "function" ? Q.promise : typeof Map < "u" && e instanceof Map ? Q.map : typeof Set < "u" && e instanceof Set ? Q.set : typeof Date < "u" && e instanceof Date ? Q.date : Q.object;
    default:
      return Q.unknown;
  }
}, G = ze.arrayToEnum([
  "invalid_type",
  "invalid_literal",
  "custom",
  "invalid_union",
  "invalid_union_discriminator",
  "invalid_enum_value",
  "unrecognized_keys",
  "invalid_arguments",
  "invalid_return_type",
  "invalid_date",
  "invalid_string",
  "too_small",
  "too_big",
  "invalid_intersection_types",
  "not_multiple_of",
  "not_finite"
]), Z6 = (e) => JSON.stringify(e, null, 2).replace(/"([^"]+)":/g, "$1:");
class Cr extends Error {
  constructor(t) {
    super(), this.issues = [], this.addIssue = (n) => {
      this.issues = [...this.issues, n];
    }, this.addIssues = (n = []) => {
      this.issues = [...this.issues, ...n];
    };
    const r = new.target.prototype;
    Object.setPrototypeOf ? Object.setPrototypeOf(this, r) : this.__proto__ = r, this.name = "ZodError", this.issues = t;
  }
  get errors() {
    return this.issues;
  }
  format(t) {
    const r = t || function(i) {
      return i.message;
    }, n = { _errors: [] }, o = (i) => {
      for (const s of i.issues)
        if (s.code === "invalid_union")
          s.unionErrors.map(o);
        else if (s.code === "invalid_return_type")
          o(s.returnTypeError);
        else if (s.code === "invalid_arguments")
          o(s.argumentsError);
        else if (s.path.length === 0)
          n._errors.push(r(s));
        else {
          let a = n, c = 0;
          for (; c < s.path.length; ) {
            const u = s.path[c];
            c === s.path.length - 1 ? (a[u] = a[u] || { _errors: [] }, a[u]._errors.push(r(s))) : a[u] = a[u] || { _errors: [] }, a = a[u], c++;
          }
        }
    };
    return o(this), n;
  }
  toString() {
    return this.message;
  }
  get message() {
    return JSON.stringify(this.issues, ze.jsonStringifyReplacer, 2);
  }
  get isEmpty() {
    return this.issues.length === 0;
  }
  flatten(t = (r) => r.message) {
    const r = {}, n = [];
    for (const o of this.issues)
      o.path.length > 0 ? (r[o.path[0]] = r[o.path[0]] || [], r[o.path[0]].push(t(o))) : n.push(t(o));
    return { formErrors: n, fieldErrors: r };
  }
  get formErrors() {
    return this.flatten();
  }
}
Cr.create = (e) => new Cr(e);
const $s = (e, t) => {
  let r;
  switch (e.code) {
    case G.invalid_type:
      e.received === Q.undefined ? r = "Required" : r = `Expected ${e.expected}, received ${e.received}`;
      break;
    case G.invalid_literal:
      r = `Invalid literal value, expected ${JSON.stringify(e.expected, ze.jsonStringifyReplacer)}`;
      break;
    case G.unrecognized_keys:
      r = `Unrecognized key(s) in object: ${ze.joinValues(e.keys, ", ")}`;
      break;
    case G.invalid_union:
      r = "Invalid input";
      break;
    case G.invalid_union_discriminator:
      r = `Invalid discriminator value. Expected ${ze.joinValues(e.options)}`;
      break;
    case G.invalid_enum_value:
      r = `Invalid enum value. Expected ${ze.joinValues(e.options)}, received '${e.received}'`;
      break;
    case G.invalid_arguments:
      r = "Invalid function arguments";
      break;
    case G.invalid_return_type:
      r = "Invalid function return type";
      break;
    case G.invalid_date:
      r = "Invalid date";
      break;
    case G.invalid_string:
      typeof e.validation == "object" ? "includes" in e.validation ? (r = `Invalid input: must include "${e.validation.includes}"`, typeof e.validation.position == "number" && (r = `${r} at one or more positions greater than or equal to ${e.validation.position}`)) : "startsWith" in e.validation ? r = `Invalid input: must start with "${e.validation.startsWith}"` : "endsWith" in e.validation ? r = `Invalid input: must end with "${e.validation.endsWith}"` : ze.assertNever(e.validation) : e.validation !== "regex" ? r = `Invalid ${e.validation}` : r = "Invalid";
      break;
    case G.too_small:
      e.type === "array" ? r = `Array must contain ${e.exact ? "exactly" : e.inclusive ? "at least" : "more than"} ${e.minimum} element(s)` : e.type === "string" ? r = `String must contain ${e.exact ? "exactly" : e.inclusive ? "at least" : "over"} ${e.minimum} character(s)` : e.type === "number" ? r = `Number must be ${e.exact ? "exactly equal to " : e.inclusive ? "greater than or equal to " : "greater than "}${e.minimum}` : e.type === "date" ? r = `Date must be ${e.exact ? "exactly equal to " : e.inclusive ? "greater than or equal to " : "greater than "}${new Date(Number(e.minimum))}` : r = "Invalid input";
      break;
    case G.too_big:
      e.type === "array" ? r = `Array must contain ${e.exact ? "exactly" : e.inclusive ? "at most" : "less than"} ${e.maximum} element(s)` : e.type === "string" ? r = `String must contain ${e.exact ? "exactly" : e.inclusive ? "at most" : "under"} ${e.maximum} character(s)` : e.type === "number" ? r = `Number must be ${e.exact ? "exactly" : e.inclusive ? "less than or equal to" : "less than"} ${e.maximum}` : e.type === "bigint" ? r = `BigInt must be ${e.exact ? "exactly" : e.inclusive ? "less than or equal to" : "less than"} ${e.maximum}` : e.type === "date" ? r = `Date must be ${e.exact ? "exactly" : e.inclusive ? "smaller than or equal to" : "smaller than"} ${new Date(Number(e.maximum))}` : r = "Invalid input";
      break;
    case G.custom:
      r = "Invalid input";
      break;
    case G.invalid_intersection_types:
      r = "Intersection results could not be merged";
      break;
    case G.not_multiple_of:
      r = `Number must be a multiple of ${e.multipleOf}`;
      break;
    case G.not_finite:
      r = "Number must be finite";
      break;
    default:
      r = t.defaultError, ze.assertNever(e);
  }
  return { message: r };
};
let ay = $s;
function X6(e) {
  ay = e;
}
function Ec() {
  return ay;
}
const _c = (e) => {
  const { data: t, path: r, errorMaps: n, issueData: o } = e, i = [...r, ...o.path || []], s = {
    ...o,
    path: i
  };
  let a = "";
  const c = n.filter((u) => !!u).slice().reverse();
  for (const u of c)
    a = u(s, { data: t, defaultError: a }).message;
  return {
    ...o,
    path: i,
    message: o.message || a
  };
}, Y6 = [];
function ee(e, t) {
  const r = _c({
    issueData: t,
    data: e.data,
    path: e.path,
    errorMaps: [
      e.common.contextualErrorMap,
      e.schemaErrorMap,
      Ec(),
      $s
      // then global default map
    ].filter((n) => !!n)
  });
  e.common.issues.push(r);
}
class qt {
  constructor() {
    this.value = "valid";
  }
  dirty() {
    this.value === "valid" && (this.value = "dirty");
  }
  abort() {
    this.value !== "aborted" && (this.value = "aborted");
  }
  static mergeArray(t, r) {
    const n = [];
    for (const o of r) {
      if (o.status === "aborted")
        return ve;
      o.status === "dirty" && t.dirty(), n.push(o.value);
    }
    return { status: t.value, value: n };
  }
  static async mergeObjectAsync(t, r) {
    const n = [];
    for (const o of r)
      n.push({
        key: await o.key,
        value: await o.value
      });
    return qt.mergeObjectSync(t, n);
  }
  static mergeObjectSync(t, r) {
    const n = {};
    for (const o of r) {
      const { key: i, value: s } = o;
      if (i.status === "aborted" || s.status === "aborted")
        return ve;
      i.status === "dirty" && t.dirty(), s.status === "dirty" && t.dirty(), (typeof s.value < "u" || o.alwaysSet) && (n[i.value] = s.value);
    }
    return { status: t.value, value: n };
  }
}
const ve = Object.freeze({
  status: "aborted"
}), cy = (e) => ({ status: "dirty", value: e }), Yt = (e) => ({ status: "valid", value: e }), _f = (e) => e.status === "aborted", Sf = (e) => e.status === "dirty", Sc = (e) => e.status === "valid", kc = (e) => typeof Promise < "u" && e instanceof Promise;
var ue;
(function(e) {
  e.errToObj = (t) => typeof t == "string" ? { message: t } : t || {}, e.toString = (t) => typeof t == "string" ? t : t == null ? void 0 : t.message;
})(ue || (ue = {}));
class an {
  constructor(t, r, n, o) {
    this._cachedPath = [], this.parent = t, this.data = r, this._path = n, this._key = o;
  }
  get path() {
    return this._cachedPath.length || (this._key instanceof Array ? this._cachedPath.push(...this._path, ...this._key) : this._cachedPath.push(...this._path, this._key)), this._cachedPath;
  }
}
const Gp = (e, t) => {
  if (Sc(t))
    return { success: !0, data: t.value };
  if (!e.common.issues.length)
    throw new Error("Validation failed but no issues detected.");
  return {
    success: !1,
    get error() {
      if (this._error)
        return this._error;
      const r = new Cr(e.common.issues);
      return this._error = r, this._error;
    }
  };
};
function ke(e) {
  if (!e)
    return {};
  const { errorMap: t, invalid_type_error: r, required_error: n, description: o } = e;
  if (t && (r || n))
    throw new Error(`Can't use "invalid_type_error" or "required_error" in conjunction with custom error map.`);
  return t ? { errorMap: t, description: o } : { errorMap: (s, a) => s.code !== "invalid_type" ? { message: a.defaultError } : typeof a.data > "u" ? { message: n ?? a.defaultError } : { message: r ?? a.defaultError }, description: o };
}
class $e {
  constructor(t) {
    this.spa = this.safeParseAsync, this._def = t, this.parse = this.parse.bind(this), this.safeParse = this.safeParse.bind(this), this.parseAsync = this.parseAsync.bind(this), this.safeParseAsync = this.safeParseAsync.bind(this), this.spa = this.spa.bind(this), this.refine = this.refine.bind(this), this.refinement = this.refinement.bind(this), this.superRefine = this.superRefine.bind(this), this.optional = this.optional.bind(this), this.nullable = this.nullable.bind(this), this.nullish = this.nullish.bind(this), this.array = this.array.bind(this), this.promise = this.promise.bind(this), this.or = this.or.bind(this), this.and = this.and.bind(this), this.transform = this.transform.bind(this), this.brand = this.brand.bind(this), this.default = this.default.bind(this), this.catch = this.catch.bind(this), this.describe = this.describe.bind(this), this.pipe = this.pipe.bind(this), this.isNullable = this.isNullable.bind(this), this.isOptional = this.isOptional.bind(this);
  }
  get description() {
    return this._def.description;
  }
  _getType(t) {
    return fo(t.data);
  }
  _getOrReturnCtx(t, r) {
    return r || {
      common: t.parent.common,
      data: t.data,
      parsedType: fo(t.data),
      schemaErrorMap: this._def.errorMap,
      path: t.path,
      parent: t.parent
    };
  }
  _processInputParams(t) {
    return {
      status: new qt(),
      ctx: {
        common: t.parent.common,
        data: t.data,
        parsedType: fo(t.data),
        schemaErrorMap: this._def.errorMap,
        path: t.path,
        parent: t.parent
      }
    };
  }
  _parseSync(t) {
    const r = this._parse(t);
    if (kc(r))
      throw new Error("Synchronous parse encountered promise.");
    return r;
  }
  _parseAsync(t) {
    const r = this._parse(t);
    return Promise.resolve(r);
  }
  parse(t, r) {
    const n = this.safeParse(t, r);
    if (n.success)
      return n.data;
    throw n.error;
  }
  safeParse(t, r) {
    var n;
    const o = {
      common: {
        issues: [],
        async: (n = r == null ? void 0 : r.async) !== null && n !== void 0 ? n : !1,
        contextualErrorMap: r == null ? void 0 : r.errorMap
      },
      path: (r == null ? void 0 : r.path) || [],
      schemaErrorMap: this._def.errorMap,
      parent: null,
      data: t,
      parsedType: fo(t)
    }, i = this._parseSync({ data: t, path: o.path, parent: o });
    return Gp(o, i);
  }
  async parseAsync(t, r) {
    const n = await this.safeParseAsync(t, r);
    if (n.success)
      return n.data;
    throw n.error;
  }
  async safeParseAsync(t, r) {
    const n = {
      common: {
        issues: [],
        contextualErrorMap: r == null ? void 0 : r.errorMap,
        async: !0
      },
      path: (r == null ? void 0 : r.path) || [],
      schemaErrorMap: this._def.errorMap,
      parent: null,
      data: t,
      parsedType: fo(t)
    }, o = this._parse({ data: t, path: n.path, parent: n }), i = await (kc(o) ? o : Promise.resolve(o));
    return Gp(n, i);
  }
  refine(t, r) {
    const n = (o) => typeof r == "string" || typeof r > "u" ? { message: r } : typeof r == "function" ? r(o) : r;
    return this._refinement((o, i) => {
      const s = t(o), a = () => i.addIssue({
        code: G.custom,
        ...n(o)
      });
      return typeof Promise < "u" && s instanceof Promise ? s.then((c) => c ? !0 : (a(), !1)) : s ? !0 : (a(), !1);
    });
  }
  refinement(t, r) {
    return this._refinement((n, o) => t(n) ? !0 : (o.addIssue(typeof r == "function" ? r(n, o) : r), !1));
  }
  _refinement(t) {
    return new zr({
      schema: this,
      typeName: ge.ZodEffects,
      effect: { type: "refinement", refinement: t }
    });
  }
  superRefine(t) {
    return this._refinement(t);
  }
  optional() {
    return An.create(this, this._def);
  }
  nullable() {
    return Yo.create(this, this._def);
  }
  nullish() {
    return this.nullable().optional();
  }
  array() {
    return Hr.create(this, this._def);
  }
  promise() {
    return Fi.create(this, this._def);
  }
  or(t) {
    return Hs.create([this, t], this._def);
  }
  and(t) {
    return Rs.create(this, t, this._def);
  }
  transform(t) {
    return new zr({
      ...ke(this._def),
      schema: this,
      typeName: ge.ZodEffects,
      effect: { type: "transform", transform: t }
    });
  }
  default(t) {
    const r = typeof t == "function" ? t : () => t;
    return new Ds({
      ...ke(this._def),
      innerType: this,
      defaultValue: r,
      typeName: ge.ZodDefault
    });
  }
  brand() {
    return new ly({
      typeName: ge.ZodBranded,
      type: this,
      ...ke(this._def)
    });
  }
  catch(t) {
    const r = typeof t == "function" ? t : () => t;
    return new Pc({
      ...ke(this._def),
      innerType: this,
      catchValue: r,
      typeName: ge.ZodCatch
    });
  }
  describe(t) {
    const r = this.constructor;
    return new r({
      ...this._def,
      description: t
    });
  }
  pipe(t) {
    return sa.create(this, t);
  }
  isOptional() {
    return this.safeParse(void 0).success;
  }
  isNullable() {
    return this.safeParse(null).success;
  }
}
const J6 = /^c[^\s-]{8,}$/i, Q6 = /^[a-z][a-z0-9]*$/, eI = /[0-9A-HJKMNP-TV-Z]{26}/, tI = /^([a-f0-9]{8}-[a-f0-9]{4}-[1-5][a-f0-9]{3}-[a-f0-9]{4}-[a-f0-9]{12}|00000000-0000-0000-0000-000000000000)$/i, rI = /^(([^<>()[\]\\.,;:\s@\"]+(\.[^<>()[\]\\.,;:\s@\"]+)*)|(\".+\"))@((\[(((25[0-5])|(2[0-4][0-9])|(1[0-9]{2})|([0-9]{1,2}))\.){3}((25[0-5])|(2[0-4][0-9])|(1[0-9]{2})|([0-9]{1,2}))\])|(\[IPv6:(([a-f0-9]{1,4}:){7}|::([a-f0-9]{1,4}:){0,6}|([a-f0-9]{1,4}:){1}:([a-f0-9]{1,4}:){0,5}|([a-f0-9]{1,4}:){2}:([a-f0-9]{1,4}:){0,4}|([a-f0-9]{1,4}:){3}:([a-f0-9]{1,4}:){0,3}|([a-f0-9]{1,4}:){4}:([a-f0-9]{1,4}:){0,2}|([a-f0-9]{1,4}:){5}:([a-f0-9]{1,4}:){0,1})([a-f0-9]{1,4}|(((25[0-5])|(2[0-4][0-9])|(1[0-9]{2})|([0-9]{1,2}))\.){3}((25[0-5])|(2[0-4][0-9])|(1[0-9]{2})|([0-9]{1,2})))\])|([A-Za-z0-9]([A-Za-z0-9-]*[A-Za-z0-9])*(\.[A-Za-z]{2,})+))$/, nI = new RegExp("^(\\p{Extended_Pictographic}|\\p{Emoji_Component})+$", "u"), oI = /^(((25[0-5])|(2[0-4][0-9])|(1[0-9]{2})|([0-9]{1,2}))\.){3}((25[0-5])|(2[0-4][0-9])|(1[0-9]{2})|([0-9]{1,2}))$/, iI = /^(([a-f0-9]{1,4}:){7}|::([a-f0-9]{1,4}:){0,6}|([a-f0-9]{1,4}:){1}:([a-f0-9]{1,4}:){0,5}|([a-f0-9]{1,4}:){2}:([a-f0-9]{1,4}:){0,4}|([a-f0-9]{1,4}:){3}:([a-f0-9]{1,4}:){0,3}|([a-f0-9]{1,4}:){4}:([a-f0-9]{1,4}:){0,2}|([a-f0-9]{1,4}:){5}:([a-f0-9]{1,4}:){0,1})([a-f0-9]{1,4}|(((25[0-5])|(2[0-4][0-9])|(1[0-9]{2})|([0-9]{1,2}))\.){3}((25[0-5])|(2[0-4][0-9])|(1[0-9]{2})|([0-9]{1,2})))$/, sI = (e) => e.precision ? e.offset ? new RegExp(`^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}\\.\\d{${e.precision}}(([+-]\\d{2}(:?\\d{2})?)|Z)$`) : new RegExp(`^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}\\.\\d{${e.precision}}Z$`) : e.precision === 0 ? e.offset ? new RegExp("^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}(([+-]\\d{2}(:?\\d{2})?)|Z)$") : new RegExp("^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}Z$") : e.offset ? new RegExp("^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}(\\.\\d+)?(([+-]\\d{2}(:?\\d{2})?)|Z)$") : new RegExp("^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}(\\.\\d+)?Z$");
function aI(e, t) {
  return !!((t === "v4" || !t) && oI.test(e) || (t === "v6" || !t) && iI.test(e));
}
class $r extends $e {
  constructor() {
    super(...arguments), this._regex = (t, r, n) => this.refinement((o) => t.test(o), {
      validation: r,
      code: G.invalid_string,
      ...ue.errToObj(n)
    }), this.nonempty = (t) => this.min(1, ue.errToObj(t)), this.trim = () => new $r({
      ...this._def,
      checks: [...this._def.checks, { kind: "trim" }]
    }), this.toLowerCase = () => new $r({
      ...this._def,
      checks: [...this._def.checks, { kind: "toLowerCase" }]
    }), this.toUpperCase = () => new $r({
      ...this._def,
      checks: [...this._def.checks, { kind: "toUpperCase" }]
    });
  }
  _parse(t) {
    if (this._def.coerce && (t.data = String(t.data)), this._getType(t) !== Q.string) {
      const i = this._getOrReturnCtx(t);
      return ee(
        i,
        {
          code: G.invalid_type,
          expected: Q.string,
          received: i.parsedType
        }
        //
      ), ve;
    }
    const n = new qt();
    let o;
    for (const i of this._def.checks)
      if (i.kind === "min")
        t.data.length < i.value && (o = this._getOrReturnCtx(t, o), ee(o, {
          code: G.too_small,
          minimum: i.value,
          type: "string",
          inclusive: !0,
          exact: !1,
          message: i.message
        }), n.dirty());
      else if (i.kind === "max")
        t.data.length > i.value && (o = this._getOrReturnCtx(t, o), ee(o, {
          code: G.too_big,
          maximum: i.value,
          type: "string",
          inclusive: !0,
          exact: !1,
          message: i.message
        }), n.dirty());
      else if (i.kind === "length") {
        const s = t.data.length > i.value, a = t.data.length < i.value;
        (s || a) && (o = this._getOrReturnCtx(t, o), s ? ee(o, {
          code: G.too_big,
          maximum: i.value,
          type: "string",
          inclusive: !0,
          exact: !0,
          message: i.message
        }) : a && ee(o, {
          code: G.too_small,
          minimum: i.value,
          type: "string",
          inclusive: !0,
          exact: !0,
          message: i.message
        }), n.dirty());
      } else if (i.kind === "email")
        rI.test(t.data) || (o = this._getOrReturnCtx(t, o), ee(o, {
          validation: "email",
          code: G.invalid_string,
          message: i.message
        }), n.dirty());
      else if (i.kind === "emoji")
        nI.test(t.data) || (o = this._getOrReturnCtx(t, o), ee(o, {
          validation: "emoji",
          code: G.invalid_string,
          message: i.message
        }), n.dirty());
      else if (i.kind === "uuid")
        tI.test(t.data) || (o = this._getOrReturnCtx(t, o), ee(o, {
          validation: "uuid",
          code: G.invalid_string,
          message: i.message
        }), n.dirty());
      else if (i.kind === "cuid")
        J6.test(t.data) || (o = this._getOrReturnCtx(t, o), ee(o, {
          validation: "cuid",
          code: G.invalid_string,
          message: i.message
        }), n.dirty());
      else if (i.kind === "cuid2")
        Q6.test(t.data) || (o = this._getOrReturnCtx(t, o), ee(o, {
          validation: "cuid2",
          code: G.invalid_string,
          message: i.message
        }), n.dirty());
      else if (i.kind === "ulid")
        eI.test(t.data) || (o = this._getOrReturnCtx(t, o), ee(o, {
          validation: "ulid",
          code: G.invalid_string,
          message: i.message
        }), n.dirty());
      else if (i.kind === "url")
        try {
          new URL(t.data);
        } catch {
          o = this._getOrReturnCtx(t, o), ee(o, {
            validation: "url",
            code: G.invalid_string,
            message: i.message
          }), n.dirty();
        }
      else i.kind === "regex" ? (i.regex.lastIndex = 0, i.regex.test(t.data) || (o = this._getOrReturnCtx(t, o), ee(o, {
        validation: "regex",
        code: G.invalid_string,
        message: i.message
      }), n.dirty())) : i.kind === "trim" ? t.data = t.data.trim() : i.kind === "includes" ? t.data.includes(i.value, i.position) || (o = this._getOrReturnCtx(t, o), ee(o, {
        code: G.invalid_string,
        validation: { includes: i.value, position: i.position },
        message: i.message
      }), n.dirty()) : i.kind === "toLowerCase" ? t.data = t.data.toLowerCase() : i.kind === "toUpperCase" ? t.data = t.data.toUpperCase() : i.kind === "startsWith" ? t.data.startsWith(i.value) || (o = this._getOrReturnCtx(t, o), ee(o, {
        code: G.invalid_string,
        validation: { startsWith: i.value },
        message: i.message
      }), n.dirty()) : i.kind === "endsWith" ? t.data.endsWith(i.value) || (o = this._getOrReturnCtx(t, o), ee(o, {
        code: G.invalid_string,
        validation: { endsWith: i.value },
        message: i.message
      }), n.dirty()) : i.kind === "datetime" ? sI(i).test(t.data) || (o = this._getOrReturnCtx(t, o), ee(o, {
        code: G.invalid_string,
        validation: "datetime",
        message: i.message
      }), n.dirty()) : i.kind === "ip" ? aI(t.data, i.version) || (o = this._getOrReturnCtx(t, o), ee(o, {
        validation: "ip",
        code: G.invalid_string,
        message: i.message
      }), n.dirty()) : ze.assertNever(i);
    return { status: n.value, value: t.data };
  }
  _addCheck(t) {
    return new $r({
      ...this._def,
      checks: [...this._def.checks, t]
    });
  }
  email(t) {
    return this._addCheck({ kind: "email", ...ue.errToObj(t) });
  }
  url(t) {
    return this._addCheck({ kind: "url", ...ue.errToObj(t) });
  }
  emoji(t) {
    return this._addCheck({ kind: "emoji", ...ue.errToObj(t) });
  }
  uuid(t) {
    return this._addCheck({ kind: "uuid", ...ue.errToObj(t) });
  }
  cuid(t) {
    return this._addCheck({ kind: "cuid", ...ue.errToObj(t) });
  }
  cuid2(t) {
    return this._addCheck({ kind: "cuid2", ...ue.errToObj(t) });
  }
  ulid(t) {
    return this._addCheck({ kind: "ulid", ...ue.errToObj(t) });
  }
  ip(t) {
    return this._addCheck({ kind: "ip", ...ue.errToObj(t) });
  }
  datetime(t) {
    var r;
    return typeof t == "string" ? this._addCheck({
      kind: "datetime",
      precision: null,
      offset: !1,
      message: t
    }) : this._addCheck({
      kind: "datetime",
      precision: typeof (t == null ? void 0 : t.precision) > "u" ? null : t == null ? void 0 : t.precision,
      offset: (r = t == null ? void 0 : t.offset) !== null && r !== void 0 ? r : !1,
      ...ue.errToObj(t == null ? void 0 : t.message)
    });
  }
  regex(t, r) {
    return this._addCheck({
      kind: "regex",
      regex: t,
      ...ue.errToObj(r)
    });
  }
  includes(t, r) {
    return this._addCheck({
      kind: "includes",
      value: t,
      position: r == null ? void 0 : r.position,
      ...ue.errToObj(r == null ? void 0 : r.message)
    });
  }
  startsWith(t, r) {
    return this._addCheck({
      kind: "startsWith",
      value: t,
      ...ue.errToObj(r)
    });
  }
  endsWith(t, r) {
    return this._addCheck({
      kind: "endsWith",
      value: t,
      ...ue.errToObj(r)
    });
  }
  min(t, r) {
    return this._addCheck({
      kind: "min",
      value: t,
      ...ue.errToObj(r)
    });
  }
  max(t, r) {
    return this._addCheck({
      kind: "max",
      value: t,
      ...ue.errToObj(r)
    });
  }
  length(t, r) {
    return this._addCheck({
      kind: "length",
      value: t,
      ...ue.errToObj(r)
    });
  }
  get isDatetime() {
    return !!this._def.checks.find((t) => t.kind === "datetime");
  }
  get isEmail() {
    return !!this._def.checks.find((t) => t.kind === "email");
  }
  get isURL() {
    return !!this._def.checks.find((t) => t.kind === "url");
  }
  get isEmoji() {
    return !!this._def.checks.find((t) => t.kind === "emoji");
  }
  get isUUID() {
    return !!this._def.checks.find((t) => t.kind === "uuid");
  }
  get isCUID() {
    return !!this._def.checks.find((t) => t.kind === "cuid");
  }
  get isCUID2() {
    return !!this._def.checks.find((t) => t.kind === "cuid2");
  }
  get isULID() {
    return !!this._def.checks.find((t) => t.kind === "ulid");
  }
  get isIP() {
    return !!this._def.checks.find((t) => t.kind === "ip");
  }
  get minLength() {
    let t = null;
    for (const r of this._def.checks)
      r.kind === "min" && (t === null || r.value > t) && (t = r.value);
    return t;
  }
  get maxLength() {
    let t = null;
    for (const r of this._def.checks)
      r.kind === "max" && (t === null || r.value < t) && (t = r.value);
    return t;
  }
}
$r.create = (e) => {
  var t;
  return new $r({
    checks: [],
    typeName: ge.ZodString,
    coerce: (t = e == null ? void 0 : e.coerce) !== null && t !== void 0 ? t : !1,
    ...ke(e)
  });
};
function cI(e, t) {
  const r = (e.toString().split(".")[1] || "").length, n = (t.toString().split(".")[1] || "").length, o = r > n ? r : n, i = parseInt(e.toFixed(o).replace(".", "")), s = parseInt(t.toFixed(o).replace(".", ""));
  return i % s / Math.pow(10, o);
}
class yo extends $e {
  constructor() {
    super(...arguments), this.min = this.gte, this.max = this.lte, this.step = this.multipleOf;
  }
  _parse(t) {
    if (this._def.coerce && (t.data = Number(t.data)), this._getType(t) !== Q.number) {
      const i = this._getOrReturnCtx(t);
      return ee(i, {
        code: G.invalid_type,
        expected: Q.number,
        received: i.parsedType
      }), ve;
    }
    let n;
    const o = new qt();
    for (const i of this._def.checks)
      i.kind === "int" ? ze.isInteger(t.data) || (n = this._getOrReturnCtx(t, n), ee(n, {
        code: G.invalid_type,
        expected: "integer",
        received: "float",
        message: i.message
      }), o.dirty()) : i.kind === "min" ? (i.inclusive ? t.data < i.value : t.data <= i.value) && (n = this._getOrReturnCtx(t, n), ee(n, {
        code: G.too_small,
        minimum: i.value,
        type: "number",
        inclusive: i.inclusive,
        exact: !1,
        message: i.message
      }), o.dirty()) : i.kind === "max" ? (i.inclusive ? t.data > i.value : t.data >= i.value) && (n = this._getOrReturnCtx(t, n), ee(n, {
        code: G.too_big,
        maximum: i.value,
        type: "number",
        inclusive: i.inclusive,
        exact: !1,
        message: i.message
      }), o.dirty()) : i.kind === "multipleOf" ? cI(t.data, i.value) !== 0 && (n = this._getOrReturnCtx(t, n), ee(n, {
        code: G.not_multiple_of,
        multipleOf: i.value,
        message: i.message
      }), o.dirty()) : i.kind === "finite" ? Number.isFinite(t.data) || (n = this._getOrReturnCtx(t, n), ee(n, {
        code: G.not_finite,
        message: i.message
      }), o.dirty()) : ze.assertNever(i);
    return { status: o.value, value: t.data };
  }
  gte(t, r) {
    return this.setLimit("min", t, !0, ue.toString(r));
  }
  gt(t, r) {
    return this.setLimit("min", t, !1, ue.toString(r));
  }
  lte(t, r) {
    return this.setLimit("max", t, !0, ue.toString(r));
  }
  lt(t, r) {
    return this.setLimit("max", t, !1, ue.toString(r));
  }
  setLimit(t, r, n, o) {
    return new yo({
      ...this._def,
      checks: [
        ...this._def.checks,
        {
          kind: t,
          value: r,
          inclusive: n,
          message: ue.toString(o)
        }
      ]
    });
  }
  _addCheck(t) {
    return new yo({
      ...this._def,
      checks: [...this._def.checks, t]
    });
  }
  int(t) {
    return this._addCheck({
      kind: "int",
      message: ue.toString(t)
    });
  }
  positive(t) {
    return this._addCheck({
      kind: "min",
      value: 0,
      inclusive: !1,
      message: ue.toString(t)
    });
  }
  negative(t) {
    return this._addCheck({
      kind: "max",
      value: 0,
      inclusive: !1,
      message: ue.toString(t)
    });
  }
  nonpositive(t) {
    return this._addCheck({
      kind: "max",
      value: 0,
      inclusive: !0,
      message: ue.toString(t)
    });
  }
  nonnegative(t) {
    return this._addCheck({
      kind: "min",
      value: 0,
      inclusive: !0,
      message: ue.toString(t)
    });
  }
  multipleOf(t, r) {
    return this._addCheck({
      kind: "multipleOf",
      value: t,
      message: ue.toString(r)
    });
  }
  finite(t) {
    return this._addCheck({
      kind: "finite",
      message: ue.toString(t)
    });
  }
  safe(t) {
    return this._addCheck({
      kind: "min",
      inclusive: !0,
      value: Number.MIN_SAFE_INTEGER,
      message: ue.toString(t)
    })._addCheck({
      kind: "max",
      inclusive: !0,
      value: Number.MAX_SAFE_INTEGER,
      message: ue.toString(t)
    });
  }
  get minValue() {
    let t = null;
    for (const r of this._def.checks)
      r.kind === "min" && (t === null || r.value > t) && (t = r.value);
    return t;
  }
  get maxValue() {
    let t = null;
    for (const r of this._def.checks)
      r.kind === "max" && (t === null || r.value < t) && (t = r.value);
    return t;
  }
  get isInt() {
    return !!this._def.checks.find((t) => t.kind === "int" || t.kind === "multipleOf" && ze.isInteger(t.value));
  }
  get isFinite() {
    let t = null, r = null;
    for (const n of this._def.checks) {
      if (n.kind === "finite" || n.kind === "int" || n.kind === "multipleOf")
        return !0;
      n.kind === "min" ? (r === null || n.value > r) && (r = n.value) : n.kind === "max" && (t === null || n.value < t) && (t = n.value);
    }
    return Number.isFinite(r) && Number.isFinite(t);
  }
}
yo.create = (e) => new yo({
  checks: [],
  typeName: ge.ZodNumber,
  coerce: (e == null ? void 0 : e.coerce) || !1,
  ...ke(e)
});
class wo extends $e {
  constructor() {
    super(...arguments), this.min = this.gte, this.max = this.lte;
  }
  _parse(t) {
    if (this._def.coerce && (t.data = BigInt(t.data)), this._getType(t) !== Q.bigint) {
      const i = this._getOrReturnCtx(t);
      return ee(i, {
        code: G.invalid_type,
        expected: Q.bigint,
        received: i.parsedType
      }), ve;
    }
    let n;
    const o = new qt();
    for (const i of this._def.checks)
      i.kind === "min" ? (i.inclusive ? t.data < i.value : t.data <= i.value) && (n = this._getOrReturnCtx(t, n), ee(n, {
        code: G.too_small,
        type: "bigint",
        minimum: i.value,
        inclusive: i.inclusive,
        message: i.message
      }), o.dirty()) : i.kind === "max" ? (i.inclusive ? t.data > i.value : t.data >= i.value) && (n = this._getOrReturnCtx(t, n), ee(n, {
        code: G.too_big,
        type: "bigint",
        maximum: i.value,
        inclusive: i.inclusive,
        message: i.message
      }), o.dirty()) : i.kind === "multipleOf" ? t.data % i.value !== BigInt(0) && (n = this._getOrReturnCtx(t, n), ee(n, {
        code: G.not_multiple_of,
        multipleOf: i.value,
        message: i.message
      }), o.dirty()) : ze.assertNever(i);
    return { status: o.value, value: t.data };
  }
  gte(t, r) {
    return this.setLimit("min", t, !0, ue.toString(r));
  }
  gt(t, r) {
    return this.setLimit("min", t, !1, ue.toString(r));
  }
  lte(t, r) {
    return this.setLimit("max", t, !0, ue.toString(r));
  }
  lt(t, r) {
    return this.setLimit("max", t, !1, ue.toString(r));
  }
  setLimit(t, r, n, o) {
    return new wo({
      ...this._def,
      checks: [
        ...this._def.checks,
        {
          kind: t,
          value: r,
          inclusive: n,
          message: ue.toString(o)
        }
      ]
    });
  }
  _addCheck(t) {
    return new wo({
      ...this._def,
      checks: [...this._def.checks, t]
    });
  }
  positive(t) {
    return this._addCheck({
      kind: "min",
      value: BigInt(0),
      inclusive: !1,
      message: ue.toString(t)
    });
  }
  negative(t) {
    return this._addCheck({
      kind: "max",
      value: BigInt(0),
      inclusive: !1,
      message: ue.toString(t)
    });
  }
  nonpositive(t) {
    return this._addCheck({
      kind: "max",
      value: BigInt(0),
      inclusive: !0,
      message: ue.toString(t)
    });
  }
  nonnegative(t) {
    return this._addCheck({
      kind: "min",
      value: BigInt(0),
      inclusive: !0,
      message: ue.toString(t)
    });
  }
  multipleOf(t, r) {
    return this._addCheck({
      kind: "multipleOf",
      value: t,
      message: ue.toString(r)
    });
  }
  get minValue() {
    let t = null;
    for (const r of this._def.checks)
      r.kind === "min" && (t === null || r.value > t) && (t = r.value);
    return t;
  }
  get maxValue() {
    let t = null;
    for (const r of this._def.checks)
      r.kind === "max" && (t === null || r.value < t) && (t = r.value);
    return t;
  }
}
wo.create = (e) => {
  var t;
  return new wo({
    checks: [],
    typeName: ge.ZodBigInt,
    coerce: (t = e == null ? void 0 : e.coerce) !== null && t !== void 0 ? t : !1,
    ...ke(e)
  });
};
class Ns extends $e {
  _parse(t) {
    if (this._def.coerce && (t.data = !!t.data), this._getType(t) !== Q.boolean) {
      const n = this._getOrReturnCtx(t);
      return ee(n, {
        code: G.invalid_type,
        expected: Q.boolean,
        received: n.parsedType
      }), ve;
    }
    return Yt(t.data);
  }
}
Ns.create = (e) => new Ns({
  typeName: ge.ZodBoolean,
  coerce: (e == null ? void 0 : e.coerce) || !1,
  ...ke(e)
});
class Zo extends $e {
  _parse(t) {
    if (this._def.coerce && (t.data = new Date(t.data)), this._getType(t) !== Q.date) {
      const i = this._getOrReturnCtx(t);
      return ee(i, {
        code: G.invalid_type,
        expected: Q.date,
        received: i.parsedType
      }), ve;
    }
    if (isNaN(t.data.getTime())) {
      const i = this._getOrReturnCtx(t);
      return ee(i, {
        code: G.invalid_date
      }), ve;
    }
    const n = new qt();
    let o;
    for (const i of this._def.checks)
      i.kind === "min" ? t.data.getTime() < i.value && (o = this._getOrReturnCtx(t, o), ee(o, {
        code: G.too_small,
        message: i.message,
        inclusive: !0,
        exact: !1,
        minimum: i.value,
        type: "date"
      }), n.dirty()) : i.kind === "max" ? t.data.getTime() > i.value && (o = this._getOrReturnCtx(t, o), ee(o, {
        code: G.too_big,
        message: i.message,
        inclusive: !0,
        exact: !1,
        maximum: i.value,
        type: "date"
      }), n.dirty()) : ze.assertNever(i);
    return {
      status: n.value,
      value: new Date(t.data.getTime())
    };
  }
  _addCheck(t) {
    return new Zo({
      ...this._def,
      checks: [...this._def.checks, t]
    });
  }
  min(t, r) {
    return this._addCheck({
      kind: "min",
      value: t.getTime(),
      message: ue.toString(r)
    });
  }
  max(t, r) {
    return this._addCheck({
      kind: "max",
      value: t.getTime(),
      message: ue.toString(r)
    });
  }
  get minDate() {
    let t = null;
    for (const r of this._def.checks)
      r.kind === "min" && (t === null || r.value > t) && (t = r.value);
    return t != null ? new Date(t) : null;
  }
  get maxDate() {
    let t = null;
    for (const r of this._def.checks)
      r.kind === "max" && (t === null || r.value < t) && (t = r.value);
    return t != null ? new Date(t) : null;
  }
}
Zo.create = (e) => new Zo({
  checks: [],
  coerce: (e == null ? void 0 : e.coerce) || !1,
  typeName: ge.ZodDate,
  ...ke(e)
});
class Ac extends $e {
  _parse(t) {
    if (this._getType(t) !== Q.symbol) {
      const n = this._getOrReturnCtx(t);
      return ee(n, {
        code: G.invalid_type,
        expected: Q.symbol,
        received: n.parsedType
      }), ve;
    }
    return Yt(t.data);
  }
}
Ac.create = (e) => new Ac({
  typeName: ge.ZodSymbol,
  ...ke(e)
});
class Us extends $e {
  _parse(t) {
    if (this._getType(t) !== Q.undefined) {
      const n = this._getOrReturnCtx(t);
      return ee(n, {
        code: G.invalid_type,
        expected: Q.undefined,
        received: n.parsedType
      }), ve;
    }
    return Yt(t.data);
  }
}
Us.create = (e) => new Us({
  typeName: ge.ZodUndefined,
  ...ke(e)
});
class Cs extends $e {
  _parse(t) {
    if (this._getType(t) !== Q.null) {
      const n = this._getOrReturnCtx(t);
      return ee(n, {
        code: G.invalid_type,
        expected: Q.null,
        received: n.parsedType
      }), ve;
    }
    return Yt(t.data);
  }
}
Cs.create = (e) => new Cs({
  typeName: ge.ZodNull,
  ...ke(e)
});
class Di extends $e {
  constructor() {
    super(...arguments), this._any = !0;
  }
  _parse(t) {
    return Yt(t.data);
  }
}
Di.create = (e) => new Di({
  typeName: ge.ZodAny,
  ...ke(e)
});
class Fo extends $e {
  constructor() {
    super(...arguments), this._unknown = !0;
  }
  _parse(t) {
    return Yt(t.data);
  }
}
Fo.create = (e) => new Fo({
  typeName: ge.ZodUnknown,
  ...ke(e)
});
class Bn extends $e {
  _parse(t) {
    const r = this._getOrReturnCtx(t);
    return ee(r, {
      code: G.invalid_type,
      expected: Q.never,
      received: r.parsedType
    }), ve;
  }
}
Bn.create = (e) => new Bn({
  typeName: ge.ZodNever,
  ...ke(e)
});
class Tc extends $e {
  _parse(t) {
    if (this._getType(t) !== Q.undefined) {
      const n = this._getOrReturnCtx(t);
      return ee(n, {
        code: G.invalid_type,
        expected: Q.void,
        received: n.parsedType
      }), ve;
    }
    return Yt(t.data);
  }
}
Tc.create = (e) => new Tc({
  typeName: ge.ZodVoid,
  ...ke(e)
});
class Hr extends $e {
  _parse(t) {
    const { ctx: r, status: n } = this._processInputParams(t), o = this._def;
    if (r.parsedType !== Q.array)
      return ee(r, {
        code: G.invalid_type,
        expected: Q.array,
        received: r.parsedType
      }), ve;
    if (o.exactLength !== null) {
      const s = r.data.length > o.exactLength.value, a = r.data.length < o.exactLength.value;
      (s || a) && (ee(r, {
        code: s ? G.too_big : G.too_small,
        minimum: a ? o.exactLength.value : void 0,
        maximum: s ? o.exactLength.value : void 0,
        type: "array",
        inclusive: !0,
        exact: !0,
        message: o.exactLength.message
      }), n.dirty());
    }
    if (o.minLength !== null && r.data.length < o.minLength.value && (ee(r, {
      code: G.too_small,
      minimum: o.minLength.value,
      type: "array",
      inclusive: !0,
      exact: !1,
      message: o.minLength.message
    }), n.dirty()), o.maxLength !== null && r.data.length > o.maxLength.value && (ee(r, {
      code: G.too_big,
      maximum: o.maxLength.value,
      type: "array",
      inclusive: !0,
      exact: !1,
      message: o.maxLength.message
    }), n.dirty()), r.common.async)
      return Promise.all([...r.data].map((s, a) => o.type._parseAsync(new an(r, s, r.path, a)))).then((s) => qt.mergeArray(n, s));
    const i = [...r.data].map((s, a) => o.type._parseSync(new an(r, s, r.path, a)));
    return qt.mergeArray(n, i);
  }
  get element() {
    return this._def.type;
  }
  min(t, r) {
    return new Hr({
      ...this._def,
      minLength: { value: t, message: ue.toString(r) }
    });
  }
  max(t, r) {
    return new Hr({
      ...this._def,
      maxLength: { value: t, message: ue.toString(r) }
    });
  }
  length(t, r) {
    return new Hr({
      ...this._def,
      exactLength: { value: t, message: ue.toString(r) }
    });
  }
  nonempty(t) {
    return this.min(1, t);
  }
}
Hr.create = (e, t) => new Hr({
  type: e,
  minLength: null,
  maxLength: null,
  exactLength: null,
  typeName: ge.ZodArray,
  ...ke(t)
});
function wi(e) {
  if (e instanceof tt) {
    const t = {};
    for (const r in e.shape) {
      const n = e.shape[r];
      t[r] = An.create(wi(n));
    }
    return new tt({
      ...e._def,
      shape: () => t
    });
  } else return e instanceof Hr ? new Hr({
    ...e._def,
    type: wi(e.element)
  }) : e instanceof An ? An.create(wi(e.unwrap())) : e instanceof Yo ? Yo.create(wi(e.unwrap())) : e instanceof cn ? cn.create(e.items.map((t) => wi(t))) : e;
}
class tt extends $e {
  constructor() {
    super(...arguments), this._cached = null, this.nonstrict = this.passthrough, this.augment = this.extend;
  }
  _getCached() {
    if (this._cached !== null)
      return this._cached;
    const t = this._def.shape(), r = ze.objectKeys(t);
    return this._cached = { shape: t, keys: r };
  }
  _parse(t) {
    if (this._getType(t) !== Q.object) {
      const u = this._getOrReturnCtx(t);
      return ee(u, {
        code: G.invalid_type,
        expected: Q.object,
        received: u.parsedType
      }), ve;
    }
    const { status: n, ctx: o } = this._processInputParams(t), { shape: i, keys: s } = this._getCached(), a = [];
    if (!(this._def.catchall instanceof Bn && this._def.unknownKeys === "strip"))
      for (const u in o.data)
        s.includes(u) || a.push(u);
    const c = [];
    for (const u of s) {
      const f = i[u], l = o.data[u];
      c.push({
        key: { status: "valid", value: u },
        value: f._parse(new an(o, l, o.path, u)),
        alwaysSet: u in o.data
      });
    }
    if (this._def.catchall instanceof Bn) {
      const u = this._def.unknownKeys;
      if (u === "passthrough")
        for (const f of a)
          c.push({
            key: { status: "valid", value: f },
            value: { status: "valid", value: o.data[f] }
          });
      else if (u === "strict")
        a.length > 0 && (ee(o, {
          code: G.unrecognized_keys,
          keys: a
        }), n.dirty());
      else if (u !== "strip") throw new Error("Internal ZodObject error: invalid unknownKeys value.");
    } else {
      const u = this._def.catchall;
      for (const f of a) {
        const l = o.data[f];
        c.push({
          key: { status: "valid", value: f },
          value: u._parse(
            new an(o, l, o.path, f)
            //, ctx.child(key), value, getParsedType(value)
          ),
          alwaysSet: f in o.data
        });
      }
    }
    return o.common.async ? Promise.resolve().then(async () => {
      const u = [];
      for (const f of c) {
        const l = await f.key;
        u.push({
          key: l,
          value: await f.value,
          alwaysSet: f.alwaysSet
        });
      }
      return u;
    }).then((u) => qt.mergeObjectSync(n, u)) : qt.mergeObjectSync(n, c);
  }
  get shape() {
    return this._def.shape();
  }
  strict(t) {
    return new tt({
      ...this._def,
      unknownKeys: "strict",
      ...t !== void 0 ? {
        errorMap: (r, n) => {
          var o, i, s, a;
          const c = (s = (i = (o = this._def).errorMap) === null || i === void 0 ? void 0 : i.call(o, r, n).message) !== null && s !== void 0 ? s : n.defaultError;
          return r.code === "unrecognized_keys" ? {
            message: (a = ue.errToObj(t).message) !== null && a !== void 0 ? a : c
          } : {
            message: c
          };
        }
      } : {}
    });
  }
  strip() {
    return new tt({
      ...this._def,
      unknownKeys: "strip"
    });
  }
  passthrough() {
    return new tt({
      ...this._def,
      unknownKeys: "passthrough"
    });
  }
  // const AugmentFactory =
  //   <Def extends ZodObjectDef>(def: Def) =>
  //   <Augmentation extends ZodRawShape>(
  //     augmentation: Augmentation
  //   ): ZodObject<
  //     extendShape<ReturnType<Def["shape"]>, Augmentation>,
  //     Def["unknownKeys"],
  //     Def["catchall"]
  //   > => {
  //     return new ZodObject({
  //       ...def,
  //       shape: () => ({
  //         ...def.shape(),
  //         ...augmentation,
  //       }),
  //     }) as any;
  //   };
  extend(t) {
    return new tt({
      ...this._def,
      shape: () => ({
        ...this._def.shape(),
        ...t
      })
    });
  }
  /**
   * Prior to zod@1.0.12 there was a bug in the
   * inferred type of merged objects. Please
   * upgrade if you are experiencing issues.
   */
  merge(t) {
    return new tt({
      unknownKeys: t._def.unknownKeys,
      catchall: t._def.catchall,
      shape: () => ({
        ...this._def.shape(),
        ...t._def.shape()
      }),
      typeName: ge.ZodObject
    });
  }
  // merge<
  //   Incoming extends AnyZodObject,
  //   Augmentation extends Incoming["shape"],
  //   NewOutput extends {
  //     [k in keyof Augmentation | keyof Output]: k extends keyof Augmentation
  //       ? Augmentation[k]["_output"]
  //       : k extends keyof Output
  //       ? Output[k]
  //       : never;
  //   },
  //   NewInput extends {
  //     [k in keyof Augmentation | keyof Input]: k extends keyof Augmentation
  //       ? Augmentation[k]["_input"]
  //       : k extends keyof Input
  //       ? Input[k]
  //       : never;
  //   }
  // >(
  //   merging: Incoming
  // ): ZodObject<
  //   extendShape<T, ReturnType<Incoming["_def"]["shape"]>>,
  //   Incoming["_def"]["unknownKeys"],
  //   Incoming["_def"]["catchall"],
  //   NewOutput,
  //   NewInput
  // > {
  //   const merged: any = new ZodObject({
  //     unknownKeys: merging._def.unknownKeys,
  //     catchall: merging._def.catchall,
  //     shape: () =>
  //       objectUtil.mergeShapes(this._def.shape(), merging._def.shape()),
  //     typeName: ZodFirstPartyTypeKind.ZodObject,
  //   }) as any;
  //   return merged;
  // }
  setKey(t, r) {
    return this.augment({ [t]: r });
  }
  // merge<Incoming extends AnyZodObject>(
  //   merging: Incoming
  // ): //ZodObject<T & Incoming["_shape"], UnknownKeys, Catchall> = (merging) => {
  // ZodObject<
  //   extendShape<T, ReturnType<Incoming["_def"]["shape"]>>,
  //   Incoming["_def"]["unknownKeys"],
  //   Incoming["_def"]["catchall"]
  // > {
  //   // const mergedShape = objectUtil.mergeShapes(
  //   //   this._def.shape(),
  //   //   merging._def.shape()
  //   // );
  //   const merged: any = new ZodObject({
  //     unknownKeys: merging._def.unknownKeys,
  //     catchall: merging._def.catchall,
  //     shape: () =>
  //       objectUtil.mergeShapes(this._def.shape(), merging._def.shape()),
  //     typeName: ZodFirstPartyTypeKind.ZodObject,
  //   }) as any;
  //   return merged;
  // }
  catchall(t) {
    return new tt({
      ...this._def,
      catchall: t
    });
  }
  pick(t) {
    const r = {};
    return ze.objectKeys(t).forEach((n) => {
      t[n] && this.shape[n] && (r[n] = this.shape[n]);
    }), new tt({
      ...this._def,
      shape: () => r
    });
  }
  omit(t) {
    const r = {};
    return ze.objectKeys(this.shape).forEach((n) => {
      t[n] || (r[n] = this.shape[n]);
    }), new tt({
      ...this._def,
      shape: () => r
    });
  }
  /**
   * @deprecated
   */
  deepPartial() {
    return wi(this);
  }
  partial(t) {
    const r = {};
    return ze.objectKeys(this.shape).forEach((n) => {
      const o = this.shape[n];
      t && !t[n] ? r[n] = o : r[n] = o.optional();
    }), new tt({
      ...this._def,
      shape: () => r
    });
  }
  required(t) {
    const r = {};
    return ze.objectKeys(this.shape).forEach((n) => {
      if (t && !t[n])
        r[n] = this.shape[n];
      else {
        let i = this.shape[n];
        for (; i instanceof An; )
          i = i._def.innerType;
        r[n] = i;
      }
    }), new tt({
      ...this._def,
      shape: () => r
    });
  }
  keyof() {
    return uy(ze.objectKeys(this.shape));
  }
}
tt.create = (e, t) => new tt({
  shape: () => e,
  unknownKeys: "strip",
  catchall: Bn.create(),
  typeName: ge.ZodObject,
  ...ke(t)
});
tt.strictCreate = (e, t) => new tt({
  shape: () => e,
  unknownKeys: "strict",
  catchall: Bn.create(),
  typeName: ge.ZodObject,
  ...ke(t)
});
tt.lazycreate = (e, t) => new tt({
  shape: e,
  unknownKeys: "strip",
  catchall: Bn.create(),
  typeName: ge.ZodObject,
  ...ke(t)
});
class Hs extends $e {
  _parse(t) {
    const { ctx: r } = this._processInputParams(t), n = this._def.options;
    function o(i) {
      for (const a of i)
        if (a.result.status === "valid")
          return a.result;
      for (const a of i)
        if (a.result.status === "dirty")
          return r.common.issues.push(...a.ctx.common.issues), a.result;
      const s = i.map((a) => new Cr(a.ctx.common.issues));
      return ee(r, {
        code: G.invalid_union,
        unionErrors: s
      }), ve;
    }
    if (r.common.async)
      return Promise.all(n.map(async (i) => {
        const s = {
          ...r,
          common: {
            ...r.common,
            issues: []
          },
          parent: null
        };
        return {
          result: await i._parseAsync({
            data: r.data,
            path: r.path,
            parent: s
          }),
          ctx: s
        };
      })).then(o);
    {
      let i;
      const s = [];
      for (const c of n) {
        const u = {
          ...r,
          common: {
            ...r.common,
            issues: []
          },
          parent: null
        }, f = c._parseSync({
          data: r.data,
          path: r.path,
          parent: u
        });
        if (f.status === "valid")
          return f;
        f.status === "dirty" && !i && (i = { result: f, ctx: u }), u.common.issues.length && s.push(u.common.issues);
      }
      if (i)
        return r.common.issues.push(...i.ctx.common.issues), i.result;
      const a = s.map((c) => new Cr(c));
      return ee(r, {
        code: G.invalid_union,
        unionErrors: a
      }), ve;
    }
  }
  get options() {
    return this._def.options;
  }
}
Hs.create = (e, t) => new Hs({
  options: e,
  typeName: ge.ZodUnion,
  ...ke(t)
});
const qa = (e) => e instanceof zs ? qa(e.schema) : e instanceof zr ? qa(e.innerType()) : e instanceof js ? [e.value] : e instanceof vo ? e.options : e instanceof Ms ? Object.keys(e.enum) : e instanceof Ds ? qa(e._def.innerType) : e instanceof Us ? [void 0] : e instanceof Cs ? [null] : null;
class cu extends $e {
  _parse(t) {
    const { ctx: r } = this._processInputParams(t);
    if (r.parsedType !== Q.object)
      return ee(r, {
        code: G.invalid_type,
        expected: Q.object,
        received: r.parsedType
      }), ve;
    const n = this.discriminator, o = r.data[n], i = this.optionsMap.get(o);
    return i ? r.common.async ? i._parseAsync({
      data: r.data,
      path: r.path,
      parent: r
    }) : i._parseSync({
      data: r.data,
      path: r.path,
      parent: r
    }) : (ee(r, {
      code: G.invalid_union_discriminator,
      options: Array.from(this.optionsMap.keys()),
      path: [n]
    }), ve);
  }
  get discriminator() {
    return this._def.discriminator;
  }
  get options() {
    return this._def.options;
  }
  get optionsMap() {
    return this._def.optionsMap;
  }
  /**
   * The constructor of the discriminated union schema. Its behaviour is very similar to that of the normal z.union() constructor.
   * However, it only allows a union of objects, all of which need to share a discriminator property. This property must
   * have a different value for each object in the union.
   * @param discriminator the name of the discriminator property
   * @param types an array of object schemas
   * @param params
   */
  static create(t, r, n) {
    const o = /* @__PURE__ */ new Map();
    for (const i of r) {
      const s = qa(i.shape[t]);
      if (!s)
        throw new Error(`A discriminator value for key \`${t}\` could not be extracted from all schema options`);
      for (const a of s) {
        if (o.has(a))
          throw new Error(`Discriminator property ${String(t)} has duplicate value ${String(a)}`);
        o.set(a, i);
      }
    }
    return new cu({
      typeName: ge.ZodDiscriminatedUnion,
      discriminator: t,
      options: r,
      optionsMap: o,
      ...ke(n)
    });
  }
}
function kf(e, t) {
  const r = fo(e), n = fo(t);
  if (e === t)
    return { valid: !0, data: e };
  if (r === Q.object && n === Q.object) {
    const o = ze.objectKeys(t), i = ze.objectKeys(e).filter((a) => o.indexOf(a) !== -1), s = { ...e, ...t };
    for (const a of i) {
      const c = kf(e[a], t[a]);
      if (!c.valid)
        return { valid: !1 };
      s[a] = c.data;
    }
    return { valid: !0, data: s };
  } else if (r === Q.array && n === Q.array) {
    if (e.length !== t.length)
      return { valid: !1 };
    const o = [];
    for (let i = 0; i < e.length; i++) {
      const s = e[i], a = t[i], c = kf(s, a);
      if (!c.valid)
        return { valid: !1 };
      o.push(c.data);
    }
    return { valid: !0, data: o };
  } else return r === Q.date && n === Q.date && +e == +t ? { valid: !0, data: e } : { valid: !1 };
}
class Rs extends $e {
  _parse(t) {
    const { status: r, ctx: n } = this._processInputParams(t), o = (i, s) => {
      if (_f(i) || _f(s))
        return ve;
      const a = kf(i.value, s.value);
      return a.valid ? ((Sf(i) || Sf(s)) && r.dirty(), { status: r.value, value: a.data }) : (ee(n, {
        code: G.invalid_intersection_types
      }), ve);
    };
    return n.common.async ? Promise.all([
      this._def.left._parseAsync({
        data: n.data,
        path: n.path,
        parent: n
      }),
      this._def.right._parseAsync({
        data: n.data,
        path: n.path,
        parent: n
      })
    ]).then(([i, s]) => o(i, s)) : o(this._def.left._parseSync({
      data: n.data,
      path: n.path,
      parent: n
    }), this._def.right._parseSync({
      data: n.data,
      path: n.path,
      parent: n
    }));
  }
}
Rs.create = (e, t, r) => new Rs({
  left: e,
  right: t,
  typeName: ge.ZodIntersection,
  ...ke(r)
});
class cn extends $e {
  _parse(t) {
    const { status: r, ctx: n } = this._processInputParams(t);
    if (n.parsedType !== Q.array)
      return ee(n, {
        code: G.invalid_type,
        expected: Q.array,
        received: n.parsedType
      }), ve;
    if (n.data.length < this._def.items.length)
      return ee(n, {
        code: G.too_small,
        minimum: this._def.items.length,
        inclusive: !0,
        exact: !1,
        type: "array"
      }), ve;
    !this._def.rest && n.data.length > this._def.items.length && (ee(n, {
      code: G.too_big,
      maximum: this._def.items.length,
      inclusive: !0,
      exact: !1,
      type: "array"
    }), r.dirty());
    const i = [...n.data].map((s, a) => {
      const c = this._def.items[a] || this._def.rest;
      return c ? c._parse(new an(n, s, n.path, a)) : null;
    }).filter((s) => !!s);
    return n.common.async ? Promise.all(i).then((s) => qt.mergeArray(r, s)) : qt.mergeArray(r, i);
  }
  get items() {
    return this._def.items;
  }
  rest(t) {
    return new cn({
      ...this._def,
      rest: t
    });
  }
}
cn.create = (e, t) => {
  if (!Array.isArray(e))
    throw new Error("You must pass an array of schemas to z.tuple([ ... ])");
  return new cn({
    items: e,
    typeName: ge.ZodTuple,
    rest: null,
    ...ke(t)
  });
};
class Ls extends $e {
  get keySchema() {
    return this._def.keyType;
  }
  get valueSchema() {
    return this._def.valueType;
  }
  _parse(t) {
    const { status: r, ctx: n } = this._processInputParams(t);
    if (n.parsedType !== Q.object)
      return ee(n, {
        code: G.invalid_type,
        expected: Q.object,
        received: n.parsedType
      }), ve;
    const o = [], i = this._def.keyType, s = this._def.valueType;
    for (const a in n.data)
      o.push({
        key: i._parse(new an(n, a, n.path, a)),
        value: s._parse(new an(n, n.data[a], n.path, a))
      });
    return n.common.async ? qt.mergeObjectAsync(r, o) : qt.mergeObjectSync(r, o);
  }
  get element() {
    return this._def.valueType;
  }
  static create(t, r, n) {
    return r instanceof $e ? new Ls({
      keyType: t,
      valueType: r,
      typeName: ge.ZodRecord,
      ...ke(n)
    }) : new Ls({
      keyType: $r.create(),
      valueType: t,
      typeName: ge.ZodRecord,
      ...ke(r)
    });
  }
}
class Ic extends $e {
  _parse(t) {
    const { status: r, ctx: n } = this._processInputParams(t);
    if (n.parsedType !== Q.map)
      return ee(n, {
        code: G.invalid_type,
        expected: Q.map,
        received: n.parsedType
      }), ve;
    const o = this._def.keyType, i = this._def.valueType, s = [...n.data.entries()].map(([a, c], u) => ({
      key: o._parse(new an(n, a, n.path, [u, "key"])),
      value: i._parse(new an(n, c, n.path, [u, "value"]))
    }));
    if (n.common.async) {
      const a = /* @__PURE__ */ new Map();
      return Promise.resolve().then(async () => {
        for (const c of s) {
          const u = await c.key, f = await c.value;
          if (u.status === "aborted" || f.status === "aborted")
            return ve;
          (u.status === "dirty" || f.status === "dirty") && r.dirty(), a.set(u.value, f.value);
        }
        return { status: r.value, value: a };
      });
    } else {
      const a = /* @__PURE__ */ new Map();
      for (const c of s) {
        const u = c.key, f = c.value;
        if (u.status === "aborted" || f.status === "aborted")
          return ve;
        (u.status === "dirty" || f.status === "dirty") && r.dirty(), a.set(u.value, f.value);
      }
      return { status: r.value, value: a };
    }
  }
}
Ic.create = (e, t, r) => new Ic({
  valueType: t,
  keyType: e,
  typeName: ge.ZodMap,
  ...ke(r)
});
class Xo extends $e {
  _parse(t) {
    const { status: r, ctx: n } = this._processInputParams(t);
    if (n.parsedType !== Q.set)
      return ee(n, {
        code: G.invalid_type,
        expected: Q.set,
        received: n.parsedType
      }), ve;
    const o = this._def;
    o.minSize !== null && n.data.size < o.minSize.value && (ee(n, {
      code: G.too_small,
      minimum: o.minSize.value,
      type: "set",
      inclusive: !0,
      exact: !1,
      message: o.minSize.message
    }), r.dirty()), o.maxSize !== null && n.data.size > o.maxSize.value && (ee(n, {
      code: G.too_big,
      maximum: o.maxSize.value,
      type: "set",
      inclusive: !0,
      exact: !1,
      message: o.maxSize.message
    }), r.dirty());
    const i = this._def.valueType;
    function s(c) {
      const u = /* @__PURE__ */ new Set();
      for (const f of c) {
        if (f.status === "aborted")
          return ve;
        f.status === "dirty" && r.dirty(), u.add(f.value);
      }
      return { status: r.value, value: u };
    }
    const a = [...n.data.values()].map((c, u) => i._parse(new an(n, c, n.path, u)));
    return n.common.async ? Promise.all(a).then((c) => s(c)) : s(a);
  }
  min(t, r) {
    return new Xo({
      ...this._def,
      minSize: { value: t, message: ue.toString(r) }
    });
  }
  max(t, r) {
    return new Xo({
      ...this._def,
      maxSize: { value: t, message: ue.toString(r) }
    });
  }
  size(t, r) {
    return this.min(t, r).max(t, r);
  }
  nonempty(t) {
    return this.min(1, t);
  }
}
Xo.create = (e, t) => new Xo({
  valueType: e,
  minSize: null,
  maxSize: null,
  typeName: ge.ZodSet,
  ...ke(t)
});
class Oi extends $e {
  constructor() {
    super(...arguments), this.validate = this.implement;
  }
  _parse(t) {
    const { ctx: r } = this._processInputParams(t);
    if (r.parsedType !== Q.function)
      return ee(r, {
        code: G.invalid_type,
        expected: Q.function,
        received: r.parsedType
      }), ve;
    function n(a, c) {
      return _c({
        data: a,
        path: r.path,
        errorMaps: [
          r.common.contextualErrorMap,
          r.schemaErrorMap,
          Ec(),
          $s
        ].filter((u) => !!u),
        issueData: {
          code: G.invalid_arguments,
          argumentsError: c
        }
      });
    }
    function o(a, c) {
      return _c({
        data: a,
        path: r.path,
        errorMaps: [
          r.common.contextualErrorMap,
          r.schemaErrorMap,
          Ec(),
          $s
        ].filter((u) => !!u),
        issueData: {
          code: G.invalid_return_type,
          returnTypeError: c
        }
      });
    }
    const i = { errorMap: r.common.contextualErrorMap }, s = r.data;
    return this._def.returns instanceof Fi ? Yt(async (...a) => {
      const c = new Cr([]), u = await this._def.args.parseAsync(a, i).catch((h) => {
        throw c.addIssue(n(a, h)), c;
      }), f = await s(...u);
      return await this._def.returns._def.type.parseAsync(f, i).catch((h) => {
        throw c.addIssue(o(f, h)), c;
      });
    }) : Yt((...a) => {
      const c = this._def.args.safeParse(a, i);
      if (!c.success)
        throw new Cr([n(a, c.error)]);
      const u = s(...c.data), f = this._def.returns.safeParse(u, i);
      if (!f.success)
        throw new Cr([o(u, f.error)]);
      return f.data;
    });
  }
  parameters() {
    return this._def.args;
  }
  returnType() {
    return this._def.returns;
  }
  args(...t) {
    return new Oi({
      ...this._def,
      args: cn.create(t).rest(Fo.create())
    });
  }
  returns(t) {
    return new Oi({
      ...this._def,
      returns: t
    });
  }
  implement(t) {
    return this.parse(t);
  }
  strictImplement(t) {
    return this.parse(t);
  }
  static create(t, r, n) {
    return new Oi({
      args: t || cn.create([]).rest(Fo.create()),
      returns: r || Fo.create(),
      typeName: ge.ZodFunction,
      ...ke(n)
    });
  }
}
class zs extends $e {
  get schema() {
    return this._def.getter();
  }
  _parse(t) {
    const { ctx: r } = this._processInputParams(t);
    return this._def.getter()._parse({ data: r.data, path: r.path, parent: r });
  }
}
zs.create = (e, t) => new zs({
  getter: e,
  typeName: ge.ZodLazy,
  ...ke(t)
});
class js extends $e {
  _parse(t) {
    if (t.data !== this._def.value) {
      const r = this._getOrReturnCtx(t);
      return ee(r, {
        received: r.data,
        code: G.invalid_literal,
        expected: this._def.value
      }), ve;
    }
    return { status: "valid", value: t.data };
  }
  get value() {
    return this._def.value;
  }
}
js.create = (e, t) => new js({
  value: e,
  typeName: ge.ZodLiteral,
  ...ke(t)
});
function uy(e, t) {
  return new vo({
    values: e,
    typeName: ge.ZodEnum,
    ...ke(t)
  });
}
class vo extends $e {
  _parse(t) {
    if (typeof t.data != "string") {
      const r = this._getOrReturnCtx(t), n = this._def.values;
      return ee(r, {
        expected: ze.joinValues(n),
        received: r.parsedType,
        code: G.invalid_type
      }), ve;
    }
    if (this._def.values.indexOf(t.data) === -1) {
      const r = this._getOrReturnCtx(t), n = this._def.values;
      return ee(r, {
        received: r.data,
        code: G.invalid_enum_value,
        options: n
      }), ve;
    }
    return Yt(t.data);
  }
  get options() {
    return this._def.values;
  }
  get enum() {
    const t = {};
    for (const r of this._def.values)
      t[r] = r;
    return t;
  }
  get Values() {
    const t = {};
    for (const r of this._def.values)
      t[r] = r;
    return t;
  }
  get Enum() {
    const t = {};
    for (const r of this._def.values)
      t[r] = r;
    return t;
  }
  extract(t) {
    return vo.create(t);
  }
  exclude(t) {
    return vo.create(this.options.filter((r) => !t.includes(r)));
  }
}
vo.create = uy;
class Ms extends $e {
  _parse(t) {
    const r = ze.getValidEnumValues(this._def.values), n = this._getOrReturnCtx(t);
    if (n.parsedType !== Q.string && n.parsedType !== Q.number) {
      const o = ze.objectValues(r);
      return ee(n, {
        expected: ze.joinValues(o),
        received: n.parsedType,
        code: G.invalid_type
      }), ve;
    }
    if (r.indexOf(t.data) === -1) {
      const o = ze.objectValues(r);
      return ee(n, {
        received: n.data,
        code: G.invalid_enum_value,
        options: o
      }), ve;
    }
    return Yt(t.data);
  }
  get enum() {
    return this._def.values;
  }
}
Ms.create = (e, t) => new Ms({
  values: e,
  typeName: ge.ZodNativeEnum,
  ...ke(t)
});
class Fi extends $e {
  unwrap() {
    return this._def.type;
  }
  _parse(t) {
    const { ctx: r } = this._processInputParams(t);
    if (r.parsedType !== Q.promise && r.common.async === !1)
      return ee(r, {
        code: G.invalid_type,
        expected: Q.promise,
        received: r.parsedType
      }), ve;
    const n = r.parsedType === Q.promise ? r.data : Promise.resolve(r.data);
    return Yt(n.then((o) => this._def.type.parseAsync(o, {
      path: r.path,
      errorMap: r.common.contextualErrorMap
    })));
  }
}
Fi.create = (e, t) => new Fi({
  type: e,
  typeName: ge.ZodPromise,
  ...ke(t)
});
class zr extends $e {
  innerType() {
    return this._def.schema;
  }
  sourceType() {
    return this._def.schema._def.typeName === ge.ZodEffects ? this._def.schema.sourceType() : this._def.schema;
  }
  _parse(t) {
    const { status: r, ctx: n } = this._processInputParams(t), o = this._def.effect || null;
    if (o.type === "preprocess") {
      const s = o.transform(n.data);
      return n.common.async ? Promise.resolve(s).then((a) => this._def.schema._parseAsync({
        data: a,
        path: n.path,
        parent: n
      })) : this._def.schema._parseSync({
        data: s,
        path: n.path,
        parent: n
      });
    }
    const i = {
      addIssue: (s) => {
        ee(n, s), s.fatal ? r.abort() : r.dirty();
      },
      get path() {
        return n.path;
      }
    };
    if (i.addIssue = i.addIssue.bind(i), o.type === "refinement") {
      const s = (a) => {
        const c = o.refinement(a, i);
        if (n.common.async)
          return Promise.resolve(c);
        if (c instanceof Promise)
          throw new Error("Async refinement encountered during synchronous parse operation. Use .parseAsync instead.");
        return a;
      };
      if (n.common.async === !1) {
        const a = this._def.schema._parseSync({
          data: n.data,
          path: n.path,
          parent: n
        });
        return a.status === "aborted" ? ve : (a.status === "dirty" && r.dirty(), s(a.value), { status: r.value, value: a.value });
      } else
        return this._def.schema._parseAsync({ data: n.data, path: n.path, parent: n }).then((a) => a.status === "aborted" ? ve : (a.status === "dirty" && r.dirty(), s(a.value).then(() => ({ status: r.value, value: a.value }))));
    }
    if (o.type === "transform")
      if (n.common.async === !1) {
        const s = this._def.schema._parseSync({
          data: n.data,
          path: n.path,
          parent: n
        });
        if (!Sc(s))
          return s;
        const a = o.transform(s.value, i);
        if (a instanceof Promise)
          throw new Error("Asynchronous transform encountered during synchronous parse operation. Use .parseAsync instead.");
        return { status: r.value, value: a };
      } else
        return this._def.schema._parseAsync({ data: n.data, path: n.path, parent: n }).then((s) => Sc(s) ? Promise.resolve(o.transform(s.value, i)).then((a) => ({ status: r.value, value: a })) : s);
    ze.assertNever(o);
  }
}
zr.create = (e, t, r) => new zr({
  schema: e,
  typeName: ge.ZodEffects,
  effect: t,
  ...ke(r)
});
zr.createWithPreprocess = (e, t, r) => new zr({
  schema: t,
  effect: { type: "preprocess", transform: e },
  typeName: ge.ZodEffects,
  ...ke(r)
});
class An extends $e {
  _parse(t) {
    return this._getType(t) === Q.undefined ? Yt(void 0) : this._def.innerType._parse(t);
  }
  unwrap() {
    return this._def.innerType;
  }
}
An.create = (e, t) => new An({
  innerType: e,
  typeName: ge.ZodOptional,
  ...ke(t)
});
class Yo extends $e {
  _parse(t) {
    return this._getType(t) === Q.null ? Yt(null) : this._def.innerType._parse(t);
  }
  unwrap() {
    return this._def.innerType;
  }
}
Yo.create = (e, t) => new Yo({
  innerType: e,
  typeName: ge.ZodNullable,
  ...ke(t)
});
class Ds extends $e {
  _parse(t) {
    const { ctx: r } = this._processInputParams(t);
    let n = r.data;
    return r.parsedType === Q.undefined && (n = this._def.defaultValue()), this._def.innerType._parse({
      data: n,
      path: r.path,
      parent: r
    });
  }
  removeDefault() {
    return this._def.innerType;
  }
}
Ds.create = (e, t) => new Ds({
  innerType: e,
  typeName: ge.ZodDefault,
  defaultValue: typeof t.default == "function" ? t.default : () => t.default,
  ...ke(t)
});
class Pc extends $e {
  _parse(t) {
    const { ctx: r } = this._processInputParams(t), n = {
      ...r,
      common: {
        ...r.common,
        issues: []
      }
    }, o = this._def.innerType._parse({
      data: n.data,
      path: n.path,
      parent: {
        ...n
      }
    });
    return kc(o) ? o.then((i) => ({
      status: "valid",
      value: i.status === "valid" ? i.value : this._def.catchValue({
        get error() {
          return new Cr(n.common.issues);
        },
        input: n.data
      })
    })) : {
      status: "valid",
      value: o.status === "valid" ? o.value : this._def.catchValue({
        get error() {
          return new Cr(n.common.issues);
        },
        input: n.data
      })
    };
  }
  removeCatch() {
    return this._def.innerType;
  }
}
Pc.create = (e, t) => new Pc({
  innerType: e,
  typeName: ge.ZodCatch,
  catchValue: typeof t.catch == "function" ? t.catch : () => t.catch,
  ...ke(t)
});
class Oc extends $e {
  _parse(t) {
    if (this._getType(t) !== Q.nan) {
      const n = this._getOrReturnCtx(t);
      return ee(n, {
        code: G.invalid_type,
        expected: Q.nan,
        received: n.parsedType
      }), ve;
    }
    return { status: "valid", value: t.data };
  }
}
Oc.create = (e) => new Oc({
  typeName: ge.ZodNaN,
  ...ke(e)
});
const uI = Symbol("zod_brand");
class ly extends $e {
  _parse(t) {
    const { ctx: r } = this._processInputParams(t), n = r.data;
    return this._def.type._parse({
      data: n,
      path: r.path,
      parent: r
    });
  }
  unwrap() {
    return this._def.type;
  }
}
class sa extends $e {
  _parse(t) {
    const { status: r, ctx: n } = this._processInputParams(t);
    if (n.common.async)
      return (async () => {
        const i = await this._def.in._parseAsync({
          data: n.data,
          path: n.path,
          parent: n
        });
        return i.status === "aborted" ? ve : i.status === "dirty" ? (r.dirty(), cy(i.value)) : this._def.out._parseAsync({
          data: i.value,
          path: n.path,
          parent: n
        });
      })();
    {
      const o = this._def.in._parseSync({
        data: n.data,
        path: n.path,
        parent: n
      });
      return o.status === "aborted" ? ve : o.status === "dirty" ? (r.dirty(), {
        status: "dirty",
        value: o.value
      }) : this._def.out._parseSync({
        data: o.value,
        path: n.path,
        parent: n
      });
    }
  }
  static create(t, r) {
    return new sa({
      in: t,
      out: r,
      typeName: ge.ZodPipeline
    });
  }
}
const fy = (e, t = {}, r) => e ? Di.create().superRefine((n, o) => {
  var i, s;
  if (!e(n)) {
    const a = typeof t == "function" ? t(n) : typeof t == "string" ? { message: t } : t, c = (s = (i = a.fatal) !== null && i !== void 0 ? i : r) !== null && s !== void 0 ? s : !0, u = typeof a == "string" ? { message: a } : a;
    o.addIssue({ code: "custom", ...u, fatal: c });
  }
}) : Di.create(), lI = {
  object: tt.lazycreate
};
var ge;
(function(e) {
  e.ZodString = "ZodString", e.ZodNumber = "ZodNumber", e.ZodNaN = "ZodNaN", e.ZodBigInt = "ZodBigInt", e.ZodBoolean = "ZodBoolean", e.ZodDate = "ZodDate", e.ZodSymbol = "ZodSymbol", e.ZodUndefined = "ZodUndefined", e.ZodNull = "ZodNull", e.ZodAny = "ZodAny", e.ZodUnknown = "ZodUnknown", e.ZodNever = "ZodNever", e.ZodVoid = "ZodVoid", e.ZodArray = "ZodArray", e.ZodObject = "ZodObject", e.ZodUnion = "ZodUnion", e.ZodDiscriminatedUnion = "ZodDiscriminatedUnion", e.ZodIntersection = "ZodIntersection", e.ZodTuple = "ZodTuple", e.ZodRecord = "ZodRecord", e.ZodMap = "ZodMap", e.ZodSet = "ZodSet", e.ZodFunction = "ZodFunction", e.ZodLazy = "ZodLazy", e.ZodLiteral = "ZodLiteral", e.ZodEnum = "ZodEnum", e.ZodEffects = "ZodEffects", e.ZodNativeEnum = "ZodNativeEnum", e.ZodOptional = "ZodOptional", e.ZodNullable = "ZodNullable", e.ZodDefault = "ZodDefault", e.ZodCatch = "ZodCatch", e.ZodPromise = "ZodPromise", e.ZodBranded = "ZodBranded", e.ZodPipeline = "ZodPipeline";
})(ge || (ge = {}));
const fI = (e, t = {
  message: `Input not instance of ${e.name}`
}) => fy((r) => r instanceof e, t), dy = $r.create, hy = yo.create, dI = Oc.create, hI = wo.create, py = Ns.create, pI = Zo.create, gI = Ac.create, mI = Us.create, bI = Cs.create, yI = Di.create, wI = Fo.create, vI = Bn.create, xI = Tc.create, EI = Hr.create, _I = tt.create, SI = tt.strictCreate, kI = Hs.create, AI = cu.create, TI = Rs.create, II = cn.create, PI = Ls.create, OI = Ic.create, BI = Xo.create, $I = Oi.create, NI = zs.create, UI = js.create, CI = vo.create, HI = Ms.create, RI = Fi.create, Zp = zr.create, LI = An.create, zI = Yo.create, jI = zr.createWithPreprocess, MI = sa.create, DI = () => dy().optional(), FI = () => hy().optional(), KI = () => py().optional(), qI = {
  string: (e) => $r.create({ ...e, coerce: !0 }),
  number: (e) => yo.create({ ...e, coerce: !0 }),
  boolean: (e) => Ns.create({
    ...e,
    coerce: !0
  }),
  bigint: (e) => wo.create({ ...e, coerce: !0 }),
  date: (e) => Zo.create({ ...e, coerce: !0 })
}, VI = ve;
var Zt = /* @__PURE__ */ Object.freeze({
  __proto__: null,
  defaultErrorMap: $s,
  setErrorMap: X6,
  getErrorMap: Ec,
  makeIssue: _c,
  EMPTY_PATH: Y6,
  addIssueToContext: ee,
  ParseStatus: qt,
  INVALID: ve,
  DIRTY: cy,
  OK: Yt,
  isAborted: _f,
  isDirty: Sf,
  isValid: Sc,
  isAsync: kc,
  get util() {
    return ze;
  },
  get objectUtil() {
    return Ef;
  },
  ZodParsedType: Q,
  getParsedType: fo,
  ZodType: $e,
  ZodString: $r,
  ZodNumber: yo,
  ZodBigInt: wo,
  ZodBoolean: Ns,
  ZodDate: Zo,
  ZodSymbol: Ac,
  ZodUndefined: Us,
  ZodNull: Cs,
  ZodAny: Di,
  ZodUnknown: Fo,
  ZodNever: Bn,
  ZodVoid: Tc,
  ZodArray: Hr,
  ZodObject: tt,
  ZodUnion: Hs,
  ZodDiscriminatedUnion: cu,
  ZodIntersection: Rs,
  ZodTuple: cn,
  ZodRecord: Ls,
  ZodMap: Ic,
  ZodSet: Xo,
  ZodFunction: Oi,
  ZodLazy: zs,
  ZodLiteral: js,
  ZodEnum: vo,
  ZodNativeEnum: Ms,
  ZodPromise: Fi,
  ZodEffects: zr,
  ZodTransformer: zr,
  ZodOptional: An,
  ZodNullable: Yo,
  ZodDefault: Ds,
  ZodCatch: Pc,
  ZodNaN: Oc,
  BRAND: uI,
  ZodBranded: ly,
  ZodPipeline: sa,
  custom: fy,
  Schema: $e,
  ZodSchema: $e,
  late: lI,
  get ZodFirstPartyTypeKind() {
    return ge;
  },
  coerce: qI,
  any: yI,
  array: EI,
  bigint: hI,
  boolean: py,
  date: pI,
  discriminatedUnion: AI,
  effect: Zp,
  enum: CI,
  function: $I,
  instanceof: fI,
  intersection: TI,
  lazy: NI,
  literal: UI,
  map: OI,
  nan: dI,
  nativeEnum: HI,
  never: vI,
  null: bI,
  nullable: zI,
  number: hy,
  object: _I,
  oboolean: KI,
  onumber: FI,
  optional: LI,
  ostring: DI,
  pipeline: MI,
  preprocess: jI,
  promise: RI,
  record: PI,
  set: BI,
  strictObject: SI,
  string: dy,
  symbol: gI,
  transformer: Zp,
  tuple: II,
  undefined: mI,
  union: kI,
  unknown: wI,
  void: xI,
  NEVER: VI,
  ZodIssueCode: G,
  quotelessJson: Z6,
  ZodError: Cr
});
const gy = Zt.string().regex(/^[a-fA-F0-9]$/), WI = Zt.string().regex(/^[a-fA-F0-9]{64}$/), Ki = Zt.number().min(0).max(4294967295), GI = Zt.bigint(), my = Zt.instanceof(Uint8Array), ZI = Zt.union([gy, Ki, Zt.string(), my]).array(), Qd = Zt.union([ZI, gy, my]), XI = Zt.array(Qd), by = Zt.object({
  value: Zt.union([Ki, GI]),
  scriptPubKey: Qd
}), YI = Zt.object({
  txid: WI,
  vout: Ki,
  scriptSig: Qd,
  sequence: Ki,
  prevout: by.optional(),
  witness: XI
});
Zt.object({
  version: Ki,
  vin: Zt.array(YI),
  vout: Zt.array(by),
  locktime: Ki
});
var at = {}, eh = {};
const JI = {}, QI = /* @__PURE__ */ Object.freeze(/* @__PURE__ */ Object.defineProperty({
  __proto__: null,
  default: JI
}, Symbol.toStringTag, { value: "Module" })), yy = /* @__PURE__ */ X1(QI);
(function(e) {
  /*! noble-secp256k1 - MIT License (c) 2019 Paul Miller (paulmillr.com) */
  Object.defineProperty(e, "__esModule", { value: !0 }), e.utils = e.schnorr = e.verify = e.signSync = e.sign = e.getSharedSecret = e.recoverPublicKey = e.getPublicKey = e.Signature = e.Point = e.CURVE = void 0;
  const t = yy, r = BigInt(0), n = BigInt(1), o = BigInt(2), i = BigInt(3), s = BigInt(8), a = Object.freeze({
    a: r,
    b: BigInt(7),
    P: BigInt("0xfffffffffffffffffffffffffffffffffffffffffffffffffffffffefffffc2f"),
    n: BigInt("0xfffffffffffffffffffffffffffffffebaaedce6af48a03bbfd25e8cd0364141"),
    h: n,
    Gx: BigInt("55066263022277343669578718895168534326250603453777594175500187360389116729240"),
    Gy: BigInt("32670510020758816978083085130507043184471273380659243275938904335757337482424"),
    beta: BigInt("0x7ae96a2b657c07106e64479eac3434e99cf0497512f58995c1396c28719501ee")
  });
  e.CURVE = a;
  const c = (A, E) => (A + E / o) / E, u = {
    beta: BigInt("0x7ae96a2b657c07106e64479eac3434e99cf0497512f58995c1396c28719501ee"),
    splitScalar(A) {
      const { n: E } = a, k = BigInt("0x3086d221a7d46bcde86c90e49284eb15"), B = -n * BigInt("0xe4437ed6010e88286f547fa90abfe4c3"), z = BigInt("0x114ca50f7a8e2f3f657c1108d9d44cfd8"), F = k, X = BigInt("0x100000000000000000000000000000000"), Y = c(F * A, E), de = c(-B * A, E);
      let ce = q(A - Y * k - de * z, E), xe = q(-Y * B - de * F, E);
      const Ue = ce > X, He = xe > X;
      if (Ue && (ce = E - ce), He && (xe = E - xe), ce > X || xe > X)
        throw new Error("splitScalarEndo: Endomorphism failed, k=" + A);
      return { k1neg: Ue, k1: ce, k2neg: He, k2: xe };
    }
  }, f = 32, l = 32, h = 32, m = f + 1, b = 2 * f + 1;
  function y(A) {
    const { a: E, b: k } = a, B = q(A * A), z = q(B * A);
    return q(z + E * A + k);
  }
  const g = a.a === r;
  class x extends Error {
    constructor(E) {
      super(E);
    }
  }
  function S(A) {
    if (!(A instanceof v))
      throw new TypeError("JacobianPoint expected");
  }
  class v {
    constructor(E, k, B) {
      this.x = E, this.y = k, this.z = B;
    }
    static fromAffine(E) {
      if (!(E instanceof P))
        throw new TypeError("JacobianPoint#fromAffine: expected Point");
      return E.equals(P.ZERO) ? v.ZERO : new v(E.x, E.y, n);
    }
    static toAffineBatch(E) {
      const k = Ct(E.map((B) => B.z));
      return E.map((B, z) => B.toAffine(k[z]));
    }
    static normalizeZ(E) {
      return v.toAffineBatch(E).map(v.fromAffine);
    }
    equals(E) {
      S(E);
      const { x: k, y: B, z } = this, { x: F, y: X, z: Y } = E, de = q(z * z), ce = q(Y * Y), xe = q(k * ce), Ue = q(F * de), He = q(q(B * Y) * ce), vt = q(q(X * z) * de);
      return xe === Ue && He === vt;
    }
    negate() {
      return new v(this.x, q(-this.y), this.z);
    }
    double() {
      const { x: E, y: k, z: B } = this, z = q(E * E), F = q(k * k), X = q(F * F), Y = E + F, de = q(o * (q(Y * Y) - z - X)), ce = q(i * z), xe = q(ce * ce), Ue = q(xe - o * de), He = q(ce * (de - Ue) - s * X), vt = q(o * k * B);
      return new v(Ue, He, vt);
    }
    add(E) {
      S(E);
      const { x: k, y: B, z } = this, { x: F, y: X, z: Y } = E;
      if (F === r || X === r)
        return this;
      if (k === r || B === r)
        return E;
      const de = q(z * z), ce = q(Y * Y), xe = q(k * ce), Ue = q(F * de), He = q(q(B * Y) * ce), vt = q(q(X * z) * de), bt = q(Ue - xe), Tr = q(vt - He);
      if (bt === r)
        return Tr === r ? this.double() : v.ZERO;
      const li = q(bt * bt), fi = q(bt * li), di = q(xe * li), wa = q(Tr * Tr - fi - o * di), Mu = q(Tr * (di - wa) - He * fi), ss = q(z * Y * bt);
      return new v(wa, Mu, ss);
    }
    subtract(E) {
      return this.add(E.negate());
    }
    multiplyUnsafe(E) {
      const k = v.ZERO;
      if (typeof E == "bigint" && E === r)
        return k;
      let B = Ae(E);
      if (B === n)
        return this;
      if (!g) {
        let Ue = k, He = this;
        for (; B > r; )
          B & n && (Ue = Ue.add(He)), He = He.double(), B >>= n;
        return Ue;
      }
      let { k1neg: z, k1: F, k2neg: X, k2: Y } = u.splitScalar(B), de = k, ce = k, xe = this;
      for (; F > r || Y > r; )
        F & n && (de = de.add(xe)), Y & n && (ce = ce.add(xe)), xe = xe.double(), F >>= n, Y >>= n;
      return z && (de = de.negate()), X && (ce = ce.negate()), ce = new v(q(ce.x * u.beta), ce.y, ce.z), de.add(ce);
    }
    precomputeWindow(E) {
      const k = g ? 128 / E + 1 : 256 / E + 1, B = [];
      let z = this, F = z;
      for (let X = 0; X < k; X++) {
        F = z, B.push(F);
        for (let Y = 1; Y < 2 ** (E - 1); Y++)
          F = F.add(z), B.push(F);
        z = F.double();
      }
      return B;
    }
    wNAF(E, k) {
      !k && this.equals(v.BASE) && (k = P.BASE);
      const B = k && k._WINDOW_SIZE || 1;
      if (256 % B)
        throw new Error("Point#wNAF: Invalid precomputation window, must be power of 2");
      let z = k && I.get(k);
      z || (z = this.precomputeWindow(B), k && B !== 1 && (z = v.normalizeZ(z), I.set(k, z)));
      let F = v.ZERO, X = v.BASE;
      const Y = 1 + (g ? 128 / B : 256 / B), de = 2 ** (B - 1), ce = BigInt(2 ** B - 1), xe = 2 ** B, Ue = BigInt(B);
      for (let He = 0; He < Y; He++) {
        const vt = He * de;
        let bt = Number(E & ce);
        E >>= Ue, bt > de && (bt -= xe, E += n);
        const Tr = vt, li = vt + Math.abs(bt) - 1, fi = He % 2 !== 0, di = bt < 0;
        bt === 0 ? X = X.add(T(fi, z[Tr])) : F = F.add(T(di, z[li]));
      }
      return { p: F, f: X };
    }
    multiply(E, k) {
      let B = Ae(E), z, F;
      if (g) {
        const { k1neg: X, k1: Y, k2neg: de, k2: ce } = u.splitScalar(B);
        let { p: xe, f: Ue } = this.wNAF(Y, k), { p: He, f: vt } = this.wNAF(ce, k);
        xe = T(X, xe), He = T(de, He), He = new v(q(He.x * u.beta), He.y, He.z), z = xe.add(He), F = Ue.add(vt);
      } else {
        const { p: X, f: Y } = this.wNAF(B, k);
        z = X, F = Y;
      }
      return v.normalizeZ([z, F])[0];
    }
    toAffine(E) {
      const { x: k, y: B, z } = this, F = this.equals(v.ZERO);
      E == null && (E = F ? s : Xe(z));
      const X = E, Y = q(X * X), de = q(Y * X), ce = q(k * Y), xe = q(B * de), Ue = q(z * X);
      if (F)
        return P.ZERO;
      if (Ue !== n)
        throw new Error("invZ was invalid");
      return new P(ce, xe);
    }
  }
  v.BASE = new v(a.Gx, a.Gy, n), v.ZERO = new v(r, n, r);
  function T(A, E) {
    const k = E.negate();
    return A ? k : E;
  }
  const I = /* @__PURE__ */ new WeakMap();
  class P {
    constructor(E, k) {
      this.x = E, this.y = k;
    }
    _setWindowSize(E) {
      this._WINDOW_SIZE = E, I.delete(this);
    }
    hasEvenY() {
      return this.y % o === r;
    }
    static fromCompressedHex(E) {
      const k = E.length === 32, B = pe(k ? E : E.subarray(1));
      if (!mt(B))
        throw new Error("Point is not on curve");
      const z = y(B);
      let F = Ut(z);
      const X = (F & n) === n;
      k ? X && (F = q(-F)) : (E[0] & 1) === 1 !== X && (F = q(-F));
      const Y = new P(B, F);
      return Y.assertValidity(), Y;
    }
    static fromUncompressedHex(E) {
      const k = pe(E.subarray(1, f + 1)), B = pe(E.subarray(f + 1, f * 2 + 1)), z = new P(k, B);
      return z.assertValidity(), z;
    }
    static fromHex(E) {
      const k = se(E), B = k.length, z = k[0];
      if (B === f)
        return this.fromCompressedHex(k);
      if (B === m && (z === 2 || z === 3))
        return this.fromCompressedHex(k);
      if (B === b && z === 4)
        return this.fromUncompressedHex(k);
      throw new Error(`Point.fromHex: received invalid point. Expected 32-${m} compressed bytes or ${b} uncompressed bytes, not ${B}`);
    }
    static fromPrivateKey(E) {
      return P.BASE.multiply(gr(E));
    }
    static fromSignature(E, k, B) {
      const { r: z, s: F } = ga(k);
      if (![0, 1, 2, 3].includes(B))
        throw new Error("Cannot recover: invalid recovery bit");
      const X = lt(se(E)), { n: Y } = a, de = B === 2 || B === 3 ? z + Y : z, ce = Xe(de, Y), xe = q(-X * ce, Y), Ue = q(F * ce, Y), He = B & 1 ? "03" : "02", vt = P.fromHex(He + $(de)), bt = P.BASE.multiplyAndAddUnsafe(vt, xe, Ue);
      if (!bt)
        throw new Error("Cannot recover signature: point at infinify");
      return bt.assertValidity(), bt;
    }
    toRawBytes(E = !1) {
      return oe(this.toHex(E));
    }
    toHex(E = !1) {
      const k = $(this.x);
      return E ? `${this.hasEvenY() ? "02" : "03"}${k}` : `04${k}${$(this.y)}`;
    }
    toHexX() {
      return this.toHex(!0).slice(2);
    }
    toRawX() {
      return this.toRawBytes(!0).slice(1);
    }
    assertValidity() {
      const E = "Point is not on elliptic curve", { x: k, y: B } = this;
      if (!mt(k) || !mt(B))
        throw new Error(E);
      const z = q(B * B), F = y(k);
      if (q(z - F) !== r)
        throw new Error(E);
    }
    equals(E) {
      return this.x === E.x && this.y === E.y;
    }
    negate() {
      return new P(this.x, q(-this.y));
    }
    double() {
      return v.fromAffine(this).double().toAffine();
    }
    add(E) {
      return v.fromAffine(this).add(v.fromAffine(E)).toAffine();
    }
    subtract(E) {
      return this.add(E.negate());
    }
    multiply(E) {
      return v.fromAffine(this).multiply(E, this).toAffine();
    }
    multiplyAndAddUnsafe(E, k, B) {
      const z = v.fromAffine(this), F = k === r || k === n || this !== P.BASE ? z.multiplyUnsafe(k) : z.multiply(k), X = v.fromAffine(E).multiplyUnsafe(B), Y = F.add(X);
      return Y.equals(v.ZERO) ? void 0 : Y.toAffine();
    }
  }
  e.Point = P, P.BASE = new P(a.Gx, a.Gy), P.ZERO = new P(r, r);
  function H(A) {
    return Number.parseInt(A[0], 16) >= 8 ? "00" + A : A;
  }
  function j(A) {
    if (A.length < 2 || A[0] !== 2)
      throw new Error(`Invalid signature integer tag: ${W(A)}`);
    const E = A[1], k = A.subarray(2, E + 2);
    if (!E || k.length !== E)
      throw new Error("Invalid signature integer: wrong length");
    if (k[0] === 0 && k[1] <= 127)
      throw new Error("Invalid signature integer: trailing length");
    return { data: pe(k), left: A.subarray(E + 2) };
  }
  function V(A) {
    if (A.length < 2 || A[0] != 48)
      throw new Error(`Invalid signature tag: ${W(A)}`);
    if (A[1] !== A.length - 2)
      throw new Error("Invalid signature: incorrect length");
    const { data: E, left: k } = j(A.subarray(2)), { data: B, left: z } = j(k);
    if (z.length)
      throw new Error(`Invalid signature: left bytes after parsing: ${W(z)}`);
    return { r: E, s: B };
  }
  class te {
    constructor(E, k) {
      this.r = E, this.s = k, this.assertValidity();
    }
    static fromCompact(E) {
      const k = E instanceof Uint8Array, B = "Signature.fromCompact";
      if (typeof E != "string" && !k)
        throw new TypeError(`${B}: Expected string or Uint8Array`);
      const z = k ? W(E) : E;
      if (z.length !== 128)
        throw new Error(`${B}: Expected 64-byte hex`);
      return new te(re(z.slice(0, 64)), re(z.slice(64, 128)));
    }
    static fromDER(E) {
      const k = E instanceof Uint8Array;
      if (typeof E != "string" && !k)
        throw new TypeError("Signature.fromDER: Expected string or Uint8Array");
      const { r: B, s: z } = V(k ? E : oe(E));
      return new te(B, z);
    }
    static fromHex(E) {
      return this.fromDER(E);
    }
    assertValidity() {
      const { r: E, s: k } = this;
      if (!Le(E))
        throw new Error("Invalid Signature: r must be 0 < r < n");
      if (!Le(k))
        throw new Error("Invalid Signature: s must be 0 < s < n");
    }
    hasHighS() {
      const E = a.n >> n;
      return this.s > E;
    }
    normalizeS() {
      return this.hasHighS() ? new te(this.r, q(-this.s, a.n)) : this;
    }
    toDERRawBytes() {
      return oe(this.toDERHex());
    }
    toDERHex() {
      const E = H(K(this.s)), k = H(K(this.r)), B = E.length / 2, z = k.length / 2, F = K(B), X = K(z);
      return `30${K(z + B + 4)}02${X}${k}02${F}${E}`;
    }
    toRawBytes() {
      return this.toDERRawBytes();
    }
    toHex() {
      return this.toDERHex();
    }
    toCompactRawBytes() {
      return oe(this.toCompactHex());
    }
    toCompactHex() {
      return $(this.r) + $(this.s);
    }
  }
  e.Signature = te;
  function Z(...A) {
    if (!A.every((B) => B instanceof Uint8Array))
      throw new Error("Uint8Array list expected");
    if (A.length === 1)
      return A[0];
    const E = A.reduce((B, z) => B + z.length, 0), k = new Uint8Array(E);
    for (let B = 0, z = 0; B < A.length; B++) {
      const F = A[B];
      k.set(F, z), z += F.length;
    }
    return k;
  }
  const N = Array.from({ length: 256 }, (A, E) => E.toString(16).padStart(2, "0"));
  function W(A) {
    if (!(A instanceof Uint8Array))
      throw new Error("Expected Uint8Array");
    let E = "";
    for (let k = 0; k < A.length; k++)
      E += N[A[k]];
    return E;
  }
  const D = BigInt("0x10000000000000000000000000000000000000000000000000000000000000000");
  function $(A) {
    if (typeof A != "bigint")
      throw new Error("Expected bigint");
    if (!(r <= A && A < D))
      throw new Error("Expected number 0 <= n < 2^256");
    return A.toString(16).padStart(64, "0");
  }
  function R(A) {
    const E = oe($(A));
    if (E.length !== 32)
      throw new Error("Error: expected 32 bytes");
    return E;
  }
  function K(A) {
    const E = A.toString(16);
    return E.length & 1 ? `0${E}` : E;
  }
  function re(A) {
    if (typeof A != "string")
      throw new TypeError("hexToNumber: expected string, got " + typeof A);
    return BigInt(`0x${A}`);
  }
  function oe(A) {
    if (typeof A != "string")
      throw new TypeError("hexToBytes: expected string, got " + typeof A);
    if (A.length % 2)
      throw new Error("hexToBytes: received invalid unpadded hex" + A.length);
    const E = new Uint8Array(A.length / 2);
    for (let k = 0; k < E.length; k++) {
      const B = k * 2, z = A.slice(B, B + 2), F = Number.parseInt(z, 16);
      if (Number.isNaN(F) || F < 0)
        throw new Error("Invalid byte sequence");
      E[k] = F;
    }
    return E;
  }
  function pe(A) {
    return re(W(A));
  }
  function se(A) {
    return A instanceof Uint8Array ? Uint8Array.from(A) : oe(A);
  }
  function Ae(A) {
    if (typeof A == "number" && Number.isSafeInteger(A) && A > 0)
      return BigInt(A);
    if (typeof A == "bigint" && Le(A))
      return A;
    throw new TypeError("Expected valid private scalar: 0 < scalar < curve.n");
  }
  function q(A, E = a.P) {
    const k = A % E;
    return k >= r ? k : E + k;
  }
  function Ce(A, E) {
    const { P: k } = a;
    let B = A;
    for (; E-- > r; )
      B *= B, B %= k;
    return B;
  }
  function Ut(A) {
    const { P: E } = a, k = BigInt(6), B = BigInt(11), z = BigInt(22), F = BigInt(23), X = BigInt(44), Y = BigInt(88), de = A * A * A % E, ce = de * de * A % E, xe = Ce(ce, i) * ce % E, Ue = Ce(xe, i) * ce % E, He = Ce(Ue, o) * de % E, vt = Ce(He, B) * He % E, bt = Ce(vt, z) * vt % E, Tr = Ce(bt, X) * bt % E, li = Ce(Tr, Y) * Tr % E, fi = Ce(li, X) * bt % E, di = Ce(fi, i) * ce % E, wa = Ce(di, F) * vt % E, Mu = Ce(wa, k) * de % E, ss = Ce(Mu, o);
    if (ss * ss % E !== A)
      throw new Error("Cannot find square root");
    return ss;
  }
  function Xe(A, E = a.P) {
    if (A === r || E <= r)
      throw new Error(`invert: expected positive integers, got n=${A} mod=${E}`);
    let k = q(A, E), B = E, z = r, F = n;
    for (; k !== r; ) {
      const Y = B / k, de = B % k, ce = z - F * Y;
      B = k, k = de, z = F, F = ce;
    }
    if (B !== n)
      throw new Error("invert: does not exist");
    return q(z, E);
  }
  function Ct(A, E = a.P) {
    const k = new Array(A.length), B = A.reduce((F, X, Y) => X === r ? F : (k[Y] = F, q(F * X, E)), n), z = Xe(B, E);
    return A.reduceRight((F, X, Y) => X === r ? F : (k[Y] = q(F * k[Y], E), q(F * X, E)), z), k;
  }
  function gt(A) {
    const E = A.length * 8 - l * 8, k = pe(A);
    return E > 0 ? k >> BigInt(E) : k;
  }
  function lt(A, E = !1) {
    const k = gt(A);
    if (E)
      return k;
    const { n: B } = a;
    return k >= B ? k - B : k;
  }
  let wt, Ht;
  class Ye {
    constructor(E, k) {
      if (this.hashLen = E, this.qByteLen = k, typeof E != "number" || E < 2)
        throw new Error("hashLen must be a number");
      if (typeof k != "number" || k < 2)
        throw new Error("qByteLen must be a number");
      this.v = new Uint8Array(E).fill(1), this.k = new Uint8Array(E).fill(0), this.counter = 0;
    }
    hmac(...E) {
      return e.utils.hmacSha256(this.k, ...E);
    }
    hmacSync(...E) {
      return Ht(this.k, ...E);
    }
    checkSync() {
      if (typeof Ht != "function")
        throw new x("hmacSha256Sync needs to be set");
    }
    incr() {
      if (this.counter >= 1e3)
        throw new Error("Tried 1,000 k values for sign(), all were invalid");
      this.counter += 1;
    }
    async reseed(E = new Uint8Array()) {
      this.k = await this.hmac(this.v, Uint8Array.from([0]), E), this.v = await this.hmac(this.v), E.length !== 0 && (this.k = await this.hmac(this.v, Uint8Array.from([1]), E), this.v = await this.hmac(this.v));
    }
    reseedSync(E = new Uint8Array()) {
      this.checkSync(), this.k = this.hmacSync(this.v, Uint8Array.from([0]), E), this.v = this.hmacSync(this.v), E.length !== 0 && (this.k = this.hmacSync(this.v, Uint8Array.from([1]), E), this.v = this.hmacSync(this.v));
    }
    async generate() {
      this.incr();
      let E = 0;
      const k = [];
      for (; E < this.qByteLen; ) {
        this.v = await this.hmac(this.v);
        const B = this.v.slice();
        k.push(B), E += this.v.length;
      }
      return Z(...k);
    }
    generateSync() {
      this.checkSync(), this.incr();
      let E = 0;
      const k = [];
      for (; E < this.qByteLen; ) {
        this.v = this.hmacSync(this.v);
        const B = this.v.slice();
        k.push(B), E += this.v.length;
      }
      return Z(...k);
    }
  }
  function Le(A) {
    return r < A && A < a.n;
  }
  function mt(A) {
    return r < A && A < a.P;
  }
  function Vr(A, E, k, B = !0) {
    const { n: z } = a, F = lt(A, !0);
    if (!Le(F))
      return;
    const X = Xe(F, z), Y = P.BASE.multiply(F), de = q(Y.x, z);
    if (de === r)
      return;
    const ce = q(X * q(E + k * de, z), z);
    if (ce === r)
      return;
    let xe = new te(de, ce), Ue = (Y.x === xe.r ? 0 : 2) | Number(Y.y & n);
    return B && xe.hasHighS() && (xe = xe.normalizeS(), Ue ^= 1), { sig: xe, recovery: Ue };
  }
  function gr(A) {
    let E;
    if (typeof A == "bigint")
      E = A;
    else if (typeof A == "number" && Number.isSafeInteger(A) && A > 0)
      E = BigInt(A);
    else if (typeof A == "string") {
      if (A.length !== 2 * l)
        throw new Error("Expected 32 bytes of private key");
      E = re(A);
    } else if (A instanceof Uint8Array) {
      if (A.length !== l)
        throw new Error("Expected 32 bytes of private key");
      E = pe(A);
    } else
      throw new TypeError("Expected valid private key");
    if (!Le(E))
      throw new Error("Expected private key: 0 < key < n");
    return E;
  }
  function ko(A) {
    return A instanceof P ? (A.assertValidity(), A) : P.fromHex(A);
  }
  function ga(A) {
    if (A instanceof te)
      return A.assertValidity(), A;
    try {
      return te.fromDER(A);
    } catch {
      return te.fromCompact(A);
    }
  }
  function zu(A, E = !1) {
    return P.fromPrivateKey(A).toRawBytes(E);
  }
  e.getPublicKey = zu;
  function ma(A, E, k, B = !1) {
    return P.fromSignature(A, E, k).toRawBytes(B);
  }
  e.recoverPublicKey = ma;
  function Ao(A) {
    const E = A instanceof Uint8Array, k = typeof A == "string", B = (E || k) && A.length;
    return E ? B === m || B === b : k ? B === m * 2 || B === b * 2 : A instanceof P;
  }
  function mr(A, E, k = !1) {
    if (Ao(A))
      throw new TypeError("getSharedSecret: first arg must be private key");
    if (!Ao(E))
      throw new TypeError("getSharedSecret: second arg must be public key");
    const B = ko(E);
    return B.assertValidity(), B.multiply(gr(A)).toRawBytes(k);
  }
  e.getSharedSecret = mr;
  function ui(A) {
    const E = A.length > f ? A.slice(0, f) : A;
    return pe(E);
  }
  function ju(A) {
    const E = ui(A), k = q(E, a.n);
    return Ar(k < r ? E : k);
  }
  function Ar(A) {
    return R(A);
  }
  function ba(A, E, k) {
    if (A == null)
      throw new Error(`sign: expected valid message hash, not "${A}"`);
    const B = se(A), z = gr(E), F = [Ar(z), ju(B)];
    if (k != null) {
      k === !0 && (k = e.utils.randomBytes(f));
      const de = se(k);
      if (de.length !== f)
        throw new Error(`sign: Expected ${f} bytes of extra data`);
      F.push(de);
    }
    const X = Z(...F), Y = ui(B);
    return { seed: X, m: Y, d: z };
  }
  function w(A, E) {
    const { sig: k, recovery: B } = A, { der: z, recovered: F } = Object.assign({ canonical: !0, der: !0 }, E), X = z ? k.toDERRawBytes() : k.toCompactRawBytes();
    return F ? [X, B] : X;
  }
  async function d(A, E, k = {}) {
    const { seed: B, m: z, d: F } = ba(A, E, k.extraEntropy), X = new Ye(h, l);
    await X.reseed(B);
    let Y;
    for (; !(Y = Vr(await X.generate(), z, F, k.canonical)); )
      await X.reseed();
    return w(Y, k);
  }
  e.sign = d;
  function p(A, E, k = {}) {
    const { seed: B, m: z, d: F } = ba(A, E, k.extraEntropy), X = new Ye(h, l);
    X.reseedSync(B);
    let Y;
    for (; !(Y = Vr(X.generateSync(), z, F, k.canonical)); )
      X.reseedSync();
    return w(Y, k);
  }
  e.signSync = p;
  const _ = { strict: !0 };
  function O(A, E, k, B = _) {
    let z;
    try {
      z = ga(A), E = se(E);
    } catch {
      return !1;
    }
    const { r: F, s: X } = z;
    if (B.strict && z.hasHighS())
      return !1;
    const Y = lt(E);
    let de;
    try {
      de = ko(k);
    } catch {
      return !1;
    }
    const { n: ce } = a, xe = Xe(X, ce), Ue = q(Y * xe, ce), He = q(F * xe, ce), vt = P.BASE.multiplyAndAddUnsafe(de, Ue, He);
    return vt ? q(vt.x, ce) === F : !1;
  }
  e.verify = O;
  function C(A) {
    return q(pe(A), a.n);
  }
  class M {
    constructor(E, k) {
      this.r = E, this.s = k, this.assertValidity();
    }
    static fromHex(E) {
      const k = se(E);
      if (k.length !== 64)
        throw new TypeError(`SchnorrSignature.fromHex: expected 64 bytes, not ${k.length}`);
      const B = pe(k.subarray(0, 32)), z = pe(k.subarray(32, 64));
      return new M(B, z);
    }
    assertValidity() {
      const { r: E, s: k } = this;
      if (!mt(E) || !Le(k))
        throw new Error("Invalid signature");
    }
    toHex() {
      return $(this.r) + $(this.s);
    }
    toRawBytes() {
      return oe(this.toHex());
    }
  }
  function Oe(A) {
    return P.fromPrivateKey(A).toRawX();
  }
  class Ge {
    constructor(E, k, B = e.utils.randomBytes()) {
      if (E == null)
        throw new TypeError(`sign: Expected valid message, not "${E}"`);
      this.m = se(E);
      const { x: z, scalar: F } = this.getScalar(gr(k));
      if (this.px = z, this.d = F, this.rand = se(B), this.rand.length !== 32)
        throw new TypeError("sign: Expected 32 bytes of aux randomness");
    }
    getScalar(E) {
      const k = P.fromPrivateKey(E), B = k.hasEvenY() ? E : a.n - E;
      return { point: k, scalar: B, x: k.toRawX() };
    }
    initNonce(E, k) {
      return R(E ^ pe(k));
    }
    finalizeNonce(E) {
      const k = q(pe(E), a.n);
      if (k === r)
        throw new Error("sign: Creation of signature failed. k is zero");
      const { point: B, x: z, scalar: F } = this.getScalar(k);
      return { R: B, rx: z, k: F };
    }
    finalizeSig(E, k, B, z) {
      return new M(E.x, q(k + B * z, a.n)).toRawBytes();
    }
    error() {
      throw new Error("sign: Invalid signature produced");
    }
    async calc() {
      const { m: E, d: k, px: B, rand: z } = this, F = e.utils.taggedHash, X = this.initNonce(k, await F(Rn.aux, z)), { R: Y, rx: de, k: ce } = this.finalizeNonce(await F(Rn.nonce, X, B, E)), xe = C(await F(Rn.challenge, de, B, E)), Ue = this.finalizeSig(Y, ce, xe, k);
      return await Bh(Ue, E, B) || this.error(), Ue;
    }
    calcSync() {
      const { m: E, d: k, px: B, rand: z } = this, F = e.utils.taggedHashSync, X = this.initNonce(k, F(Rn.aux, z)), { R: Y, rx: de, k: ce } = this.finalizeNonce(F(Rn.nonce, X, B, E)), xe = C(F(Rn.challenge, de, B, E)), Ue = this.finalizeSig(Y, ce, xe, k);
      return $h(Ue, E, B) || this.error(), Ue;
    }
  }
  async function Ve(A, E, k) {
    return new Ge(A, E, k).calc();
  }
  function Je(A, E, k) {
    return new Ge(A, E, k).calcSync();
  }
  function De(A, E, k) {
    const B = A instanceof M, z = B ? A : M.fromHex(A);
    return B && z.assertValidity(), {
      ...z,
      m: se(E),
      P: ko(k)
    };
  }
  function Oh(A, E, k, B) {
    const z = P.BASE.multiplyAndAddUnsafe(E, gr(k), q(-B, a.n));
    return !(!z || !z.hasEvenY() || z.x !== A);
  }
  async function Bh(A, E, k) {
    try {
      const { r: B, s: z, m: F, P: X } = De(A, E, k), Y = C(await e.utils.taggedHash(Rn.challenge, R(B), X.toRawX(), F));
      return Oh(B, X, z, Y);
    } catch {
      return !1;
    }
  }
  function $h(A, E, k) {
    try {
      const { r: B, s: z, m: F, P: X } = De(A, E, k), Y = C(e.utils.taggedHashSync(Rn.challenge, R(B), X.toRawX(), F));
      return Oh(B, X, z, Y);
    } catch (B) {
      if (B instanceof x)
        throw B;
      return !1;
    }
  }
  e.schnorr = {
    Signature: M,
    getPublicKey: Oe,
    sign: Ve,
    verify: Bh,
    signSync: Je,
    verifySync: $h
  }, P.BASE._setWindowSize(8);
  const ar = {
    node: t,
    web: typeof self == "object" && "crypto" in self ? self.crypto : void 0
  }, Rn = {
    challenge: "BIP0340/challenge",
    aux: "BIP0340/aux",
    nonce: "BIP0340/nonce"
  }, ya = {};
  e.utils = {
    bytesToHex: W,
    hexToBytes: oe,
    concatBytes: Z,
    mod: q,
    invert: Xe,
    isValidPrivateKey(A) {
      try {
        return gr(A), !0;
      } catch {
        return !1;
      }
    },
    _bigintTo32Bytes: R,
    _normalizePrivateKey: gr,
    hashToPrivateKey: (A) => {
      A = se(A);
      const E = l + 8;
      if (A.length < E || A.length > 1024)
        throw new Error("Expected valid bytes of private key as per FIPS 186");
      const k = q(pe(A), a.n - n) + n;
      return R(k);
    },
    randomBytes: (A = 32) => {
      if (ar.web)
        return ar.web.getRandomValues(new Uint8Array(A));
      if (ar.node) {
        const { randomBytes: E } = ar.node;
        return Uint8Array.from(E(A));
      } else
        throw new Error("The environment doesn't have randomBytes function");
    },
    randomPrivateKey: () => e.utils.hashToPrivateKey(e.utils.randomBytes(l + 8)),
    precompute(A = 8, E = P.BASE) {
      const k = E === P.BASE ? E : new P(E.x, E.y);
      return k._setWindowSize(A), k.multiply(i), k;
    },
    sha256: async (...A) => {
      if (ar.web) {
        const E = await ar.web.subtle.digest("SHA-256", Z(...A));
        return new Uint8Array(E);
      } else if (ar.node) {
        const { createHash: E } = ar.node, k = E("sha256");
        return A.forEach((B) => k.update(B)), Uint8Array.from(k.digest());
      } else
        throw new Error("The environment doesn't have sha256 function");
    },
    hmacSha256: async (A, ...E) => {
      if (ar.web) {
        const k = await ar.web.subtle.importKey("raw", A, { name: "HMAC", hash: { name: "SHA-256" } }, !1, ["sign"]), B = Z(...E), z = await ar.web.subtle.sign("HMAC", k, B);
        return new Uint8Array(z);
      } else if (ar.node) {
        const { createHmac: k } = ar.node, B = k("sha256", A);
        return E.forEach((z) => B.update(z)), Uint8Array.from(B.digest());
      } else
        throw new Error("The environment doesn't have hmac-sha256 function");
    },
    sha256Sync: void 0,
    hmacSha256Sync: void 0,
    taggedHash: async (A, ...E) => {
      let k = ya[A];
      if (k === void 0) {
        const B = await e.utils.sha256(Uint8Array.from(A, (z) => z.charCodeAt(0)));
        k = Z(B, B), ya[A] = k;
      }
      return e.utils.sha256(k, ...E);
    },
    taggedHashSync: (A, ...E) => {
      if (typeof wt != "function")
        throw new x("sha256Sync is undefined, you need to set it");
      let k = ya[A];
      if (k === void 0) {
        const B = wt(Uint8Array.from(A, (z) => z.charCodeAt(0)));
        k = Z(B, B), ya[A] = k;
      }
      return wt(k, ...E);
    },
    _JacobianPoint: v
  }, Object.defineProperties(e.utils, {
    sha256Sync: {
      configurable: !1,
      get() {
        return wt;
      },
      set(A) {
        wt || (wt = A);
      }
    },
    hmacSha256Sync: {
      configurable: !1,
      get() {
        return Ht;
      },
      set(A) {
        Ht || (Ht = A);
      }
    }
  });
})(eh);
var uu = {}, hr = {};
Object.defineProperty(hr, "__esModule", { value: !0 });
hr.isBytes = vy;
hr.number = Bc;
hr.bool = wy;
hr.bytes = th;
hr.hash = xy;
hr.exists = Ey;
hr.output = _y;
function Bc(e) {
  if (!Number.isSafeInteger(e) || e < 0)
    throw new Error(`positive integer expected, not ${e}`);
}
function wy(e) {
  if (typeof e != "boolean")
    throw new Error(`boolean expected, not ${e}`);
}
function vy(e) {
  return e instanceof Uint8Array || e != null && typeof e == "object" && e.constructor.name === "Uint8Array";
}
function th(e, ...t) {
  if (!vy(e))
    throw new Error("Uint8Array expected");
  if (t.length > 0 && !t.includes(e.length))
    throw new Error(`Uint8Array expected of length ${t}, not of length=${e.length}`);
}
function xy(e) {
  if (typeof e != "function" || typeof e.create != "function")
    throw new Error("Hash should be wrapped by utils.wrapConstructor");
  Bc(e.outputLen), Bc(e.blockLen);
}
function Ey(e, t = !0) {
  if (e.destroyed)
    throw new Error("Hash instance has been destroyed");
  if (t && e.finished)
    throw new Error("Hash#digest() has already been called");
}
function _y(e, t) {
  th(e);
  const r = t.outputLen;
  if (e.length < r)
    throw new Error(`digestInto() expects output buffer of length at least ${r}`);
}
const e5 = { number: Bc, bool: wy, bytes: th, hash: xy, exists: Ey, output: _y };
hr.default = e5;
var Eo = {}, lu = {};
Object.defineProperty(lu, "__esModule", { value: !0 });
lu.crypto = void 0;
lu.crypto = typeof globalThis == "object" && "crypto" in globalThis ? globalThis.crypto : void 0;
(function(e) {
  /*! noble-hashes - MIT License (c) 2022 Paul Miller (paulmillr.com) */
  Object.defineProperty(e, "__esModule", { value: !0 }), e.Hash = e.nextTick = e.byteSwapIfBE = e.byteSwap = e.isLE = e.rotl = e.rotr = e.createView = e.u32 = e.u8 = void 0, e.isBytes = n, e.byteSwap32 = f, e.bytesToHex = h, e.hexToBytes = y, e.asyncLoop = x, e.utf8ToBytes = S, e.toBytes = v, e.concatBytes = T, e.checkOpts = H, e.wrapConstructor = j, e.wrapConstructorWithOpts = V, e.wrapXOFConstructorWithOpts = te, e.randomBytes = Z;
  const t = lu, r = hr;
  function n(N) {
    return N instanceof Uint8Array || N != null && typeof N == "object" && N.constructor.name === "Uint8Array";
  }
  const o = (N) => new Uint8Array(N.buffer, N.byteOffset, N.byteLength);
  e.u8 = o;
  const i = (N) => new Uint32Array(N.buffer, N.byteOffset, Math.floor(N.byteLength / 4));
  e.u32 = i;
  const s = (N) => new DataView(N.buffer, N.byteOffset, N.byteLength);
  e.createView = s;
  const a = (N, W) => N << 32 - W | N >>> W;
  e.rotr = a;
  const c = (N, W) => N << W | N >>> 32 - W >>> 0;
  e.rotl = c, e.isLE = new Uint8Array(new Uint32Array([287454020]).buffer)[0] === 68;
  const u = (N) => N << 24 & 4278190080 | N << 8 & 16711680 | N >>> 8 & 65280 | N >>> 24 & 255;
  e.byteSwap = u, e.byteSwapIfBE = e.isLE ? (N) => N : (N) => (0, e.byteSwap)(N);
  function f(N) {
    for (let W = 0; W < N.length; W++)
      N[W] = (0, e.byteSwap)(N[W]);
  }
  const l = /* @__PURE__ */ Array.from({ length: 256 }, (N, W) => W.toString(16).padStart(2, "0"));
  function h(N) {
    (0, r.bytes)(N);
    let W = "";
    for (let D = 0; D < N.length; D++)
      W += l[N[D]];
    return W;
  }
  const m = { _0: 48, _9: 57, _A: 65, _F: 70, _a: 97, _f: 102 };
  function b(N) {
    if (N >= m._0 && N <= m._9)
      return N - m._0;
    if (N >= m._A && N <= m._F)
      return N - (m._A - 10);
    if (N >= m._a && N <= m._f)
      return N - (m._a - 10);
  }
  function y(N) {
    if (typeof N != "string")
      throw new Error("hex string expected, got " + typeof N);
    const W = N.length, D = W / 2;
    if (W % 2)
      throw new Error("padded hex string expected, got unpadded hex of length " + W);
    const $ = new Uint8Array(D);
    for (let R = 0, K = 0; R < D; R++, K += 2) {
      const re = b(N.charCodeAt(K)), oe = b(N.charCodeAt(K + 1));
      if (re === void 0 || oe === void 0) {
        const pe = N[K] + N[K + 1];
        throw new Error('hex string expected, got non-hex character "' + pe + '" at index ' + K);
      }
      $[R] = re * 16 + oe;
    }
    return $;
  }
  const g = async () => {
  };
  e.nextTick = g;
  async function x(N, W, D) {
    let $ = Date.now();
    for (let R = 0; R < N; R++) {
      D(R);
      const K = Date.now() - $;
      K >= 0 && K < W || (await (0, e.nextTick)(), $ += K);
    }
  }
  function S(N) {
    if (typeof N != "string")
      throw new Error(`utf8ToBytes expected string, got ${typeof N}`);
    return new Uint8Array(new TextEncoder().encode(N));
  }
  function v(N) {
    return typeof N == "string" && (N = S(N)), (0, r.bytes)(N), N;
  }
  function T(...N) {
    let W = 0;
    for (let $ = 0; $ < N.length; $++) {
      const R = N[$];
      (0, r.bytes)(R), W += R.length;
    }
    const D = new Uint8Array(W);
    for (let $ = 0, R = 0; $ < N.length; $++) {
      const K = N[$];
      D.set(K, R), R += K.length;
    }
    return D;
  }
  class I {
    // Safe version that clones internal state
    clone() {
      return this._cloneInto();
    }
  }
  e.Hash = I;
  const P = {}.toString;
  function H(N, W) {
    if (W !== void 0 && P.call(W) !== "[object Object]")
      throw new Error("Options should be object or undefined");
    return Object.assign(N, W);
  }
  function j(N) {
    const W = ($) => N().update(v($)).digest(), D = N();
    return W.outputLen = D.outputLen, W.blockLen = D.blockLen, W.create = () => N(), W;
  }
  function V(N) {
    const W = ($, R) => N(R).update(v($)).digest(), D = N({});
    return W.outputLen = D.outputLen, W.blockLen = D.blockLen, W.create = ($) => N($), W;
  }
  function te(N) {
    const W = ($, R) => N(R).update(v($)).digest(), D = N({});
    return W.outputLen = D.outputLen, W.blockLen = D.blockLen, W.create = ($) => N($), W;
  }
  function Z(N = 32) {
    if (t.crypto && typeof t.crypto.getRandomValues == "function")
      return t.crypto.getRandomValues(new Uint8Array(N));
    if (t.crypto && typeof t.crypto.randomBytes == "function")
      return t.crypto.randomBytes(N);
    throw new Error("crypto.getRandomValues must be defined");
  }
})(Eo);
(function(e) {
  Object.defineProperty(e, "__esModule", { value: !0 }), e.hmac = e.HMAC = void 0;
  const t = hr, r = Eo;
  class n extends r.Hash {
    constructor(s, a) {
      super(), this.finished = !1, this.destroyed = !1, (0, t.hash)(s);
      const c = (0, r.toBytes)(a);
      if (this.iHash = s.create(), typeof this.iHash.update != "function")
        throw new Error("Expected instance of class which extends utils.Hash");
      this.blockLen = this.iHash.blockLen, this.outputLen = this.iHash.outputLen;
      const u = this.blockLen, f = new Uint8Array(u);
      f.set(c.length > u ? s.create().update(c).digest() : c);
      for (let l = 0; l < f.length; l++)
        f[l] ^= 54;
      this.iHash.update(f), this.oHash = s.create();
      for (let l = 0; l < f.length; l++)
        f[l] ^= 106;
      this.oHash.update(f), f.fill(0);
    }
    update(s) {
      return (0, t.exists)(this), this.iHash.update(s), this;
    }
    digestInto(s) {
      (0, t.exists)(this), (0, t.bytes)(s, this.outputLen), this.finished = !0, this.iHash.digestInto(s), this.oHash.update(s), this.oHash.digestInto(s), this.destroy();
    }
    digest() {
      const s = new Uint8Array(this.oHash.outputLen);
      return this.digestInto(s), s;
    }
    _cloneInto(s) {
      s || (s = Object.create(Object.getPrototypeOf(this), {}));
      const { oHash: a, iHash: c, finished: u, destroyed: f, blockLen: l, outputLen: h } = this;
      return s = s, s.finished = u, s.destroyed = f, s.blockLen = l, s.outputLen = h, s.oHash = a._cloneInto(s.oHash), s.iHash = c._cloneInto(s.iHash), s;
    }
    destroy() {
      this.destroyed = !0, this.oHash.destroy(), this.iHash.destroy();
    }
  }
  e.HMAC = n;
  const o = (i, s, a) => new n(i, s).update(a).digest();
  e.hmac = o, e.hmac.create = (i, s) => new n(i, s);
})(uu);
var Rr = {}, Tn = {};
Object.defineProperty(Tn, "__esModule", { value: !0 });
Tn.HashMD = Tn.Maj = Tn.Chi = void 0;
const El = hr, hs = Eo;
function t5(e, t, r, n) {
  if (typeof e.setBigUint64 == "function")
    return e.setBigUint64(t, r, n);
  const o = BigInt(32), i = BigInt(4294967295), s = Number(r >> o & i), a = Number(r & i), c = n ? 4 : 0, u = n ? 0 : 4;
  e.setUint32(t + c, s, n), e.setUint32(t + u, a, n);
}
const r5 = (e, t, r) => e & t ^ ~e & r;
Tn.Chi = r5;
const n5 = (e, t, r) => e & t ^ e & r ^ t & r;
Tn.Maj = n5;
class o5 extends hs.Hash {
  constructor(t, r, n, o) {
    super(), this.blockLen = t, this.outputLen = r, this.padOffset = n, this.isLE = o, this.finished = !1, this.length = 0, this.pos = 0, this.destroyed = !1, this.buffer = new Uint8Array(t), this.view = (0, hs.createView)(this.buffer);
  }
  update(t) {
    (0, El.exists)(this);
    const { view: r, buffer: n, blockLen: o } = this;
    t = (0, hs.toBytes)(t);
    const i = t.length;
    for (let s = 0; s < i; ) {
      const a = Math.min(o - this.pos, i - s);
      if (a === o) {
        const c = (0, hs.createView)(t);
        for (; o <= i - s; s += o)
          this.process(c, s);
        continue;
      }
      n.set(t.subarray(s, s + a), this.pos), this.pos += a, s += a, this.pos === o && (this.process(r, 0), this.pos = 0);
    }
    return this.length += t.length, this.roundClean(), this;
  }
  digestInto(t) {
    (0, El.exists)(this), (0, El.output)(t, this), this.finished = !0;
    const { buffer: r, view: n, blockLen: o, isLE: i } = this;
    let { pos: s } = this;
    r[s++] = 128, this.buffer.subarray(s).fill(0), this.padOffset > o - s && (this.process(n, 0), s = 0);
    for (let l = s; l < o; l++)
      r[l] = 0;
    t5(n, o - 8, BigInt(this.length * 8), i), this.process(n, 0);
    const a = (0, hs.createView)(t), c = this.outputLen;
    if (c % 4)
      throw new Error("_sha2: outputLen should be aligned to 32bit");
    const u = c / 4, f = this.get();
    if (u > f.length)
      throw new Error("_sha2: outputLen bigger than state");
    for (let l = 0; l < u; l++)
      a.setUint32(4 * l, f[l], i);
  }
  digest() {
    const { buffer: t, outputLen: r } = this;
    this.digestInto(t);
    const n = t.slice(0, r);
    return this.destroy(), n;
  }
  _cloneInto(t) {
    t || (t = new this.constructor()), t.set(...this.get());
    const { blockLen: r, buffer: n, length: o, finished: i, destroyed: s, pos: a } = this;
    return t.length = o, t.pos = a, t.finished = i, t.destroyed = s, o % r && t.buffer.set(n), t;
  }
}
Tn.HashMD = o5;
Object.defineProperty(Rr, "__esModule", { value: !0 });
Rr.sha224 = Rr.sha256 = Rr.SHA256 = void 0;
const _l = Tn, vr = Eo, i5 = /* @__PURE__ */ new Uint32Array([
  1116352408,
  1899447441,
  3049323471,
  3921009573,
  961987163,
  1508970993,
  2453635748,
  2870763221,
  3624381080,
  310598401,
  607225278,
  1426881987,
  1925078388,
  2162078206,
  2614888103,
  3248222580,
  3835390401,
  4022224774,
  264347078,
  604807628,
  770255983,
  1249150122,
  1555081692,
  1996064986,
  2554220882,
  2821834349,
  2952996808,
  3210313671,
  3336571891,
  3584528711,
  113926993,
  338241895,
  666307205,
  773529912,
  1294757372,
  1396182291,
  1695183700,
  1986661051,
  2177026350,
  2456956037,
  2730485921,
  2820302411,
  3259730800,
  3345764771,
  3516065817,
  3600352804,
  4094571909,
  275423344,
  430227734,
  506948616,
  659060556,
  883997877,
  958139571,
  1322822218,
  1537002063,
  1747873779,
  1955562222,
  2024104815,
  2227730452,
  2361852424,
  2428436474,
  2756734187,
  3204031479,
  3329325298
]), ro = /* @__PURE__ */ new Uint32Array([
  1779033703,
  3144134277,
  1013904242,
  2773480762,
  1359893119,
  2600822924,
  528734635,
  1541459225
]), no = /* @__PURE__ */ new Uint32Array(64);
class rh extends _l.HashMD {
  constructor() {
    super(64, 32, 8, !1), this.A = ro[0] | 0, this.B = ro[1] | 0, this.C = ro[2] | 0, this.D = ro[3] | 0, this.E = ro[4] | 0, this.F = ro[5] | 0, this.G = ro[6] | 0, this.H = ro[7] | 0;
  }
  get() {
    const { A: t, B: r, C: n, D: o, E: i, F: s, G: a, H: c } = this;
    return [t, r, n, o, i, s, a, c];
  }
  // prettier-ignore
  set(t, r, n, o, i, s, a, c) {
    this.A = t | 0, this.B = r | 0, this.C = n | 0, this.D = o | 0, this.E = i | 0, this.F = s | 0, this.G = a | 0, this.H = c | 0;
  }
  process(t, r) {
    for (let l = 0; l < 16; l++, r += 4)
      no[l] = t.getUint32(r, !1);
    for (let l = 16; l < 64; l++) {
      const h = no[l - 15], m = no[l - 2], b = (0, vr.rotr)(h, 7) ^ (0, vr.rotr)(h, 18) ^ h >>> 3, y = (0, vr.rotr)(m, 17) ^ (0, vr.rotr)(m, 19) ^ m >>> 10;
      no[l] = y + no[l - 7] + b + no[l - 16] | 0;
    }
    let { A: n, B: o, C: i, D: s, E: a, F: c, G: u, H: f } = this;
    for (let l = 0; l < 64; l++) {
      const h = (0, vr.rotr)(a, 6) ^ (0, vr.rotr)(a, 11) ^ (0, vr.rotr)(a, 25), m = f + h + (0, _l.Chi)(a, c, u) + i5[l] + no[l] | 0, y = ((0, vr.rotr)(n, 2) ^ (0, vr.rotr)(n, 13) ^ (0, vr.rotr)(n, 22)) + (0, _l.Maj)(n, o, i) | 0;
      f = u, u = c, c = a, a = s + m | 0, s = i, i = o, o = n, n = m + y | 0;
    }
    n = n + this.A | 0, o = o + this.B | 0, i = i + this.C | 0, s = s + this.D | 0, a = a + this.E | 0, c = c + this.F | 0, u = u + this.G | 0, f = f + this.H | 0, this.set(n, o, i, s, a, c, u, f);
  }
  roundClean() {
    no.fill(0);
  }
  destroy() {
    this.set(0, 0, 0, 0, 0, 0, 0, 0), this.buffer.fill(0);
  }
}
Rr.SHA256 = rh;
class s5 extends rh {
  constructor() {
    super(), this.A = -1056596264, this.B = 914150663, this.C = 812702999, this.D = -150054599, this.E = -4191439, this.F = 1750603025, this.G = 1694076839, this.H = -1090891868, this.outputLen = 28;
  }
}
Rr.sha256 = (0, vr.wrapConstructor)(() => new rh());
Rr.sha224 = (0, vr.wrapConstructor)(() => new s5());
var a5 = eh, c5 = uu, Sy = Rr;
function u5(e) {
  var t = /* @__PURE__ */ Object.create(null);
  return e && Object.keys(e).forEach(function(r) {
    if (r !== "default") {
      var n = Object.getOwnPropertyDescriptor(e, r);
      Object.defineProperty(t, r, n.get ? n : {
        enumerable: !0,
        get: function() {
          return e[r];
        }
      });
    }
  }), t.default = e, Object.freeze(t);
}
var Re = /* @__PURE__ */ u5(a5);
const _o = "Expected Private", So = "Expected Point", aa = "Expected Tweak", l5 = "Expected Hash", $c = "Expected Signature", nh = "Expected Extra Data (32 bytes)", ca = "Expected Scalar", f5 = "Bad Recovery Id";
Re.utils.hmacSha256Sync = (e, ...t) => c5.hmac(Sy.sha256, e, Re.utils.concatBytes(...t));
Re.utils.sha256Sync = (...e) => Sy.sha256(Re.utils.concatBytes(...e));
const oh = Re.utils._normalizePrivateKey, d5 = 32, h5 = 32, Af = new Uint8Array([
  255,
  255,
  255,
  255,
  255,
  255,
  255,
  255,
  255,
  255,
  255,
  255,
  255,
  255,
  255,
  254,
  186,
  174,
  220,
  230,
  175,
  72,
  160,
  59,
  191,
  210,
  94,
  140,
  208,
  54,
  65,
  65
]), p5 = 32, g5 = new Uint8Array(32), m5 = new Uint8Array([
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  1,
  69,
  81,
  35,
  25,
  80,
  183,
  95,
  196,
  64,
  45,
  161,
  114,
  47,
  201,
  186,
  238
]);
function b5(e) {
  return e instanceof Uint8Array;
}
function Fs(e, t) {
  for (let r = 0; r < 32; ++r)
    if (e[r] !== t[r])
      return e[r] < t[r] ? -1 : 1;
  return 0;
}
function Xp(e) {
  return Fs(e, g5) === 0;
}
function ua(e) {
  return !(!(e instanceof Uint8Array) || e.length !== h5 || Fs(e, Af) >= 0);
}
function ih(e) {
  return e instanceof Uint8Array && e.length === 64 && Fs(e.subarray(0, 32), Af) < 0 && Fs(e.subarray(32, 64), Af) < 0;
}
function y5(e) {
  return b5(e) && e.length === 64 && Fs(e.subarray(0, 32), m5) < 0;
}
function w5(e) {
  return !(Xp(e.subarray(0, 32)) || Xp(e.subarray(32, 64)));
}
function Qi(e) {
  return e instanceof Uint8Array && e.length === d5;
}
function sh(e) {
  return e === void 0 || e instanceof Uint8Array && e.length === p5;
}
function ky(e) {
  if (typeof e != "string")
    throw new TypeError("hexToNumber: expected string, got " + typeof e);
  return BigInt(`0x${e}`);
}
function v5(e) {
  return ky(Re.utils.bytesToHex(e));
}
function ah(e) {
  let t;
  if (typeof e == "bigint")
    t = e;
  else if (typeof e == "number" && Number.isSafeInteger(e) && e >= 0)
    t = BigInt(e);
  else if (typeof e == "string") {
    if (e.length !== 64)
      throw new Error("Expected 32 bytes of private scalar");
    t = ky(e);
  } else if (e instanceof Uint8Array) {
    if (e.length !== 32)
      throw new Error("Expected 32 bytes of private scalar");
    t = v5(e);
  } else
    throw new TypeError("Expected valid private scalar");
  if (t < 0) throw new Error("Expected private scalar >= 0");
  return t;
}
const x5 = (e, t) => {
  const r = oh(e), n = ah(t), o = Re.utils._bigintTo32Bytes(Re.utils.mod(r + n, Re.CURVE.n));
  return Re.utils.isValidPrivateKey(o) ? o : null;
}, E5 = (e, t) => {
  const r = oh(e), n = ah(t), o = Re.utils._bigintTo32Bytes(Re.utils.mod(r - n, Re.CURVE.n));
  return Re.utils.isValidPrivateKey(o) ? o : null;
}, _5 = (e) => {
  const t = oh(e), r = Re.utils._bigintTo32Bytes(Re.CURVE.n - t);
  return Re.utils.isValidPrivateKey(r) ? r : null;
}, Ay = (e, t, r) => {
  const n = Re.Point.fromHex(e), o = ah(t), i = Re.Point.BASE.multiplyAndAddUnsafe(n, o, BigInt(1));
  if (!i) throw new Error("Tweaked point at infinity");
  return i.toRawBytes(r);
}, S5 = (e, t, r) => {
  const n = Re.Point.fromHex(e), o = typeof t == "string" ? t : Re.utils.bytesToHex(t), i = BigInt(`0x${o}`);
  return n.multiply(i).toRawBytes(r);
};
function es(e, t) {
  return e === void 0 ? t !== void 0 ? Ty(t) : !0 : !!e;
}
function ii(e) {
  try {
    return e();
  } catch {
    return null;
  }
}
function ch(e, t) {
  if (e.length === 32 !== t) return !1;
  try {
    return !!Re.Point.fromHex(e);
  } catch {
    return !1;
  }
}
function xo(e) {
  return ch(e, !1);
}
function Ty(e) {
  return ch(e, !1) && e.length === 33;
}
function Cn(e) {
  return Re.utils.isValidPrivateKey(e);
}
function fu(e) {
  return ch(e, !0);
}
function k5(e, t) {
  if (!fu(e))
    throw new Error(So);
  if (!ua(t))
    throw new Error(aa);
  return ii(() => {
    const r = Ay(e, t, !0);
    return { parity: r[0] % 2 === 1 ? 1 : 0, xOnlyPubkey: r.slice(1) };
  });
}
function Iy(e) {
  if (!xo(e))
    throw new Error(So);
  return e.slice(1, 33);
}
function Py(e, t) {
  if (!Cn(e))
    throw new Error(_o);
  return ii(
    () => Re.getPublicKey(e, es(t))
  );
}
function A5(e) {
  if (!Cn(e))
    throw new Error(_o);
  return Iy(Py(e));
}
function T5(e, t) {
  if (!xo(e))
    throw new Error(So);
  return Re.Point.fromHex(e).toRawBytes(es(t, e));
}
function I5(e, t, r) {
  if (!xo(e))
    throw new Error(So);
  if (!ua(t))
    throw new Error(aa);
  return ii(
    () => S5(e, t, es(r, e))
  );
}
function P5(e, t, r) {
  if (!xo(e) || !xo(t))
    throw new Error(So);
  return ii(() => {
    const n = Re.Point.fromHex(e), o = Re.Point.fromHex(t);
    return n.equals(o.negate()) ? null : n.add(o).toRawBytes(es(r, e));
  });
}
function O5(e, t, r) {
  if (!xo(e))
    throw new Error(So);
  if (!ua(t))
    throw new Error(aa);
  return ii(
    () => Ay(e, t, es(r, e))
  );
}
function B5(e, t) {
  if (Cn(e) === !1)
    throw new Error(_o);
  if (ua(t) === !1)
    throw new Error(aa);
  return ii(() => x5(e, t));
}
function $5(e, t) {
  if (Cn(e) === !1)
    throw new Error(_o);
  if (ua(t) === !1)
    throw new Error(aa);
  return ii(() => E5(e, t));
}
function N5(e) {
  if (Cn(e) === !1)
    throw new Error(_o);
  return _5(e);
}
function U5(e, t, r) {
  if (!Cn(t))
    throw new Error(_o);
  if (!Qi(e))
    throw new Error(ca);
  if (!sh(r))
    throw new Error(nh);
  return Re.signSync(e, t, { der: !1, extraEntropy: r });
}
function C5(e, t, r) {
  if (!Cn(t))
    throw new Error(_o);
  if (!Qi(e))
    throw new Error(ca);
  if (!sh(r))
    throw new Error(nh);
  const [n, o] = Re.signSync(e, t, { der: !1, extraEntropy: r, recovered: !0 });
  return { signature: n, recoveryId: o };
}
function H5(e, t, r = Buffer.alloc(32, 0)) {
  if (!Cn(t))
    throw new Error(_o);
  if (!Qi(e))
    throw new Error(ca);
  if (!sh(r))
    throw new Error(nh);
  return Re.schnorr.signSync(e, t, r);
}
function R5(e, t, r, n) {
  if (!Qi(e))
    throw new Error(l5);
  if (!ih(t) || !w5(t))
    throw new Error($c);
  if (r & 2 && !y5(t))
    throw new Error(f5);
  if (!fu(t.subarray(0, 32)))
    throw new Error($c);
  return Re.recoverPublicKey(e, t, r, es(n));
}
function L5(e, t, r, n) {
  if (!xo(t))
    throw new Error(So);
  if (!ih(r))
    throw new Error($c);
  if (!Qi(e))
    throw new Error(ca);
  return Re.verify(r, e, t, { strict: n });
}
function z5(e, t, r) {
  if (!fu(t))
    throw new Error(So);
  if (!ih(r))
    throw new Error($c);
  if (!Qi(e))
    throw new Error(ca);
  return Re.schnorr.verifySync(r, e, t);
}
var j5 = at.isPoint = xo, M5 = at.isPointCompressed = Ty, D5 = at.isPrivate = Cn, F5 = at.isXOnlyPoint = fu, K5 = at.pointAdd = P5, q5 = at.pointAddScalar = O5, V5 = at.pointCompress = T5, W5 = at.pointFromScalar = Py, G5 = at.pointMultiply = I5, Z5 = at.privateAdd = B5, X5 = at.privateNegate = N5, Y5 = at.privateSub = $5, J5 = at.recover = R5, Q5 = at.sign = U5, eP = at.signRecoverable = C5, tP = at.signSchnorr = H5, rP = at.verify = L5, nP = at.verifySchnorr = z5, oP = at.xOnlyPointAddTweak = k5, iP = at.xOnlyPointFromPoint = Iy, sP = at.xOnlyPointFromScalar = A5;
const uh = /* @__PURE__ */ Rv({
  __proto__: null,
  default: at,
  isPoint: j5,
  isPointCompressed: M5,
  isPrivate: D5,
  isXOnlyPoint: F5,
  pointAdd: K5,
  pointAddScalar: q5,
  pointCompress: V5,
  pointFromScalar: W5,
  pointMultiply: G5,
  privateAdd: Z5,
  privateNegate: X5,
  privateSub: Y5,
  recover: J5,
  sign: Q5,
  signRecoverable: eP,
  signSchnorr: tP,
  verify: rP,
  verifySchnorr: nP,
  xOnlyPointAddTweak: oP,
  xOnlyPointFromPoint: iP,
  xOnlyPointFromScalar: sP
}, [at]);
var Oy = {}, ts = {};
ts.byteLength = uP;
ts.toByteArray = fP;
ts.fromByteArray = pP;
var rn = [], xr = [], aP = typeof Uint8Array < "u" ? Uint8Array : Array, Sl = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/";
for (var mi = 0, cP = Sl.length; mi < cP; ++mi)
  rn[mi] = Sl[mi], xr[Sl.charCodeAt(mi)] = mi;
xr[45] = 62;
xr[95] = 63;
function By(e) {
  var t = e.length;
  if (t % 4 > 0)
    throw new Error("Invalid string. Length must be a multiple of 4");
  var r = e.indexOf("=");
  r === -1 && (r = t);
  var n = r === t ? 0 : 4 - r % 4;
  return [r, n];
}
function uP(e) {
  var t = By(e), r = t[0], n = t[1];
  return (r + n) * 3 / 4 - n;
}
function lP(e, t, r) {
  return (t + r) * 3 / 4 - r;
}
function fP(e) {
  var t, r = By(e), n = r[0], o = r[1], i = new aP(lP(e, n, o)), s = 0, a = o > 0 ? n - 4 : n, c;
  for (c = 0; c < a; c += 4)
    t = xr[e.charCodeAt(c)] << 18 | xr[e.charCodeAt(c + 1)] << 12 | xr[e.charCodeAt(c + 2)] << 6 | xr[e.charCodeAt(c + 3)], i[s++] = t >> 16 & 255, i[s++] = t >> 8 & 255, i[s++] = t & 255;
  return o === 2 && (t = xr[e.charCodeAt(c)] << 2 | xr[e.charCodeAt(c + 1)] >> 4, i[s++] = t & 255), o === 1 && (t = xr[e.charCodeAt(c)] << 10 | xr[e.charCodeAt(c + 1)] << 4 | xr[e.charCodeAt(c + 2)] >> 2, i[s++] = t >> 8 & 255, i[s++] = t & 255), i;
}
function dP(e) {
  return rn[e >> 18 & 63] + rn[e >> 12 & 63] + rn[e >> 6 & 63] + rn[e & 63];
}
function hP(e, t, r) {
  for (var n, o = [], i = t; i < r; i += 3)
    n = (e[i] << 16 & 16711680) + (e[i + 1] << 8 & 65280) + (e[i + 2] & 255), o.push(dP(n));
  return o.join("");
}
function pP(e) {
  for (var t, r = e.length, n = r % 3, o = [], i = 16383, s = 0, a = r - n; s < a; s += i)
    o.push(hP(e, s, s + i > a ? a : s + i));
  return n === 1 ? (t = e[r - 1], o.push(
    rn[t >> 2] + rn[t << 4 & 63] + "=="
  )) : n === 2 && (t = (e[r - 2] << 8) + e[r - 1], o.push(
    rn[t >> 10] + rn[t >> 4 & 63] + rn[t << 2 & 63] + "="
  )), o.join("");
}
var lh = {};
/*! ieee754. BSD-3-Clause License. Feross Aboukhadijeh <https://feross.org/opensource> */
lh.read = function(e, t, r, n, o) {
  var i, s, a = o * 8 - n - 1, c = (1 << a) - 1, u = c >> 1, f = -7, l = r ? o - 1 : 0, h = r ? -1 : 1, m = e[t + l];
  for (l += h, i = m & (1 << -f) - 1, m >>= -f, f += a; f > 0; i = i * 256 + e[t + l], l += h, f -= 8)
    ;
  for (s = i & (1 << -f) - 1, i >>= -f, f += n; f > 0; s = s * 256 + e[t + l], l += h, f -= 8)
    ;
  if (i === 0)
    i = 1 - u;
  else {
    if (i === c)
      return s ? NaN : (m ? -1 : 1) * (1 / 0);
    s = s + Math.pow(2, n), i = i - u;
  }
  return (m ? -1 : 1) * s * Math.pow(2, i - n);
};
lh.write = function(e, t, r, n, o, i) {
  var s, a, c, u = i * 8 - o - 1, f = (1 << u) - 1, l = f >> 1, h = o === 23 ? Math.pow(2, -24) - Math.pow(2, -77) : 0, m = n ? 0 : i - 1, b = n ? 1 : -1, y = t < 0 || t === 0 && 1 / t < 0 ? 1 : 0;
  for (t = Math.abs(t), isNaN(t) || t === 1 / 0 ? (a = isNaN(t) ? 1 : 0, s = f) : (s = Math.floor(Math.log(t) / Math.LN2), t * (c = Math.pow(2, -s)) < 1 && (s--, c *= 2), s + l >= 1 ? t += h / c : t += h * Math.pow(2, 1 - l), t * c >= 2 && (s++, c /= 2), s + l >= f ? (a = 0, s = f) : s + l >= 1 ? (a = (t * c - 1) * Math.pow(2, o), s = s + l) : (a = t * Math.pow(2, l - 1) * Math.pow(2, o), s = 0)); o >= 8; e[r + m] = a & 255, m += b, a /= 256, o -= 8)
    ;
  for (s = s << o | a, u += o; u > 0; e[r + m] = s & 255, m += b, s /= 256, u -= 8)
    ;
  e[r + m - b] |= y * 128;
};
/*!
 * The buffer module from node.js, for the browser.
 *
 * @author   Feross Aboukhadijeh <https://feross.org>
 * @license  MIT
 */
(function(e) {
  const t = ts, r = lh, n = typeof Symbol == "function" && typeof Symbol.for == "function" ? Symbol.for("nodejs.util.inspect.custom") : null;
  e.Buffer = a, e.SlowBuffer = S, e.INSPECT_MAX_BYTES = 50;
  const o = 2147483647;
  e.kMaxLength = o, a.TYPED_ARRAY_SUPPORT = i(), !a.TYPED_ARRAY_SUPPORT && typeof console < "u" && typeof console.error == "function" && console.error(
    "This browser lacks typed array (Uint8Array) support which is required by `buffer` v5.x. Use `buffer` v4.x if you require old browser support."
  );
  function i() {
    try {
      const w = new Uint8Array(1), d = { foo: function() {
        return 42;
      } };
      return Object.setPrototypeOf(d, Uint8Array.prototype), Object.setPrototypeOf(w, d), w.foo() === 42;
    } catch {
      return !1;
    }
  }
  Object.defineProperty(a.prototype, "parent", {
    enumerable: !0,
    get: function() {
      if (a.isBuffer(this))
        return this.buffer;
    }
  }), Object.defineProperty(a.prototype, "offset", {
    enumerable: !0,
    get: function() {
      if (a.isBuffer(this))
        return this.byteOffset;
    }
  });
  function s(w) {
    if (w > o)
      throw new RangeError('The value "' + w + '" is invalid for option "size"');
    const d = new Uint8Array(w);
    return Object.setPrototypeOf(d, a.prototype), d;
  }
  function a(w, d, p) {
    if (typeof w == "number") {
      if (typeof d == "string")
        throw new TypeError(
          'The "string" argument must be of type string. Received type number'
        );
      return l(w);
    }
    return c(w, d, p);
  }
  a.poolSize = 8192;
  function c(w, d, p) {
    if (typeof w == "string")
      return h(w, d);
    if (ArrayBuffer.isView(w))
      return b(w);
    if (w == null)
      throw new TypeError(
        "The first argument must be one of type string, Buffer, ArrayBuffer, Array, or Array-like Object. Received type " + typeof w
      );
    if (mr(w, ArrayBuffer) || w && mr(w.buffer, ArrayBuffer) || typeof SharedArrayBuffer < "u" && (mr(w, SharedArrayBuffer) || w && mr(w.buffer, SharedArrayBuffer)))
      return y(w, d, p);
    if (typeof w == "number")
      throw new TypeError(
        'The "value" argument must not be of type number. Received type number'
      );
    const _ = w.valueOf && w.valueOf();
    if (_ != null && _ !== w)
      return a.from(_, d, p);
    const O = g(w);
    if (O) return O;
    if (typeof Symbol < "u" && Symbol.toPrimitive != null && typeof w[Symbol.toPrimitive] == "function")
      return a.from(w[Symbol.toPrimitive]("string"), d, p);
    throw new TypeError(
      "The first argument must be one of type string, Buffer, ArrayBuffer, Array, or Array-like Object. Received type " + typeof w
    );
  }
  a.from = function(w, d, p) {
    return c(w, d, p);
  }, Object.setPrototypeOf(a.prototype, Uint8Array.prototype), Object.setPrototypeOf(a, Uint8Array);
  function u(w) {
    if (typeof w != "number")
      throw new TypeError('"size" argument must be of type number');
    if (w < 0)
      throw new RangeError('The value "' + w + '" is invalid for option "size"');
  }
  function f(w, d, p) {
    return u(w), w <= 0 ? s(w) : d !== void 0 ? typeof p == "string" ? s(w).fill(d, p) : s(w).fill(d) : s(w);
  }
  a.alloc = function(w, d, p) {
    return f(w, d, p);
  };
  function l(w) {
    return u(w), s(w < 0 ? 0 : x(w) | 0);
  }
  a.allocUnsafe = function(w) {
    return l(w);
  }, a.allocUnsafeSlow = function(w) {
    return l(w);
  };
  function h(w, d) {
    if ((typeof d != "string" || d === "") && (d = "utf8"), !a.isEncoding(d))
      throw new TypeError("Unknown encoding: " + d);
    const p = v(w, d) | 0;
    let _ = s(p);
    const O = _.write(w, d);
    return O !== p && (_ = _.slice(0, O)), _;
  }
  function m(w) {
    const d = w.length < 0 ? 0 : x(w.length) | 0, p = s(d);
    for (let _ = 0; _ < d; _ += 1)
      p[_] = w[_] & 255;
    return p;
  }
  function b(w) {
    if (mr(w, Uint8Array)) {
      const d = new Uint8Array(w);
      return y(d.buffer, d.byteOffset, d.byteLength);
    }
    return m(w);
  }
  function y(w, d, p) {
    if (d < 0 || w.byteLength < d)
      throw new RangeError('"offset" is outside of buffer bounds');
    if (w.byteLength < d + (p || 0))
      throw new RangeError('"length" is outside of buffer bounds');
    let _;
    return d === void 0 && p === void 0 ? _ = new Uint8Array(w) : p === void 0 ? _ = new Uint8Array(w, d) : _ = new Uint8Array(w, d, p), Object.setPrototypeOf(_, a.prototype), _;
  }
  function g(w) {
    if (a.isBuffer(w)) {
      const d = x(w.length) | 0, p = s(d);
      return p.length === 0 || w.copy(p, 0, 0, d), p;
    }
    if (w.length !== void 0)
      return typeof w.length != "number" || ui(w.length) ? s(0) : m(w);
    if (w.type === "Buffer" && Array.isArray(w.data))
      return m(w.data);
  }
  function x(w) {
    if (w >= o)
      throw new RangeError("Attempt to allocate Buffer larger than maximum size: 0x" + o.toString(16) + " bytes");
    return w | 0;
  }
  function S(w) {
    return +w != w && (w = 0), a.alloc(+w);
  }
  a.isBuffer = function(d) {
    return d != null && d._isBuffer === !0 && d !== a.prototype;
  }, a.compare = function(d, p) {
    if (mr(d, Uint8Array) && (d = a.from(d, d.offset, d.byteLength)), mr(p, Uint8Array) && (p = a.from(p, p.offset, p.byteLength)), !a.isBuffer(d) || !a.isBuffer(p))
      throw new TypeError(
        'The "buf1", "buf2" arguments must be one of type Buffer or Uint8Array'
      );
    if (d === p) return 0;
    let _ = d.length, O = p.length;
    for (let C = 0, M = Math.min(_, O); C < M; ++C)
      if (d[C] !== p[C]) {
        _ = d[C], O = p[C];
        break;
      }
    return _ < O ? -1 : O < _ ? 1 : 0;
  }, a.isEncoding = function(d) {
    switch (String(d).toLowerCase()) {
      case "hex":
      case "utf8":
      case "utf-8":
      case "ascii":
      case "latin1":
      case "binary":
      case "base64":
      case "ucs2":
      case "ucs-2":
      case "utf16le":
      case "utf-16le":
        return !0;
      default:
        return !1;
    }
  }, a.concat = function(d, p) {
    if (!Array.isArray(d))
      throw new TypeError('"list" argument must be an Array of Buffers');
    if (d.length === 0)
      return a.alloc(0);
    let _;
    if (p === void 0)
      for (p = 0, _ = 0; _ < d.length; ++_)
        p += d[_].length;
    const O = a.allocUnsafe(p);
    let C = 0;
    for (_ = 0; _ < d.length; ++_) {
      let M = d[_];
      if (mr(M, Uint8Array))
        C + M.length > O.length ? (a.isBuffer(M) || (M = a.from(M)), M.copy(O, C)) : Uint8Array.prototype.set.call(
          O,
          M,
          C
        );
      else if (a.isBuffer(M))
        M.copy(O, C);
      else
        throw new TypeError('"list" argument must be an Array of Buffers');
      C += M.length;
    }
    return O;
  };
  function v(w, d) {
    if (a.isBuffer(w))
      return w.length;
    if (ArrayBuffer.isView(w) || mr(w, ArrayBuffer))
      return w.byteLength;
    if (typeof w != "string")
      throw new TypeError(
        'The "string" argument must be one of type string, Buffer, or ArrayBuffer. Received type ' + typeof w
      );
    const p = w.length, _ = arguments.length > 2 && arguments[2] === !0;
    if (!_ && p === 0) return 0;
    let O = !1;
    for (; ; )
      switch (d) {
        case "ascii":
        case "latin1":
        case "binary":
          return p;
        case "utf8":
        case "utf-8":
          return ko(w).length;
        case "ucs2":
        case "ucs-2":
        case "utf16le":
        case "utf-16le":
          return p * 2;
        case "hex":
          return p >>> 1;
        case "base64":
          return ma(w).length;
        default:
          if (O)
            return _ ? -1 : ko(w).length;
          d = ("" + d).toLowerCase(), O = !0;
      }
  }
  a.byteLength = v;
  function T(w, d, p) {
    let _ = !1;
    if ((d === void 0 || d < 0) && (d = 0), d > this.length || ((p === void 0 || p > this.length) && (p = this.length), p <= 0) || (p >>>= 0, d >>>= 0, p <= d))
      return "";
    for (w || (w = "utf8"); ; )
      switch (w) {
        case "hex":
          return oe(this, d, p);
        case "utf8":
        case "utf-8":
          return D(this, d, p);
        case "ascii":
          return K(this, d, p);
        case "latin1":
        case "binary":
          return re(this, d, p);
        case "base64":
          return W(this, d, p);
        case "ucs2":
        case "ucs-2":
        case "utf16le":
        case "utf-16le":
          return pe(this, d, p);
        default:
          if (_) throw new TypeError("Unknown encoding: " + w);
          w = (w + "").toLowerCase(), _ = !0;
      }
  }
  a.prototype._isBuffer = !0;
  function I(w, d, p) {
    const _ = w[d];
    w[d] = w[p], w[p] = _;
  }
  a.prototype.swap16 = function() {
    const d = this.length;
    if (d % 2 !== 0)
      throw new RangeError("Buffer size must be a multiple of 16-bits");
    for (let p = 0; p < d; p += 2)
      I(this, p, p + 1);
    return this;
  }, a.prototype.swap32 = function() {
    const d = this.length;
    if (d % 4 !== 0)
      throw new RangeError("Buffer size must be a multiple of 32-bits");
    for (let p = 0; p < d; p += 4)
      I(this, p, p + 3), I(this, p + 1, p + 2);
    return this;
  }, a.prototype.swap64 = function() {
    const d = this.length;
    if (d % 8 !== 0)
      throw new RangeError("Buffer size must be a multiple of 64-bits");
    for (let p = 0; p < d; p += 8)
      I(this, p, p + 7), I(this, p + 1, p + 6), I(this, p + 2, p + 5), I(this, p + 3, p + 4);
    return this;
  }, a.prototype.toString = function() {
    const d = this.length;
    return d === 0 ? "" : arguments.length === 0 ? D(this, 0, d) : T.apply(this, arguments);
  }, a.prototype.toLocaleString = a.prototype.toString, a.prototype.equals = function(d) {
    if (!a.isBuffer(d)) throw new TypeError("Argument must be a Buffer");
    return this === d ? !0 : a.compare(this, d) === 0;
  }, a.prototype.inspect = function() {
    let d = "";
    const p = e.INSPECT_MAX_BYTES;
    return d = this.toString("hex", 0, p).replace(/(.{2})/g, "$1 ").trim(), this.length > p && (d += " ... "), "<Buffer " + d + ">";
  }, n && (a.prototype[n] = a.prototype.inspect), a.prototype.compare = function(d, p, _, O, C) {
    if (mr(d, Uint8Array) && (d = a.from(d, d.offset, d.byteLength)), !a.isBuffer(d))
      throw new TypeError(
        'The "target" argument must be one of type Buffer or Uint8Array. Received type ' + typeof d
      );
    if (p === void 0 && (p = 0), _ === void 0 && (_ = d ? d.length : 0), O === void 0 && (O = 0), C === void 0 && (C = this.length), p < 0 || _ > d.length || O < 0 || C > this.length)
      throw new RangeError("out of range index");
    if (O >= C && p >= _)
      return 0;
    if (O >= C)
      return -1;
    if (p >= _)
      return 1;
    if (p >>>= 0, _ >>>= 0, O >>>= 0, C >>>= 0, this === d) return 0;
    let M = C - O, Oe = _ - p;
    const Ge = Math.min(M, Oe), Ve = this.slice(O, C), Je = d.slice(p, _);
    for (let De = 0; De < Ge; ++De)
      if (Ve[De] !== Je[De]) {
        M = Ve[De], Oe = Je[De];
        break;
      }
    return M < Oe ? -1 : Oe < M ? 1 : 0;
  };
  function P(w, d, p, _, O) {
    if (w.length === 0) return -1;
    if (typeof p == "string" ? (_ = p, p = 0) : p > 2147483647 ? p = 2147483647 : p < -2147483648 && (p = -2147483648), p = +p, ui(p) && (p = O ? 0 : w.length - 1), p < 0 && (p = w.length + p), p >= w.length) {
      if (O) return -1;
      p = w.length - 1;
    } else if (p < 0)
      if (O) p = 0;
      else return -1;
    if (typeof d == "string" && (d = a.from(d, _)), a.isBuffer(d))
      return d.length === 0 ? -1 : H(w, d, p, _, O);
    if (typeof d == "number")
      return d = d & 255, typeof Uint8Array.prototype.indexOf == "function" ? O ? Uint8Array.prototype.indexOf.call(w, d, p) : Uint8Array.prototype.lastIndexOf.call(w, d, p) : H(w, [d], p, _, O);
    throw new TypeError("val must be string, number or Buffer");
  }
  function H(w, d, p, _, O) {
    let C = 1, M = w.length, Oe = d.length;
    if (_ !== void 0 && (_ = String(_).toLowerCase(), _ === "ucs2" || _ === "ucs-2" || _ === "utf16le" || _ === "utf-16le")) {
      if (w.length < 2 || d.length < 2)
        return -1;
      C = 2, M /= 2, Oe /= 2, p /= 2;
    }
    function Ge(Je, De) {
      return C === 1 ? Je[De] : Je.readUInt16BE(De * C);
    }
    let Ve;
    if (O) {
      let Je = -1;
      for (Ve = p; Ve < M; Ve++)
        if (Ge(w, Ve) === Ge(d, Je === -1 ? 0 : Ve - Je)) {
          if (Je === -1 && (Je = Ve), Ve - Je + 1 === Oe) return Je * C;
        } else
          Je !== -1 && (Ve -= Ve - Je), Je = -1;
    } else
      for (p + Oe > M && (p = M - Oe), Ve = p; Ve >= 0; Ve--) {
        let Je = !0;
        for (let De = 0; De < Oe; De++)
          if (Ge(w, Ve + De) !== Ge(d, De)) {
            Je = !1;
            break;
          }
        if (Je) return Ve;
      }
    return -1;
  }
  a.prototype.includes = function(d, p, _) {
    return this.indexOf(d, p, _) !== -1;
  }, a.prototype.indexOf = function(d, p, _) {
    return P(this, d, p, _, !0);
  }, a.prototype.lastIndexOf = function(d, p, _) {
    return P(this, d, p, _, !1);
  };
  function j(w, d, p, _) {
    p = Number(p) || 0;
    const O = w.length - p;
    _ ? (_ = Number(_), _ > O && (_ = O)) : _ = O;
    const C = d.length;
    _ > C / 2 && (_ = C / 2);
    let M;
    for (M = 0; M < _; ++M) {
      const Oe = parseInt(d.substr(M * 2, 2), 16);
      if (ui(Oe)) return M;
      w[p + M] = Oe;
    }
    return M;
  }
  function V(w, d, p, _) {
    return Ao(ko(d, w.length - p), w, p, _);
  }
  function te(w, d, p, _) {
    return Ao(ga(d), w, p, _);
  }
  function Z(w, d, p, _) {
    return Ao(ma(d), w, p, _);
  }
  function N(w, d, p, _) {
    return Ao(zu(d, w.length - p), w, p, _);
  }
  a.prototype.write = function(d, p, _, O) {
    if (p === void 0)
      O = "utf8", _ = this.length, p = 0;
    else if (_ === void 0 && typeof p == "string")
      O = p, _ = this.length, p = 0;
    else if (isFinite(p))
      p = p >>> 0, isFinite(_) ? (_ = _ >>> 0, O === void 0 && (O = "utf8")) : (O = _, _ = void 0);
    else
      throw new Error(
        "Buffer.write(string, encoding, offset[, length]) is no longer supported"
      );
    const C = this.length - p;
    if ((_ === void 0 || _ > C) && (_ = C), d.length > 0 && (_ < 0 || p < 0) || p > this.length)
      throw new RangeError("Attempt to write outside buffer bounds");
    O || (O = "utf8");
    let M = !1;
    for (; ; )
      switch (O) {
        case "hex":
          return j(this, d, p, _);
        case "utf8":
        case "utf-8":
          return V(this, d, p, _);
        case "ascii":
        case "latin1":
        case "binary":
          return te(this, d, p, _);
        case "base64":
          return Z(this, d, p, _);
        case "ucs2":
        case "ucs-2":
        case "utf16le":
        case "utf-16le":
          return N(this, d, p, _);
        default:
          if (M) throw new TypeError("Unknown encoding: " + O);
          O = ("" + O).toLowerCase(), M = !0;
      }
  }, a.prototype.toJSON = function() {
    return {
      type: "Buffer",
      data: Array.prototype.slice.call(this._arr || this, 0)
    };
  };
  function W(w, d, p) {
    return d === 0 && p === w.length ? t.fromByteArray(w) : t.fromByteArray(w.slice(d, p));
  }
  function D(w, d, p) {
    p = Math.min(w.length, p);
    const _ = [];
    let O = d;
    for (; O < p; ) {
      const C = w[O];
      let M = null, Oe = C > 239 ? 4 : C > 223 ? 3 : C > 191 ? 2 : 1;
      if (O + Oe <= p) {
        let Ge, Ve, Je, De;
        switch (Oe) {
          case 1:
            C < 128 && (M = C);
            break;
          case 2:
            Ge = w[O + 1], (Ge & 192) === 128 && (De = (C & 31) << 6 | Ge & 63, De > 127 && (M = De));
            break;
          case 3:
            Ge = w[O + 1], Ve = w[O + 2], (Ge & 192) === 128 && (Ve & 192) === 128 && (De = (C & 15) << 12 | (Ge & 63) << 6 | Ve & 63, De > 2047 && (De < 55296 || De > 57343) && (M = De));
            break;
          case 4:
            Ge = w[O + 1], Ve = w[O + 2], Je = w[O + 3], (Ge & 192) === 128 && (Ve & 192) === 128 && (Je & 192) === 128 && (De = (C & 15) << 18 | (Ge & 63) << 12 | (Ve & 63) << 6 | Je & 63, De > 65535 && De < 1114112 && (M = De));
        }
      }
      M === null ? (M = 65533, Oe = 1) : M > 65535 && (M -= 65536, _.push(M >>> 10 & 1023 | 55296), M = 56320 | M & 1023), _.push(M), O += Oe;
    }
    return R(_);
  }
  const $ = 4096;
  function R(w) {
    const d = w.length;
    if (d <= $)
      return String.fromCharCode.apply(String, w);
    let p = "", _ = 0;
    for (; _ < d; )
      p += String.fromCharCode.apply(
        String,
        w.slice(_, _ += $)
      );
    return p;
  }
  function K(w, d, p) {
    let _ = "";
    p = Math.min(w.length, p);
    for (let O = d; O < p; ++O)
      _ += String.fromCharCode(w[O] & 127);
    return _;
  }
  function re(w, d, p) {
    let _ = "";
    p = Math.min(w.length, p);
    for (let O = d; O < p; ++O)
      _ += String.fromCharCode(w[O]);
    return _;
  }
  function oe(w, d, p) {
    const _ = w.length;
    (!d || d < 0) && (d = 0), (!p || p < 0 || p > _) && (p = _);
    let O = "";
    for (let C = d; C < p; ++C)
      O += ju[w[C]];
    return O;
  }
  function pe(w, d, p) {
    const _ = w.slice(d, p);
    let O = "";
    for (let C = 0; C < _.length - 1; C += 2)
      O += String.fromCharCode(_[C] + _[C + 1] * 256);
    return O;
  }
  a.prototype.slice = function(d, p) {
    const _ = this.length;
    d = ~~d, p = p === void 0 ? _ : ~~p, d < 0 ? (d += _, d < 0 && (d = 0)) : d > _ && (d = _), p < 0 ? (p += _, p < 0 && (p = 0)) : p > _ && (p = _), p < d && (p = d);
    const O = this.subarray(d, p);
    return Object.setPrototypeOf(O, a.prototype), O;
  };
  function se(w, d, p) {
    if (w % 1 !== 0 || w < 0) throw new RangeError("offset is not uint");
    if (w + d > p) throw new RangeError("Trying to access beyond buffer length");
  }
  a.prototype.readUintLE = a.prototype.readUIntLE = function(d, p, _) {
    d = d >>> 0, p = p >>> 0, _ || se(d, p, this.length);
    let O = this[d], C = 1, M = 0;
    for (; ++M < p && (C *= 256); )
      O += this[d + M] * C;
    return O;
  }, a.prototype.readUintBE = a.prototype.readUIntBE = function(d, p, _) {
    d = d >>> 0, p = p >>> 0, _ || se(d, p, this.length);
    let O = this[d + --p], C = 1;
    for (; p > 0 && (C *= 256); )
      O += this[d + --p] * C;
    return O;
  }, a.prototype.readUint8 = a.prototype.readUInt8 = function(d, p) {
    return d = d >>> 0, p || se(d, 1, this.length), this[d];
  }, a.prototype.readUint16LE = a.prototype.readUInt16LE = function(d, p) {
    return d = d >>> 0, p || se(d, 2, this.length), this[d] | this[d + 1] << 8;
  }, a.prototype.readUint16BE = a.prototype.readUInt16BE = function(d, p) {
    return d = d >>> 0, p || se(d, 2, this.length), this[d] << 8 | this[d + 1];
  }, a.prototype.readUint32LE = a.prototype.readUInt32LE = function(d, p) {
    return d = d >>> 0, p || se(d, 4, this.length), (this[d] | this[d + 1] << 8 | this[d + 2] << 16) + this[d + 3] * 16777216;
  }, a.prototype.readUint32BE = a.prototype.readUInt32BE = function(d, p) {
    return d = d >>> 0, p || se(d, 4, this.length), this[d] * 16777216 + (this[d + 1] << 16 | this[d + 2] << 8 | this[d + 3]);
  }, a.prototype.readBigUInt64LE = Ar(function(d) {
    d = d >>> 0, Le(d, "offset");
    const p = this[d], _ = this[d + 7];
    (p === void 0 || _ === void 0) && mt(d, this.length - 8);
    const O = p + this[++d] * 2 ** 8 + this[++d] * 2 ** 16 + this[++d] * 2 ** 24, C = this[++d] + this[++d] * 2 ** 8 + this[++d] * 2 ** 16 + _ * 2 ** 24;
    return BigInt(O) + (BigInt(C) << BigInt(32));
  }), a.prototype.readBigUInt64BE = Ar(function(d) {
    d = d >>> 0, Le(d, "offset");
    const p = this[d], _ = this[d + 7];
    (p === void 0 || _ === void 0) && mt(d, this.length - 8);
    const O = p * 2 ** 24 + this[++d] * 2 ** 16 + this[++d] * 2 ** 8 + this[++d], C = this[++d] * 2 ** 24 + this[++d] * 2 ** 16 + this[++d] * 2 ** 8 + _;
    return (BigInt(O) << BigInt(32)) + BigInt(C);
  }), a.prototype.readIntLE = function(d, p, _) {
    d = d >>> 0, p = p >>> 0, _ || se(d, p, this.length);
    let O = this[d], C = 1, M = 0;
    for (; ++M < p && (C *= 256); )
      O += this[d + M] * C;
    return C *= 128, O >= C && (O -= Math.pow(2, 8 * p)), O;
  }, a.prototype.readIntBE = function(d, p, _) {
    d = d >>> 0, p = p >>> 0, _ || se(d, p, this.length);
    let O = p, C = 1, M = this[d + --O];
    for (; O > 0 && (C *= 256); )
      M += this[d + --O] * C;
    return C *= 128, M >= C && (M -= Math.pow(2, 8 * p)), M;
  }, a.prototype.readInt8 = function(d, p) {
    return d = d >>> 0, p || se(d, 1, this.length), this[d] & 128 ? (255 - this[d] + 1) * -1 : this[d];
  }, a.prototype.readInt16LE = function(d, p) {
    d = d >>> 0, p || se(d, 2, this.length);
    const _ = this[d] | this[d + 1] << 8;
    return _ & 32768 ? _ | 4294901760 : _;
  }, a.prototype.readInt16BE = function(d, p) {
    d = d >>> 0, p || se(d, 2, this.length);
    const _ = this[d + 1] | this[d] << 8;
    return _ & 32768 ? _ | 4294901760 : _;
  }, a.prototype.readInt32LE = function(d, p) {
    return d = d >>> 0, p || se(d, 4, this.length), this[d] | this[d + 1] << 8 | this[d + 2] << 16 | this[d + 3] << 24;
  }, a.prototype.readInt32BE = function(d, p) {
    return d = d >>> 0, p || se(d, 4, this.length), this[d] << 24 | this[d + 1] << 16 | this[d + 2] << 8 | this[d + 3];
  }, a.prototype.readBigInt64LE = Ar(function(d) {
    d = d >>> 0, Le(d, "offset");
    const p = this[d], _ = this[d + 7];
    (p === void 0 || _ === void 0) && mt(d, this.length - 8);
    const O = this[d + 4] + this[d + 5] * 2 ** 8 + this[d + 6] * 2 ** 16 + (_ << 24);
    return (BigInt(O) << BigInt(32)) + BigInt(p + this[++d] * 2 ** 8 + this[++d] * 2 ** 16 + this[++d] * 2 ** 24);
  }), a.prototype.readBigInt64BE = Ar(function(d) {
    d = d >>> 0, Le(d, "offset");
    const p = this[d], _ = this[d + 7];
    (p === void 0 || _ === void 0) && mt(d, this.length - 8);
    const O = (p << 24) + // Overflow
    this[++d] * 2 ** 16 + this[++d] * 2 ** 8 + this[++d];
    return (BigInt(O) << BigInt(32)) + BigInt(this[++d] * 2 ** 24 + this[++d] * 2 ** 16 + this[++d] * 2 ** 8 + _);
  }), a.prototype.readFloatLE = function(d, p) {
    return d = d >>> 0, p || se(d, 4, this.length), r.read(this, d, !0, 23, 4);
  }, a.prototype.readFloatBE = function(d, p) {
    return d = d >>> 0, p || se(d, 4, this.length), r.read(this, d, !1, 23, 4);
  }, a.prototype.readDoubleLE = function(d, p) {
    return d = d >>> 0, p || se(d, 8, this.length), r.read(this, d, !0, 52, 8);
  }, a.prototype.readDoubleBE = function(d, p) {
    return d = d >>> 0, p || se(d, 8, this.length), r.read(this, d, !1, 52, 8);
  };
  function Ae(w, d, p, _, O, C) {
    if (!a.isBuffer(w)) throw new TypeError('"buffer" argument must be a Buffer instance');
    if (d > O || d < C) throw new RangeError('"value" argument is out of bounds');
    if (p + _ > w.length) throw new RangeError("Index out of range");
  }
  a.prototype.writeUintLE = a.prototype.writeUIntLE = function(d, p, _, O) {
    if (d = +d, p = p >>> 0, _ = _ >>> 0, !O) {
      const Oe = Math.pow(2, 8 * _) - 1;
      Ae(this, d, p, _, Oe, 0);
    }
    let C = 1, M = 0;
    for (this[p] = d & 255; ++M < _ && (C *= 256); )
      this[p + M] = d / C & 255;
    return p + _;
  }, a.prototype.writeUintBE = a.prototype.writeUIntBE = function(d, p, _, O) {
    if (d = +d, p = p >>> 0, _ = _ >>> 0, !O) {
      const Oe = Math.pow(2, 8 * _) - 1;
      Ae(this, d, p, _, Oe, 0);
    }
    let C = _ - 1, M = 1;
    for (this[p + C] = d & 255; --C >= 0 && (M *= 256); )
      this[p + C] = d / M & 255;
    return p + _;
  }, a.prototype.writeUint8 = a.prototype.writeUInt8 = function(d, p, _) {
    return d = +d, p = p >>> 0, _ || Ae(this, d, p, 1, 255, 0), this[p] = d & 255, p + 1;
  }, a.prototype.writeUint16LE = a.prototype.writeUInt16LE = function(d, p, _) {
    return d = +d, p = p >>> 0, _ || Ae(this, d, p, 2, 65535, 0), this[p] = d & 255, this[p + 1] = d >>> 8, p + 2;
  }, a.prototype.writeUint16BE = a.prototype.writeUInt16BE = function(d, p, _) {
    return d = +d, p = p >>> 0, _ || Ae(this, d, p, 2, 65535, 0), this[p] = d >>> 8, this[p + 1] = d & 255, p + 2;
  }, a.prototype.writeUint32LE = a.prototype.writeUInt32LE = function(d, p, _) {
    return d = +d, p = p >>> 0, _ || Ae(this, d, p, 4, 4294967295, 0), this[p + 3] = d >>> 24, this[p + 2] = d >>> 16, this[p + 1] = d >>> 8, this[p] = d & 255, p + 4;
  }, a.prototype.writeUint32BE = a.prototype.writeUInt32BE = function(d, p, _) {
    return d = +d, p = p >>> 0, _ || Ae(this, d, p, 4, 4294967295, 0), this[p] = d >>> 24, this[p + 1] = d >>> 16, this[p + 2] = d >>> 8, this[p + 3] = d & 255, p + 4;
  };
  function q(w, d, p, _, O) {
    Ye(d, _, O, w, p, 7);
    let C = Number(d & BigInt(4294967295));
    w[p++] = C, C = C >> 8, w[p++] = C, C = C >> 8, w[p++] = C, C = C >> 8, w[p++] = C;
    let M = Number(d >> BigInt(32) & BigInt(4294967295));
    return w[p++] = M, M = M >> 8, w[p++] = M, M = M >> 8, w[p++] = M, M = M >> 8, w[p++] = M, p;
  }
  function Ce(w, d, p, _, O) {
    Ye(d, _, O, w, p, 7);
    let C = Number(d & BigInt(4294967295));
    w[p + 7] = C, C = C >> 8, w[p + 6] = C, C = C >> 8, w[p + 5] = C, C = C >> 8, w[p + 4] = C;
    let M = Number(d >> BigInt(32) & BigInt(4294967295));
    return w[p + 3] = M, M = M >> 8, w[p + 2] = M, M = M >> 8, w[p + 1] = M, M = M >> 8, w[p] = M, p + 8;
  }
  a.prototype.writeBigUInt64LE = Ar(function(d, p = 0) {
    return q(this, d, p, BigInt(0), BigInt("0xffffffffffffffff"));
  }), a.prototype.writeBigUInt64BE = Ar(function(d, p = 0) {
    return Ce(this, d, p, BigInt(0), BigInt("0xffffffffffffffff"));
  }), a.prototype.writeIntLE = function(d, p, _, O) {
    if (d = +d, p = p >>> 0, !O) {
      const Ge = Math.pow(2, 8 * _ - 1);
      Ae(this, d, p, _, Ge - 1, -Ge);
    }
    let C = 0, M = 1, Oe = 0;
    for (this[p] = d & 255; ++C < _ && (M *= 256); )
      d < 0 && Oe === 0 && this[p + C - 1] !== 0 && (Oe = 1), this[p + C] = (d / M >> 0) - Oe & 255;
    return p + _;
  }, a.prototype.writeIntBE = function(d, p, _, O) {
    if (d = +d, p = p >>> 0, !O) {
      const Ge = Math.pow(2, 8 * _ - 1);
      Ae(this, d, p, _, Ge - 1, -Ge);
    }
    let C = _ - 1, M = 1, Oe = 0;
    for (this[p + C] = d & 255; --C >= 0 && (M *= 256); )
      d < 0 && Oe === 0 && this[p + C + 1] !== 0 && (Oe = 1), this[p + C] = (d / M >> 0) - Oe & 255;
    return p + _;
  }, a.prototype.writeInt8 = function(d, p, _) {
    return d = +d, p = p >>> 0, _ || Ae(this, d, p, 1, 127, -128), d < 0 && (d = 255 + d + 1), this[p] = d & 255, p + 1;
  }, a.prototype.writeInt16LE = function(d, p, _) {
    return d = +d, p = p >>> 0, _ || Ae(this, d, p, 2, 32767, -32768), this[p] = d & 255, this[p + 1] = d >>> 8, p + 2;
  }, a.prototype.writeInt16BE = function(d, p, _) {
    return d = +d, p = p >>> 0, _ || Ae(this, d, p, 2, 32767, -32768), this[p] = d >>> 8, this[p + 1] = d & 255, p + 2;
  }, a.prototype.writeInt32LE = function(d, p, _) {
    return d = +d, p = p >>> 0, _ || Ae(this, d, p, 4, 2147483647, -2147483648), this[p] = d & 255, this[p + 1] = d >>> 8, this[p + 2] = d >>> 16, this[p + 3] = d >>> 24, p + 4;
  }, a.prototype.writeInt32BE = function(d, p, _) {
    return d = +d, p = p >>> 0, _ || Ae(this, d, p, 4, 2147483647, -2147483648), d < 0 && (d = 4294967295 + d + 1), this[p] = d >>> 24, this[p + 1] = d >>> 16, this[p + 2] = d >>> 8, this[p + 3] = d & 255, p + 4;
  }, a.prototype.writeBigInt64LE = Ar(function(d, p = 0) {
    return q(this, d, p, -BigInt("0x8000000000000000"), BigInt("0x7fffffffffffffff"));
  }), a.prototype.writeBigInt64BE = Ar(function(d, p = 0) {
    return Ce(this, d, p, -BigInt("0x8000000000000000"), BigInt("0x7fffffffffffffff"));
  });
  function Ut(w, d, p, _, O, C) {
    if (p + _ > w.length) throw new RangeError("Index out of range");
    if (p < 0) throw new RangeError("Index out of range");
  }
  function Xe(w, d, p, _, O) {
    return d = +d, p = p >>> 0, O || Ut(w, d, p, 4), r.write(w, d, p, _, 23, 4), p + 4;
  }
  a.prototype.writeFloatLE = function(d, p, _) {
    return Xe(this, d, p, !0, _);
  }, a.prototype.writeFloatBE = function(d, p, _) {
    return Xe(this, d, p, !1, _);
  };
  function Ct(w, d, p, _, O) {
    return d = +d, p = p >>> 0, O || Ut(w, d, p, 8), r.write(w, d, p, _, 52, 8), p + 8;
  }
  a.prototype.writeDoubleLE = function(d, p, _) {
    return Ct(this, d, p, !0, _);
  }, a.prototype.writeDoubleBE = function(d, p, _) {
    return Ct(this, d, p, !1, _);
  }, a.prototype.copy = function(d, p, _, O) {
    if (!a.isBuffer(d)) throw new TypeError("argument should be a Buffer");
    if (_ || (_ = 0), !O && O !== 0 && (O = this.length), p >= d.length && (p = d.length), p || (p = 0), O > 0 && O < _ && (O = _), O === _ || d.length === 0 || this.length === 0) return 0;
    if (p < 0)
      throw new RangeError("targetStart out of bounds");
    if (_ < 0 || _ >= this.length) throw new RangeError("Index out of range");
    if (O < 0) throw new RangeError("sourceEnd out of bounds");
    O > this.length && (O = this.length), d.length - p < O - _ && (O = d.length - p + _);
    const C = O - _;
    return this === d && typeof Uint8Array.prototype.copyWithin == "function" ? this.copyWithin(p, _, O) : Uint8Array.prototype.set.call(
      d,
      this.subarray(_, O),
      p
    ), C;
  }, a.prototype.fill = function(d, p, _, O) {
    if (typeof d == "string") {
      if (typeof p == "string" ? (O = p, p = 0, _ = this.length) : typeof _ == "string" && (O = _, _ = this.length), O !== void 0 && typeof O != "string")
        throw new TypeError("encoding must be a string");
      if (typeof O == "string" && !a.isEncoding(O))
        throw new TypeError("Unknown encoding: " + O);
      if (d.length === 1) {
        const M = d.charCodeAt(0);
        (O === "utf8" && M < 128 || O === "latin1") && (d = M);
      }
    } else typeof d == "number" ? d = d & 255 : typeof d == "boolean" && (d = Number(d));
    if (p < 0 || this.length < p || this.length < _)
      throw new RangeError("Out of range index");
    if (_ <= p)
      return this;
    p = p >>> 0, _ = _ === void 0 ? this.length : _ >>> 0, d || (d = 0);
    let C;
    if (typeof d == "number")
      for (C = p; C < _; ++C)
        this[C] = d;
    else {
      const M = a.isBuffer(d) ? d : a.from(d, O), Oe = M.length;
      if (Oe === 0)
        throw new TypeError('The value "' + d + '" is invalid for argument "value"');
      for (C = 0; C < _ - p; ++C)
        this[C + p] = M[C % Oe];
    }
    return this;
  };
  const gt = {};
  function lt(w, d, p) {
    gt[w] = class extends p {
      constructor() {
        super(), Object.defineProperty(this, "message", {
          value: d.apply(this, arguments),
          writable: !0,
          configurable: !0
        }), this.name = `${this.name} [${w}]`, this.stack, delete this.name;
      }
      get code() {
        return w;
      }
      set code(O) {
        Object.defineProperty(this, "code", {
          configurable: !0,
          enumerable: !0,
          value: O,
          writable: !0
        });
      }
      toString() {
        return `${this.name} [${w}]: ${this.message}`;
      }
    };
  }
  lt(
    "ERR_BUFFER_OUT_OF_BOUNDS",
    function(w) {
      return w ? `${w} is outside of buffer bounds` : "Attempt to access memory outside buffer bounds";
    },
    RangeError
  ), lt(
    "ERR_INVALID_ARG_TYPE",
    function(w, d) {
      return `The "${w}" argument must be of type number. Received type ${typeof d}`;
    },
    TypeError
  ), lt(
    "ERR_OUT_OF_RANGE",
    function(w, d, p) {
      let _ = `The value of "${w}" is out of range.`, O = p;
      return Number.isInteger(p) && Math.abs(p) > 2 ** 32 ? O = wt(String(p)) : typeof p == "bigint" && (O = String(p), (p > BigInt(2) ** BigInt(32) || p < -(BigInt(2) ** BigInt(32))) && (O = wt(O)), O += "n"), _ += ` It must be ${d}. Received ${O}`, _;
    },
    RangeError
  );
  function wt(w) {
    let d = "", p = w.length;
    const _ = w[0] === "-" ? 1 : 0;
    for (; p >= _ + 4; p -= 3)
      d = `_${w.slice(p - 3, p)}${d}`;
    return `${w.slice(0, p)}${d}`;
  }
  function Ht(w, d, p) {
    Le(d, "offset"), (w[d] === void 0 || w[d + p] === void 0) && mt(d, w.length - (p + 1));
  }
  function Ye(w, d, p, _, O, C) {
    if (w > p || w < d) {
      const M = typeof d == "bigint" ? "n" : "";
      let Oe;
      throw d === 0 || d === BigInt(0) ? Oe = `>= 0${M} and < 2${M} ** ${(C + 1) * 8}${M}` : Oe = `>= -(2${M} ** ${(C + 1) * 8 - 1}${M}) and < 2 ** ${(C + 1) * 8 - 1}${M}`, new gt.ERR_OUT_OF_RANGE("value", Oe, w);
    }
    Ht(_, O, C);
  }
  function Le(w, d) {
    if (typeof w != "number")
      throw new gt.ERR_INVALID_ARG_TYPE(d, "number", w);
  }
  function mt(w, d, p) {
    throw Math.floor(w) !== w ? (Le(w, p), new gt.ERR_OUT_OF_RANGE("offset", "an integer", w)) : d < 0 ? new gt.ERR_BUFFER_OUT_OF_BOUNDS() : new gt.ERR_OUT_OF_RANGE(
      "offset",
      `>= 0 and <= ${d}`,
      w
    );
  }
  const Vr = /[^+/0-9A-Za-z-_]/g;
  function gr(w) {
    if (w = w.split("=")[0], w = w.trim().replace(Vr, ""), w.length < 2) return "";
    for (; w.length % 4 !== 0; )
      w = w + "=";
    return w;
  }
  function ko(w, d) {
    d = d || 1 / 0;
    let p;
    const _ = w.length;
    let O = null;
    const C = [];
    for (let M = 0; M < _; ++M) {
      if (p = w.charCodeAt(M), p > 55295 && p < 57344) {
        if (!O) {
          if (p > 56319) {
            (d -= 3) > -1 && C.push(239, 191, 189);
            continue;
          } else if (M + 1 === _) {
            (d -= 3) > -1 && C.push(239, 191, 189);
            continue;
          }
          O = p;
          continue;
        }
        if (p < 56320) {
          (d -= 3) > -1 && C.push(239, 191, 189), O = p;
          continue;
        }
        p = (O - 55296 << 10 | p - 56320) + 65536;
      } else O && (d -= 3) > -1 && C.push(239, 191, 189);
      if (O = null, p < 128) {
        if ((d -= 1) < 0) break;
        C.push(p);
      } else if (p < 2048) {
        if ((d -= 2) < 0) break;
        C.push(
          p >> 6 | 192,
          p & 63 | 128
        );
      } else if (p < 65536) {
        if ((d -= 3) < 0) break;
        C.push(
          p >> 12 | 224,
          p >> 6 & 63 | 128,
          p & 63 | 128
        );
      } else if (p < 1114112) {
        if ((d -= 4) < 0) break;
        C.push(
          p >> 18 | 240,
          p >> 12 & 63 | 128,
          p >> 6 & 63 | 128,
          p & 63 | 128
        );
      } else
        throw new Error("Invalid code point");
    }
    return C;
  }
  function ga(w) {
    const d = [];
    for (let p = 0; p < w.length; ++p)
      d.push(w.charCodeAt(p) & 255);
    return d;
  }
  function zu(w, d) {
    let p, _, O;
    const C = [];
    for (let M = 0; M < w.length && !((d -= 2) < 0); ++M)
      p = w.charCodeAt(M), _ = p >> 8, O = p % 256, C.push(O), C.push(_);
    return C;
  }
  function ma(w) {
    return t.toByteArray(gr(w));
  }
  function Ao(w, d, p, _) {
    let O;
    for (O = 0; O < _ && !(O + p >= d.length || O >= w.length); ++O)
      d[O + p] = w[O];
    return O;
  }
  function mr(w, d) {
    return w instanceof d || w != null && w.constructor != null && w.constructor.name != null && w.constructor.name === d.name;
  }
  function ui(w) {
    return w !== w;
  }
  const ju = function() {
    const w = "0123456789abcdef", d = new Array(256);
    for (let p = 0; p < 16; ++p) {
      const _ = p * 16;
      for (let O = 0; O < 16; ++O)
        d[_ + O] = w[p] + w[O];
    }
    return d;
  }();
  function Ar(w) {
    return typeof BigInt > "u" ? ba : w;
  }
  function ba() {
    throw new Error("BigInt not supported");
  }
})(Oy);
const n7 = "Mainnet", Tf = "BITCOIN_MAINNET", $y = "BITCOIN_TESTNET", Ny = "BITCOIN_TESTNET4", Uy = "BITCOIN_SIGNET", Cy = "FRACTAL_BITCOIN_MAINNET", Hy = "FRACTAL_BITCOIN_TESTNET", o7 = "livenet", i7 = "testnet", gs = "Mainnet", If = "Testnet", gP = "Signet", mP = "livenet", bP = "testnet", xs = "livenet", Pf = "testnet", Ry = "testnet4", Ly = "signet", Ca = "Mainnet", kl = "Testnet", Of = "mainnet", zy = "testnet", Ha = "main", Yp = "testnet", yP = "signet", Me = "mainnet", jt = "signet", Ze = "testnet", $t = "testnet4", kr = "fractal mainnet", Nt = "fractal testnet", s7 = "regtest", Va = (e) => e === Me ? gs : e === Ze || e === $t ? If : e === jt ? gP : gs, a7 = (e) => e === Me ? Of : e === Ze ? zy : Of, jy = (e) => e === Me ? Tf : e === Ze ? $y : e === $t ? Ny : e === jt ? Uy : e === kr ? Cy : e === Nt ? Hy : Tf, c7 = (e) => e === Me ? xs : e === Ze ? Pf : e === $t ? Ry : e === jt ? Ly : e === Nt ? Pf : xs, Al = (e) => e === Me ? Ca : e === Ze || e === $t || e === jt ? kl : Ca, wP = (e) => e === Me ? Ha : e === $t || e === Ze ? Yp : e === jt ? yP : Ha, Nc = (e) => e === Tf ? Me : e === $y ? Ze : e === Ny ? $t : e === Uy ? jt : e === Cy ? kr : e === Hy ? Nt : Me, u7 = (e) => e === gs ? Me : e === If ? Ze : Me, l7 = (e) => e === Of ? Me : e === zy ? Ze : Me, vP = (e) => e === mP ? Me : e === bP ? Ze : Me, Jp = (e) => e === xs ? Me : e === Pf ? Ze : e === Ry ? $t : e === Ly ? jt : e === Nt ? Ze : Me;
function My(e, t) {
  return function() {
    return e.apply(t, arguments);
  };
}
const { toString: xP } = Object.prototype, { getPrototypeOf: fh } = Object, du = /* @__PURE__ */ ((e) => (t) => {
  const r = xP.call(t);
  return e[r] || (e[r] = r.slice(8, -1).toLowerCase());
})(/* @__PURE__ */ Object.create(null)), Fr = (e) => (e = e.toLowerCase(), (t) => du(t) === e), hu = (e) => (t) => typeof t === e, { isArray: rs } = Array, Ks = hu("undefined");
function EP(e) {
  return e !== null && !Ks(e) && e.constructor !== null && !Ks(e.constructor) && fr(e.constructor.isBuffer) && e.constructor.isBuffer(e);
}
const Dy = Fr("ArrayBuffer");
function _P(e) {
  let t;
  return typeof ArrayBuffer < "u" && ArrayBuffer.isView ? t = ArrayBuffer.isView(e) : t = e && e.buffer && Dy(e.buffer), t;
}
const SP = hu("string"), fr = hu("function"), Fy = hu("number"), pu = (e) => e !== null && typeof e == "object", kP = (e) => e === !0 || e === !1, Wa = (e) => {
  if (du(e) !== "object")
    return !1;
  const t = fh(e);
  return (t === null || t === Object.prototype || Object.getPrototypeOf(t) === null) && !(Symbol.toStringTag in e) && !(Symbol.iterator in e);
}, AP = Fr("Date"), TP = Fr("File"), IP = Fr("Blob"), PP = Fr("FileList"), OP = (e) => pu(e) && fr(e.pipe), BP = (e) => {
  let t;
  return e && (typeof FormData == "function" && e instanceof FormData || fr(e.append) && ((t = du(e)) === "formdata" || // detect form-data instance
  t === "object" && fr(e.toString) && e.toString() === "[object FormData]"));
}, $P = Fr("URLSearchParams"), [NP, UP, CP, HP] = ["ReadableStream", "Request", "Response", "Headers"].map(Fr), RP = (e) => e.trim ? e.trim() : e.replace(/^[\s\uFEFF\xA0]+|[\s\uFEFF\xA0]+$/g, "");
function la(e, t, { allOwnKeys: r = !1 } = {}) {
  if (e === null || typeof e > "u")
    return;
  let n, o;
  if (typeof e != "object" && (e = [e]), rs(e))
    for (n = 0, o = e.length; n < o; n++)
      t.call(null, e[n], n, e);
  else {
    const i = r ? Object.getOwnPropertyNames(e) : Object.keys(e), s = i.length;
    let a;
    for (n = 0; n < s; n++)
      a = i[n], t.call(null, e[a], a, e);
  }
}
function Ky(e, t) {
  t = t.toLowerCase();
  const r = Object.keys(e);
  let n = r.length, o;
  for (; n-- > 0; )
    if (o = r[n], t === o.toLowerCase())
      return o;
  return null;
}
const jo = typeof globalThis < "u" ? globalThis : typeof self < "u" ? self : typeof window < "u" ? window : global, qy = (e) => !Ks(e) && e !== jo;
function Bf() {
  const { caseless: e } = qy(this) && this || {}, t = {}, r = (n, o) => {
    const i = e && Ky(t, o) || o;
    Wa(t[i]) && Wa(n) ? t[i] = Bf(t[i], n) : Wa(n) ? t[i] = Bf({}, n) : rs(n) ? t[i] = n.slice() : t[i] = n;
  };
  for (let n = 0, o = arguments.length; n < o; n++)
    arguments[n] && la(arguments[n], r);
  return t;
}
const LP = (e, t, r, { allOwnKeys: n } = {}) => (la(t, (o, i) => {
  r && fr(o) ? e[i] = My(o, r) : e[i] = o;
}, { allOwnKeys: n }), e), zP = (e) => (e.charCodeAt(0) === 65279 && (e = e.slice(1)), e), jP = (e, t, r, n) => {
  e.prototype = Object.create(t.prototype, n), e.prototype.constructor = e, Object.defineProperty(e, "super", {
    value: t.prototype
  }), r && Object.assign(e.prototype, r);
}, MP = (e, t, r, n) => {
  let o, i, s;
  const a = {};
  if (t = t || {}, e == null) return t;
  do {
    for (o = Object.getOwnPropertyNames(e), i = o.length; i-- > 0; )
      s = o[i], (!n || n(s, e, t)) && !a[s] && (t[s] = e[s], a[s] = !0);
    e = r !== !1 && fh(e);
  } while (e && (!r || r(e, t)) && e !== Object.prototype);
  return t;
}, DP = (e, t, r) => {
  e = String(e), (r === void 0 || r > e.length) && (r = e.length), r -= t.length;
  const n = e.indexOf(t, r);
  return n !== -1 && n === r;
}, FP = (e) => {
  if (!e) return null;
  if (rs(e)) return e;
  let t = e.length;
  if (!Fy(t)) return null;
  const r = new Array(t);
  for (; t-- > 0; )
    r[t] = e[t];
  return r;
}, KP = /* @__PURE__ */ ((e) => (t) => e && t instanceof e)(typeof Uint8Array < "u" && fh(Uint8Array)), qP = (e, t) => {
  const n = (e && e[Symbol.iterator]).call(e);
  let o;
  for (; (o = n.next()) && !o.done; ) {
    const i = o.value;
    t.call(e, i[0], i[1]);
  }
}, VP = (e, t) => {
  let r;
  const n = [];
  for (; (r = e.exec(t)) !== null; )
    n.push(r);
  return n;
}, WP = Fr("HTMLFormElement"), GP = (e) => e.toLowerCase().replace(
  /[-_\s]([a-z\d])(\w*)/g,
  function(r, n, o) {
    return n.toUpperCase() + o;
  }
), Qp = (({ hasOwnProperty: e }) => (t, r) => e.call(t, r))(Object.prototype), ZP = Fr("RegExp"), Vy = (e, t) => {
  const r = Object.getOwnPropertyDescriptors(e), n = {};
  la(r, (o, i) => {
    let s;
    (s = t(o, i, e)) !== !1 && (n[i] = s || o);
  }), Object.defineProperties(e, n);
}, XP = (e) => {
  Vy(e, (t, r) => {
    if (fr(e) && ["arguments", "caller", "callee"].indexOf(r) !== -1)
      return !1;
    const n = e[r];
    if (fr(n)) {
      if (t.enumerable = !1, "writable" in t) {
        t.writable = !1;
        return;
      }
      t.set || (t.set = () => {
        throw Error("Can not rewrite read-only method '" + r + "'");
      });
    }
  });
}, YP = (e, t) => {
  const r = {}, n = (o) => {
    o.forEach((i) => {
      r[i] = !0;
    });
  };
  return rs(e) ? n(e) : n(String(e).split(t)), r;
}, JP = () => {
}, QP = (e, t) => e != null && Number.isFinite(e = +e) ? e : t, Tl = "abcdefghijklmnopqrstuvwxyz", e0 = "0123456789", Wy = {
  DIGIT: e0,
  ALPHA: Tl,
  ALPHA_DIGIT: Tl + Tl.toUpperCase() + e0
}, eO = (e = 16, t = Wy.ALPHA_DIGIT) => {
  let r = "";
  const { length: n } = t;
  for (; e--; )
    r += t[Math.random() * n | 0];
  return r;
};
function tO(e) {
  return !!(e && fr(e.append) && e[Symbol.toStringTag] === "FormData" && e[Symbol.iterator]);
}
const rO = (e) => {
  const t = new Array(10), r = (n, o) => {
    if (pu(n)) {
      if (t.indexOf(n) >= 0)
        return;
      if (!("toJSON" in n)) {
        t[o] = n;
        const i = rs(n) ? [] : {};
        return la(n, (s, a) => {
          const c = r(s, o + 1);
          !Ks(c) && (i[a] = c);
        }), t[o] = void 0, i;
      }
    }
    return n;
  };
  return r(e, 0);
}, nO = Fr("AsyncFunction"), oO = (e) => e && (pu(e) || fr(e)) && fr(e.then) && fr(e.catch), Gy = ((e, t) => e ? setImmediate : t ? ((r, n) => (jo.addEventListener("message", ({ source: o, data: i }) => {
  o === jo && i === r && n.length && n.shift()();
}, !1), (o) => {
  n.push(o), jo.postMessage(r, "*");
}))(`axios@${Math.random()}`, []) : (r) => setTimeout(r))(
  typeof setImmediate == "function",
  fr(jo.postMessage)
), iO = typeof queueMicrotask < "u" ? queueMicrotask.bind(jo) : typeof process < "u" && process.nextTick || Gy, L = {
  isArray: rs,
  isArrayBuffer: Dy,
  isBuffer: EP,
  isFormData: BP,
  isArrayBufferView: _P,
  isString: SP,
  isNumber: Fy,
  isBoolean: kP,
  isObject: pu,
  isPlainObject: Wa,
  isReadableStream: NP,
  isRequest: UP,
  isResponse: CP,
  isHeaders: HP,
  isUndefined: Ks,
  isDate: AP,
  isFile: TP,
  isBlob: IP,
  isRegExp: ZP,
  isFunction: fr,
  isStream: OP,
  isURLSearchParams: $P,
  isTypedArray: KP,
  isFileList: PP,
  forEach: la,
  merge: Bf,
  extend: LP,
  trim: RP,
  stripBOM: zP,
  inherits: jP,
  toFlatObject: MP,
  kindOf: du,
  kindOfTest: Fr,
  endsWith: DP,
  toArray: FP,
  forEachEntry: qP,
  matchAll: VP,
  isHTMLForm: WP,
  hasOwnProperty: Qp,
  hasOwnProp: Qp,
  // an alias to avoid ESLint no-prototype-builtins detection
  reduceDescriptors: Vy,
  freezeMethods: XP,
  toObjectSet: YP,
  toCamelCase: GP,
  noop: JP,
  toFiniteNumber: QP,
  findKey: Ky,
  global: jo,
  isContextDefined: qy,
  ALPHABET: Wy,
  generateString: eO,
  isSpecCompliantForm: tO,
  toJSONObject: rO,
  isAsyncFn: nO,
  isThenable: oO,
  setImmediate: Gy,
  asap: iO
};
function _e(e, t, r, n, o) {
  Error.call(this), Error.captureStackTrace ? Error.captureStackTrace(this, this.constructor) : this.stack = new Error().stack, this.message = e, this.name = "AxiosError", t && (this.code = t), r && (this.config = r), n && (this.request = n), o && (this.response = o, this.status = o.status ? o.status : null);
}
L.inherits(_e, Error, {
  toJSON: function() {
    return {
      // Standard
      message: this.message,
      name: this.name,
      // Microsoft
      description: this.description,
      number: this.number,
      // Mozilla
      fileName: this.fileName,
      lineNumber: this.lineNumber,
      columnNumber: this.columnNumber,
      stack: this.stack,
      // Axios
      config: L.toJSONObject(this.config),
      code: this.code,
      status: this.status
    };
  }
});
const Zy = _e.prototype, Xy = {};
[
  "ERR_BAD_OPTION_VALUE",
  "ERR_BAD_OPTION",
  "ECONNABORTED",
  "ETIMEDOUT",
  "ERR_NETWORK",
  "ERR_FR_TOO_MANY_REDIRECTS",
  "ERR_DEPRECATED",
  "ERR_BAD_RESPONSE",
  "ERR_BAD_REQUEST",
  "ERR_CANCELED",
  "ERR_NOT_SUPPORT",
  "ERR_INVALID_URL"
  // eslint-disable-next-line func-names
].forEach((e) => {
  Xy[e] = { value: e };
});
Object.defineProperties(_e, Xy);
Object.defineProperty(Zy, "isAxiosError", { value: !0 });
_e.from = (e, t, r, n, o, i) => {
  const s = Object.create(Zy);
  return L.toFlatObject(e, s, function(c) {
    return c !== Error.prototype;
  }, (a) => a !== "isAxiosError"), _e.call(s, e.message, t, r, n, o), s.cause = e, s.name = e.name, i && Object.assign(s, i), s;
};
const sO = null;
function $f(e) {
  return L.isPlainObject(e) || L.isArray(e);
}
function Yy(e) {
  return L.endsWith(e, "[]") ? e.slice(0, -2) : e;
}
function t0(e, t, r) {
  return e ? e.concat(t).map(function(o, i) {
    return o = Yy(o), !r && i ? "[" + o + "]" : o;
  }).join(r ? "." : "") : t;
}
function aO(e) {
  return L.isArray(e) && !e.some($f);
}
const cO = L.toFlatObject(L, {}, null, function(t) {
  return /^is[A-Z]/.test(t);
});
function gu(e, t, r) {
  if (!L.isObject(e))
    throw new TypeError("target must be an object");
  t = t || new FormData(), r = L.toFlatObject(r, {
    metaTokens: !0,
    dots: !1,
    indexes: !1
  }, !1, function(y, g) {
    return !L.isUndefined(g[y]);
  });
  const n = r.metaTokens, o = r.visitor || f, i = r.dots, s = r.indexes, c = (r.Blob || typeof Blob < "u" && Blob) && L.isSpecCompliantForm(t);
  if (!L.isFunction(o))
    throw new TypeError("visitor must be a function");
  function u(b) {
    if (b === null) return "";
    if (L.isDate(b))
      return b.toISOString();
    if (!c && L.isBlob(b))
      throw new _e("Blob is not supported. Use a Buffer instead.");
    return L.isArrayBuffer(b) || L.isTypedArray(b) ? c && typeof Blob == "function" ? new Blob([b]) : Buffer.from(b) : b;
  }
  function f(b, y, g) {
    let x = b;
    if (b && !g && typeof b == "object") {
      if (L.endsWith(y, "{}"))
        y = n ? y : y.slice(0, -2), b = JSON.stringify(b);
      else if (L.isArray(b) && aO(b) || (L.isFileList(b) || L.endsWith(y, "[]")) && (x = L.toArray(b)))
        return y = Yy(y), x.forEach(function(v, T) {
          !(L.isUndefined(v) || v === null) && t.append(
            // eslint-disable-next-line no-nested-ternary
            s === !0 ? t0([y], T, i) : s === null ? y : y + "[]",
            u(v)
          );
        }), !1;
    }
    return $f(b) ? !0 : (t.append(t0(g, y, i), u(b)), !1);
  }
  const l = [], h = Object.assign(cO, {
    defaultVisitor: f,
    convertValue: u,
    isVisitable: $f
  });
  function m(b, y) {
    if (!L.isUndefined(b)) {
      if (l.indexOf(b) !== -1)
        throw Error("Circular reference detected in " + y.join("."));
      l.push(b), L.forEach(b, function(x, S) {
        (!(L.isUndefined(x) || x === null) && o.call(
          t,
          x,
          L.isString(S) ? S.trim() : S,
          y,
          h
        )) === !0 && m(x, y ? y.concat(S) : [S]);
      }), l.pop();
    }
  }
  if (!L.isObject(e))
    throw new TypeError("data must be an object");
  return m(e), t;
}
function r0(e) {
  const t = {
    "!": "%21",
    "'": "%27",
    "(": "%28",
    ")": "%29",
    "~": "%7E",
    "%20": "+",
    "%00": "\0"
  };
  return encodeURIComponent(e).replace(/[!'()~]|%20|%00/g, function(n) {
    return t[n];
  });
}
function dh(e, t) {
  this._pairs = [], e && gu(e, this, t);
}
const Jy = dh.prototype;
Jy.append = function(t, r) {
  this._pairs.push([t, r]);
};
Jy.toString = function(t) {
  const r = t ? function(n) {
    return t.call(this, n, r0);
  } : r0;
  return this._pairs.map(function(o) {
    return r(o[0]) + "=" + r(o[1]);
  }, "").join("&");
};
function uO(e) {
  return encodeURIComponent(e).replace(/%3A/gi, ":").replace(/%24/g, "$").replace(/%2C/gi, ",").replace(/%20/g, "+").replace(/%5B/gi, "[").replace(/%5D/gi, "]");
}
function Qy(e, t, r) {
  if (!t)
    return e;
  const n = r && r.encode || uO, o = r && r.serialize;
  let i;
  if (o ? i = o(t, r) : i = L.isURLSearchParams(t) ? t.toString() : new dh(t, r).toString(n), i) {
    const s = e.indexOf("#");
    s !== -1 && (e = e.slice(0, s)), e += (e.indexOf("?") === -1 ? "?" : "&") + i;
  }
  return e;
}
class n0 {
  constructor() {
    this.handlers = [];
  }
  /**
   * Add a new interceptor to the stack
   *
   * @param {Function} fulfilled The function to handle `then` for a `Promise`
   * @param {Function} rejected The function to handle `reject` for a `Promise`
   *
   * @return {Number} An ID used to remove interceptor later
   */
  use(t, r, n) {
    return this.handlers.push({
      fulfilled: t,
      rejected: r,
      synchronous: n ? n.synchronous : !1,
      runWhen: n ? n.runWhen : null
    }), this.handlers.length - 1;
  }
  /**
   * Remove an interceptor from the stack
   *
   * @param {Number} id The ID that was returned by `use`
   *
   * @returns {Boolean} `true` if the interceptor was removed, `false` otherwise
   */
  eject(t) {
    this.handlers[t] && (this.handlers[t] = null);
  }
  /**
   * Clear all interceptors from the stack
   *
   * @returns {void}
   */
  clear() {
    this.handlers && (this.handlers = []);
  }
  /**
   * Iterate over all the registered interceptors
   *
   * This method is particularly useful for skipping over any
   * interceptors that may have become `null` calling `eject`.
   *
   * @param {Function} fn The function to call for each interceptor
   *
   * @returns {void}
   */
  forEach(t) {
    L.forEach(this.handlers, function(n) {
      n !== null && t(n);
    });
  }
}
const ew = {
  silentJSONParsing: !0,
  forcedJSONParsing: !0,
  clarifyTimeoutError: !1
}, lO = typeof URLSearchParams < "u" ? URLSearchParams : dh, fO = typeof FormData < "u" ? FormData : null, dO = typeof Blob < "u" ? Blob : null, hO = {
  isBrowser: !0,
  classes: {
    URLSearchParams: lO,
    FormData: fO,
    Blob: dO
  },
  protocols: ["http", "https", "file", "blob", "url", "data"]
}, hh = typeof window < "u" && typeof document < "u", Nf = typeof navigator == "object" && navigator || void 0, pO = hh && (!Nf || ["ReactNative", "NativeScript", "NS"].indexOf(Nf.product) < 0), gO = typeof WorkerGlobalScope < "u" && // eslint-disable-next-line no-undef
self instanceof WorkerGlobalScope && typeof self.importScripts == "function", mO = hh && window.location.href || "http://localhost", bO = /* @__PURE__ */ Object.freeze(/* @__PURE__ */ Object.defineProperty({
  __proto__: null,
  hasBrowserEnv: hh,
  hasStandardBrowserEnv: pO,
  hasStandardBrowserWebWorkerEnv: gO,
  navigator: Nf,
  origin: mO
}, Symbol.toStringTag, { value: "Module" })), rr = {
  ...bO,
  ...hO
};
function yO(e, t) {
  return gu(e, new rr.classes.URLSearchParams(), Object.assign({
    visitor: function(r, n, o, i) {
      return rr.isNode && L.isBuffer(r) ? (this.append(n, r.toString("base64")), !1) : i.defaultVisitor.apply(this, arguments);
    }
  }, t));
}
function wO(e) {
  return L.matchAll(/\w+|\[(\w*)]/g, e).map((t) => t[0] === "[]" ? "" : t[1] || t[0]);
}
function vO(e) {
  const t = {}, r = Object.keys(e);
  let n;
  const o = r.length;
  let i;
  for (n = 0; n < o; n++)
    i = r[n], t[i] = e[i];
  return t;
}
function tw(e) {
  function t(r, n, o, i) {
    let s = r[i++];
    if (s === "__proto__") return !0;
    const a = Number.isFinite(+s), c = i >= r.length;
    return s = !s && L.isArray(o) ? o.length : s, c ? (L.hasOwnProp(o, s) ? o[s] = [o[s], n] : o[s] = n, !a) : ((!o[s] || !L.isObject(o[s])) && (o[s] = []), t(r, n, o[s], i) && L.isArray(o[s]) && (o[s] = vO(o[s])), !a);
  }
  if (L.isFormData(e) && L.isFunction(e.entries)) {
    const r = {};
    return L.forEachEntry(e, (n, o) => {
      t(wO(n), o, r, 0);
    }), r;
  }
  return null;
}
function xO(e, t, r) {
  if (L.isString(e))
    try {
      return (t || JSON.parse)(e), L.trim(e);
    } catch (n) {
      if (n.name !== "SyntaxError")
        throw n;
    }
  return (0, JSON.stringify)(e);
}
const fa = {
  transitional: ew,
  adapter: ["xhr", "http", "fetch"],
  transformRequest: [function(t, r) {
    const n = r.getContentType() || "", o = n.indexOf("application/json") > -1, i = L.isObject(t);
    if (i && L.isHTMLForm(t) && (t = new FormData(t)), L.isFormData(t))
      return o ? JSON.stringify(tw(t)) : t;
    if (L.isArrayBuffer(t) || L.isBuffer(t) || L.isStream(t) || L.isFile(t) || L.isBlob(t) || L.isReadableStream(t))
      return t;
    if (L.isArrayBufferView(t))
      return t.buffer;
    if (L.isURLSearchParams(t))
      return r.setContentType("application/x-www-form-urlencoded;charset=utf-8", !1), t.toString();
    let a;
    if (i) {
      if (n.indexOf("application/x-www-form-urlencoded") > -1)
        return yO(t, this.formSerializer).toString();
      if ((a = L.isFileList(t)) || n.indexOf("multipart/form-data") > -1) {
        const c = this.env && this.env.FormData;
        return gu(
          a ? { "files[]": t } : t,
          c && new c(),
          this.formSerializer
        );
      }
    }
    return i || o ? (r.setContentType("application/json", !1), xO(t)) : t;
  }],
  transformResponse: [function(t) {
    const r = this.transitional || fa.transitional, n = r && r.forcedJSONParsing, o = this.responseType === "json";
    if (L.isResponse(t) || L.isReadableStream(t))
      return t;
    if (t && L.isString(t) && (n && !this.responseType || o)) {
      const s = !(r && r.silentJSONParsing) && o;
      try {
        return JSON.parse(t);
      } catch (a) {
        if (s)
          throw a.name === "SyntaxError" ? _e.from(a, _e.ERR_BAD_RESPONSE, this, null, this.response) : a;
      }
    }
    return t;
  }],
  /**
   * A timeout in milliseconds to abort a request. If set to 0 (default) a
   * timeout is not created.
   */
  timeout: 0,
  xsrfCookieName: "XSRF-TOKEN",
  xsrfHeaderName: "X-XSRF-TOKEN",
  maxContentLength: -1,
  maxBodyLength: -1,
  env: {
    FormData: rr.classes.FormData,
    Blob: rr.classes.Blob
  },
  validateStatus: function(t) {
    return t >= 200 && t < 300;
  },
  headers: {
    common: {
      Accept: "application/json, text/plain, */*",
      "Content-Type": void 0
    }
  }
};
L.forEach(["delete", "get", "head", "post", "put", "patch"], (e) => {
  fa.headers[e] = {};
});
const EO = L.toObjectSet([
  "age",
  "authorization",
  "content-length",
  "content-type",
  "etag",
  "expires",
  "from",
  "host",
  "if-modified-since",
  "if-unmodified-since",
  "last-modified",
  "location",
  "max-forwards",
  "proxy-authorization",
  "referer",
  "retry-after",
  "user-agent"
]), _O = (e) => {
  const t = {};
  let r, n, o;
  return e && e.split(`
`).forEach(function(s) {
    o = s.indexOf(":"), r = s.substring(0, o).trim().toLowerCase(), n = s.substring(o + 1).trim(), !(!r || t[r] && EO[r]) && (r === "set-cookie" ? t[r] ? t[r].push(n) : t[r] = [n] : t[r] = t[r] ? t[r] + ", " + n : n);
  }), t;
}, o0 = Symbol("internals");
function ps(e) {
  return e && String(e).trim().toLowerCase();
}
function Ga(e) {
  return e === !1 || e == null ? e : L.isArray(e) ? e.map(Ga) : String(e);
}
function SO(e) {
  const t = /* @__PURE__ */ Object.create(null), r = /([^\s,;=]+)\s*(?:=\s*([^,;]+))?/g;
  let n;
  for (; n = r.exec(e); )
    t[n[1]] = n[2];
  return t;
}
const kO = (e) => /^[-_a-zA-Z0-9^`|~,!#$%&'*+.]+$/.test(e.trim());
function Il(e, t, r, n, o) {
  if (L.isFunction(n))
    return n.call(this, t, r);
  if (o && (t = r), !!L.isString(t)) {
    if (L.isString(n))
      return t.indexOf(n) !== -1;
    if (L.isRegExp(n))
      return n.test(t);
  }
}
function AO(e) {
  return e.trim().toLowerCase().replace(/([a-z\d])(\w*)/g, (t, r, n) => r.toUpperCase() + n);
}
function TO(e, t) {
  const r = L.toCamelCase(" " + t);
  ["get", "set", "has"].forEach((n) => {
    Object.defineProperty(e, n + r, {
      value: function(o, i, s) {
        return this[n].call(this, t, o, i, s);
      },
      configurable: !0
    });
  });
}
class nr {
  constructor(t) {
    t && this.set(t);
  }
  set(t, r, n) {
    const o = this;
    function i(a, c, u) {
      const f = ps(c);
      if (!f)
        throw new Error("header name must be a non-empty string");
      const l = L.findKey(o, f);
      (!l || o[l] === void 0 || u === !0 || u === void 0 && o[l] !== !1) && (o[l || c] = Ga(a));
    }
    const s = (a, c) => L.forEach(a, (u, f) => i(u, f, c));
    if (L.isPlainObject(t) || t instanceof this.constructor)
      s(t, r);
    else if (L.isString(t) && (t = t.trim()) && !kO(t))
      s(_O(t), r);
    else if (L.isHeaders(t))
      for (const [a, c] of t.entries())
        i(c, a, n);
    else
      t != null && i(r, t, n);
    return this;
  }
  get(t, r) {
    if (t = ps(t), t) {
      const n = L.findKey(this, t);
      if (n) {
        const o = this[n];
        if (!r)
          return o;
        if (r === !0)
          return SO(o);
        if (L.isFunction(r))
          return r.call(this, o, n);
        if (L.isRegExp(r))
          return r.exec(o);
        throw new TypeError("parser must be boolean|regexp|function");
      }
    }
  }
  has(t, r) {
    if (t = ps(t), t) {
      const n = L.findKey(this, t);
      return !!(n && this[n] !== void 0 && (!r || Il(this, this[n], n, r)));
    }
    return !1;
  }
  delete(t, r) {
    const n = this;
    let o = !1;
    function i(s) {
      if (s = ps(s), s) {
        const a = L.findKey(n, s);
        a && (!r || Il(n, n[a], a, r)) && (delete n[a], o = !0);
      }
    }
    return L.isArray(t) ? t.forEach(i) : i(t), o;
  }
  clear(t) {
    const r = Object.keys(this);
    let n = r.length, o = !1;
    for (; n--; ) {
      const i = r[n];
      (!t || Il(this, this[i], i, t, !0)) && (delete this[i], o = !0);
    }
    return o;
  }
  normalize(t) {
    const r = this, n = {};
    return L.forEach(this, (o, i) => {
      const s = L.findKey(n, i);
      if (s) {
        r[s] = Ga(o), delete r[i];
        return;
      }
      const a = t ? AO(i) : String(i).trim();
      a !== i && delete r[i], r[a] = Ga(o), n[a] = !0;
    }), this;
  }
  concat(...t) {
    return this.constructor.concat(this, ...t);
  }
  toJSON(t) {
    const r = /* @__PURE__ */ Object.create(null);
    return L.forEach(this, (n, o) => {
      n != null && n !== !1 && (r[o] = t && L.isArray(n) ? n.join(", ") : n);
    }), r;
  }
  [Symbol.iterator]() {
    return Object.entries(this.toJSON())[Symbol.iterator]();
  }
  toString() {
    return Object.entries(this.toJSON()).map(([t, r]) => t + ": " + r).join(`
`);
  }
  get [Symbol.toStringTag]() {
    return "AxiosHeaders";
  }
  static from(t) {
    return t instanceof this ? t : new this(t);
  }
  static concat(t, ...r) {
    const n = new this(t);
    return r.forEach((o) => n.set(o)), n;
  }
  static accessor(t) {
    const n = (this[o0] = this[o0] = {
      accessors: {}
    }).accessors, o = this.prototype;
    function i(s) {
      const a = ps(s);
      n[a] || (TO(o, s), n[a] = !0);
    }
    return L.isArray(t) ? t.forEach(i) : i(t), this;
  }
}
nr.accessor(["Content-Type", "Content-Length", "Accept", "Accept-Encoding", "User-Agent", "Authorization"]);
L.reduceDescriptors(nr.prototype, ({ value: e }, t) => {
  let r = t[0].toUpperCase() + t.slice(1);
  return {
    get: () => e,
    set(n) {
      this[r] = n;
    }
  };
});
L.freezeMethods(nr);
function Pl(e, t) {
  const r = this || fa, n = t || r, o = nr.from(n.headers);
  let i = n.data;
  return L.forEach(e, function(a) {
    i = a.call(r, i, o.normalize(), t ? t.status : void 0);
  }), o.normalize(), i;
}
function rw(e) {
  return !!(e && e.__CANCEL__);
}
function ns(e, t, r) {
  _e.call(this, e ?? "canceled", _e.ERR_CANCELED, t, r), this.name = "CanceledError";
}
L.inherits(ns, _e, {
  __CANCEL__: !0
});
function nw(e, t, r) {
  const n = r.config.validateStatus;
  !r.status || !n || n(r.status) ? e(r) : t(new _e(
    "Request failed with status code " + r.status,
    [_e.ERR_BAD_REQUEST, _e.ERR_BAD_RESPONSE][Math.floor(r.status / 100) - 4],
    r.config,
    r.request,
    r
  ));
}
function IO(e) {
  const t = /^([-+\w]{1,25})(:?\/\/|:)/.exec(e);
  return t && t[1] || "";
}
function PO(e, t) {
  e = e || 10;
  const r = new Array(e), n = new Array(e);
  let o = 0, i = 0, s;
  return t = t !== void 0 ? t : 1e3, function(c) {
    const u = Date.now(), f = n[i];
    s || (s = u), r[o] = c, n[o] = u;
    let l = i, h = 0;
    for (; l !== o; )
      h += r[l++], l = l % e;
    if (o = (o + 1) % e, o === i && (i = (i + 1) % e), u - s < t)
      return;
    const m = f && u - f;
    return m ? Math.round(h * 1e3 / m) : void 0;
  };
}
function OO(e, t) {
  let r = 0, n = 1e3 / t, o, i;
  const s = (u, f = Date.now()) => {
    r = f, o = null, i && (clearTimeout(i), i = null), e.apply(null, u);
  };
  return [(...u) => {
    const f = Date.now(), l = f - r;
    l >= n ? s(u, f) : (o = u, i || (i = setTimeout(() => {
      i = null, s(o);
    }, n - l)));
  }, () => o && s(o)];
}
const Uc = (e, t, r = 3) => {
  let n = 0;
  const o = PO(50, 250);
  return OO((i) => {
    const s = i.loaded, a = i.lengthComputable ? i.total : void 0, c = s - n, u = o(c), f = s <= a;
    n = s;
    const l = {
      loaded: s,
      total: a,
      progress: a ? s / a : void 0,
      bytes: c,
      rate: u || void 0,
      estimated: u && a && f ? (a - s) / u : void 0,
      event: i,
      lengthComputable: a != null,
      [t ? "download" : "upload"]: !0
    };
    e(l);
  }, r);
}, i0 = (e, t) => {
  const r = e != null;
  return [(n) => t[0]({
    lengthComputable: r,
    total: e,
    loaded: n
  }), t[1]];
}, s0 = (e) => (...t) => L.asap(() => e(...t)), BO = rr.hasStandardBrowserEnv ? (
  // Standard browser envs have full support of the APIs needed to test
  // whether the request URL is of the same origin as current location.
  function() {
    const t = rr.navigator && /(msie|trident)/i.test(rr.navigator.userAgent), r = document.createElement("a");
    let n;
    function o(i) {
      let s = i;
      return t && (r.setAttribute("href", s), s = r.href), r.setAttribute("href", s), {
        href: r.href,
        protocol: r.protocol ? r.protocol.replace(/:$/, "") : "",
        host: r.host,
        search: r.search ? r.search.replace(/^\?/, "") : "",
        hash: r.hash ? r.hash.replace(/^#/, "") : "",
        hostname: r.hostname,
        port: r.port,
        pathname: r.pathname.charAt(0) === "/" ? r.pathname : "/" + r.pathname
      };
    }
    return n = o(window.location.href), function(s) {
      const a = L.isString(s) ? o(s) : s;
      return a.protocol === n.protocol && a.host === n.host;
    };
  }()
) : (
  // Non standard browser envs (web workers, react-native) lack needed support.
  /* @__PURE__ */ function() {
    return function() {
      return !0;
    };
  }()
), $O = rr.hasStandardBrowserEnv ? (
  // Standard browser envs support document.cookie
  {
    write(e, t, r, n, o, i) {
      const s = [e + "=" + encodeURIComponent(t)];
      L.isNumber(r) && s.push("expires=" + new Date(r).toGMTString()), L.isString(n) && s.push("path=" + n), L.isString(o) && s.push("domain=" + o), i === !0 && s.push("secure"), document.cookie = s.join("; ");
    },
    read(e) {
      const t = document.cookie.match(new RegExp("(^|;\\s*)(" + e + ")=([^;]*)"));
      return t ? decodeURIComponent(t[3]) : null;
    },
    remove(e) {
      this.write(e, "", Date.now() - 864e5);
    }
  }
) : (
  // Non-standard browser env (web workers, react-native) lack needed support.
  {
    write() {
    },
    read() {
      return null;
    },
    remove() {
    }
  }
);
function NO(e) {
  return /^([a-z][a-z\d+\-.]*:)?\/\//i.test(e);
}
function UO(e, t) {
  return t ? e.replace(/\/?\/$/, "") + "/" + t.replace(/^\/+/, "") : e;
}
function ow(e, t) {
  return e && !NO(t) ? UO(e, t) : t;
}
const a0 = (e) => e instanceof nr ? { ...e } : e;
function Jo(e, t) {
  t = t || {};
  const r = {};
  function n(u, f, l) {
    return L.isPlainObject(u) && L.isPlainObject(f) ? L.merge.call({ caseless: l }, u, f) : L.isPlainObject(f) ? L.merge({}, f) : L.isArray(f) ? f.slice() : f;
  }
  function o(u, f, l) {
    if (L.isUndefined(f)) {
      if (!L.isUndefined(u))
        return n(void 0, u, l);
    } else return n(u, f, l);
  }
  function i(u, f) {
    if (!L.isUndefined(f))
      return n(void 0, f);
  }
  function s(u, f) {
    if (L.isUndefined(f)) {
      if (!L.isUndefined(u))
        return n(void 0, u);
    } else return n(void 0, f);
  }
  function a(u, f, l) {
    if (l in t)
      return n(u, f);
    if (l in e)
      return n(void 0, u);
  }
  const c = {
    url: i,
    method: i,
    data: i,
    baseURL: s,
    transformRequest: s,
    transformResponse: s,
    paramsSerializer: s,
    timeout: s,
    timeoutMessage: s,
    withCredentials: s,
    withXSRFToken: s,
    adapter: s,
    responseType: s,
    xsrfCookieName: s,
    xsrfHeaderName: s,
    onUploadProgress: s,
    onDownloadProgress: s,
    decompress: s,
    maxContentLength: s,
    maxBodyLength: s,
    beforeRedirect: s,
    transport: s,
    httpAgent: s,
    httpsAgent: s,
    cancelToken: s,
    socketPath: s,
    responseEncoding: s,
    validateStatus: a,
    headers: (u, f) => o(a0(u), a0(f), !0)
  };
  return L.forEach(Object.keys(Object.assign({}, e, t)), function(f) {
    const l = c[f] || o, h = l(e[f], t[f], f);
    L.isUndefined(h) && l !== a || (r[f] = h);
  }), r;
}
const iw = (e) => {
  const t = Jo({}, e);
  let { data: r, withXSRFToken: n, xsrfHeaderName: o, xsrfCookieName: i, headers: s, auth: a } = t;
  t.headers = s = nr.from(s), t.url = Qy(ow(t.baseURL, t.url), e.params, e.paramsSerializer), a && s.set(
    "Authorization",
    "Basic " + btoa((a.username || "") + ":" + (a.password ? unescape(encodeURIComponent(a.password)) : ""))
  );
  let c;
  if (L.isFormData(r)) {
    if (rr.hasStandardBrowserEnv || rr.hasStandardBrowserWebWorkerEnv)
      s.setContentType(void 0);
    else if ((c = s.getContentType()) !== !1) {
      const [u, ...f] = c ? c.split(";").map((l) => l.trim()).filter(Boolean) : [];
      s.setContentType([u || "multipart/form-data", ...f].join("; "));
    }
  }
  if (rr.hasStandardBrowserEnv && (n && L.isFunction(n) && (n = n(t)), n || n !== !1 && BO(t.url))) {
    const u = o && i && $O.read(i);
    u && s.set(o, u);
  }
  return t;
}, CO = typeof XMLHttpRequest < "u", HO = CO && function(e) {
  return new Promise(function(r, n) {
    const o = iw(e);
    let i = o.data;
    const s = nr.from(o.headers).normalize();
    let { responseType: a, onUploadProgress: c, onDownloadProgress: u } = o, f, l, h, m, b;
    function y() {
      m && m(), b && b(), o.cancelToken && o.cancelToken.unsubscribe(f), o.signal && o.signal.removeEventListener("abort", f);
    }
    let g = new XMLHttpRequest();
    g.open(o.method.toUpperCase(), o.url, !0), g.timeout = o.timeout;
    function x() {
      if (!g)
        return;
      const v = nr.from(
        "getAllResponseHeaders" in g && g.getAllResponseHeaders()
      ), I = {
        data: !a || a === "text" || a === "json" ? g.responseText : g.response,
        status: g.status,
        statusText: g.statusText,
        headers: v,
        config: e,
        request: g
      };
      nw(function(H) {
        r(H), y();
      }, function(H) {
        n(H), y();
      }, I), g = null;
    }
    "onloadend" in g ? g.onloadend = x : g.onreadystatechange = function() {
      !g || g.readyState !== 4 || g.status === 0 && !(g.responseURL && g.responseURL.indexOf("file:") === 0) || setTimeout(x);
    }, g.onabort = function() {
      g && (n(new _e("Request aborted", _e.ECONNABORTED, e, g)), g = null);
    }, g.onerror = function() {
      n(new _e("Network Error", _e.ERR_NETWORK, e, g)), g = null;
    }, g.ontimeout = function() {
      let T = o.timeout ? "timeout of " + o.timeout + "ms exceeded" : "timeout exceeded";
      const I = o.transitional || ew;
      o.timeoutErrorMessage && (T = o.timeoutErrorMessage), n(new _e(
        T,
        I.clarifyTimeoutError ? _e.ETIMEDOUT : _e.ECONNABORTED,
        e,
        g
      )), g = null;
    }, i === void 0 && s.setContentType(null), "setRequestHeader" in g && L.forEach(s.toJSON(), function(T, I) {
      g.setRequestHeader(I, T);
    }), L.isUndefined(o.withCredentials) || (g.withCredentials = !!o.withCredentials), a && a !== "json" && (g.responseType = o.responseType), u && ([h, b] = Uc(u, !0), g.addEventListener("progress", h)), c && g.upload && ([l, m] = Uc(c), g.upload.addEventListener("progress", l), g.upload.addEventListener("loadend", m)), (o.cancelToken || o.signal) && (f = (v) => {
      g && (n(!v || v.type ? new ns(null, e, g) : v), g.abort(), g = null);
    }, o.cancelToken && o.cancelToken.subscribe(f), o.signal && (o.signal.aborted ? f() : o.signal.addEventListener("abort", f)));
    const S = IO(o.url);
    if (S && rr.protocols.indexOf(S) === -1) {
      n(new _e("Unsupported protocol " + S + ":", _e.ERR_BAD_REQUEST, e));
      return;
    }
    g.send(i || null);
  });
}, RO = (e, t) => {
  const { length: r } = e = e ? e.filter(Boolean) : [];
  if (t || r) {
    let n = new AbortController(), o;
    const i = function(u) {
      if (!o) {
        o = !0, a();
        const f = u instanceof Error ? u : this.reason;
        n.abort(f instanceof _e ? f : new ns(f instanceof Error ? f.message : f));
      }
    };
    let s = t && setTimeout(() => {
      s = null, i(new _e(`timeout ${t} of ms exceeded`, _e.ETIMEDOUT));
    }, t);
    const a = () => {
      e && (s && clearTimeout(s), s = null, e.forEach((u) => {
        u.unsubscribe ? u.unsubscribe(i) : u.removeEventListener("abort", i);
      }), e = null);
    };
    e.forEach((u) => u.addEventListener("abort", i));
    const { signal: c } = n;
    return c.unsubscribe = () => L.asap(a), c;
  }
}, LO = function* (e, t) {
  let r = e.byteLength;
  if (r < t) {
    yield e;
    return;
  }
  let n = 0, o;
  for (; n < r; )
    o = n + t, yield e.slice(n, o), n = o;
}, zO = async function* (e, t) {
  for await (const r of jO(e))
    yield* LO(r, t);
}, jO = async function* (e) {
  if (e[Symbol.asyncIterator]) {
    yield* e;
    return;
  }
  const t = e.getReader();
  try {
    for (; ; ) {
      const { done: r, value: n } = await t.read();
      if (r)
        break;
      yield n;
    }
  } finally {
    await t.cancel();
  }
}, c0 = (e, t, r, n) => {
  const o = zO(e, t);
  let i = 0, s, a = (c) => {
    s || (s = !0, n && n(c));
  };
  return new ReadableStream({
    async pull(c) {
      try {
        const { done: u, value: f } = await o.next();
        if (u) {
          a(), c.close();
          return;
        }
        let l = f.byteLength;
        if (r) {
          let h = i += l;
          r(h);
        }
        c.enqueue(new Uint8Array(f));
      } catch (u) {
        throw a(u), u;
      }
    },
    cancel(c) {
      return a(c), o.return();
    }
  }, {
    highWaterMark: 2
  });
}, mu = typeof fetch == "function" && typeof Request == "function" && typeof Response == "function", sw = mu && typeof ReadableStream == "function", MO = mu && (typeof TextEncoder == "function" ? /* @__PURE__ */ ((e) => (t) => e.encode(t))(new TextEncoder()) : async (e) => new Uint8Array(await new Response(e).arrayBuffer())), aw = (e, ...t) => {
  try {
    return !!e(...t);
  } catch {
    return !1;
  }
}, DO = sw && aw(() => {
  let e = !1;
  const t = new Request(rr.origin, {
    body: new ReadableStream(),
    method: "POST",
    get duplex() {
      return e = !0, "half";
    }
  }).headers.has("Content-Type");
  return e && !t;
}), u0 = 64 * 1024, Uf = sw && aw(() => L.isReadableStream(new Response("").body)), Cc = {
  stream: Uf && ((e) => e.body)
};
mu && ((e) => {
  ["text", "arrayBuffer", "blob", "formData", "stream"].forEach((t) => {
    !Cc[t] && (Cc[t] = L.isFunction(e[t]) ? (r) => r[t]() : (r, n) => {
      throw new _e(`Response type '${t}' is not supported`, _e.ERR_NOT_SUPPORT, n);
    });
  });
})(new Response());
const FO = async (e) => {
  if (e == null)
    return 0;
  if (L.isBlob(e))
    return e.size;
  if (L.isSpecCompliantForm(e))
    return (await new Request(rr.origin, {
      method: "POST",
      body: e
    }).arrayBuffer()).byteLength;
  if (L.isArrayBufferView(e) || L.isArrayBuffer(e))
    return e.byteLength;
  if (L.isURLSearchParams(e) && (e = e + ""), L.isString(e))
    return (await MO(e)).byteLength;
}, KO = async (e, t) => {
  const r = L.toFiniteNumber(e.getContentLength());
  return r ?? FO(t);
}, qO = mu && (async (e) => {
  let {
    url: t,
    method: r,
    data: n,
    signal: o,
    cancelToken: i,
    timeout: s,
    onDownloadProgress: a,
    onUploadProgress: c,
    responseType: u,
    headers: f,
    withCredentials: l = "same-origin",
    fetchOptions: h
  } = iw(e);
  u = u ? (u + "").toLowerCase() : "text";
  let m = RO([o, i && i.toAbortSignal()], s), b;
  const y = m && m.unsubscribe && (() => {
    m.unsubscribe();
  });
  let g;
  try {
    if (c && DO && r !== "get" && r !== "head" && (g = await KO(f, n)) !== 0) {
      let I = new Request(t, {
        method: "POST",
        body: n,
        duplex: "half"
      }), P;
      if (L.isFormData(n) && (P = I.headers.get("content-type")) && f.setContentType(P), I.body) {
        const [H, j] = i0(
          g,
          Uc(s0(c))
        );
        n = c0(I.body, u0, H, j);
      }
    }
    L.isString(l) || (l = l ? "include" : "omit");
    const x = "credentials" in Request.prototype;
    b = new Request(t, {
      ...h,
      signal: m,
      method: r.toUpperCase(),
      headers: f.normalize().toJSON(),
      body: n,
      duplex: "half",
      credentials: x ? l : void 0
    });
    let S = await fetch(b);
    const v = Uf && (u === "stream" || u === "response");
    if (Uf && (a || v && y)) {
      const I = {};
      ["status", "statusText", "headers"].forEach((V) => {
        I[V] = S[V];
      });
      const P = L.toFiniteNumber(S.headers.get("content-length")), [H, j] = a && i0(
        P,
        Uc(s0(a), !0)
      ) || [];
      S = new Response(
        c0(S.body, u0, H, () => {
          j && j(), y && y();
        }),
        I
      );
    }
    u = u || "text";
    let T = await Cc[L.findKey(Cc, u) || "text"](S, e);
    return !v && y && y(), await new Promise((I, P) => {
      nw(I, P, {
        data: T,
        headers: nr.from(S.headers),
        status: S.status,
        statusText: S.statusText,
        config: e,
        request: b
      });
    });
  } catch (x) {
    throw y && y(), x && x.name === "TypeError" && /fetch/i.test(x.message) ? Object.assign(
      new _e("Network Error", _e.ERR_NETWORK, e, b),
      {
        cause: x.cause || x
      }
    ) : _e.from(x, x && x.code, e, b);
  }
}), Cf = {
  http: sO,
  xhr: HO,
  fetch: qO
};
L.forEach(Cf, (e, t) => {
  if (e) {
    try {
      Object.defineProperty(e, "name", { value: t });
    } catch {
    }
    Object.defineProperty(e, "adapterName", { value: t });
  }
});
const l0 = (e) => `- ${e}`, VO = (e) => L.isFunction(e) || e === null || e === !1, cw = {
  getAdapter: (e) => {
    e = L.isArray(e) ? e : [e];
    const { length: t } = e;
    let r, n;
    const o = {};
    for (let i = 0; i < t; i++) {
      r = e[i];
      let s;
      if (n = r, !VO(r) && (n = Cf[(s = String(r)).toLowerCase()], n === void 0))
        throw new _e(`Unknown adapter '${s}'`);
      if (n)
        break;
      o[s || "#" + i] = n;
    }
    if (!n) {
      const i = Object.entries(o).map(
        ([a, c]) => `adapter ${a} ` + (c === !1 ? "is not supported by the environment" : "is not available in the build")
      );
      let s = t ? i.length > 1 ? `since :
` + i.map(l0).join(`
`) : " " + l0(i[0]) : "as no adapter specified";
      throw new _e(
        "There is no suitable adapter to dispatch the request " + s,
        "ERR_NOT_SUPPORT"
      );
    }
    return n;
  },
  adapters: Cf
};
function Ol(e) {
  if (e.cancelToken && e.cancelToken.throwIfRequested(), e.signal && e.signal.aborted)
    throw new ns(null, e);
}
function f0(e) {
  return Ol(e), e.headers = nr.from(e.headers), e.data = Pl.call(
    e,
    e.transformRequest
  ), ["post", "put", "patch"].indexOf(e.method) !== -1 && e.headers.setContentType("application/x-www-form-urlencoded", !1), cw.getAdapter(e.adapter || fa.adapter)(e).then(function(n) {
    return Ol(e), n.data = Pl.call(
      e,
      e.transformResponse,
      n
    ), n.headers = nr.from(n.headers), n;
  }, function(n) {
    return rw(n) || (Ol(e), n && n.response && (n.response.data = Pl.call(
      e,
      e.transformResponse,
      n.response
    ), n.response.headers = nr.from(n.response.headers))), Promise.reject(n);
  });
}
const uw = "1.7.7", ph = {};
["object", "boolean", "number", "function", "string", "symbol"].forEach((e, t) => {
  ph[e] = function(n) {
    return typeof n === e || "a" + (t < 1 ? "n " : " ") + e;
  };
});
const d0 = {};
ph.transitional = function(t, r, n) {
  function o(i, s) {
    return "[Axios v" + uw + "] Transitional option '" + i + "'" + s + (n ? ". " + n : "");
  }
  return (i, s, a) => {
    if (t === !1)
      throw new _e(
        o(s, " has been removed" + (r ? " in " + r : "")),
        _e.ERR_DEPRECATED
      );
    return r && !d0[s] && (d0[s] = !0, console.warn(
      o(
        s,
        " has been deprecated since v" + r + " and will be removed in the near future"
      )
    )), t ? t(i, s, a) : !0;
  };
};
function WO(e, t, r) {
  if (typeof e != "object")
    throw new _e("options must be an object", _e.ERR_BAD_OPTION_VALUE);
  const n = Object.keys(e);
  let o = n.length;
  for (; o-- > 0; ) {
    const i = n[o], s = t[i];
    if (s) {
      const a = e[i], c = a === void 0 || s(a, i, e);
      if (c !== !0)
        throw new _e("option " + i + " must be " + c, _e.ERR_BAD_OPTION_VALUE);
      continue;
    }
    if (r !== !0)
      throw new _e("Unknown option " + i, _e.ERR_BAD_OPTION);
  }
}
const Hf = {
  assertOptions: WO,
  validators: ph
}, oo = Hf.validators;
class Ko {
  constructor(t) {
    this.defaults = t, this.interceptors = {
      request: new n0(),
      response: new n0()
    };
  }
  /**
   * Dispatch a request
   *
   * @param {String|Object} configOrUrl The config specific for this request (merged with this.defaults)
   * @param {?Object} config
   *
   * @returns {Promise} The Promise to be fulfilled
   */
  async request(t, r) {
    try {
      return await this._request(t, r);
    } catch (n) {
      if (n instanceof Error) {
        let o;
        Error.captureStackTrace ? Error.captureStackTrace(o = {}) : o = new Error();
        const i = o.stack ? o.stack.replace(/^.+\n/, "") : "";
        try {
          n.stack ? i && !String(n.stack).endsWith(i.replace(/^.+\n.+\n/, "")) && (n.stack += `
` + i) : n.stack = i;
        } catch {
        }
      }
      throw n;
    }
  }
  _request(t, r) {
    typeof t == "string" ? (r = r || {}, r.url = t) : r = t || {}, r = Jo(this.defaults, r);
    const { transitional: n, paramsSerializer: o, headers: i } = r;
    n !== void 0 && Hf.assertOptions(n, {
      silentJSONParsing: oo.transitional(oo.boolean),
      forcedJSONParsing: oo.transitional(oo.boolean),
      clarifyTimeoutError: oo.transitional(oo.boolean)
    }, !1), o != null && (L.isFunction(o) ? r.paramsSerializer = {
      serialize: o
    } : Hf.assertOptions(o, {
      encode: oo.function,
      serialize: oo.function
    }, !0)), r.method = (r.method || this.defaults.method || "get").toLowerCase();
    let s = i && L.merge(
      i.common,
      i[r.method]
    );
    i && L.forEach(
      ["delete", "get", "head", "post", "put", "patch", "common"],
      (b) => {
        delete i[b];
      }
    ), r.headers = nr.concat(s, i);
    const a = [];
    let c = !0;
    this.interceptors.request.forEach(function(y) {
      typeof y.runWhen == "function" && y.runWhen(r) === !1 || (c = c && y.synchronous, a.unshift(y.fulfilled, y.rejected));
    });
    const u = [];
    this.interceptors.response.forEach(function(y) {
      u.push(y.fulfilled, y.rejected);
    });
    let f, l = 0, h;
    if (!c) {
      const b = [f0.bind(this), void 0];
      for (b.unshift.apply(b, a), b.push.apply(b, u), h = b.length, f = Promise.resolve(r); l < h; )
        f = f.then(b[l++], b[l++]);
      return f;
    }
    h = a.length;
    let m = r;
    for (l = 0; l < h; ) {
      const b = a[l++], y = a[l++];
      try {
        m = b(m);
      } catch (g) {
        y.call(this, g);
        break;
      }
    }
    try {
      f = f0.call(this, m);
    } catch (b) {
      return Promise.reject(b);
    }
    for (l = 0, h = u.length; l < h; )
      f = f.then(u[l++], u[l++]);
    return f;
  }
  getUri(t) {
    t = Jo(this.defaults, t);
    const r = ow(t.baseURL, t.url);
    return Qy(r, t.params, t.paramsSerializer);
  }
}
L.forEach(["delete", "get", "head", "options"], function(t) {
  Ko.prototype[t] = function(r, n) {
    return this.request(Jo(n || {}, {
      method: t,
      url: r,
      data: (n || {}).data
    }));
  };
});
L.forEach(["post", "put", "patch"], function(t) {
  function r(n) {
    return function(i, s, a) {
      return this.request(Jo(a || {}, {
        method: t,
        headers: n ? {
          "Content-Type": "multipart/form-data"
        } : {},
        url: i,
        data: s
      }));
    };
  }
  Ko.prototype[t] = r(), Ko.prototype[t + "Form"] = r(!0);
});
class gh {
  constructor(t) {
    if (typeof t != "function")
      throw new TypeError("executor must be a function.");
    let r;
    this.promise = new Promise(function(i) {
      r = i;
    });
    const n = this;
    this.promise.then((o) => {
      if (!n._listeners) return;
      let i = n._listeners.length;
      for (; i-- > 0; )
        n._listeners[i](o);
      n._listeners = null;
    }), this.promise.then = (o) => {
      let i;
      const s = new Promise((a) => {
        n.subscribe(a), i = a;
      }).then(o);
      return s.cancel = function() {
        n.unsubscribe(i);
      }, s;
    }, t(function(i, s, a) {
      n.reason || (n.reason = new ns(i, s, a), r(n.reason));
    });
  }
  /**
   * Throws a `CanceledError` if cancellation has been requested.
   */
  throwIfRequested() {
    if (this.reason)
      throw this.reason;
  }
  /**
   * Subscribe to the cancel signal
   */
  subscribe(t) {
    if (this.reason) {
      t(this.reason);
      return;
    }
    this._listeners ? this._listeners.push(t) : this._listeners = [t];
  }
  /**
   * Unsubscribe from the cancel signal
   */
  unsubscribe(t) {
    if (!this._listeners)
      return;
    const r = this._listeners.indexOf(t);
    r !== -1 && this._listeners.splice(r, 1);
  }
  toAbortSignal() {
    const t = new AbortController(), r = (n) => {
      t.abort(n);
    };
    return this.subscribe(r), t.signal.unsubscribe = () => this.unsubscribe(r), t.signal;
  }
  /**
   * Returns an object that contains a new `CancelToken` and a function that, when called,
   * cancels the `CancelToken`.
   */
  static source() {
    let t;
    return {
      token: new gh(function(o) {
        t = o;
      }),
      cancel: t
    };
  }
}
function GO(e) {
  return function(r) {
    return e.apply(null, r);
  };
}
function ZO(e) {
  return L.isObject(e) && e.isAxiosError === !0;
}
const Rf = {
  Continue: 100,
  SwitchingProtocols: 101,
  Processing: 102,
  EarlyHints: 103,
  Ok: 200,
  Created: 201,
  Accepted: 202,
  NonAuthoritativeInformation: 203,
  NoContent: 204,
  ResetContent: 205,
  PartialContent: 206,
  MultiStatus: 207,
  AlreadyReported: 208,
  ImUsed: 226,
  MultipleChoices: 300,
  MovedPermanently: 301,
  Found: 302,
  SeeOther: 303,
  NotModified: 304,
  UseProxy: 305,
  Unused: 306,
  TemporaryRedirect: 307,
  PermanentRedirect: 308,
  BadRequest: 400,
  Unauthorized: 401,
  PaymentRequired: 402,
  Forbidden: 403,
  NotFound: 404,
  MethodNotAllowed: 405,
  NotAcceptable: 406,
  ProxyAuthenticationRequired: 407,
  RequestTimeout: 408,
  Conflict: 409,
  Gone: 410,
  LengthRequired: 411,
  PreconditionFailed: 412,
  PayloadTooLarge: 413,
  UriTooLong: 414,
  UnsupportedMediaType: 415,
  RangeNotSatisfiable: 416,
  ExpectationFailed: 417,
  ImATeapot: 418,
  MisdirectedRequest: 421,
  UnprocessableEntity: 422,
  Locked: 423,
  FailedDependency: 424,
  TooEarly: 425,
  UpgradeRequired: 426,
  PreconditionRequired: 428,
  TooManyRequests: 429,
  RequestHeaderFieldsTooLarge: 431,
  UnavailableForLegalReasons: 451,
  InternalServerError: 500,
  NotImplemented: 501,
  BadGateway: 502,
  ServiceUnavailable: 503,
  GatewayTimeout: 504,
  HttpVersionNotSupported: 505,
  VariantAlsoNegotiates: 506,
  InsufficientStorage: 507,
  LoopDetected: 508,
  NotExtended: 510,
  NetworkAuthenticationRequired: 511
};
Object.entries(Rf).forEach(([e, t]) => {
  Rf[t] = e;
});
function lw(e) {
  const t = new Ko(e), r = My(Ko.prototype.request, t);
  return L.extend(r, Ko.prototype, t, { allOwnKeys: !0 }), L.extend(r, t, null, { allOwnKeys: !0 }), r.create = function(o) {
    return lw(Jo(e, o));
  }, r;
}
const ct = lw(fa);
ct.Axios = Ko;
ct.CanceledError = ns;
ct.CancelToken = gh;
ct.isCancel = rw;
ct.VERSION = uw;
ct.toFormData = gu;
ct.AxiosError = _e;
ct.Cancel = ct.CanceledError;
ct.all = function(t) {
  return Promise.all(t);
};
ct.spread = GO;
ct.isAxiosError = ZO;
ct.mergeConfig = Jo;
ct.AxiosHeaders = nr;
ct.formToJSON = (e) => tw(L.isHTMLForm(e) ? new FormData(e) : e);
ct.getAdapter = cw.getAdapter;
ct.HttpStatusCode = Rf;
ct.default = ct;
const XO = "https://mempool.space", YO = "https://mempool.space/testnet", JO = "https://mempool.space/testnet4", QO = "https://mempool.space/signet", eB = "https://mempool.fractalbitcoin.io", tB = "https://mempool-testnet.fractalbitcoin.io", bu = (e) => e === Ze ? YO : e === $t ? JO : e === jt ? QO : e === kr ? eB : e === Nt ? tB : XO, f7 = "text/html", d7 = "text/css", rB = "text/plain", h7 = "text/javascript", p7 = "application/json", g7 = "application/javascript", m7 = "application/xml", b7 = "application/pdf", y7 = "application/zip", w7 = "application/gzip", v7 = "application/xhtml+xml", x7 = "application/rss+xml", E7 = "application/atom+xml", _7 = "application/x-www-form-urlencoded", S7 = "application/octet-stream", k7 = "image/jpeg", A7 = "image/png", T7 = "image/gif", I7 = "image/svg+xml", P7 = "image/webp", O7 = "image/x-icon", B7 = "video/mp4", $7 = "video/webm", N7 = "video/ogg", U7 = "audio/mpeg", C7 = "audio/wav", H7 = "audio/ogg", R7 = "multipart/form-data";
ig(uh);
const At = (e) => e === Ze || e === $t || e === jt ? Vv : Dr, mh = (e) => e.find(
  ({ purpose: t }) => t === "ordinals"
), bh = (e) => e.find(
  ({ purpose: t }) => t === "payment"
), os = async (e, t) => {
  try {
    const r = await yh(
      e,
      t
    );
    return r ? r.reduce((n, o) => n + BigInt(o.value), 0n) : 0n;
  } catch (r) {
    throw console.error("Error fetching BTC balance:", r), new Error("Failed to fetch BTC balance");
  }
};
function nB(e, t, r) {
  const a = e * 57 + t * 41, c = r * 34;
  return 10 + a + c;
}
async function yh(e, t) {
  if (e.startsWith("t")) {
    if (t === Me)
      return [];
    if (t === kr)
      return [];
    if (t === Nt)
      return [];
  }
  return await ct.get(`${bu(t)}/api/address/${e}/utxo`).then((r) => r.data);
}
async function wh(e, t, r, n, o, i, s = 7) {
  const a = e === t, c = await yh(
    t,
    i
  );
  if (!c)
    throw new Error("No UTXOs found");
  const u = c.sort(
    (y, g) => g.value - y.value
  ), f = new et({ network: At(i) }), l = nB(1, 0, 2), h = Math.floor(l * s) + n;
  let m = 0, b = 0;
  for await (let y of u) {
    const { txid: g, vout: x, value: S } = y, v = id(
      t,
      At(i)
    );
    if (f.addInput({
      hash: g,
      index: x,
      witnessUtxo: {
        script: v,
        value: BigInt(S)
      }
    }), !a) {
      const T = fw(o, i);
      f.updateInput(b, { redeemScript: T });
    }
    if (m += S, m >= h)
      break;
  }
  if (m < h)
    throw new Error("Insufficient funds");
  return f.addOutput({
    address: r,
    value: BigInt(n)
  }), m > h && f.addOutput({
    address: t,
    value: BigInt(m - h)
  }), {
    psbtBase64: f.toBase64(),
    psbtHex: f.toHex()
  };
}
function fw(e, t) {
  var o;
  const r = Xs({
    pubkey: Oy.Buffer.from(e, "hex"),
    network: At(t)
  }), n = Zi({
    redeem: r,
    network: At(t)
  });
  return (o = n == null ? void 0 : n.redeem) == null ? void 0 : o.output;
}
function oB(e) {
  return e == null ? void 0 : e.reduce((t, r) => t + r.value, 0);
}
async function vh(e, t) {
  return (await ct.post(
    `${bu(t)}/api/tx`,
    e,
    {
      headers: {
        "Content-Type": "text/plain"
      }
    }
  )).data;
}
const iB = (e, t) => {
  try {
    const r = At(t), n = mg(e);
    if (n.version === r.pubKeyHash) return Fv;
    if (n.version === r.scriptHash) {
      const o = ot(n.hash);
      return o && o.length === 2 && o[0] === Ke.OP_0 ? Kv : B0;
    }
  } catch {
    try {
      const n = od(e);
      if (n.version === 0 && n.data.length === 20) return Fl;
      if (n.version === 0 && n.data.length === 32) return qv;
      if (n.version === 1 && n.data.length === 32) return bs;
    } catch {
      return "unknown";
    }
  }
  return "unknown";
}, xh = (e) => e === Ze || e === $t || e === jt, Eh = (e) => e === Me || e === kr || e === Nt;
var ln = {}, It = {}, ye = {};
Object.defineProperty(ye, "__esModule", { value: !0 });
ye.add5L = ye.add5H = ye.add4H = ye.add4L = ye.add3H = ye.add3L = ye.rotlBL = ye.rotlBH = ye.rotlSL = ye.rotlSH = ye.rotr32L = ye.rotr32H = ye.rotrBL = ye.rotrBH = ye.rotrSL = ye.rotrSH = ye.shrSL = ye.shrSH = ye.toBig = void 0;
ye.fromBig = _h;
ye.split = dw;
ye.add = Aw;
const Ra = /* @__PURE__ */ BigInt(2 ** 32 - 1), Lf = /* @__PURE__ */ BigInt(32);
function _h(e, t = !1) {
  return t ? { h: Number(e & Ra), l: Number(e >> Lf & Ra) } : { h: Number(e >> Lf & Ra) | 0, l: Number(e & Ra) | 0 };
}
function dw(e, t = !1) {
  let r = new Uint32Array(e.length), n = new Uint32Array(e.length);
  for (let o = 0; o < e.length; o++) {
    const { h: i, l: s } = _h(e[o], t);
    [r[o], n[o]] = [i, s];
  }
  return [r, n];
}
const hw = (e, t) => BigInt(e >>> 0) << Lf | BigInt(t >>> 0);
ye.toBig = hw;
const pw = (e, t, r) => e >>> r;
ye.shrSH = pw;
const gw = (e, t, r) => e << 32 - r | t >>> r;
ye.shrSL = gw;
const mw = (e, t, r) => e >>> r | t << 32 - r;
ye.rotrSH = mw;
const bw = (e, t, r) => e << 32 - r | t >>> r;
ye.rotrSL = bw;
const yw = (e, t, r) => e << 64 - r | t >>> r - 32;
ye.rotrBH = yw;
const ww = (e, t, r) => e >>> r - 32 | t << 64 - r;
ye.rotrBL = ww;
const vw = (e, t) => t;
ye.rotr32H = vw;
const xw = (e, t) => e;
ye.rotr32L = xw;
const Ew = (e, t, r) => e << r | t >>> 32 - r;
ye.rotlSH = Ew;
const _w = (e, t, r) => t << r | e >>> 32 - r;
ye.rotlSL = _w;
const Sw = (e, t, r) => t << r - 32 | e >>> 64 - r;
ye.rotlBH = Sw;
const kw = (e, t, r) => e << r - 32 | t >>> 64 - r;
ye.rotlBL = kw;
function Aw(e, t, r, n) {
  const o = (t >>> 0) + (n >>> 0);
  return { h: e + r + (o / 2 ** 32 | 0) | 0, l: o | 0 };
}
const Tw = (e, t, r) => (e >>> 0) + (t >>> 0) + (r >>> 0);
ye.add3L = Tw;
const Iw = (e, t, r, n) => t + r + n + (e / 2 ** 32 | 0) | 0;
ye.add3H = Iw;
const Pw = (e, t, r, n) => (e >>> 0) + (t >>> 0) + (r >>> 0) + (n >>> 0);
ye.add4L = Pw;
const Ow = (e, t, r, n, o) => t + r + n + o + (e / 2 ** 32 | 0) | 0;
ye.add4H = Ow;
const Bw = (e, t, r, n, o) => (e >>> 0) + (t >>> 0) + (r >>> 0) + (n >>> 0) + (o >>> 0);
ye.add5L = Bw;
const $w = (e, t, r, n, o, i) => t + r + n + o + i + (e / 2 ** 32 | 0) | 0;
ye.add5H = $w;
const sB = {
  fromBig: _h,
  split: dw,
  toBig: hw,
  shrSH: pw,
  shrSL: gw,
  rotrSH: mw,
  rotrSL: bw,
  rotrBH: yw,
  rotrBL: ww,
  rotr32H: vw,
  rotr32L: xw,
  rotlSH: Ew,
  rotlSL: _w,
  rotlBH: Sw,
  rotlBL: kw,
  add: Aw,
  add3L: Tw,
  add3H: Iw,
  add4L: Pw,
  add4H: Ow,
  add5H: $w,
  add5L: Bw
};
ye.default = sB;
Object.defineProperty(It, "__esModule", { value: !0 });
It.sha384 = It.sha512_256 = It.sha512_224 = It.sha512 = It.SHA384 = It.SHA512_256 = It.SHA512_224 = It.SHA512 = void 0;
const aB = Tn, Pe = ye, yu = Eo, [cB, uB] = Pe.default.split([
  "0x428a2f98d728ae22",
  "0x7137449123ef65cd",
  "0xb5c0fbcfec4d3b2f",
  "0xe9b5dba58189dbbc",
  "0x3956c25bf348b538",
  "0x59f111f1b605d019",
  "0x923f82a4af194f9b",
  "0xab1c5ed5da6d8118",
  "0xd807aa98a3030242",
  "0x12835b0145706fbe",
  "0x243185be4ee4b28c",
  "0x550c7dc3d5ffb4e2",
  "0x72be5d74f27b896f",
  "0x80deb1fe3b1696b1",
  "0x9bdc06a725c71235",
  "0xc19bf174cf692694",
  "0xe49b69c19ef14ad2",
  "0xefbe4786384f25e3",
  "0x0fc19dc68b8cd5b5",
  "0x240ca1cc77ac9c65",
  "0x2de92c6f592b0275",
  "0x4a7484aa6ea6e483",
  "0x5cb0a9dcbd41fbd4",
  "0x76f988da831153b5",
  "0x983e5152ee66dfab",
  "0xa831c66d2db43210",
  "0xb00327c898fb213f",
  "0xbf597fc7beef0ee4",
  "0xc6e00bf33da88fc2",
  "0xd5a79147930aa725",
  "0x06ca6351e003826f",
  "0x142929670a0e6e70",
  "0x27b70a8546d22ffc",
  "0x2e1b21385c26c926",
  "0x4d2c6dfc5ac42aed",
  "0x53380d139d95b3df",
  "0x650a73548baf63de",
  "0x766a0abb3c77b2a8",
  "0x81c2c92e47edaee6",
  "0x92722c851482353b",
  "0xa2bfe8a14cf10364",
  "0xa81a664bbc423001",
  "0xc24b8b70d0f89791",
  "0xc76c51a30654be30",
  "0xd192e819d6ef5218",
  "0xd69906245565a910",
  "0xf40e35855771202a",
  "0x106aa07032bbd1b8",
  "0x19a4c116b8d2d0c8",
  "0x1e376c085141ab53",
  "0x2748774cdf8eeb99",
  "0x34b0bcb5e19b48a8",
  "0x391c0cb3c5c95a63",
  "0x4ed8aa4ae3418acb",
  "0x5b9cca4f7763e373",
  "0x682e6ff3d6b2b8a3",
  "0x748f82ee5defb2fc",
  "0x78a5636f43172f60",
  "0x84c87814a1f0ab72",
  "0x8cc702081a6439ec",
  "0x90befffa23631e28",
  "0xa4506cebde82bde9",
  "0xbef9a3f7b2c67915",
  "0xc67178f2e372532b",
  "0xca273eceea26619c",
  "0xd186b8c721c0c207",
  "0xeada7dd6cde0eb1e",
  "0xf57d4f7fee6ed178",
  "0x06f067aa72176fba",
  "0x0a637dc5a2c898a6",
  "0x113f9804bef90dae",
  "0x1b710b35131c471b",
  "0x28db77f523047d84",
  "0x32caab7b40c72493",
  "0x3c9ebe0a15c9bebc",
  "0x431d67c49c100d4c",
  "0x4cc5d4becb3e42b6",
  "0x597f299cfc657e2a",
  "0x5fcb6fab3ad6faec",
  "0x6c44198c4a475817"
].map((e) => BigInt(e))), io = /* @__PURE__ */ new Uint32Array(80), so = /* @__PURE__ */ new Uint32Array(80);
class da extends aB.HashMD {
  constructor() {
    super(128, 64, 16, !1), this.Ah = 1779033703, this.Al = -205731576, this.Bh = -1150833019, this.Bl = -2067093701, this.Ch = 1013904242, this.Cl = -23791573, this.Dh = -1521486534, this.Dl = 1595750129, this.Eh = 1359893119, this.El = -1377402159, this.Fh = -1694144372, this.Fl = 725511199, this.Gh = 528734635, this.Gl = -79577749, this.Hh = 1541459225, this.Hl = 327033209;
  }
  // prettier-ignore
  get() {
    const { Ah: t, Al: r, Bh: n, Bl: o, Ch: i, Cl: s, Dh: a, Dl: c, Eh: u, El: f, Fh: l, Fl: h, Gh: m, Gl: b, Hh: y, Hl: g } = this;
    return [t, r, n, o, i, s, a, c, u, f, l, h, m, b, y, g];
  }
  // prettier-ignore
  set(t, r, n, o, i, s, a, c, u, f, l, h, m, b, y, g) {
    this.Ah = t | 0, this.Al = r | 0, this.Bh = n | 0, this.Bl = o | 0, this.Ch = i | 0, this.Cl = s | 0, this.Dh = a | 0, this.Dl = c | 0, this.Eh = u | 0, this.El = f | 0, this.Fh = l | 0, this.Fl = h | 0, this.Gh = m | 0, this.Gl = b | 0, this.Hh = y | 0, this.Hl = g | 0;
  }
  process(t, r) {
    for (let v = 0; v < 16; v++, r += 4)
      io[v] = t.getUint32(r), so[v] = t.getUint32(r += 4);
    for (let v = 16; v < 80; v++) {
      const T = io[v - 15] | 0, I = so[v - 15] | 0, P = Pe.default.rotrSH(T, I, 1) ^ Pe.default.rotrSH(T, I, 8) ^ Pe.default.shrSH(T, I, 7), H = Pe.default.rotrSL(T, I, 1) ^ Pe.default.rotrSL(T, I, 8) ^ Pe.default.shrSL(T, I, 7), j = io[v - 2] | 0, V = so[v - 2] | 0, te = Pe.default.rotrSH(j, V, 19) ^ Pe.default.rotrBH(j, V, 61) ^ Pe.default.shrSH(j, V, 6), Z = Pe.default.rotrSL(j, V, 19) ^ Pe.default.rotrBL(j, V, 61) ^ Pe.default.shrSL(j, V, 6), N = Pe.default.add4L(H, Z, so[v - 7], so[v - 16]), W = Pe.default.add4H(N, P, te, io[v - 7], io[v - 16]);
      io[v] = W | 0, so[v] = N | 0;
    }
    let { Ah: n, Al: o, Bh: i, Bl: s, Ch: a, Cl: c, Dh: u, Dl: f, Eh: l, El: h, Fh: m, Fl: b, Gh: y, Gl: g, Hh: x, Hl: S } = this;
    for (let v = 0; v < 80; v++) {
      const T = Pe.default.rotrSH(l, h, 14) ^ Pe.default.rotrSH(l, h, 18) ^ Pe.default.rotrBH(l, h, 41), I = Pe.default.rotrSL(l, h, 14) ^ Pe.default.rotrSL(l, h, 18) ^ Pe.default.rotrBL(l, h, 41), P = l & m ^ ~l & y, H = h & b ^ ~h & g, j = Pe.default.add5L(S, I, H, uB[v], so[v]), V = Pe.default.add5H(j, x, T, P, cB[v], io[v]), te = j | 0, Z = Pe.default.rotrSH(n, o, 28) ^ Pe.default.rotrBH(n, o, 34) ^ Pe.default.rotrBH(n, o, 39), N = Pe.default.rotrSL(n, o, 28) ^ Pe.default.rotrBL(n, o, 34) ^ Pe.default.rotrBL(n, o, 39), W = n & i ^ n & a ^ i & a, D = o & s ^ o & c ^ s & c;
      x = y | 0, S = g | 0, y = m | 0, g = b | 0, m = l | 0, b = h | 0, { h: l, l: h } = Pe.default.add(u | 0, f | 0, V | 0, te | 0), u = a | 0, f = c | 0, a = i | 0, c = s | 0, i = n | 0, s = o | 0;
      const $ = Pe.default.add3L(te, N, D);
      n = Pe.default.add3H($, V, Z, W), o = $ | 0;
    }
    ({ h: n, l: o } = Pe.default.add(this.Ah | 0, this.Al | 0, n | 0, o | 0)), { h: i, l: s } = Pe.default.add(this.Bh | 0, this.Bl | 0, i | 0, s | 0), { h: a, l: c } = Pe.default.add(this.Ch | 0, this.Cl | 0, a | 0, c | 0), { h: u, l: f } = Pe.default.add(this.Dh | 0, this.Dl | 0, u | 0, f | 0), { h: l, l: h } = Pe.default.add(this.Eh | 0, this.El | 0, l | 0, h | 0), { h: m, l: b } = Pe.default.add(this.Fh | 0, this.Fl | 0, m | 0, b | 0), { h: y, l: g } = Pe.default.add(this.Gh | 0, this.Gl | 0, y | 0, g | 0), { h: x, l: S } = Pe.default.add(this.Hh | 0, this.Hl | 0, x | 0, S | 0), this.set(n, o, i, s, a, c, u, f, l, h, m, b, y, g, x, S);
  }
  roundClean() {
    io.fill(0), so.fill(0);
  }
  destroy() {
    this.buffer.fill(0), this.set(0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
  }
}
It.SHA512 = da;
class Nw extends da {
  constructor() {
    super(), this.Ah = -1942145080, this.Al = 424955298, this.Bh = 1944164710, this.Bl = -1982016298, this.Ch = 502970286, this.Cl = 855612546, this.Dh = 1738396948, this.Dl = 1479516111, this.Eh = 258812777, this.El = 2077511080, this.Fh = 2011393907, this.Fl = 79989058, this.Gh = 1067287976, this.Gl = 1780299464, this.Hh = 286451373, this.Hl = -1848208735, this.outputLen = 28;
  }
}
It.SHA512_224 = Nw;
class Uw extends da {
  constructor() {
    super(), this.Ah = 573645204, this.Al = -64227540, this.Bh = -1621794909, this.Bl = -934517566, this.Ch = 596883563, this.Cl = 1867755857, this.Dh = -1774684391, this.Dl = 1497426621, this.Eh = -1775747358, this.El = -1467023389, this.Fh = -1101128155, this.Fl = 1401305490, this.Gh = 721525244, this.Gl = 746961066, this.Hh = 246885852, this.Hl = -2117784414, this.outputLen = 32;
  }
}
It.SHA512_256 = Uw;
class Cw extends da {
  constructor() {
    super(), this.Ah = -876896931, this.Al = -1056596264, this.Bh = 1654270250, this.Bl = 914150663, this.Ch = -1856437926, this.Cl = 812702999, this.Dh = 355462360, this.Dl = -150054599, this.Eh = 1731405415, this.El = -4191439, this.Fh = -1900787065, this.Fl = 1750603025, this.Gh = -619958771, this.Gl = 1694076839, this.Hh = 1203062813, this.Hl = -1090891868, this.outputLen = 48;
  }
}
It.SHA384 = Cw;
It.sha512 = (0, yu.wrapConstructor)(() => new da());
It.sha512_224 = (0, yu.wrapConstructor)(() => new Nw());
It.sha512_256 = (0, yu.wrapConstructor)(() => new Uw());
It.sha384 = (0, yu.wrapConstructor)(() => new Cw());
var wu = {};
Object.defineProperty(wu, "__esModule", { value: !0 });
wu.pbkdf2 = fB;
wu.pbkdf2Async = dB;
const La = hr, lB = uu, Bi = Eo;
function Hw(e, t, r, n) {
  (0, La.hash)(e);
  const o = (0, Bi.checkOpts)({ dkLen: 32, asyncTick: 10 }, n), { c: i, dkLen: s, asyncTick: a } = o;
  if ((0, La.number)(i), (0, La.number)(s), (0, La.number)(a), i < 1)
    throw new Error("PBKDF2: iterations (c) should be >= 1");
  const c = (0, Bi.toBytes)(t), u = (0, Bi.toBytes)(r), f = new Uint8Array(s), l = lB.hmac.create(e, c), h = l._cloneInto().update(u);
  return { c: i, dkLen: s, asyncTick: a, DK: f, PRF: l, PRFSalt: h };
}
function Rw(e, t, r, n, o) {
  return e.destroy(), t.destroy(), n && n.destroy(), o.fill(0), r;
}
function fB(e, t, r, n) {
  const { c: o, dkLen: i, DK: s, PRF: a, PRFSalt: c } = Hw(e, t, r, n);
  let u;
  const f = new Uint8Array(4), l = (0, Bi.createView)(f), h = new Uint8Array(a.outputLen);
  for (let m = 1, b = 0; b < i; m++, b += a.outputLen) {
    const y = s.subarray(b, b + a.outputLen);
    l.setInt32(0, m, !1), (u = c._cloneInto(u)).update(f).digestInto(h), y.set(h.subarray(0, y.length));
    for (let g = 1; g < o; g++) {
      a._cloneInto(u).update(h).digestInto(h);
      for (let x = 0; x < y.length; x++)
        y[x] ^= h[x];
    }
  }
  return Rw(a, c, s, u, h);
}
async function dB(e, t, r, n) {
  const { c: o, dkLen: i, asyncTick: s, DK: a, PRF: c, PRFSalt: u } = Hw(e, t, r, n);
  let f;
  const l = new Uint8Array(4), h = (0, Bi.createView)(l), m = new Uint8Array(c.outputLen);
  for (let b = 1, y = 0; y < i; b++, y += c.outputLen) {
    const g = a.subarray(y, y + c.outputLen);
    h.setInt32(0, b, !1), (f = u._cloneInto(f)).update(l).digestInto(m), g.set(m.subarray(0, g.length)), await (0, Bi.asyncLoop)(o - 1, s, () => {
      c._cloneInto(f).update(m).digestInto(m);
      for (let x = 0; x < g.length; x++)
        g[x] ^= m[x];
    });
  }
  return Rw(c, u, a, f, m);
}
var Jt = {};
const hB = [
  "abdikace",
  "abeceda",
  "adresa",
  "agrese",
  "akce",
  "aktovka",
  "alej",
  "alkohol",
  "amputace",
  "ananas",
  "andulka",
  "anekdota",
  "anketa",
  "antika",
  "anulovat",
  "archa",
  "arogance",
  "asfalt",
  "asistent",
  "aspirace",
  "astma",
  "astronom",
  "atlas",
  "atletika",
  "atol",
  "autobus",
  "azyl",
  "babka",
  "bachor",
  "bacil",
  "baculka",
  "badatel",
  "bageta",
  "bagr",
  "bahno",
  "bakterie",
  "balada",
  "baletka",
  "balkon",
  "balonek",
  "balvan",
  "balza",
  "bambus",
  "bankomat",
  "barbar",
  "baret",
  "barman",
  "baroko",
  "barva",
  "baterka",
  "batoh",
  "bavlna",
  "bazalka",
  "bazilika",
  "bazuka",
  "bedna",
  "beran",
  "beseda",
  "bestie",
  "beton",
  "bezinka",
  "bezmoc",
  "beztak",
  "bicykl",
  "bidlo",
  "biftek",
  "bikiny",
  "bilance",
  "biograf",
  "biolog",
  "bitva",
  "bizon",
  "blahobyt",
  "blatouch",
  "blecha",
  "bledule",
  "blesk",
  "blikat",
  "blizna",
  "blokovat",
  "bloudit",
  "blud",
  "bobek",
  "bobr",
  "bodlina",
  "bodnout",
  "bohatost",
  "bojkot",
  "bojovat",
  "bokorys",
  "bolest",
  "borec",
  "borovice",
  "bota",
  "boubel",
  "bouchat",
  "bouda",
  "boule",
  "bourat",
  "boxer",
  "bradavka",
  "brambora",
  "branka",
  "bratr",
  "brepta",
  "briketa",
  "brko",
  "brloh",
  "bronz",
  "broskev",
  "brunetka",
  "brusinka",
  "brzda",
  "brzy",
  "bublina",
  "bubnovat",
  "buchta",
  "buditel",
  "budka",
  "budova",
  "bufet",
  "bujarost",
  "bukvice",
  "buldok",
  "bulva",
  "bunda",
  "bunkr",
  "burza",
  "butik",
  "buvol",
  "buzola",
  "bydlet",
  "bylina",
  "bytovka",
  "bzukot",
  "capart",
  "carevna",
  "cedr",
  "cedule",
  "cejch",
  "cejn",
  "cela",
  "celer",
  "celkem",
  "celnice",
  "cenina",
  "cennost",
  "cenovka",
  "centrum",
  "cenzor",
  "cestopis",
  "cetka",
  "chalupa",
  "chapadlo",
  "charita",
  "chata",
  "chechtat",
  "chemie",
  "chichot",
  "chirurg",
  "chlad",
  "chleba",
  "chlubit",
  "chmel",
  "chmura",
  "chobot",
  "chochol",
  "chodba",
  "cholera",
  "chomout",
  "chopit",
  "choroba",
  "chov",
  "chrapot",
  "chrlit",
  "chrt",
  "chrup",
  "chtivost",
  "chudina",
  "chutnat",
  "chvat",
  "chvilka",
  "chvost",
  "chyba",
  "chystat",
  "chytit",
  "cibule",
  "cigareta",
  "cihelna",
  "cihla",
  "cinkot",
  "cirkus",
  "cisterna",
  "citace",
  "citrus",
  "cizinec",
  "cizost",
  "clona",
  "cokoliv",
  "couvat",
  "ctitel",
  "ctnost",
  "cudnost",
  "cuketa",
  "cukr",
  "cupot",
  "cvaknout",
  "cval",
  "cvik",
  "cvrkot",
  "cyklista",
  "daleko",
  "dareba",
  "datel",
  "datum",
  "dcera",
  "debata",
  "dechovka",
  "decibel",
  "deficit",
  "deflace",
  "dekl",
  "dekret",
  "demokrat",
  "deprese",
  "derby",
  "deska",
  "detektiv",
  "dikobraz",
  "diktovat",
  "dioda",
  "diplom",
  "disk",
  "displej",
  "divadlo",
  "divoch",
  "dlaha",
  "dlouho",
  "dluhopis",
  "dnes",
  "dobro",
  "dobytek",
  "docent",
  "dochutit",
  "dodnes",
  "dohled",
  "dohoda",
  "dohra",
  "dojem",
  "dojnice",
  "doklad",
  "dokola",
  "doktor",
  "dokument",
  "dolar",
  "doleva",
  "dolina",
  "doma",
  "dominant",
  "domluvit",
  "domov",
  "donutit",
  "dopad",
  "dopis",
  "doplnit",
  "doposud",
  "doprovod",
  "dopustit",
  "dorazit",
  "dorost",
  "dort",
  "dosah",
  "doslov",
  "dostatek",
  "dosud",
  "dosyta",
  "dotaz",
  "dotek",
  "dotknout",
  "doufat",
  "doutnat",
  "dovozce",
  "dozadu",
  "doznat",
  "dozorce",
  "drahota",
  "drak",
  "dramatik",
  "dravec",
  "draze",
  "drdol",
  "drobnost",
  "drogerie",
  "drozd",
  "drsnost",
  "drtit",
  "drzost",
  "duben",
  "duchovno",
  "dudek",
  "duha",
  "duhovka",
  "dusit",
  "dusno",
  "dutost",
  "dvojice",
  "dvorec",
  "dynamit",
  "ekolog",
  "ekonomie",
  "elektron",
  "elipsa",
  "email",
  "emise",
  "emoce",
  "empatie",
  "epizoda",
  "epocha",
  "epopej",
  "epos",
  "esej",
  "esence",
  "eskorta",
  "eskymo",
  "etiketa",
  "euforie",
  "evoluce",
  "exekuce",
  "exkurze",
  "expedice",
  "exploze",
  "export",
  "extrakt",
  "facka",
  "fajfka",
  "fakulta",
  "fanatik",
  "fantazie",
  "farmacie",
  "favorit",
  "fazole",
  "federace",
  "fejeton",
  "fenka",
  "fialka",
  "figurant",
  "filozof",
  "filtr",
  "finance",
  "finta",
  "fixace",
  "fjord",
  "flanel",
  "flirt",
  "flotila",
  "fond",
  "fosfor",
  "fotbal",
  "fotka",
  "foton",
  "frakce",
  "freska",
  "fronta",
  "fukar",
  "funkce",
  "fyzika",
  "galeje",
  "garant",
  "genetika",
  "geolog",
  "gilotina",
  "glazura",
  "glejt",
  "golem",
  "golfista",
  "gotika",
  "graf",
  "gramofon",
  "granule",
  "grep",
  "gril",
  "grog",
  "groteska",
  "guma",
  "hadice",
  "hadr",
  "hala",
  "halenka",
  "hanba",
  "hanopis",
  "harfa",
  "harpuna",
  "havran",
  "hebkost",
  "hejkal",
  "hejno",
  "hejtman",
  "hektar",
  "helma",
  "hematom",
  "herec",
  "herna",
  "heslo",
  "hezky",
  "historik",
  "hladovka",
  "hlasivky",
  "hlava",
  "hledat",
  "hlen",
  "hlodavec",
  "hloh",
  "hloupost",
  "hltat",
  "hlubina",
  "hluchota",
  "hmat",
  "hmota",
  "hmyz",
  "hnis",
  "hnojivo",
  "hnout",
  "hoblina",
  "hoboj",
  "hoch",
  "hodiny",
  "hodlat",
  "hodnota",
  "hodovat",
  "hojnost",
  "hokej",
  "holinka",
  "holka",
  "holub",
  "homole",
  "honitba",
  "honorace",
  "horal",
  "horda",
  "horizont",
  "horko",
  "horlivec",
  "hormon",
  "hornina",
  "horoskop",
  "horstvo",
  "hospoda",
  "hostina",
  "hotovost",
  "houba",
  "houf",
  "houpat",
  "houska",
  "hovor",
  "hradba",
  "hranice",
  "hravost",
  "hrazda",
  "hrbolek",
  "hrdina",
  "hrdlo",
  "hrdost",
  "hrnek",
  "hrobka",
  "hromada",
  "hrot",
  "hrouda",
  "hrozen",
  "hrstka",
  "hrubost",
  "hryzat",
  "hubenost",
  "hubnout",
  "hudba",
  "hukot",
  "humr",
  "husita",
  "hustota",
  "hvozd",
  "hybnost",
  "hydrant",
  "hygiena",
  "hymna",
  "hysterik",
  "idylka",
  "ihned",
  "ikona",
  "iluze",
  "imunita",
  "infekce",
  "inflace",
  "inkaso",
  "inovace",
  "inspekce",
  "internet",
  "invalida",
  "investor",
  "inzerce",
  "ironie",
  "jablko",
  "jachta",
  "jahoda",
  "jakmile",
  "jakost",
  "jalovec",
  "jantar",
  "jarmark",
  "jaro",
  "jasan",
  "jasno",
  "jatka",
  "javor",
  "jazyk",
  "jedinec",
  "jedle",
  "jednatel",
  "jehlan",
  "jekot",
  "jelen",
  "jelito",
  "jemnost",
  "jenom",
  "jepice",
  "jeseter",
  "jevit",
  "jezdec",
  "jezero",
  "jinak",
  "jindy",
  "jinoch",
  "jiskra",
  "jistota",
  "jitrnice",
  "jizva",
  "jmenovat",
  "jogurt",
  "jurta",
  "kabaret",
  "kabel",
  "kabinet",
  "kachna",
  "kadet",
  "kadidlo",
  "kahan",
  "kajak",
  "kajuta",
  "kakao",
  "kaktus",
  "kalamita",
  "kalhoty",
  "kalibr",
  "kalnost",
  "kamera",
  "kamkoliv",
  "kamna",
  "kanibal",
  "kanoe",
  "kantor",
  "kapalina",
  "kapela",
  "kapitola",
  "kapka",
  "kaple",
  "kapota",
  "kapr",
  "kapusta",
  "kapybara",
  "karamel",
  "karotka",
  "karton",
  "kasa",
  "katalog",
  "katedra",
  "kauce",
  "kauza",
  "kavalec",
  "kazajka",
  "kazeta",
  "kazivost",
  "kdekoliv",
  "kdesi",
  "kedluben",
  "kemp",
  "keramika",
  "kino",
  "klacek",
  "kladivo",
  "klam",
  "klapot",
  "klasika",
  "klaun",
  "klec",
  "klenba",
  "klepat",
  "klesnout",
  "klid",
  "klima",
  "klisna",
  "klobouk",
  "klokan",
  "klopa",
  "kloub",
  "klubovna",
  "klusat",
  "kluzkost",
  "kmen",
  "kmitat",
  "kmotr",
  "kniha",
  "knot",
  "koalice",
  "koberec",
  "kobka",
  "kobliha",
  "kobyla",
  "kocour",
  "kohout",
  "kojenec",
  "kokos",
  "koktejl",
  "kolaps",
  "koleda",
  "kolize",
  "kolo",
  "komando",
  "kometa",
  "komik",
  "komnata",
  "komora",
  "kompas",
  "komunita",
  "konat",
  "koncept",
  "kondice",
  "konec",
  "konfese",
  "kongres",
  "konina",
  "konkurs",
  "kontakt",
  "konzerva",
  "kopanec",
  "kopie",
  "kopnout",
  "koprovka",
  "korbel",
  "korektor",
  "kormidlo",
  "koroptev",
  "korpus",
  "koruna",
  "koryto",
  "korzet",
  "kosatec",
  "kostka",
  "kotel",
  "kotleta",
  "kotoul",
  "koukat",
  "koupelna",
  "kousek",
  "kouzlo",
  "kovboj",
  "koza",
  "kozoroh",
  "krabice",
  "krach",
  "krajina",
  "kralovat",
  "krasopis",
  "kravata",
  "kredit",
  "krejcar",
  "kresba",
  "kreveta",
  "kriket",
  "kritik",
  "krize",
  "krkavec",
  "krmelec",
  "krmivo",
  "krocan",
  "krok",
  "kronika",
  "kropit",
  "kroupa",
  "krovka",
  "krtek",
  "kruhadlo",
  "krupice",
  "krutost",
  "krvinka",
  "krychle",
  "krypta",
  "krystal",
  "kryt",
  "kudlanka",
  "kufr",
  "kujnost",
  "kukla",
  "kulajda",
  "kulich",
  "kulka",
  "kulomet",
  "kultura",
  "kuna",
  "kupodivu",
  "kurt",
  "kurzor",
  "kutil",
  "kvalita",
  "kvasinka",
  "kvestor",
  "kynolog",
  "kyselina",
  "kytara",
  "kytice",
  "kytka",
  "kytovec",
  "kyvadlo",
  "labrador",
  "lachtan",
  "ladnost",
  "laik",
  "lakomec",
  "lamela",
  "lampa",
  "lanovka",
  "lasice",
  "laso",
  "lastura",
  "latinka",
  "lavina",
  "lebka",
  "leckdy",
  "leden",
  "lednice",
  "ledovka",
  "ledvina",
  "legenda",
  "legie",
  "legrace",
  "lehce",
  "lehkost",
  "lehnout",
  "lektvar",
  "lenochod",
  "lentilka",
  "lepenka",
  "lepidlo",
  "letadlo",
  "letec",
  "letmo",
  "letokruh",
  "levhart",
  "levitace",
  "levobok",
  "libra",
  "lichotka",
  "lidojed",
  "lidskost",
  "lihovina",
  "lijavec",
  "lilek",
  "limetka",
  "linie",
  "linka",
  "linoleum",
  "listopad",
  "litina",
  "litovat",
  "lobista",
  "lodivod",
  "logika",
  "logoped",
  "lokalita",
  "loket",
  "lomcovat",
  "lopata",
  "lopuch",
  "lord",
  "losos",
  "lotr",
  "loudal",
  "louh",
  "louka",
  "louskat",
  "lovec",
  "lstivost",
  "lucerna",
  "lucifer",
  "lump",
  "lusk",
  "lustrace",
  "lvice",
  "lyra",
  "lyrika",
  "lysina",
  "madam",
  "madlo",
  "magistr",
  "mahagon",
  "majetek",
  "majitel",
  "majorita",
  "makak",
  "makovice",
  "makrela",
  "malba",
  "malina",
  "malovat",
  "malvice",
  "maminka",
  "mandle",
  "manko",
  "marnost",
  "masakr",
  "maskot",
  "masopust",
  "matice",
  "matrika",
  "maturita",
  "mazanec",
  "mazivo",
  "mazlit",
  "mazurka",
  "mdloba",
  "mechanik",
  "meditace",
  "medovina",
  "melasa",
  "meloun",
  "mentolka",
  "metla",
  "metoda",
  "metr",
  "mezera",
  "migrace",
  "mihnout",
  "mihule",
  "mikina",
  "mikrofon",
  "milenec",
  "milimetr",
  "milost",
  "mimika",
  "mincovna",
  "minibar",
  "minomet",
  "minulost",
  "miska",
  "mistr",
  "mixovat",
  "mladost",
  "mlha",
  "mlhovina",
  "mlok",
  "mlsat",
  "mluvit",
  "mnich",
  "mnohem",
  "mobil",
  "mocnost",
  "modelka",
  "modlitba",
  "mohyla",
  "mokro",
  "molekula",
  "momentka",
  "monarcha",
  "monokl",
  "monstrum",
  "montovat",
  "monzun",
  "mosaz",
  "moskyt",
  "most",
  "motivace",
  "motorka",
  "motyka",
  "moucha",
  "moudrost",
  "mozaika",
  "mozek",
  "mozol",
  "mramor",
  "mravenec",
  "mrkev",
  "mrtvola",
  "mrzet",
  "mrzutost",
  "mstitel",
  "mudrc",
  "muflon",
  "mulat",
  "mumie",
  "munice",
  "muset",
  "mutace",
  "muzeum",
  "muzikant",
  "myslivec",
  "mzda",
  "nabourat",
  "nachytat",
  "nadace",
  "nadbytek",
  "nadhoz",
  "nadobro",
  "nadpis",
  "nahlas",
  "nahnat",
  "nahodile",
  "nahradit",
  "naivita",
  "najednou",
  "najisto",
  "najmout",
  "naklonit",
  "nakonec",
  "nakrmit",
  "nalevo",
  "namazat",
  "namluvit",
  "nanometr",
  "naoko",
  "naopak",
  "naostro",
  "napadat",
  "napevno",
  "naplnit",
  "napnout",
  "naposled",
  "naprosto",
  "narodit",
  "naruby",
  "narychlo",
  "nasadit",
  "nasekat",
  "naslepo",
  "nastat",
  "natolik",
  "navenek",
  "navrch",
  "navzdory",
  "nazvat",
  "nebe",
  "nechat",
  "necky",
  "nedaleko",
  "nedbat",
  "neduh",
  "negace",
  "nehet",
  "nehoda",
  "nejen",
  "nejprve",
  "neklid",
  "nelibost",
  "nemilost",
  "nemoc",
  "neochota",
  "neonka",
  "nepokoj",
  "nerost",
  "nerv",
  "nesmysl",
  "nesoulad",
  "netvor",
  "neuron",
  "nevina",
  "nezvykle",
  "nicota",
  "nijak",
  "nikam",
  "nikdy",
  "nikl",
  "nikterak",
  "nitro",
  "nocleh",
  "nohavice",
  "nominace",
  "nora",
  "norek",
  "nositel",
  "nosnost",
  "nouze",
  "noviny",
  "novota",
  "nozdra",
  "nuda",
  "nudle",
  "nuget",
  "nutit",
  "nutnost",
  "nutrie",
  "nymfa",
  "obal",
  "obarvit",
  "obava",
  "obdiv",
  "obec",
  "obehnat",
  "obejmout",
  "obezita",
  "obhajoba",
  "obilnice",
  "objasnit",
  "objekt",
  "obklopit",
  "oblast",
  "oblek",
  "obliba",
  "obloha",
  "obluda",
  "obnos",
  "obohatit",
  "obojek",
  "obout",
  "obrazec",
  "obrna",
  "obruba",
  "obrys",
  "obsah",
  "obsluha",
  "obstarat",
  "obuv",
  "obvaz",
  "obvinit",
  "obvod",
  "obvykle",
  "obyvatel",
  "obzor",
  "ocas",
  "ocel",
  "ocenit",
  "ochladit",
  "ochota",
  "ochrana",
  "ocitnout",
  "odboj",
  "odbyt",
  "odchod",
  "odcizit",
  "odebrat",
  "odeslat",
  "odevzdat",
  "odezva",
  "odhadce",
  "odhodit",
  "odjet",
  "odjinud",
  "odkaz",
  "odkoupit",
  "odliv",
  "odluka",
  "odmlka",
  "odolnost",
  "odpad",
  "odpis",
  "odplout",
  "odpor",
  "odpustit",
  "odpykat",
  "odrazka",
  "odsoudit",
  "odstup",
  "odsun",
  "odtok",
  "odtud",
  "odvaha",
  "odveta",
  "odvolat",
  "odvracet",
  "odznak",
  "ofina",
  "ofsajd",
  "ohlas",
  "ohnisko",
  "ohrada",
  "ohrozit",
  "ohryzek",
  "okap",
  "okenice",
  "oklika",
  "okno",
  "okouzlit",
  "okovy",
  "okrasa",
  "okres",
  "okrsek",
  "okruh",
  "okupant",
  "okurka",
  "okusit",
  "olejnina",
  "olizovat",
  "omak",
  "omeleta",
  "omezit",
  "omladina",
  "omlouvat",
  "omluva",
  "omyl",
  "onehdy",
  "opakovat",
  "opasek",
  "operace",
  "opice",
  "opilost",
  "opisovat",
  "opora",
  "opozice",
  "opravdu",
  "oproti",
  "orbital",
  "orchestr",
  "orgie",
  "orlice",
  "orloj",
  "ortel",
  "osada",
  "oschnout",
  "osika",
  "osivo",
  "oslava",
  "oslepit",
  "oslnit",
  "oslovit",
  "osnova",
  "osoba",
  "osolit",
  "ospalec",
  "osten",
  "ostraha",
  "ostuda",
  "ostych",
  "osvojit",
  "oteplit",
  "otisk",
  "otop",
  "otrhat",
  "otrlost",
  "otrok",
  "otruby",
  "otvor",
  "ovanout",
  "ovar",
  "oves",
  "ovlivnit",
  "ovoce",
  "oxid",
  "ozdoba",
  "pachatel",
  "pacient",
  "padouch",
  "pahorek",
  "pakt",
  "palanda",
  "palec",
  "palivo",
  "paluba",
  "pamflet",
  "pamlsek",
  "panenka",
  "panika",
  "panna",
  "panovat",
  "panstvo",
  "pantofle",
  "paprika",
  "parketa",
  "parodie",
  "parta",
  "paruka",
  "paryba",
  "paseka",
  "pasivita",
  "pastelka",
  "patent",
  "patrona",
  "pavouk",
  "pazneht",
  "pazourek",
  "pecka",
  "pedagog",
  "pejsek",
  "peklo",
  "peloton",
  "penalta",
  "pendrek",
  "penze",
  "periskop",
  "pero",
  "pestrost",
  "petarda",
  "petice",
  "petrolej",
  "pevnina",
  "pexeso",
  "pianista",
  "piha",
  "pijavice",
  "pikle",
  "piknik",
  "pilina",
  "pilnost",
  "pilulka",
  "pinzeta",
  "pipeta",
  "pisatel",
  "pistole",
  "pitevna",
  "pivnice",
  "pivovar",
  "placenta",
  "plakat",
  "plamen",
  "planeta",
  "plastika",
  "platit",
  "plavidlo",
  "plaz",
  "plech",
  "plemeno",
  "plenta",
  "ples",
  "pletivo",
  "plevel",
  "plivat",
  "plnit",
  "plno",
  "plocha",
  "plodina",
  "plomba",
  "plout",
  "pluk",
  "plyn",
  "pobavit",
  "pobyt",
  "pochod",
  "pocit",
  "poctivec",
  "podat",
  "podcenit",
  "podepsat",
  "podhled",
  "podivit",
  "podklad",
  "podmanit",
  "podnik",
  "podoba",
  "podpora",
  "podraz",
  "podstata",
  "podvod",
  "podzim",
  "poezie",
  "pohanka",
  "pohnutka",
  "pohovor",
  "pohroma",
  "pohyb",
  "pointa",
  "pojistka",
  "pojmout",
  "pokazit",
  "pokles",
  "pokoj",
  "pokrok",
  "pokuta",
  "pokyn",
  "poledne",
  "polibek",
  "polknout",
  "poloha",
  "polynom",
  "pomalu",
  "pominout",
  "pomlka",
  "pomoc",
  "pomsta",
  "pomyslet",
  "ponechat",
  "ponorka",
  "ponurost",
  "popadat",
  "popel",
  "popisek",
  "poplach",
  "poprosit",
  "popsat",
  "popud",
  "poradce",
  "porce",
  "porod",
  "porucha",
  "poryv",
  "posadit",
  "posed",
  "posila",
  "poskok",
  "poslanec",
  "posoudit",
  "pospolu",
  "postava",
  "posudek",
  "posyp",
  "potah",
  "potkan",
  "potlesk",
  "potomek",
  "potrava",
  "potupa",
  "potvora",
  "poukaz",
  "pouto",
  "pouzdro",
  "povaha",
  "povidla",
  "povlak",
  "povoz",
  "povrch",
  "povstat",
  "povyk",
  "povzdech",
  "pozdrav",
  "pozemek",
  "poznatek",
  "pozor",
  "pozvat",
  "pracovat",
  "prahory",
  "praktika",
  "prales",
  "praotec",
  "praporek",
  "prase",
  "pravda",
  "princip",
  "prkno",
  "probudit",
  "procento",
  "prodej",
  "profese",
  "prohra",
  "projekt",
  "prolomit",
  "promile",
  "pronikat",
  "propad",
  "prorok",
  "prosba",
  "proton",
  "proutek",
  "provaz",
  "prskavka",
  "prsten",
  "prudkost",
  "prut",
  "prvek",
  "prvohory",
  "psanec",
  "psovod",
  "pstruh",
  "ptactvo",
  "puberta",
  "puch",
  "pudl",
  "pukavec",
  "puklina",
  "pukrle",
  "pult",
  "pumpa",
  "punc",
  "pupen",
  "pusa",
  "pusinka",
  "pustina",
  "putovat",
  "putyka",
  "pyramida",
  "pysk",
  "pytel",
  "racek",
  "rachot",
  "radiace",
  "radnice",
  "radon",
  "raft",
  "ragby",
  "raketa",
  "rakovina",
  "rameno",
  "rampouch",
  "rande",
  "rarach",
  "rarita",
  "rasovna",
  "rastr",
  "ratolest",
  "razance",
  "razidlo",
  "reagovat",
  "reakce",
  "recept",
  "redaktor",
  "referent",
  "reflex",
  "rejnok",
  "reklama",
  "rekord",
  "rekrut",
  "rektor",
  "reputace",
  "revize",
  "revma",
  "revolver",
  "rezerva",
  "riskovat",
  "riziko",
  "robotika",
  "rodokmen",
  "rohovka",
  "rokle",
  "rokoko",
  "romaneto",
  "ropovod",
  "ropucha",
  "rorejs",
  "rosol",
  "rostlina",
  "rotmistr",
  "rotoped",
  "rotunda",
  "roubenka",
  "roucho",
  "roup",
  "roura",
  "rovina",
  "rovnice",
  "rozbor",
  "rozchod",
  "rozdat",
  "rozeznat",
  "rozhodce",
  "rozinka",
  "rozjezd",
  "rozkaz",
  "rozloha",
  "rozmar",
  "rozpad",
  "rozruch",
  "rozsah",
  "roztok",
  "rozum",
  "rozvod",
  "rubrika",
  "ruchadlo",
  "rukavice",
  "rukopis",
  "ryba",
  "rybolov",
  "rychlost",
  "rydlo",
  "rypadlo",
  "rytina",
  "ryzost",
  "sadista",
  "sahat",
  "sako",
  "samec",
  "samizdat",
  "samota",
  "sanitka",
  "sardinka",
  "sasanka",
  "satelit",
  "sazba",
  "sazenice",
  "sbor",
  "schovat",
  "sebranka",
  "secese",
  "sedadlo",
  "sediment",
  "sedlo",
  "sehnat",
  "sejmout",
  "sekera",
  "sekta",
  "sekunda",
  "sekvoje",
  "semeno",
  "seno",
  "servis",
  "sesadit",
  "seshora",
  "seskok",
  "seslat",
  "sestra",
  "sesuv",
  "sesypat",
  "setba",
  "setina",
  "setkat",
  "setnout",
  "setrvat",
  "sever",
  "seznam",
  "shoda",
  "shrnout",
  "sifon",
  "silnice",
  "sirka",
  "sirotek",
  "sirup",
  "situace",
  "skafandr",
  "skalisko",
  "skanzen",
  "skaut",
  "skeptik",
  "skica",
  "skladba",
  "sklenice",
  "sklo",
  "skluz",
  "skoba",
  "skokan",
  "skoro",
  "skripta",
  "skrz",
  "skupina",
  "skvost",
  "skvrna",
  "slabika",
  "sladidlo",
  "slanina",
  "slast",
  "slavnost",
  "sledovat",
  "slepec",
  "sleva",
  "slezina",
  "slib",
  "slina",
  "sliznice",
  "slon",
  "sloupek",
  "slovo",
  "sluch",
  "sluha",
  "slunce",
  "slupka",
  "slza",
  "smaragd",
  "smetana",
  "smilstvo",
  "smlouva",
  "smog",
  "smrad",
  "smrk",
  "smrtka",
  "smutek",
  "smysl",
  "snad",
  "snaha",
  "snob",
  "sobota",
  "socha",
  "sodovka",
  "sokol",
  "sopka",
  "sotva",
  "souboj",
  "soucit",
  "soudce",
  "souhlas",
  "soulad",
  "soumrak",
  "souprava",
  "soused",
  "soutok",
  "souviset",
  "spalovna",
  "spasitel",
  "spis",
  "splav",
  "spodek",
  "spojenec",
  "spolu",
  "sponzor",
  "spornost",
  "spousta",
  "sprcha",
  "spustit",
  "sranda",
  "sraz",
  "srdce",
  "srna",
  "srnec",
  "srovnat",
  "srpen",
  "srst",
  "srub",
  "stanice",
  "starosta",
  "statika",
  "stavba",
  "stehno",
  "stezka",
  "stodola",
  "stolek",
  "stopa",
  "storno",
  "stoupat",
  "strach",
  "stres",
  "strhnout",
  "strom",
  "struna",
  "studna",
  "stupnice",
  "stvol",
  "styk",
  "subjekt",
  "subtropy",
  "suchar",
  "sudost",
  "sukno",
  "sundat",
  "sunout",
  "surikata",
  "surovina",
  "svah",
  "svalstvo",
  "svetr",
  "svatba",
  "svazek",
  "svisle",
  "svitek",
  "svoboda",
  "svodidlo",
  "svorka",
  "svrab",
  "sykavka",
  "sykot",
  "synek",
  "synovec",
  "sypat",
  "sypkost",
  "syrovost",
  "sysel",
  "sytost",
  "tabletka",
  "tabule",
  "tahoun",
  "tajemno",
  "tajfun",
  "tajga",
  "tajit",
  "tajnost",
  "taktika",
  "tamhle",
  "tampon",
  "tancovat",
  "tanec",
  "tanker",
  "tapeta",
  "tavenina",
  "tazatel",
  "technika",
  "tehdy",
  "tekutina",
  "telefon",
  "temnota",
  "tendence",
  "tenista",
  "tenor",
  "teplota",
  "tepna",
  "teprve",
  "terapie",
  "termoska",
  "textil",
  "ticho",
  "tiskopis",
  "titulek",
  "tkadlec",
  "tkanina",
  "tlapka",
  "tleskat",
  "tlukot",
  "tlupa",
  "tmel",
  "toaleta",
  "topinka",
  "topol",
  "torzo",
  "touha",
  "toulec",
  "tradice",
  "traktor",
  "tramp",
  "trasa",
  "traverza",
  "trefit",
  "trest",
  "trezor",
  "trhavina",
  "trhlina",
  "trochu",
  "trojice",
  "troska",
  "trouba",
  "trpce",
  "trpitel",
  "trpkost",
  "trubec",
  "truchlit",
  "truhlice",
  "trus",
  "trvat",
  "tudy",
  "tuhnout",
  "tuhost",
  "tundra",
  "turista",
  "turnaj",
  "tuzemsko",
  "tvaroh",
  "tvorba",
  "tvrdost",
  "tvrz",
  "tygr",
  "tykev",
  "ubohost",
  "uboze",
  "ubrat",
  "ubrousek",
  "ubrus",
  "ubytovna",
  "ucho",
  "uctivost",
  "udivit",
  "uhradit",
  "ujednat",
  "ujistit",
  "ujmout",
  "ukazatel",
  "uklidnit",
  "uklonit",
  "ukotvit",
  "ukrojit",
  "ulice",
  "ulita",
  "ulovit",
  "umyvadlo",
  "unavit",
  "uniforma",
  "uniknout",
  "upadnout",
  "uplatnit",
  "uplynout",
  "upoutat",
  "upravit",
  "uran",
  "urazit",
  "usednout",
  "usilovat",
  "usmrtit",
  "usnadnit",
  "usnout",
  "usoudit",
  "ustlat",
  "ustrnout",
  "utahovat",
  "utkat",
  "utlumit",
  "utonout",
  "utopenec",
  "utrousit",
  "uvalit",
  "uvolnit",
  "uvozovka",
  "uzdravit",
  "uzel",
  "uzenina",
  "uzlina",
  "uznat",
  "vagon",
  "valcha",
  "valoun",
  "vana",
  "vandal",
  "vanilka",
  "varan",
  "varhany",
  "varovat",
  "vcelku",
  "vchod",
  "vdova",
  "vedro",
  "vegetace",
  "vejce",
  "velbloud",
  "veletrh",
  "velitel",
  "velmoc",
  "velryba",
  "venkov",
  "veranda",
  "verze",
  "veselka",
  "veskrze",
  "vesnice",
  "vespodu",
  "vesta",
  "veterina",
  "veverka",
  "vibrace",
  "vichr",
  "videohra",
  "vidina",
  "vidle",
  "vila",
  "vinice",
  "viset",
  "vitalita",
  "vize",
  "vizitka",
  "vjezd",
  "vklad",
  "vkus",
  "vlajka",
  "vlak",
  "vlasec",
  "vlevo",
  "vlhkost",
  "vliv",
  "vlnovka",
  "vloupat",
  "vnucovat",
  "vnuk",
  "voda",
  "vodivost",
  "vodoznak",
  "vodstvo",
  "vojensky",
  "vojna",
  "vojsko",
  "volant",
  "volba",
  "volit",
  "volno",
  "voskovka",
  "vozidlo",
  "vozovna",
  "vpravo",
  "vrabec",
  "vracet",
  "vrah",
  "vrata",
  "vrba",
  "vrcholek",
  "vrhat",
  "vrstva",
  "vrtule",
  "vsadit",
  "vstoupit",
  "vstup",
  "vtip",
  "vybavit",
  "vybrat",
  "vychovat",
  "vydat",
  "vydra",
  "vyfotit",
  "vyhledat",
  "vyhnout",
  "vyhodit",
  "vyhradit",
  "vyhubit",
  "vyjasnit",
  "vyjet",
  "vyjmout",
  "vyklopit",
  "vykonat",
  "vylekat",
  "vymazat",
  "vymezit",
  "vymizet",
  "vymyslet",
  "vynechat",
  "vynikat",
  "vynutit",
  "vypadat",
  "vyplatit",
  "vypravit",
  "vypustit",
  "vyrazit",
  "vyrovnat",
  "vyrvat",
  "vyslovit",
  "vysoko",
  "vystavit",
  "vysunout",
  "vysypat",
  "vytasit",
  "vytesat",
  "vytratit",
  "vyvinout",
  "vyvolat",
  "vyvrhel",
  "vyzdobit",
  "vyznat",
  "vzadu",
  "vzbudit",
  "vzchopit",
  "vzdor",
  "vzduch",
  "vzdychat",
  "vzestup",
  "vzhledem",
  "vzkaz",
  "vzlykat",
  "vznik",
  "vzorek",
  "vzpoura",
  "vztah",
  "vztek",
  "xylofon",
  "zabrat",
  "zabydlet",
  "zachovat",
  "zadarmo",
  "zadusit",
  "zafoukat",
  "zahltit",
  "zahodit",
  "zahrada",
  "zahynout",
  "zajatec",
  "zajet",
  "zajistit",
  "zaklepat",
  "zakoupit",
  "zalepit",
  "zamezit",
  "zamotat",
  "zamyslet",
  "zanechat",
  "zanikat",
  "zaplatit",
  "zapojit",
  "zapsat",
  "zarazit",
  "zastavit",
  "zasunout",
  "zatajit",
  "zatemnit",
  "zatknout",
  "zaujmout",
  "zavalit",
  "zavelet",
  "zavinit",
  "zavolat",
  "zavrtat",
  "zazvonit",
  "zbavit",
  "zbrusu",
  "zbudovat",
  "zbytek",
  "zdaleka",
  "zdarma",
  "zdatnost",
  "zdivo",
  "zdobit",
  "zdroj",
  "zdvih",
  "zdymadlo",
  "zelenina",
  "zeman",
  "zemina",
  "zeptat",
  "zezadu",
  "zezdola",
  "zhatit",
  "zhltnout",
  "zhluboka",
  "zhotovit",
  "zhruba",
  "zima",
  "zimnice",
  "zjemnit",
  "zklamat",
  "zkoumat",
  "zkratka",
  "zkumavka",
  "zlato",
  "zlehka",
  "zloba",
  "zlom",
  "zlost",
  "zlozvyk",
  "zmapovat",
  "zmar",
  "zmatek",
  "zmije",
  "zmizet",
  "zmocnit",
  "zmodrat",
  "zmrzlina",
  "zmutovat",
  "znak",
  "znalost",
  "znamenat",
  "znovu",
  "zobrazit",
  "zotavit",
  "zoubek",
  "zoufale",
  "zplodit",
  "zpomalit",
  "zprava",
  "zprostit",
  "zprudka",
  "zprvu",
  "zrada",
  "zranit",
  "zrcadlo",
  "zrnitost",
  "zrno",
  "zrovna",
  "zrychlit",
  "zrzavost",
  "zticha",
  "ztratit",
  "zubovina",
  "zubr",
  "zvednout",
  "zvenku",
  "zvesela",
  "zvon",
  "zvrat",
  "zvukovod",
  "zvyk"
], pB = [
  "的",
  "一",
  "是",
  "在",
  "不",
  "了",
  "有",
  "和",
  "人",
  "这",
  "中",
  "大",
  "为",
  "上",
  "个",
  "国",
  "我",
  "以",
  "要",
  "他",
  "时",
  "来",
  "用",
  "们",
  "生",
  "到",
  "作",
  "地",
  "于",
  "出",
  "就",
  "分",
  "对",
  "成",
  "会",
  "可",
  "主",
  "发",
  "年",
  "动",
  "同",
  "工",
  "也",
  "能",
  "下",
  "过",
  "子",
  "说",
  "产",
  "种",
  "面",
  "而",
  "方",
  "后",
  "多",
  "定",
  "行",
  "学",
  "法",
  "所",
  "民",
  "得",
  "经",
  "十",
  "三",
  "之",
  "进",
  "着",
  "等",
  "部",
  "度",
  "家",
  "电",
  "力",
  "里",
  "如",
  "水",
  "化",
  "高",
  "自",
  "二",
  "理",
  "起",
  "小",
  "物",
  "现",
  "实",
  "加",
  "量",
  "都",
  "两",
  "体",
  "制",
  "机",
  "当",
  "使",
  "点",
  "从",
  "业",
  "本",
  "去",
  "把",
  "性",
  "好",
  "应",
  "开",
  "它",
  "合",
  "还",
  "因",
  "由",
  "其",
  "些",
  "然",
  "前",
  "外",
  "天",
  "政",
  "四",
  "日",
  "那",
  "社",
  "义",
  "事",
  "平",
  "形",
  "相",
  "全",
  "表",
  "间",
  "样",
  "与",
  "关",
  "各",
  "重",
  "新",
  "线",
  "内",
  "数",
  "正",
  "心",
  "反",
  "你",
  "明",
  "看",
  "原",
  "又",
  "么",
  "利",
  "比",
  "或",
  "但",
  "质",
  "气",
  "第",
  "向",
  "道",
  "命",
  "此",
  "变",
  "条",
  "只",
  "没",
  "结",
  "解",
  "问",
  "意",
  "建",
  "月",
  "公",
  "无",
  "系",
  "军",
  "很",
  "情",
  "者",
  "最",
  "立",
  "代",
  "想",
  "已",
  "通",
  "并",
  "提",
  "直",
  "题",
  "党",
  "程",
  "展",
  "五",
  "果",
  "料",
  "象",
  "员",
  "革",
  "位",
  "入",
  "常",
  "文",
  "总",
  "次",
  "品",
  "式",
  "活",
  "设",
  "及",
  "管",
  "特",
  "件",
  "长",
  "求",
  "老",
  "头",
  "基",
  "资",
  "边",
  "流",
  "路",
  "级",
  "少",
  "图",
  "山",
  "统",
  "接",
  "知",
  "较",
  "将",
  "组",
  "见",
  "计",
  "别",
  "她",
  "手",
  "角",
  "期",
  "根",
  "论",
  "运",
  "农",
  "指",
  "几",
  "九",
  "区",
  "强",
  "放",
  "决",
  "西",
  "被",
  "干",
  "做",
  "必",
  "战",
  "先",
  "回",
  "则",
  "任",
  "取",
  "据",
  "处",
  "队",
  "南",
  "给",
  "色",
  "光",
  "门",
  "即",
  "保",
  "治",
  "北",
  "造",
  "百",
  "规",
  "热",
  "领",
  "七",
  "海",
  "口",
  "东",
  "导",
  "器",
  "压",
  "志",
  "世",
  "金",
  "增",
  "争",
  "济",
  "阶",
  "油",
  "思",
  "术",
  "极",
  "交",
  "受",
  "联",
  "什",
  "认",
  "六",
  "共",
  "权",
  "收",
  "证",
  "改",
  "清",
  "美",
  "再",
  "采",
  "转",
  "更",
  "单",
  "风",
  "切",
  "打",
  "白",
  "教",
  "速",
  "花",
  "带",
  "安",
  "场",
  "身",
  "车",
  "例",
  "真",
  "务",
  "具",
  "万",
  "每",
  "目",
  "至",
  "达",
  "走",
  "积",
  "示",
  "议",
  "声",
  "报",
  "斗",
  "完",
  "类",
  "八",
  "离",
  "华",
  "名",
  "确",
  "才",
  "科",
  "张",
  "信",
  "马",
  "节",
  "话",
  "米",
  "整",
  "空",
  "元",
  "况",
  "今",
  "集",
  "温",
  "传",
  "土",
  "许",
  "步",
  "群",
  "广",
  "石",
  "记",
  "需",
  "段",
  "研",
  "界",
  "拉",
  "林",
  "律",
  "叫",
  "且",
  "究",
  "观",
  "越",
  "织",
  "装",
  "影",
  "算",
  "低",
  "持",
  "音",
  "众",
  "书",
  "布",
  "复",
  "容",
  "儿",
  "须",
  "际",
  "商",
  "非",
  "验",
  "连",
  "断",
  "深",
  "难",
  "近",
  "矿",
  "千",
  "周",
  "委",
  "素",
  "技",
  "备",
  "半",
  "办",
  "青",
  "省",
  "列",
  "习",
  "响",
  "约",
  "支",
  "般",
  "史",
  "感",
  "劳",
  "便",
  "团",
  "往",
  "酸",
  "历",
  "市",
  "克",
  "何",
  "除",
  "消",
  "构",
  "府",
  "称",
  "太",
  "准",
  "精",
  "值",
  "号",
  "率",
  "族",
  "维",
  "划",
  "选",
  "标",
  "写",
  "存",
  "候",
  "毛",
  "亲",
  "快",
  "效",
  "斯",
  "院",
  "查",
  "江",
  "型",
  "眼",
  "王",
  "按",
  "格",
  "养",
  "易",
  "置",
  "派",
  "层",
  "片",
  "始",
  "却",
  "专",
  "状",
  "育",
  "厂",
  "京",
  "识",
  "适",
  "属",
  "圆",
  "包",
  "火",
  "住",
  "调",
  "满",
  "县",
  "局",
  "照",
  "参",
  "红",
  "细",
  "引",
  "听",
  "该",
  "铁",
  "价",
  "严",
  "首",
  "底",
  "液",
  "官",
  "德",
  "随",
  "病",
  "苏",
  "失",
  "尔",
  "死",
  "讲",
  "配",
  "女",
  "黄",
  "推",
  "显",
  "谈",
  "罪",
  "神",
  "艺",
  "呢",
  "席",
  "含",
  "企",
  "望",
  "密",
  "批",
  "营",
  "项",
  "防",
  "举",
  "球",
  "英",
  "氧",
  "势",
  "告",
  "李",
  "台",
  "落",
  "木",
  "帮",
  "轮",
  "破",
  "亚",
  "师",
  "围",
  "注",
  "远",
  "字",
  "材",
  "排",
  "供",
  "河",
  "态",
  "封",
  "另",
  "施",
  "减",
  "树",
  "溶",
  "怎",
  "止",
  "案",
  "言",
  "士",
  "均",
  "武",
  "固",
  "叶",
  "鱼",
  "波",
  "视",
  "仅",
  "费",
  "紧",
  "爱",
  "左",
  "章",
  "早",
  "朝",
  "害",
  "续",
  "轻",
  "服",
  "试",
  "食",
  "充",
  "兵",
  "源",
  "判",
  "护",
  "司",
  "足",
  "某",
  "练",
  "差",
  "致",
  "板",
  "田",
  "降",
  "黑",
  "犯",
  "负",
  "击",
  "范",
  "继",
  "兴",
  "似",
  "余",
  "坚",
  "曲",
  "输",
  "修",
  "故",
  "城",
  "夫",
  "够",
  "送",
  "笔",
  "船",
  "占",
  "右",
  "财",
  "吃",
  "富",
  "春",
  "职",
  "觉",
  "汉",
  "画",
  "功",
  "巴",
  "跟",
  "虽",
  "杂",
  "飞",
  "检",
  "吸",
  "助",
  "升",
  "阳",
  "互",
  "初",
  "创",
  "抗",
  "考",
  "投",
  "坏",
  "策",
  "古",
  "径",
  "换",
  "未",
  "跑",
  "留",
  "钢",
  "曾",
  "端",
  "责",
  "站",
  "简",
  "述",
  "钱",
  "副",
  "尽",
  "帝",
  "射",
  "草",
  "冲",
  "承",
  "独",
  "令",
  "限",
  "阿",
  "宣",
  "环",
  "双",
  "请",
  "超",
  "微",
  "让",
  "控",
  "州",
  "良",
  "轴",
  "找",
  "否",
  "纪",
  "益",
  "依",
  "优",
  "顶",
  "础",
  "载",
  "倒",
  "房",
  "突",
  "坐",
  "粉",
  "敌",
  "略",
  "客",
  "袁",
  "冷",
  "胜",
  "绝",
  "析",
  "块",
  "剂",
  "测",
  "丝",
  "协",
  "诉",
  "念",
  "陈",
  "仍",
  "罗",
  "盐",
  "友",
  "洋",
  "错",
  "苦",
  "夜",
  "刑",
  "移",
  "频",
  "逐",
  "靠",
  "混",
  "母",
  "短",
  "皮",
  "终",
  "聚",
  "汽",
  "村",
  "云",
  "哪",
  "既",
  "距",
  "卫",
  "停",
  "烈",
  "央",
  "察",
  "烧",
  "迅",
  "境",
  "若",
  "印",
  "洲",
  "刻",
  "括",
  "激",
  "孔",
  "搞",
  "甚",
  "室",
  "待",
  "核",
  "校",
  "散",
  "侵",
  "吧",
  "甲",
  "游",
  "久",
  "菜",
  "味",
  "旧",
  "模",
  "湖",
  "货",
  "损",
  "预",
  "阻",
  "毫",
  "普",
  "稳",
  "乙",
  "妈",
  "植",
  "息",
  "扩",
  "银",
  "语",
  "挥",
  "酒",
  "守",
  "拿",
  "序",
  "纸",
  "医",
  "缺",
  "雨",
  "吗",
  "针",
  "刘",
  "啊",
  "急",
  "唱",
  "误",
  "训",
  "愿",
  "审",
  "附",
  "获",
  "茶",
  "鲜",
  "粮",
  "斤",
  "孩",
  "脱",
  "硫",
  "肥",
  "善",
  "龙",
  "演",
  "父",
  "渐",
  "血",
  "欢",
  "械",
  "掌",
  "歌",
  "沙",
  "刚",
  "攻",
  "谓",
  "盾",
  "讨",
  "晚",
  "粒",
  "乱",
  "燃",
  "矛",
  "乎",
  "杀",
  "药",
  "宁",
  "鲁",
  "贵",
  "钟",
  "煤",
  "读",
  "班",
  "伯",
  "香",
  "介",
  "迫",
  "句",
  "丰",
  "培",
  "握",
  "兰",
  "担",
  "弦",
  "蛋",
  "沉",
  "假",
  "穿",
  "执",
  "答",
  "乐",
  "谁",
  "顺",
  "烟",
  "缩",
  "征",
  "脸",
  "喜",
  "松",
  "脚",
  "困",
  "异",
  "免",
  "背",
  "星",
  "福",
  "买",
  "染",
  "井",
  "概",
  "慢",
  "怕",
  "磁",
  "倍",
  "祖",
  "皇",
  "促",
  "静",
  "补",
  "评",
  "翻",
  "肉",
  "践",
  "尼",
  "衣",
  "宽",
  "扬",
  "棉",
  "希",
  "伤",
  "操",
  "垂",
  "秋",
  "宜",
  "氢",
  "套",
  "督",
  "振",
  "架",
  "亮",
  "末",
  "宪",
  "庆",
  "编",
  "牛",
  "触",
  "映",
  "雷",
  "销",
  "诗",
  "座",
  "居",
  "抓",
  "裂",
  "胞",
  "呼",
  "娘",
  "景",
  "威",
  "绿",
  "晶",
  "厚",
  "盟",
  "衡",
  "鸡",
  "孙",
  "延",
  "危",
  "胶",
  "屋",
  "乡",
  "临",
  "陆",
  "顾",
  "掉",
  "呀",
  "灯",
  "岁",
  "措",
  "束",
  "耐",
  "剧",
  "玉",
  "赵",
  "跳",
  "哥",
  "季",
  "课",
  "凯",
  "胡",
  "额",
  "款",
  "绍",
  "卷",
  "齐",
  "伟",
  "蒸",
  "殖",
  "永",
  "宗",
  "苗",
  "川",
  "炉",
  "岩",
  "弱",
  "零",
  "杨",
  "奏",
  "沿",
  "露",
  "杆",
  "探",
  "滑",
  "镇",
  "饭",
  "浓",
  "航",
  "怀",
  "赶",
  "库",
  "夺",
  "伊",
  "灵",
  "税",
  "途",
  "灭",
  "赛",
  "归",
  "召",
  "鼓",
  "播",
  "盘",
  "裁",
  "险",
  "康",
  "唯",
  "录",
  "菌",
  "纯",
  "借",
  "糖",
  "盖",
  "横",
  "符",
  "私",
  "努",
  "堂",
  "域",
  "枪",
  "润",
  "幅",
  "哈",
  "竟",
  "熟",
  "虫",
  "泽",
  "脑",
  "壤",
  "碳",
  "欧",
  "遍",
  "侧",
  "寨",
  "敢",
  "彻",
  "虑",
  "斜",
  "薄",
  "庭",
  "纳",
  "弹",
  "饲",
  "伸",
  "折",
  "麦",
  "湿",
  "暗",
  "荷",
  "瓦",
  "塞",
  "床",
  "筑",
  "恶",
  "户",
  "访",
  "塔",
  "奇",
  "透",
  "梁",
  "刀",
  "旋",
  "迹",
  "卡",
  "氯",
  "遇",
  "份",
  "毒",
  "泥",
  "退",
  "洗",
  "摆",
  "灰",
  "彩",
  "卖",
  "耗",
  "夏",
  "择",
  "忙",
  "铜",
  "献",
  "硬",
  "予",
  "繁",
  "圈",
  "雪",
  "函",
  "亦",
  "抽",
  "篇",
  "阵",
  "阴",
  "丁",
  "尺",
  "追",
  "堆",
  "雄",
  "迎",
  "泛",
  "爸",
  "楼",
  "避",
  "谋",
  "吨",
  "野",
  "猪",
  "旗",
  "累",
  "偏",
  "典",
  "馆",
  "索",
  "秦",
  "脂",
  "潮",
  "爷",
  "豆",
  "忽",
  "托",
  "惊",
  "塑",
  "遗",
  "愈",
  "朱",
  "替",
  "纤",
  "粗",
  "倾",
  "尚",
  "痛",
  "楚",
  "谢",
  "奋",
  "购",
  "磨",
  "君",
  "池",
  "旁",
  "碎",
  "骨",
  "监",
  "捕",
  "弟",
  "暴",
  "割",
  "贯",
  "殊",
  "释",
  "词",
  "亡",
  "壁",
  "顿",
  "宝",
  "午",
  "尘",
  "闻",
  "揭",
  "炮",
  "残",
  "冬",
  "桥",
  "妇",
  "警",
  "综",
  "招",
  "吴",
  "付",
  "浮",
  "遭",
  "徐",
  "您",
  "摇",
  "谷",
  "赞",
  "箱",
  "隔",
  "订",
  "男",
  "吹",
  "园",
  "纷",
  "唐",
  "败",
  "宋",
  "玻",
  "巨",
  "耕",
  "坦",
  "荣",
  "闭",
  "湾",
  "键",
  "凡",
  "驻",
  "锅",
  "救",
  "恩",
  "剥",
  "凝",
  "碱",
  "齿",
  "截",
  "炼",
  "麻",
  "纺",
  "禁",
  "废",
  "盛",
  "版",
  "缓",
  "净",
  "睛",
  "昌",
  "婚",
  "涉",
  "筒",
  "嘴",
  "插",
  "岸",
  "朗",
  "庄",
  "街",
  "藏",
  "姑",
  "贸",
  "腐",
  "奴",
  "啦",
  "惯",
  "乘",
  "伙",
  "恢",
  "匀",
  "纱",
  "扎",
  "辩",
  "耳",
  "彪",
  "臣",
  "亿",
  "璃",
  "抵",
  "脉",
  "秀",
  "萨",
  "俄",
  "网",
  "舞",
  "店",
  "喷",
  "纵",
  "寸",
  "汗",
  "挂",
  "洪",
  "贺",
  "闪",
  "柬",
  "爆",
  "烯",
  "津",
  "稻",
  "墙",
  "软",
  "勇",
  "像",
  "滚",
  "厘",
  "蒙",
  "芳",
  "肯",
  "坡",
  "柱",
  "荡",
  "腿",
  "仪",
  "旅",
  "尾",
  "轧",
  "冰",
  "贡",
  "登",
  "黎",
  "削",
  "钻",
  "勒",
  "逃",
  "障",
  "氨",
  "郭",
  "峰",
  "币",
  "港",
  "伏",
  "轨",
  "亩",
  "毕",
  "擦",
  "莫",
  "刺",
  "浪",
  "秘",
  "援",
  "株",
  "健",
  "售",
  "股",
  "岛",
  "甘",
  "泡",
  "睡",
  "童",
  "铸",
  "汤",
  "阀",
  "休",
  "汇",
  "舍",
  "牧",
  "绕",
  "炸",
  "哲",
  "磷",
  "绩",
  "朋",
  "淡",
  "尖",
  "启",
  "陷",
  "柴",
  "呈",
  "徒",
  "颜",
  "泪",
  "稍",
  "忘",
  "泵",
  "蓝",
  "拖",
  "洞",
  "授",
  "镜",
  "辛",
  "壮",
  "锋",
  "贫",
  "虚",
  "弯",
  "摩",
  "泰",
  "幼",
  "廷",
  "尊",
  "窗",
  "纲",
  "弄",
  "隶",
  "疑",
  "氏",
  "宫",
  "姐",
  "震",
  "瑞",
  "怪",
  "尤",
  "琴",
  "循",
  "描",
  "膜",
  "违",
  "夹",
  "腰",
  "缘",
  "珠",
  "穷",
  "森",
  "枝",
  "竹",
  "沟",
  "催",
  "绳",
  "忆",
  "邦",
  "剩",
  "幸",
  "浆",
  "栏",
  "拥",
  "牙",
  "贮",
  "礼",
  "滤",
  "钠",
  "纹",
  "罢",
  "拍",
  "咱",
  "喊",
  "袖",
  "埃",
  "勤",
  "罚",
  "焦",
  "潜",
  "伍",
  "墨",
  "欲",
  "缝",
  "姓",
  "刊",
  "饱",
  "仿",
  "奖",
  "铝",
  "鬼",
  "丽",
  "跨",
  "默",
  "挖",
  "链",
  "扫",
  "喝",
  "袋",
  "炭",
  "污",
  "幕",
  "诸",
  "弧",
  "励",
  "梅",
  "奶",
  "洁",
  "灾",
  "舟",
  "鉴",
  "苯",
  "讼",
  "抱",
  "毁",
  "懂",
  "寒",
  "智",
  "埔",
  "寄",
  "届",
  "跃",
  "渡",
  "挑",
  "丹",
  "艰",
  "贝",
  "碰",
  "拔",
  "爹",
  "戴",
  "码",
  "梦",
  "芽",
  "熔",
  "赤",
  "渔",
  "哭",
  "敬",
  "颗",
  "奔",
  "铅",
  "仲",
  "虎",
  "稀",
  "妹",
  "乏",
  "珍",
  "申",
  "桌",
  "遵",
  "允",
  "隆",
  "螺",
  "仓",
  "魏",
  "锐",
  "晓",
  "氮",
  "兼",
  "隐",
  "碍",
  "赫",
  "拨",
  "忠",
  "肃",
  "缸",
  "牵",
  "抢",
  "博",
  "巧",
  "壳",
  "兄",
  "杜",
  "讯",
  "诚",
  "碧",
  "祥",
  "柯",
  "页",
  "巡",
  "矩",
  "悲",
  "灌",
  "龄",
  "伦",
  "票",
  "寻",
  "桂",
  "铺",
  "圣",
  "恐",
  "恰",
  "郑",
  "趣",
  "抬",
  "荒",
  "腾",
  "贴",
  "柔",
  "滴",
  "猛",
  "阔",
  "辆",
  "妻",
  "填",
  "撤",
  "储",
  "签",
  "闹",
  "扰",
  "紫",
  "砂",
  "递",
  "戏",
  "吊",
  "陶",
  "伐",
  "喂",
  "疗",
  "瓶",
  "婆",
  "抚",
  "臂",
  "摸",
  "忍",
  "虾",
  "蜡",
  "邻",
  "胸",
  "巩",
  "挤",
  "偶",
  "弃",
  "槽",
  "劲",
  "乳",
  "邓",
  "吉",
  "仁",
  "烂",
  "砖",
  "租",
  "乌",
  "舰",
  "伴",
  "瓜",
  "浅",
  "丙",
  "暂",
  "燥",
  "橡",
  "柳",
  "迷",
  "暖",
  "牌",
  "秧",
  "胆",
  "详",
  "簧",
  "踏",
  "瓷",
  "谱",
  "呆",
  "宾",
  "糊",
  "洛",
  "辉",
  "愤",
  "竞",
  "隙",
  "怒",
  "粘",
  "乃",
  "绪",
  "肩",
  "籍",
  "敏",
  "涂",
  "熙",
  "皆",
  "侦",
  "悬",
  "掘",
  "享",
  "纠",
  "醒",
  "狂",
  "锁",
  "淀",
  "恨",
  "牲",
  "霸",
  "爬",
  "赏",
  "逆",
  "玩",
  "陵",
  "祝",
  "秒",
  "浙",
  "貌",
  "役",
  "彼",
  "悉",
  "鸭",
  "趋",
  "凤",
  "晨",
  "畜",
  "辈",
  "秩",
  "卵",
  "署",
  "梯",
  "炎",
  "滩",
  "棋",
  "驱",
  "筛",
  "峡",
  "冒",
  "啥",
  "寿",
  "译",
  "浸",
  "泉",
  "帽",
  "迟",
  "硅",
  "疆",
  "贷",
  "漏",
  "稿",
  "冠",
  "嫩",
  "胁",
  "芯",
  "牢",
  "叛",
  "蚀",
  "奥",
  "鸣",
  "岭",
  "羊",
  "凭",
  "串",
  "塘",
  "绘",
  "酵",
  "融",
  "盆",
  "锡",
  "庙",
  "筹",
  "冻",
  "辅",
  "摄",
  "袭",
  "筋",
  "拒",
  "僚",
  "旱",
  "钾",
  "鸟",
  "漆",
  "沈",
  "眉",
  "疏",
  "添",
  "棒",
  "穗",
  "硝",
  "韩",
  "逼",
  "扭",
  "侨",
  "凉",
  "挺",
  "碗",
  "栽",
  "炒",
  "杯",
  "患",
  "馏",
  "劝",
  "豪",
  "辽",
  "勃",
  "鸿",
  "旦",
  "吏",
  "拜",
  "狗",
  "埋",
  "辊",
  "掩",
  "饮",
  "搬",
  "骂",
  "辞",
  "勾",
  "扣",
  "估",
  "蒋",
  "绒",
  "雾",
  "丈",
  "朵",
  "姆",
  "拟",
  "宇",
  "辑",
  "陕",
  "雕",
  "偿",
  "蓄",
  "崇",
  "剪",
  "倡",
  "厅",
  "咬",
  "驶",
  "薯",
  "刷",
  "斥",
  "番",
  "赋",
  "奉",
  "佛",
  "浇",
  "漫",
  "曼",
  "扇",
  "钙",
  "桃",
  "扶",
  "仔",
  "返",
  "俗",
  "亏",
  "腔",
  "鞋",
  "棱",
  "覆",
  "框",
  "悄",
  "叔",
  "撞",
  "骗",
  "勘",
  "旺",
  "沸",
  "孤",
  "吐",
  "孟",
  "渠",
  "屈",
  "疾",
  "妙",
  "惜",
  "仰",
  "狠",
  "胀",
  "谐",
  "抛",
  "霉",
  "桑",
  "岗",
  "嘛",
  "衰",
  "盗",
  "渗",
  "脏",
  "赖",
  "涌",
  "甜",
  "曹",
  "阅",
  "肌",
  "哩",
  "厉",
  "烃",
  "纬",
  "毅",
  "昨",
  "伪",
  "症",
  "煮",
  "叹",
  "钉",
  "搭",
  "茎",
  "笼",
  "酷",
  "偷",
  "弓",
  "锥",
  "恒",
  "杰",
  "坑",
  "鼻",
  "翼",
  "纶",
  "叙",
  "狱",
  "逮",
  "罐",
  "络",
  "棚",
  "抑",
  "膨",
  "蔬",
  "寺",
  "骤",
  "穆",
  "冶",
  "枯",
  "册",
  "尸",
  "凸",
  "绅",
  "坯",
  "牺",
  "焰",
  "轰",
  "欣",
  "晋",
  "瘦",
  "御",
  "锭",
  "锦",
  "丧",
  "旬",
  "锻",
  "垄",
  "搜",
  "扑",
  "邀",
  "亭",
  "酯",
  "迈",
  "舒",
  "脆",
  "酶",
  "闲",
  "忧",
  "酚",
  "顽",
  "羽",
  "涨",
  "卸",
  "仗",
  "陪",
  "辟",
  "惩",
  "杭",
  "姚",
  "肚",
  "捉",
  "飘",
  "漂",
  "昆",
  "欺",
  "吾",
  "郎",
  "烷",
  "汁",
  "呵",
  "饰",
  "萧",
  "雅",
  "邮",
  "迁",
  "燕",
  "撒",
  "姻",
  "赴",
  "宴",
  "烦",
  "债",
  "帐",
  "斑",
  "铃",
  "旨",
  "醇",
  "董",
  "饼",
  "雏",
  "姿",
  "拌",
  "傅",
  "腹",
  "妥",
  "揉",
  "贤",
  "拆",
  "歪",
  "葡",
  "胺",
  "丢",
  "浩",
  "徽",
  "昂",
  "垫",
  "挡",
  "览",
  "贪",
  "慰",
  "缴",
  "汪",
  "慌",
  "冯",
  "诺",
  "姜",
  "谊",
  "凶",
  "劣",
  "诬",
  "耀",
  "昏",
  "躺",
  "盈",
  "骑",
  "乔",
  "溪",
  "丛",
  "卢",
  "抹",
  "闷",
  "咨",
  "刮",
  "驾",
  "缆",
  "悟",
  "摘",
  "铒",
  "掷",
  "颇",
  "幻",
  "柄",
  "惠",
  "惨",
  "佳",
  "仇",
  "腊",
  "窝",
  "涤",
  "剑",
  "瞧",
  "堡",
  "泼",
  "葱",
  "罩",
  "霍",
  "捞",
  "胎",
  "苍",
  "滨",
  "俩",
  "捅",
  "湘",
  "砍",
  "霞",
  "邵",
  "萄",
  "疯",
  "淮",
  "遂",
  "熊",
  "粪",
  "烘",
  "宿",
  "档",
  "戈",
  "驳",
  "嫂",
  "裕",
  "徙",
  "箭",
  "捐",
  "肠",
  "撑",
  "晒",
  "辨",
  "殿",
  "莲",
  "摊",
  "搅",
  "酱",
  "屏",
  "疫",
  "哀",
  "蔡",
  "堵",
  "沫",
  "皱",
  "畅",
  "叠",
  "阁",
  "莱",
  "敲",
  "辖",
  "钩",
  "痕",
  "坝",
  "巷",
  "饿",
  "祸",
  "丘",
  "玄",
  "溜",
  "曰",
  "逻",
  "彭",
  "尝",
  "卿",
  "妨",
  "艇",
  "吞",
  "韦",
  "怨",
  "矮",
  "歇"
], gB = [
  "的",
  "一",
  "是",
  "在",
  "不",
  "了",
  "有",
  "和",
  "人",
  "這",
  "中",
  "大",
  "為",
  "上",
  "個",
  "國",
  "我",
  "以",
  "要",
  "他",
  "時",
  "來",
  "用",
  "們",
  "生",
  "到",
  "作",
  "地",
  "於",
  "出",
  "就",
  "分",
  "對",
  "成",
  "會",
  "可",
  "主",
  "發",
  "年",
  "動",
  "同",
  "工",
  "也",
  "能",
  "下",
  "過",
  "子",
  "說",
  "產",
  "種",
  "面",
  "而",
  "方",
  "後",
  "多",
  "定",
  "行",
  "學",
  "法",
  "所",
  "民",
  "得",
  "經",
  "十",
  "三",
  "之",
  "進",
  "著",
  "等",
  "部",
  "度",
  "家",
  "電",
  "力",
  "裡",
  "如",
  "水",
  "化",
  "高",
  "自",
  "二",
  "理",
  "起",
  "小",
  "物",
  "現",
  "實",
  "加",
  "量",
  "都",
  "兩",
  "體",
  "制",
  "機",
  "當",
  "使",
  "點",
  "從",
  "業",
  "本",
  "去",
  "把",
  "性",
  "好",
  "應",
  "開",
  "它",
  "合",
  "還",
  "因",
  "由",
  "其",
  "些",
  "然",
  "前",
  "外",
  "天",
  "政",
  "四",
  "日",
  "那",
  "社",
  "義",
  "事",
  "平",
  "形",
  "相",
  "全",
  "表",
  "間",
  "樣",
  "與",
  "關",
  "各",
  "重",
  "新",
  "線",
  "內",
  "數",
  "正",
  "心",
  "反",
  "你",
  "明",
  "看",
  "原",
  "又",
  "麼",
  "利",
  "比",
  "或",
  "但",
  "質",
  "氣",
  "第",
  "向",
  "道",
  "命",
  "此",
  "變",
  "條",
  "只",
  "沒",
  "結",
  "解",
  "問",
  "意",
  "建",
  "月",
  "公",
  "無",
  "系",
  "軍",
  "很",
  "情",
  "者",
  "最",
  "立",
  "代",
  "想",
  "已",
  "通",
  "並",
  "提",
  "直",
  "題",
  "黨",
  "程",
  "展",
  "五",
  "果",
  "料",
  "象",
  "員",
  "革",
  "位",
  "入",
  "常",
  "文",
  "總",
  "次",
  "品",
  "式",
  "活",
  "設",
  "及",
  "管",
  "特",
  "件",
  "長",
  "求",
  "老",
  "頭",
  "基",
  "資",
  "邊",
  "流",
  "路",
  "級",
  "少",
  "圖",
  "山",
  "統",
  "接",
  "知",
  "較",
  "將",
  "組",
  "見",
  "計",
  "別",
  "她",
  "手",
  "角",
  "期",
  "根",
  "論",
  "運",
  "農",
  "指",
  "幾",
  "九",
  "區",
  "強",
  "放",
  "決",
  "西",
  "被",
  "幹",
  "做",
  "必",
  "戰",
  "先",
  "回",
  "則",
  "任",
  "取",
  "據",
  "處",
  "隊",
  "南",
  "給",
  "色",
  "光",
  "門",
  "即",
  "保",
  "治",
  "北",
  "造",
  "百",
  "規",
  "熱",
  "領",
  "七",
  "海",
  "口",
  "東",
  "導",
  "器",
  "壓",
  "志",
  "世",
  "金",
  "增",
  "爭",
  "濟",
  "階",
  "油",
  "思",
  "術",
  "極",
  "交",
  "受",
  "聯",
  "什",
  "認",
  "六",
  "共",
  "權",
  "收",
  "證",
  "改",
  "清",
  "美",
  "再",
  "採",
  "轉",
  "更",
  "單",
  "風",
  "切",
  "打",
  "白",
  "教",
  "速",
  "花",
  "帶",
  "安",
  "場",
  "身",
  "車",
  "例",
  "真",
  "務",
  "具",
  "萬",
  "每",
  "目",
  "至",
  "達",
  "走",
  "積",
  "示",
  "議",
  "聲",
  "報",
  "鬥",
  "完",
  "類",
  "八",
  "離",
  "華",
  "名",
  "確",
  "才",
  "科",
  "張",
  "信",
  "馬",
  "節",
  "話",
  "米",
  "整",
  "空",
  "元",
  "況",
  "今",
  "集",
  "溫",
  "傳",
  "土",
  "許",
  "步",
  "群",
  "廣",
  "石",
  "記",
  "需",
  "段",
  "研",
  "界",
  "拉",
  "林",
  "律",
  "叫",
  "且",
  "究",
  "觀",
  "越",
  "織",
  "裝",
  "影",
  "算",
  "低",
  "持",
  "音",
  "眾",
  "書",
  "布",
  "复",
  "容",
  "兒",
  "須",
  "際",
  "商",
  "非",
  "驗",
  "連",
  "斷",
  "深",
  "難",
  "近",
  "礦",
  "千",
  "週",
  "委",
  "素",
  "技",
  "備",
  "半",
  "辦",
  "青",
  "省",
  "列",
  "習",
  "響",
  "約",
  "支",
  "般",
  "史",
  "感",
  "勞",
  "便",
  "團",
  "往",
  "酸",
  "歷",
  "市",
  "克",
  "何",
  "除",
  "消",
  "構",
  "府",
  "稱",
  "太",
  "準",
  "精",
  "值",
  "號",
  "率",
  "族",
  "維",
  "劃",
  "選",
  "標",
  "寫",
  "存",
  "候",
  "毛",
  "親",
  "快",
  "效",
  "斯",
  "院",
  "查",
  "江",
  "型",
  "眼",
  "王",
  "按",
  "格",
  "養",
  "易",
  "置",
  "派",
  "層",
  "片",
  "始",
  "卻",
  "專",
  "狀",
  "育",
  "廠",
  "京",
  "識",
  "適",
  "屬",
  "圓",
  "包",
  "火",
  "住",
  "調",
  "滿",
  "縣",
  "局",
  "照",
  "參",
  "紅",
  "細",
  "引",
  "聽",
  "該",
  "鐵",
  "價",
  "嚴",
  "首",
  "底",
  "液",
  "官",
  "德",
  "隨",
  "病",
  "蘇",
  "失",
  "爾",
  "死",
  "講",
  "配",
  "女",
  "黃",
  "推",
  "顯",
  "談",
  "罪",
  "神",
  "藝",
  "呢",
  "席",
  "含",
  "企",
  "望",
  "密",
  "批",
  "營",
  "項",
  "防",
  "舉",
  "球",
  "英",
  "氧",
  "勢",
  "告",
  "李",
  "台",
  "落",
  "木",
  "幫",
  "輪",
  "破",
  "亞",
  "師",
  "圍",
  "注",
  "遠",
  "字",
  "材",
  "排",
  "供",
  "河",
  "態",
  "封",
  "另",
  "施",
  "減",
  "樹",
  "溶",
  "怎",
  "止",
  "案",
  "言",
  "士",
  "均",
  "武",
  "固",
  "葉",
  "魚",
  "波",
  "視",
  "僅",
  "費",
  "緊",
  "愛",
  "左",
  "章",
  "早",
  "朝",
  "害",
  "續",
  "輕",
  "服",
  "試",
  "食",
  "充",
  "兵",
  "源",
  "判",
  "護",
  "司",
  "足",
  "某",
  "練",
  "差",
  "致",
  "板",
  "田",
  "降",
  "黑",
  "犯",
  "負",
  "擊",
  "范",
  "繼",
  "興",
  "似",
  "餘",
  "堅",
  "曲",
  "輸",
  "修",
  "故",
  "城",
  "夫",
  "夠",
  "送",
  "筆",
  "船",
  "佔",
  "右",
  "財",
  "吃",
  "富",
  "春",
  "職",
  "覺",
  "漢",
  "畫",
  "功",
  "巴",
  "跟",
  "雖",
  "雜",
  "飛",
  "檢",
  "吸",
  "助",
  "昇",
  "陽",
  "互",
  "初",
  "創",
  "抗",
  "考",
  "投",
  "壞",
  "策",
  "古",
  "徑",
  "換",
  "未",
  "跑",
  "留",
  "鋼",
  "曾",
  "端",
  "責",
  "站",
  "簡",
  "述",
  "錢",
  "副",
  "盡",
  "帝",
  "射",
  "草",
  "衝",
  "承",
  "獨",
  "令",
  "限",
  "阿",
  "宣",
  "環",
  "雙",
  "請",
  "超",
  "微",
  "讓",
  "控",
  "州",
  "良",
  "軸",
  "找",
  "否",
  "紀",
  "益",
  "依",
  "優",
  "頂",
  "礎",
  "載",
  "倒",
  "房",
  "突",
  "坐",
  "粉",
  "敵",
  "略",
  "客",
  "袁",
  "冷",
  "勝",
  "絕",
  "析",
  "塊",
  "劑",
  "測",
  "絲",
  "協",
  "訴",
  "念",
  "陳",
  "仍",
  "羅",
  "鹽",
  "友",
  "洋",
  "錯",
  "苦",
  "夜",
  "刑",
  "移",
  "頻",
  "逐",
  "靠",
  "混",
  "母",
  "短",
  "皮",
  "終",
  "聚",
  "汽",
  "村",
  "雲",
  "哪",
  "既",
  "距",
  "衛",
  "停",
  "烈",
  "央",
  "察",
  "燒",
  "迅",
  "境",
  "若",
  "印",
  "洲",
  "刻",
  "括",
  "激",
  "孔",
  "搞",
  "甚",
  "室",
  "待",
  "核",
  "校",
  "散",
  "侵",
  "吧",
  "甲",
  "遊",
  "久",
  "菜",
  "味",
  "舊",
  "模",
  "湖",
  "貨",
  "損",
  "預",
  "阻",
  "毫",
  "普",
  "穩",
  "乙",
  "媽",
  "植",
  "息",
  "擴",
  "銀",
  "語",
  "揮",
  "酒",
  "守",
  "拿",
  "序",
  "紙",
  "醫",
  "缺",
  "雨",
  "嗎",
  "針",
  "劉",
  "啊",
  "急",
  "唱",
  "誤",
  "訓",
  "願",
  "審",
  "附",
  "獲",
  "茶",
  "鮮",
  "糧",
  "斤",
  "孩",
  "脫",
  "硫",
  "肥",
  "善",
  "龍",
  "演",
  "父",
  "漸",
  "血",
  "歡",
  "械",
  "掌",
  "歌",
  "沙",
  "剛",
  "攻",
  "謂",
  "盾",
  "討",
  "晚",
  "粒",
  "亂",
  "燃",
  "矛",
  "乎",
  "殺",
  "藥",
  "寧",
  "魯",
  "貴",
  "鐘",
  "煤",
  "讀",
  "班",
  "伯",
  "香",
  "介",
  "迫",
  "句",
  "豐",
  "培",
  "握",
  "蘭",
  "擔",
  "弦",
  "蛋",
  "沉",
  "假",
  "穿",
  "執",
  "答",
  "樂",
  "誰",
  "順",
  "煙",
  "縮",
  "徵",
  "臉",
  "喜",
  "松",
  "腳",
  "困",
  "異",
  "免",
  "背",
  "星",
  "福",
  "買",
  "染",
  "井",
  "概",
  "慢",
  "怕",
  "磁",
  "倍",
  "祖",
  "皇",
  "促",
  "靜",
  "補",
  "評",
  "翻",
  "肉",
  "踐",
  "尼",
  "衣",
  "寬",
  "揚",
  "棉",
  "希",
  "傷",
  "操",
  "垂",
  "秋",
  "宜",
  "氫",
  "套",
  "督",
  "振",
  "架",
  "亮",
  "末",
  "憲",
  "慶",
  "編",
  "牛",
  "觸",
  "映",
  "雷",
  "銷",
  "詩",
  "座",
  "居",
  "抓",
  "裂",
  "胞",
  "呼",
  "娘",
  "景",
  "威",
  "綠",
  "晶",
  "厚",
  "盟",
  "衡",
  "雞",
  "孫",
  "延",
  "危",
  "膠",
  "屋",
  "鄉",
  "臨",
  "陸",
  "顧",
  "掉",
  "呀",
  "燈",
  "歲",
  "措",
  "束",
  "耐",
  "劇",
  "玉",
  "趙",
  "跳",
  "哥",
  "季",
  "課",
  "凱",
  "胡",
  "額",
  "款",
  "紹",
  "卷",
  "齊",
  "偉",
  "蒸",
  "殖",
  "永",
  "宗",
  "苗",
  "川",
  "爐",
  "岩",
  "弱",
  "零",
  "楊",
  "奏",
  "沿",
  "露",
  "桿",
  "探",
  "滑",
  "鎮",
  "飯",
  "濃",
  "航",
  "懷",
  "趕",
  "庫",
  "奪",
  "伊",
  "靈",
  "稅",
  "途",
  "滅",
  "賽",
  "歸",
  "召",
  "鼓",
  "播",
  "盤",
  "裁",
  "險",
  "康",
  "唯",
  "錄",
  "菌",
  "純",
  "借",
  "糖",
  "蓋",
  "橫",
  "符",
  "私",
  "努",
  "堂",
  "域",
  "槍",
  "潤",
  "幅",
  "哈",
  "竟",
  "熟",
  "蟲",
  "澤",
  "腦",
  "壤",
  "碳",
  "歐",
  "遍",
  "側",
  "寨",
  "敢",
  "徹",
  "慮",
  "斜",
  "薄",
  "庭",
  "納",
  "彈",
  "飼",
  "伸",
  "折",
  "麥",
  "濕",
  "暗",
  "荷",
  "瓦",
  "塞",
  "床",
  "築",
  "惡",
  "戶",
  "訪",
  "塔",
  "奇",
  "透",
  "梁",
  "刀",
  "旋",
  "跡",
  "卡",
  "氯",
  "遇",
  "份",
  "毒",
  "泥",
  "退",
  "洗",
  "擺",
  "灰",
  "彩",
  "賣",
  "耗",
  "夏",
  "擇",
  "忙",
  "銅",
  "獻",
  "硬",
  "予",
  "繁",
  "圈",
  "雪",
  "函",
  "亦",
  "抽",
  "篇",
  "陣",
  "陰",
  "丁",
  "尺",
  "追",
  "堆",
  "雄",
  "迎",
  "泛",
  "爸",
  "樓",
  "避",
  "謀",
  "噸",
  "野",
  "豬",
  "旗",
  "累",
  "偏",
  "典",
  "館",
  "索",
  "秦",
  "脂",
  "潮",
  "爺",
  "豆",
  "忽",
  "托",
  "驚",
  "塑",
  "遺",
  "愈",
  "朱",
  "替",
  "纖",
  "粗",
  "傾",
  "尚",
  "痛",
  "楚",
  "謝",
  "奮",
  "購",
  "磨",
  "君",
  "池",
  "旁",
  "碎",
  "骨",
  "監",
  "捕",
  "弟",
  "暴",
  "割",
  "貫",
  "殊",
  "釋",
  "詞",
  "亡",
  "壁",
  "頓",
  "寶",
  "午",
  "塵",
  "聞",
  "揭",
  "炮",
  "殘",
  "冬",
  "橋",
  "婦",
  "警",
  "綜",
  "招",
  "吳",
  "付",
  "浮",
  "遭",
  "徐",
  "您",
  "搖",
  "谷",
  "贊",
  "箱",
  "隔",
  "訂",
  "男",
  "吹",
  "園",
  "紛",
  "唐",
  "敗",
  "宋",
  "玻",
  "巨",
  "耕",
  "坦",
  "榮",
  "閉",
  "灣",
  "鍵",
  "凡",
  "駐",
  "鍋",
  "救",
  "恩",
  "剝",
  "凝",
  "鹼",
  "齒",
  "截",
  "煉",
  "麻",
  "紡",
  "禁",
  "廢",
  "盛",
  "版",
  "緩",
  "淨",
  "睛",
  "昌",
  "婚",
  "涉",
  "筒",
  "嘴",
  "插",
  "岸",
  "朗",
  "莊",
  "街",
  "藏",
  "姑",
  "貿",
  "腐",
  "奴",
  "啦",
  "慣",
  "乘",
  "夥",
  "恢",
  "勻",
  "紗",
  "扎",
  "辯",
  "耳",
  "彪",
  "臣",
  "億",
  "璃",
  "抵",
  "脈",
  "秀",
  "薩",
  "俄",
  "網",
  "舞",
  "店",
  "噴",
  "縱",
  "寸",
  "汗",
  "掛",
  "洪",
  "賀",
  "閃",
  "柬",
  "爆",
  "烯",
  "津",
  "稻",
  "牆",
  "軟",
  "勇",
  "像",
  "滾",
  "厘",
  "蒙",
  "芳",
  "肯",
  "坡",
  "柱",
  "盪",
  "腿",
  "儀",
  "旅",
  "尾",
  "軋",
  "冰",
  "貢",
  "登",
  "黎",
  "削",
  "鑽",
  "勒",
  "逃",
  "障",
  "氨",
  "郭",
  "峰",
  "幣",
  "港",
  "伏",
  "軌",
  "畝",
  "畢",
  "擦",
  "莫",
  "刺",
  "浪",
  "秘",
  "援",
  "株",
  "健",
  "售",
  "股",
  "島",
  "甘",
  "泡",
  "睡",
  "童",
  "鑄",
  "湯",
  "閥",
  "休",
  "匯",
  "舍",
  "牧",
  "繞",
  "炸",
  "哲",
  "磷",
  "績",
  "朋",
  "淡",
  "尖",
  "啟",
  "陷",
  "柴",
  "呈",
  "徒",
  "顏",
  "淚",
  "稍",
  "忘",
  "泵",
  "藍",
  "拖",
  "洞",
  "授",
  "鏡",
  "辛",
  "壯",
  "鋒",
  "貧",
  "虛",
  "彎",
  "摩",
  "泰",
  "幼",
  "廷",
  "尊",
  "窗",
  "綱",
  "弄",
  "隸",
  "疑",
  "氏",
  "宮",
  "姐",
  "震",
  "瑞",
  "怪",
  "尤",
  "琴",
  "循",
  "描",
  "膜",
  "違",
  "夾",
  "腰",
  "緣",
  "珠",
  "窮",
  "森",
  "枝",
  "竹",
  "溝",
  "催",
  "繩",
  "憶",
  "邦",
  "剩",
  "幸",
  "漿",
  "欄",
  "擁",
  "牙",
  "貯",
  "禮",
  "濾",
  "鈉",
  "紋",
  "罷",
  "拍",
  "咱",
  "喊",
  "袖",
  "埃",
  "勤",
  "罰",
  "焦",
  "潛",
  "伍",
  "墨",
  "欲",
  "縫",
  "姓",
  "刊",
  "飽",
  "仿",
  "獎",
  "鋁",
  "鬼",
  "麗",
  "跨",
  "默",
  "挖",
  "鏈",
  "掃",
  "喝",
  "袋",
  "炭",
  "污",
  "幕",
  "諸",
  "弧",
  "勵",
  "梅",
  "奶",
  "潔",
  "災",
  "舟",
  "鑑",
  "苯",
  "訟",
  "抱",
  "毀",
  "懂",
  "寒",
  "智",
  "埔",
  "寄",
  "屆",
  "躍",
  "渡",
  "挑",
  "丹",
  "艱",
  "貝",
  "碰",
  "拔",
  "爹",
  "戴",
  "碼",
  "夢",
  "芽",
  "熔",
  "赤",
  "漁",
  "哭",
  "敬",
  "顆",
  "奔",
  "鉛",
  "仲",
  "虎",
  "稀",
  "妹",
  "乏",
  "珍",
  "申",
  "桌",
  "遵",
  "允",
  "隆",
  "螺",
  "倉",
  "魏",
  "銳",
  "曉",
  "氮",
  "兼",
  "隱",
  "礙",
  "赫",
  "撥",
  "忠",
  "肅",
  "缸",
  "牽",
  "搶",
  "博",
  "巧",
  "殼",
  "兄",
  "杜",
  "訊",
  "誠",
  "碧",
  "祥",
  "柯",
  "頁",
  "巡",
  "矩",
  "悲",
  "灌",
  "齡",
  "倫",
  "票",
  "尋",
  "桂",
  "鋪",
  "聖",
  "恐",
  "恰",
  "鄭",
  "趣",
  "抬",
  "荒",
  "騰",
  "貼",
  "柔",
  "滴",
  "猛",
  "闊",
  "輛",
  "妻",
  "填",
  "撤",
  "儲",
  "簽",
  "鬧",
  "擾",
  "紫",
  "砂",
  "遞",
  "戲",
  "吊",
  "陶",
  "伐",
  "餵",
  "療",
  "瓶",
  "婆",
  "撫",
  "臂",
  "摸",
  "忍",
  "蝦",
  "蠟",
  "鄰",
  "胸",
  "鞏",
  "擠",
  "偶",
  "棄",
  "槽",
  "勁",
  "乳",
  "鄧",
  "吉",
  "仁",
  "爛",
  "磚",
  "租",
  "烏",
  "艦",
  "伴",
  "瓜",
  "淺",
  "丙",
  "暫",
  "燥",
  "橡",
  "柳",
  "迷",
  "暖",
  "牌",
  "秧",
  "膽",
  "詳",
  "簧",
  "踏",
  "瓷",
  "譜",
  "呆",
  "賓",
  "糊",
  "洛",
  "輝",
  "憤",
  "競",
  "隙",
  "怒",
  "粘",
  "乃",
  "緒",
  "肩",
  "籍",
  "敏",
  "塗",
  "熙",
  "皆",
  "偵",
  "懸",
  "掘",
  "享",
  "糾",
  "醒",
  "狂",
  "鎖",
  "淀",
  "恨",
  "牲",
  "霸",
  "爬",
  "賞",
  "逆",
  "玩",
  "陵",
  "祝",
  "秒",
  "浙",
  "貌",
  "役",
  "彼",
  "悉",
  "鴨",
  "趨",
  "鳳",
  "晨",
  "畜",
  "輩",
  "秩",
  "卵",
  "署",
  "梯",
  "炎",
  "灘",
  "棋",
  "驅",
  "篩",
  "峽",
  "冒",
  "啥",
  "壽",
  "譯",
  "浸",
  "泉",
  "帽",
  "遲",
  "矽",
  "疆",
  "貸",
  "漏",
  "稿",
  "冠",
  "嫩",
  "脅",
  "芯",
  "牢",
  "叛",
  "蝕",
  "奧",
  "鳴",
  "嶺",
  "羊",
  "憑",
  "串",
  "塘",
  "繪",
  "酵",
  "融",
  "盆",
  "錫",
  "廟",
  "籌",
  "凍",
  "輔",
  "攝",
  "襲",
  "筋",
  "拒",
  "僚",
  "旱",
  "鉀",
  "鳥",
  "漆",
  "沈",
  "眉",
  "疏",
  "添",
  "棒",
  "穗",
  "硝",
  "韓",
  "逼",
  "扭",
  "僑",
  "涼",
  "挺",
  "碗",
  "栽",
  "炒",
  "杯",
  "患",
  "餾",
  "勸",
  "豪",
  "遼",
  "勃",
  "鴻",
  "旦",
  "吏",
  "拜",
  "狗",
  "埋",
  "輥",
  "掩",
  "飲",
  "搬",
  "罵",
  "辭",
  "勾",
  "扣",
  "估",
  "蔣",
  "絨",
  "霧",
  "丈",
  "朵",
  "姆",
  "擬",
  "宇",
  "輯",
  "陝",
  "雕",
  "償",
  "蓄",
  "崇",
  "剪",
  "倡",
  "廳",
  "咬",
  "駛",
  "薯",
  "刷",
  "斥",
  "番",
  "賦",
  "奉",
  "佛",
  "澆",
  "漫",
  "曼",
  "扇",
  "鈣",
  "桃",
  "扶",
  "仔",
  "返",
  "俗",
  "虧",
  "腔",
  "鞋",
  "棱",
  "覆",
  "框",
  "悄",
  "叔",
  "撞",
  "騙",
  "勘",
  "旺",
  "沸",
  "孤",
  "吐",
  "孟",
  "渠",
  "屈",
  "疾",
  "妙",
  "惜",
  "仰",
  "狠",
  "脹",
  "諧",
  "拋",
  "黴",
  "桑",
  "崗",
  "嘛",
  "衰",
  "盜",
  "滲",
  "臟",
  "賴",
  "湧",
  "甜",
  "曹",
  "閱",
  "肌",
  "哩",
  "厲",
  "烴",
  "緯",
  "毅",
  "昨",
  "偽",
  "症",
  "煮",
  "嘆",
  "釘",
  "搭",
  "莖",
  "籠",
  "酷",
  "偷",
  "弓",
  "錐",
  "恆",
  "傑",
  "坑",
  "鼻",
  "翼",
  "綸",
  "敘",
  "獄",
  "逮",
  "罐",
  "絡",
  "棚",
  "抑",
  "膨",
  "蔬",
  "寺",
  "驟",
  "穆",
  "冶",
  "枯",
  "冊",
  "屍",
  "凸",
  "紳",
  "坯",
  "犧",
  "焰",
  "轟",
  "欣",
  "晉",
  "瘦",
  "禦",
  "錠",
  "錦",
  "喪",
  "旬",
  "鍛",
  "壟",
  "搜",
  "撲",
  "邀",
  "亭",
  "酯",
  "邁",
  "舒",
  "脆",
  "酶",
  "閒",
  "憂",
  "酚",
  "頑",
  "羽",
  "漲",
  "卸",
  "仗",
  "陪",
  "闢",
  "懲",
  "杭",
  "姚",
  "肚",
  "捉",
  "飄",
  "漂",
  "昆",
  "欺",
  "吾",
  "郎",
  "烷",
  "汁",
  "呵",
  "飾",
  "蕭",
  "雅",
  "郵",
  "遷",
  "燕",
  "撒",
  "姻",
  "赴",
  "宴",
  "煩",
  "債",
  "帳",
  "斑",
  "鈴",
  "旨",
  "醇",
  "董",
  "餅",
  "雛",
  "姿",
  "拌",
  "傅",
  "腹",
  "妥",
  "揉",
  "賢",
  "拆",
  "歪",
  "葡",
  "胺",
  "丟",
  "浩",
  "徽",
  "昂",
  "墊",
  "擋",
  "覽",
  "貪",
  "慰",
  "繳",
  "汪",
  "慌",
  "馮",
  "諾",
  "姜",
  "誼",
  "兇",
  "劣",
  "誣",
  "耀",
  "昏",
  "躺",
  "盈",
  "騎",
  "喬",
  "溪",
  "叢",
  "盧",
  "抹",
  "悶",
  "諮",
  "刮",
  "駕",
  "纜",
  "悟",
  "摘",
  "鉺",
  "擲",
  "頗",
  "幻",
  "柄",
  "惠",
  "慘",
  "佳",
  "仇",
  "臘",
  "窩",
  "滌",
  "劍",
  "瞧",
  "堡",
  "潑",
  "蔥",
  "罩",
  "霍",
  "撈",
  "胎",
  "蒼",
  "濱",
  "倆",
  "捅",
  "湘",
  "砍",
  "霞",
  "邵",
  "萄",
  "瘋",
  "淮",
  "遂",
  "熊",
  "糞",
  "烘",
  "宿",
  "檔",
  "戈",
  "駁",
  "嫂",
  "裕",
  "徙",
  "箭",
  "捐",
  "腸",
  "撐",
  "曬",
  "辨",
  "殿",
  "蓮",
  "攤",
  "攪",
  "醬",
  "屏",
  "疫",
  "哀",
  "蔡",
  "堵",
  "沫",
  "皺",
  "暢",
  "疊",
  "閣",
  "萊",
  "敲",
  "轄",
  "鉤",
  "痕",
  "壩",
  "巷",
  "餓",
  "禍",
  "丘",
  "玄",
  "溜",
  "曰",
  "邏",
  "彭",
  "嘗",
  "卿",
  "妨",
  "艇",
  "吞",
  "韋",
  "怨",
  "矮",
  "歇"
], mB = [
  "가격",
  "가끔",
  "가난",
  "가능",
  "가득",
  "가르침",
  "가뭄",
  "가방",
  "가상",
  "가슴",
  "가운데",
  "가을",
  "가이드",
  "가입",
  "가장",
  "가정",
  "가족",
  "가죽",
  "각오",
  "각자",
  "간격",
  "간부",
  "간섭",
  "간장",
  "간접",
  "간판",
  "갈등",
  "갈비",
  "갈색",
  "갈증",
  "감각",
  "감기",
  "감소",
  "감수성",
  "감자",
  "감정",
  "갑자기",
  "강남",
  "강당",
  "강도",
  "강력히",
  "강변",
  "강북",
  "강사",
  "강수량",
  "강아지",
  "강원도",
  "강의",
  "강제",
  "강조",
  "같이",
  "개구리",
  "개나리",
  "개방",
  "개별",
  "개선",
  "개성",
  "개인",
  "객관적",
  "거실",
  "거액",
  "거울",
  "거짓",
  "거품",
  "걱정",
  "건강",
  "건물",
  "건설",
  "건조",
  "건축",
  "걸음",
  "검사",
  "검토",
  "게시판",
  "게임",
  "겨울",
  "견해",
  "결과",
  "결국",
  "결론",
  "결석",
  "결승",
  "결심",
  "결정",
  "결혼",
  "경계",
  "경고",
  "경기",
  "경력",
  "경복궁",
  "경비",
  "경상도",
  "경영",
  "경우",
  "경쟁",
  "경제",
  "경주",
  "경찰",
  "경치",
  "경향",
  "경험",
  "계곡",
  "계단",
  "계란",
  "계산",
  "계속",
  "계약",
  "계절",
  "계층",
  "계획",
  "고객",
  "고구려",
  "고궁",
  "고급",
  "고등학생",
  "고무신",
  "고민",
  "고양이",
  "고장",
  "고전",
  "고집",
  "고춧가루",
  "고통",
  "고향",
  "곡식",
  "골목",
  "골짜기",
  "골프",
  "공간",
  "공개",
  "공격",
  "공군",
  "공급",
  "공기",
  "공동",
  "공무원",
  "공부",
  "공사",
  "공식",
  "공업",
  "공연",
  "공원",
  "공장",
  "공짜",
  "공책",
  "공통",
  "공포",
  "공항",
  "공휴일",
  "과목",
  "과일",
  "과장",
  "과정",
  "과학",
  "관객",
  "관계",
  "관광",
  "관념",
  "관람",
  "관련",
  "관리",
  "관습",
  "관심",
  "관점",
  "관찰",
  "광경",
  "광고",
  "광장",
  "광주",
  "괴로움",
  "굉장히",
  "교과서",
  "교문",
  "교복",
  "교실",
  "교양",
  "교육",
  "교장",
  "교직",
  "교통",
  "교환",
  "교훈",
  "구경",
  "구름",
  "구멍",
  "구별",
  "구분",
  "구석",
  "구성",
  "구속",
  "구역",
  "구입",
  "구청",
  "구체적",
  "국가",
  "국기",
  "국내",
  "국립",
  "국물",
  "국민",
  "국수",
  "국어",
  "국왕",
  "국적",
  "국제",
  "국회",
  "군대",
  "군사",
  "군인",
  "궁극적",
  "권리",
  "권위",
  "권투",
  "귀국",
  "귀신",
  "규정",
  "규칙",
  "균형",
  "그날",
  "그냥",
  "그늘",
  "그러나",
  "그룹",
  "그릇",
  "그림",
  "그제서야",
  "그토록",
  "극복",
  "극히",
  "근거",
  "근교",
  "근래",
  "근로",
  "근무",
  "근본",
  "근원",
  "근육",
  "근처",
  "글씨",
  "글자",
  "금강산",
  "금고",
  "금년",
  "금메달",
  "금액",
  "금연",
  "금요일",
  "금지",
  "긍정적",
  "기간",
  "기관",
  "기념",
  "기능",
  "기독교",
  "기둥",
  "기록",
  "기름",
  "기법",
  "기본",
  "기분",
  "기쁨",
  "기숙사",
  "기술",
  "기억",
  "기업",
  "기온",
  "기운",
  "기원",
  "기적",
  "기준",
  "기침",
  "기혼",
  "기획",
  "긴급",
  "긴장",
  "길이",
  "김밥",
  "김치",
  "김포공항",
  "깍두기",
  "깜빡",
  "깨달음",
  "깨소금",
  "껍질",
  "꼭대기",
  "꽃잎",
  "나들이",
  "나란히",
  "나머지",
  "나물",
  "나침반",
  "나흘",
  "낙엽",
  "난방",
  "날개",
  "날씨",
  "날짜",
  "남녀",
  "남대문",
  "남매",
  "남산",
  "남자",
  "남편",
  "남학생",
  "낭비",
  "낱말",
  "내년",
  "내용",
  "내일",
  "냄비",
  "냄새",
  "냇물",
  "냉동",
  "냉면",
  "냉방",
  "냉장고",
  "넥타이",
  "넷째",
  "노동",
  "노란색",
  "노력",
  "노인",
  "녹음",
  "녹차",
  "녹화",
  "논리",
  "논문",
  "논쟁",
  "놀이",
  "농구",
  "농담",
  "농민",
  "농부",
  "농업",
  "농장",
  "농촌",
  "높이",
  "눈동자",
  "눈물",
  "눈썹",
  "뉴욕",
  "느낌",
  "늑대",
  "능동적",
  "능력",
  "다방",
  "다양성",
  "다음",
  "다이어트",
  "다행",
  "단계",
  "단골",
  "단독",
  "단맛",
  "단순",
  "단어",
  "단위",
  "단점",
  "단체",
  "단추",
  "단편",
  "단풍",
  "달걀",
  "달러",
  "달력",
  "달리",
  "닭고기",
  "담당",
  "담배",
  "담요",
  "담임",
  "답변",
  "답장",
  "당근",
  "당분간",
  "당연히",
  "당장",
  "대규모",
  "대낮",
  "대단히",
  "대답",
  "대도시",
  "대략",
  "대량",
  "대륙",
  "대문",
  "대부분",
  "대신",
  "대응",
  "대장",
  "대전",
  "대접",
  "대중",
  "대책",
  "대출",
  "대충",
  "대통령",
  "대학",
  "대한민국",
  "대합실",
  "대형",
  "덩어리",
  "데이트",
  "도대체",
  "도덕",
  "도둑",
  "도망",
  "도서관",
  "도심",
  "도움",
  "도입",
  "도자기",
  "도저히",
  "도전",
  "도중",
  "도착",
  "독감",
  "독립",
  "독서",
  "독일",
  "독창적",
  "동화책",
  "뒷모습",
  "뒷산",
  "딸아이",
  "마누라",
  "마늘",
  "마당",
  "마라톤",
  "마련",
  "마무리",
  "마사지",
  "마약",
  "마요네즈",
  "마을",
  "마음",
  "마이크",
  "마중",
  "마지막",
  "마찬가지",
  "마찰",
  "마흔",
  "막걸리",
  "막내",
  "막상",
  "만남",
  "만두",
  "만세",
  "만약",
  "만일",
  "만점",
  "만족",
  "만화",
  "많이",
  "말기",
  "말씀",
  "말투",
  "맘대로",
  "망원경",
  "매년",
  "매달",
  "매력",
  "매번",
  "매스컴",
  "매일",
  "매장",
  "맥주",
  "먹이",
  "먼저",
  "먼지",
  "멀리",
  "메일",
  "며느리",
  "며칠",
  "면담",
  "멸치",
  "명단",
  "명령",
  "명예",
  "명의",
  "명절",
  "명칭",
  "명함",
  "모금",
  "모니터",
  "모델",
  "모든",
  "모범",
  "모습",
  "모양",
  "모임",
  "모조리",
  "모집",
  "모퉁이",
  "목걸이",
  "목록",
  "목사",
  "목소리",
  "목숨",
  "목적",
  "목표",
  "몰래",
  "몸매",
  "몸무게",
  "몸살",
  "몸속",
  "몸짓",
  "몸통",
  "몹시",
  "무관심",
  "무궁화",
  "무더위",
  "무덤",
  "무릎",
  "무슨",
  "무엇",
  "무역",
  "무용",
  "무조건",
  "무지개",
  "무척",
  "문구",
  "문득",
  "문법",
  "문서",
  "문제",
  "문학",
  "문화",
  "물가",
  "물건",
  "물결",
  "물고기",
  "물론",
  "물리학",
  "물음",
  "물질",
  "물체",
  "미국",
  "미디어",
  "미사일",
  "미술",
  "미역",
  "미용실",
  "미움",
  "미인",
  "미팅",
  "미혼",
  "민간",
  "민족",
  "민주",
  "믿음",
  "밀가루",
  "밀리미터",
  "밑바닥",
  "바가지",
  "바구니",
  "바나나",
  "바늘",
  "바닥",
  "바닷가",
  "바람",
  "바이러스",
  "바탕",
  "박물관",
  "박사",
  "박수",
  "반대",
  "반드시",
  "반말",
  "반발",
  "반성",
  "반응",
  "반장",
  "반죽",
  "반지",
  "반찬",
  "받침",
  "발가락",
  "발걸음",
  "발견",
  "발달",
  "발레",
  "발목",
  "발바닥",
  "발생",
  "발음",
  "발자국",
  "발전",
  "발톱",
  "발표",
  "밤하늘",
  "밥그릇",
  "밥맛",
  "밥상",
  "밥솥",
  "방금",
  "방면",
  "방문",
  "방바닥",
  "방법",
  "방송",
  "방식",
  "방안",
  "방울",
  "방지",
  "방학",
  "방해",
  "방향",
  "배경",
  "배꼽",
  "배달",
  "배드민턴",
  "백두산",
  "백색",
  "백성",
  "백인",
  "백제",
  "백화점",
  "버릇",
  "버섯",
  "버튼",
  "번개",
  "번역",
  "번지",
  "번호",
  "벌금",
  "벌레",
  "벌써",
  "범위",
  "범인",
  "범죄",
  "법률",
  "법원",
  "법적",
  "법칙",
  "베이징",
  "벨트",
  "변경",
  "변동",
  "변명",
  "변신",
  "변호사",
  "변화",
  "별도",
  "별명",
  "별일",
  "병실",
  "병아리",
  "병원",
  "보관",
  "보너스",
  "보라색",
  "보람",
  "보름",
  "보상",
  "보안",
  "보자기",
  "보장",
  "보전",
  "보존",
  "보통",
  "보편적",
  "보험",
  "복도",
  "복사",
  "복숭아",
  "복습",
  "볶음",
  "본격적",
  "본래",
  "본부",
  "본사",
  "본성",
  "본인",
  "본질",
  "볼펜",
  "봉사",
  "봉지",
  "봉투",
  "부근",
  "부끄러움",
  "부담",
  "부동산",
  "부문",
  "부분",
  "부산",
  "부상",
  "부엌",
  "부인",
  "부작용",
  "부장",
  "부정",
  "부족",
  "부지런히",
  "부친",
  "부탁",
  "부품",
  "부회장",
  "북부",
  "북한",
  "분노",
  "분량",
  "분리",
  "분명",
  "분석",
  "분야",
  "분위기",
  "분필",
  "분홍색",
  "불고기",
  "불과",
  "불교",
  "불꽃",
  "불만",
  "불법",
  "불빛",
  "불안",
  "불이익",
  "불행",
  "브랜드",
  "비극",
  "비난",
  "비닐",
  "비둘기",
  "비디오",
  "비로소",
  "비만",
  "비명",
  "비밀",
  "비바람",
  "비빔밥",
  "비상",
  "비용",
  "비율",
  "비중",
  "비타민",
  "비판",
  "빌딩",
  "빗물",
  "빗방울",
  "빗줄기",
  "빛깔",
  "빨간색",
  "빨래",
  "빨리",
  "사건",
  "사계절",
  "사나이",
  "사냥",
  "사람",
  "사랑",
  "사립",
  "사모님",
  "사물",
  "사방",
  "사상",
  "사생활",
  "사설",
  "사슴",
  "사실",
  "사업",
  "사용",
  "사월",
  "사장",
  "사전",
  "사진",
  "사촌",
  "사춘기",
  "사탕",
  "사투리",
  "사흘",
  "산길",
  "산부인과",
  "산업",
  "산책",
  "살림",
  "살인",
  "살짝",
  "삼계탕",
  "삼국",
  "삼십",
  "삼월",
  "삼촌",
  "상관",
  "상금",
  "상대",
  "상류",
  "상반기",
  "상상",
  "상식",
  "상업",
  "상인",
  "상자",
  "상점",
  "상처",
  "상추",
  "상태",
  "상표",
  "상품",
  "상황",
  "새벽",
  "색깔",
  "색연필",
  "생각",
  "생명",
  "생물",
  "생방송",
  "생산",
  "생선",
  "생신",
  "생일",
  "생활",
  "서랍",
  "서른",
  "서명",
  "서민",
  "서비스",
  "서양",
  "서울",
  "서적",
  "서점",
  "서쪽",
  "서클",
  "석사",
  "석유",
  "선거",
  "선물",
  "선배",
  "선생",
  "선수",
  "선원",
  "선장",
  "선전",
  "선택",
  "선풍기",
  "설거지",
  "설날",
  "설렁탕",
  "설명",
  "설문",
  "설사",
  "설악산",
  "설치",
  "설탕",
  "섭씨",
  "성공",
  "성당",
  "성명",
  "성별",
  "성인",
  "성장",
  "성적",
  "성질",
  "성함",
  "세금",
  "세미나",
  "세상",
  "세월",
  "세종대왕",
  "세탁",
  "센터",
  "센티미터",
  "셋째",
  "소규모",
  "소극적",
  "소금",
  "소나기",
  "소년",
  "소득",
  "소망",
  "소문",
  "소설",
  "소속",
  "소아과",
  "소용",
  "소원",
  "소음",
  "소중히",
  "소지품",
  "소질",
  "소풍",
  "소형",
  "속담",
  "속도",
  "속옷",
  "손가락",
  "손길",
  "손녀",
  "손님",
  "손등",
  "손목",
  "손뼉",
  "손실",
  "손질",
  "손톱",
  "손해",
  "솔직히",
  "솜씨",
  "송아지",
  "송이",
  "송편",
  "쇠고기",
  "쇼핑",
  "수건",
  "수년",
  "수단",
  "수돗물",
  "수동적",
  "수면",
  "수명",
  "수박",
  "수상",
  "수석",
  "수술",
  "수시로",
  "수업",
  "수염",
  "수영",
  "수입",
  "수준",
  "수집",
  "수출",
  "수컷",
  "수필",
  "수학",
  "수험생",
  "수화기",
  "숙녀",
  "숙소",
  "숙제",
  "순간",
  "순서",
  "순수",
  "순식간",
  "순위",
  "숟가락",
  "술병",
  "술집",
  "숫자",
  "스님",
  "스물",
  "스스로",
  "스승",
  "스웨터",
  "스위치",
  "스케이트",
  "스튜디오",
  "스트레스",
  "스포츠",
  "슬쩍",
  "슬픔",
  "습관",
  "습기",
  "승객",
  "승리",
  "승부",
  "승용차",
  "승진",
  "시각",
  "시간",
  "시골",
  "시금치",
  "시나리오",
  "시댁",
  "시리즈",
  "시멘트",
  "시민",
  "시부모",
  "시선",
  "시설",
  "시스템",
  "시아버지",
  "시어머니",
  "시월",
  "시인",
  "시일",
  "시작",
  "시장",
  "시절",
  "시점",
  "시중",
  "시즌",
  "시집",
  "시청",
  "시합",
  "시험",
  "식구",
  "식기",
  "식당",
  "식량",
  "식료품",
  "식물",
  "식빵",
  "식사",
  "식생활",
  "식초",
  "식탁",
  "식품",
  "신고",
  "신규",
  "신념",
  "신문",
  "신발",
  "신비",
  "신사",
  "신세",
  "신용",
  "신제품",
  "신청",
  "신체",
  "신화",
  "실감",
  "실내",
  "실력",
  "실례",
  "실망",
  "실수",
  "실습",
  "실시",
  "실장",
  "실정",
  "실질적",
  "실천",
  "실체",
  "실컷",
  "실태",
  "실패",
  "실험",
  "실현",
  "심리",
  "심부름",
  "심사",
  "심장",
  "심정",
  "심판",
  "쌍둥이",
  "씨름",
  "씨앗",
  "아가씨",
  "아나운서",
  "아드님",
  "아들",
  "아쉬움",
  "아스팔트",
  "아시아",
  "아울러",
  "아저씨",
  "아줌마",
  "아직",
  "아침",
  "아파트",
  "아프리카",
  "아픔",
  "아홉",
  "아흔",
  "악기",
  "악몽",
  "악수",
  "안개",
  "안경",
  "안과",
  "안내",
  "안녕",
  "안동",
  "안방",
  "안부",
  "안주",
  "알루미늄",
  "알코올",
  "암시",
  "암컷",
  "압력",
  "앞날",
  "앞문",
  "애인",
  "애정",
  "액수",
  "앨범",
  "야간",
  "야단",
  "야옹",
  "약간",
  "약국",
  "약속",
  "약수",
  "약점",
  "약품",
  "약혼녀",
  "양념",
  "양력",
  "양말",
  "양배추",
  "양주",
  "양파",
  "어둠",
  "어려움",
  "어른",
  "어젯밤",
  "어쨌든",
  "어쩌다가",
  "어쩐지",
  "언니",
  "언덕",
  "언론",
  "언어",
  "얼굴",
  "얼른",
  "얼음",
  "얼핏",
  "엄마",
  "업무",
  "업종",
  "업체",
  "엉덩이",
  "엉망",
  "엉터리",
  "엊그제",
  "에너지",
  "에어컨",
  "엔진",
  "여건",
  "여고생",
  "여관",
  "여군",
  "여권",
  "여대생",
  "여덟",
  "여동생",
  "여든",
  "여론",
  "여름",
  "여섯",
  "여성",
  "여왕",
  "여인",
  "여전히",
  "여직원",
  "여학생",
  "여행",
  "역사",
  "역시",
  "역할",
  "연결",
  "연구",
  "연극",
  "연기",
  "연락",
  "연설",
  "연세",
  "연속",
  "연습",
  "연애",
  "연예인",
  "연인",
  "연장",
  "연주",
  "연출",
  "연필",
  "연합",
  "연휴",
  "열기",
  "열매",
  "열쇠",
  "열심히",
  "열정",
  "열차",
  "열흘",
  "염려",
  "엽서",
  "영국",
  "영남",
  "영상",
  "영양",
  "영역",
  "영웅",
  "영원히",
  "영하",
  "영향",
  "영혼",
  "영화",
  "옆구리",
  "옆방",
  "옆집",
  "예감",
  "예금",
  "예방",
  "예산",
  "예상",
  "예선",
  "예술",
  "예습",
  "예식장",
  "예약",
  "예전",
  "예절",
  "예정",
  "예컨대",
  "옛날",
  "오늘",
  "오락",
  "오랫동안",
  "오렌지",
  "오로지",
  "오른발",
  "오븐",
  "오십",
  "오염",
  "오월",
  "오전",
  "오직",
  "오징어",
  "오페라",
  "오피스텔",
  "오히려",
  "옥상",
  "옥수수",
  "온갖",
  "온라인",
  "온몸",
  "온종일",
  "온통",
  "올가을",
  "올림픽",
  "올해",
  "옷차림",
  "와이셔츠",
  "와인",
  "완성",
  "완전",
  "왕비",
  "왕자",
  "왜냐하면",
  "왠지",
  "외갓집",
  "외국",
  "외로움",
  "외삼촌",
  "외출",
  "외침",
  "외할머니",
  "왼발",
  "왼손",
  "왼쪽",
  "요금",
  "요일",
  "요즘",
  "요청",
  "용기",
  "용서",
  "용어",
  "우산",
  "우선",
  "우승",
  "우연히",
  "우정",
  "우체국",
  "우편",
  "운동",
  "운명",
  "운반",
  "운전",
  "운행",
  "울산",
  "울음",
  "움직임",
  "웃어른",
  "웃음",
  "워낙",
  "원고",
  "원래",
  "원서",
  "원숭이",
  "원인",
  "원장",
  "원피스",
  "월급",
  "월드컵",
  "월세",
  "월요일",
  "웨이터",
  "위반",
  "위법",
  "위성",
  "위원",
  "위험",
  "위협",
  "윗사람",
  "유난히",
  "유럽",
  "유명",
  "유물",
  "유산",
  "유적",
  "유치원",
  "유학",
  "유행",
  "유형",
  "육군",
  "육상",
  "육십",
  "육체",
  "은행",
  "음력",
  "음료",
  "음반",
  "음성",
  "음식",
  "음악",
  "음주",
  "의견",
  "의논",
  "의문",
  "의복",
  "의식",
  "의심",
  "의외로",
  "의욕",
  "의원",
  "의학",
  "이것",
  "이곳",
  "이념",
  "이놈",
  "이달",
  "이대로",
  "이동",
  "이렇게",
  "이력서",
  "이론적",
  "이름",
  "이민",
  "이발소",
  "이별",
  "이불",
  "이빨",
  "이상",
  "이성",
  "이슬",
  "이야기",
  "이용",
  "이웃",
  "이월",
  "이윽고",
  "이익",
  "이전",
  "이중",
  "이튿날",
  "이틀",
  "이혼",
  "인간",
  "인격",
  "인공",
  "인구",
  "인근",
  "인기",
  "인도",
  "인류",
  "인물",
  "인생",
  "인쇄",
  "인연",
  "인원",
  "인재",
  "인종",
  "인천",
  "인체",
  "인터넷",
  "인하",
  "인형",
  "일곱",
  "일기",
  "일단",
  "일대",
  "일등",
  "일반",
  "일본",
  "일부",
  "일상",
  "일생",
  "일손",
  "일요일",
  "일월",
  "일정",
  "일종",
  "일주일",
  "일찍",
  "일체",
  "일치",
  "일행",
  "일회용",
  "임금",
  "임무",
  "입대",
  "입력",
  "입맛",
  "입사",
  "입술",
  "입시",
  "입원",
  "입장",
  "입학",
  "자가용",
  "자격",
  "자극",
  "자동",
  "자랑",
  "자부심",
  "자식",
  "자신",
  "자연",
  "자원",
  "자율",
  "자전거",
  "자정",
  "자존심",
  "자판",
  "작가",
  "작년",
  "작성",
  "작업",
  "작용",
  "작은딸",
  "작품",
  "잔디",
  "잔뜩",
  "잔치",
  "잘못",
  "잠깐",
  "잠수함",
  "잠시",
  "잠옷",
  "잠자리",
  "잡지",
  "장관",
  "장군",
  "장기간",
  "장래",
  "장례",
  "장르",
  "장마",
  "장면",
  "장모",
  "장미",
  "장비",
  "장사",
  "장소",
  "장식",
  "장애인",
  "장인",
  "장점",
  "장차",
  "장학금",
  "재능",
  "재빨리",
  "재산",
  "재생",
  "재작년",
  "재정",
  "재채기",
  "재판",
  "재학",
  "재활용",
  "저것",
  "저고리",
  "저곳",
  "저녁",
  "저런",
  "저렇게",
  "저번",
  "저울",
  "저절로",
  "저축",
  "적극",
  "적당히",
  "적성",
  "적용",
  "적응",
  "전개",
  "전공",
  "전기",
  "전달",
  "전라도",
  "전망",
  "전문",
  "전반",
  "전부",
  "전세",
  "전시",
  "전용",
  "전자",
  "전쟁",
  "전주",
  "전철",
  "전체",
  "전통",
  "전혀",
  "전후",
  "절대",
  "절망",
  "절반",
  "절약",
  "절차",
  "점검",
  "점수",
  "점심",
  "점원",
  "점점",
  "점차",
  "접근",
  "접시",
  "접촉",
  "젓가락",
  "정거장",
  "정도",
  "정류장",
  "정리",
  "정말",
  "정면",
  "정문",
  "정반대",
  "정보",
  "정부",
  "정비",
  "정상",
  "정성",
  "정오",
  "정원",
  "정장",
  "정지",
  "정치",
  "정확히",
  "제공",
  "제과점",
  "제대로",
  "제목",
  "제발",
  "제법",
  "제삿날",
  "제안",
  "제일",
  "제작",
  "제주도",
  "제출",
  "제품",
  "제한",
  "조각",
  "조건",
  "조금",
  "조깅",
  "조명",
  "조미료",
  "조상",
  "조선",
  "조용히",
  "조절",
  "조정",
  "조직",
  "존댓말",
  "존재",
  "졸업",
  "졸음",
  "종교",
  "종로",
  "종류",
  "종소리",
  "종업원",
  "종종",
  "종합",
  "좌석",
  "죄인",
  "주관적",
  "주름",
  "주말",
  "주머니",
  "주먹",
  "주문",
  "주민",
  "주방",
  "주변",
  "주식",
  "주인",
  "주일",
  "주장",
  "주전자",
  "주택",
  "준비",
  "줄거리",
  "줄기",
  "줄무늬",
  "중간",
  "중계방송",
  "중국",
  "중년",
  "중단",
  "중독",
  "중반",
  "중부",
  "중세",
  "중소기업",
  "중순",
  "중앙",
  "중요",
  "중학교",
  "즉석",
  "즉시",
  "즐거움",
  "증가",
  "증거",
  "증권",
  "증상",
  "증세",
  "지각",
  "지갑",
  "지경",
  "지극히",
  "지금",
  "지급",
  "지능",
  "지름길",
  "지리산",
  "지방",
  "지붕",
  "지식",
  "지역",
  "지우개",
  "지원",
  "지적",
  "지점",
  "지진",
  "지출",
  "직선",
  "직업",
  "직원",
  "직장",
  "진급",
  "진동",
  "진로",
  "진료",
  "진리",
  "진짜",
  "진찰",
  "진출",
  "진통",
  "진행",
  "질문",
  "질병",
  "질서",
  "짐작",
  "집단",
  "집안",
  "집중",
  "짜증",
  "찌꺼기",
  "차남",
  "차라리",
  "차량",
  "차림",
  "차별",
  "차선",
  "차츰",
  "착각",
  "찬물",
  "찬성",
  "참가",
  "참기름",
  "참새",
  "참석",
  "참여",
  "참외",
  "참조",
  "찻잔",
  "창가",
  "창고",
  "창구",
  "창문",
  "창밖",
  "창작",
  "창조",
  "채널",
  "채점",
  "책가방",
  "책방",
  "책상",
  "책임",
  "챔피언",
  "처벌",
  "처음",
  "천국",
  "천둥",
  "천장",
  "천재",
  "천천히",
  "철도",
  "철저히",
  "철학",
  "첫날",
  "첫째",
  "청년",
  "청바지",
  "청소",
  "청춘",
  "체계",
  "체력",
  "체온",
  "체육",
  "체중",
  "체험",
  "초등학생",
  "초반",
  "초밥",
  "초상화",
  "초순",
  "초여름",
  "초원",
  "초저녁",
  "초점",
  "초청",
  "초콜릿",
  "촛불",
  "총각",
  "총리",
  "총장",
  "촬영",
  "최근",
  "최상",
  "최선",
  "최신",
  "최악",
  "최종",
  "추석",
  "추억",
  "추진",
  "추천",
  "추측",
  "축구",
  "축소",
  "축제",
  "축하",
  "출근",
  "출발",
  "출산",
  "출신",
  "출연",
  "출입",
  "출장",
  "출판",
  "충격",
  "충고",
  "충돌",
  "충분히",
  "충청도",
  "취업",
  "취직",
  "취향",
  "치약",
  "친구",
  "친척",
  "칠십",
  "칠월",
  "칠판",
  "침대",
  "침묵",
  "침실",
  "칫솔",
  "칭찬",
  "카메라",
  "카운터",
  "칼국수",
  "캐릭터",
  "캠퍼스",
  "캠페인",
  "커튼",
  "컨디션",
  "컬러",
  "컴퓨터",
  "코끼리",
  "코미디",
  "콘서트",
  "콜라",
  "콤플렉스",
  "콩나물",
  "쾌감",
  "쿠데타",
  "크림",
  "큰길",
  "큰딸",
  "큰소리",
  "큰아들",
  "큰어머니",
  "큰일",
  "큰절",
  "클래식",
  "클럽",
  "킬로",
  "타입",
  "타자기",
  "탁구",
  "탁자",
  "탄생",
  "태권도",
  "태양",
  "태풍",
  "택시",
  "탤런트",
  "터널",
  "터미널",
  "테니스",
  "테스트",
  "테이블",
  "텔레비전",
  "토론",
  "토마토",
  "토요일",
  "통계",
  "통과",
  "통로",
  "통신",
  "통역",
  "통일",
  "통장",
  "통제",
  "통증",
  "통합",
  "통화",
  "퇴근",
  "퇴원",
  "퇴직금",
  "튀김",
  "트럭",
  "특급",
  "특별",
  "특성",
  "특수",
  "특징",
  "특히",
  "튼튼히",
  "티셔츠",
  "파란색",
  "파일",
  "파출소",
  "판결",
  "판단",
  "판매",
  "판사",
  "팔십",
  "팔월",
  "팝송",
  "패션",
  "팩스",
  "팩시밀리",
  "팬티",
  "퍼센트",
  "페인트",
  "편견",
  "편의",
  "편지",
  "편히",
  "평가",
  "평균",
  "평생",
  "평소",
  "평양",
  "평일",
  "평화",
  "포스터",
  "포인트",
  "포장",
  "포함",
  "표면",
  "표정",
  "표준",
  "표현",
  "품목",
  "품질",
  "풍경",
  "풍속",
  "풍습",
  "프랑스",
  "프린터",
  "플라스틱",
  "피곤",
  "피망",
  "피아노",
  "필름",
  "필수",
  "필요",
  "필자",
  "필통",
  "핑계",
  "하느님",
  "하늘",
  "하드웨어",
  "하룻밤",
  "하반기",
  "하숙집",
  "하순",
  "하여튼",
  "하지만",
  "하천",
  "하품",
  "하필",
  "학과",
  "학교",
  "학급",
  "학기",
  "학년",
  "학력",
  "학번",
  "학부모",
  "학비",
  "학생",
  "학술",
  "학습",
  "학용품",
  "학원",
  "학위",
  "학자",
  "학점",
  "한계",
  "한글",
  "한꺼번에",
  "한낮",
  "한눈",
  "한동안",
  "한때",
  "한라산",
  "한마디",
  "한문",
  "한번",
  "한복",
  "한식",
  "한여름",
  "한쪽",
  "할머니",
  "할아버지",
  "할인",
  "함께",
  "함부로",
  "합격",
  "합리적",
  "항공",
  "항구",
  "항상",
  "항의",
  "해결",
  "해군",
  "해답",
  "해당",
  "해물",
  "해석",
  "해설",
  "해수욕장",
  "해안",
  "핵심",
  "핸드백",
  "햄버거",
  "햇볕",
  "햇살",
  "행동",
  "행복",
  "행사",
  "행운",
  "행위",
  "향기",
  "향상",
  "향수",
  "허락",
  "허용",
  "헬기",
  "현관",
  "현금",
  "현대",
  "현상",
  "현실",
  "현장",
  "현재",
  "현지",
  "혈액",
  "협력",
  "형부",
  "형사",
  "형수",
  "형식",
  "형제",
  "형태",
  "형편",
  "혜택",
  "호기심",
  "호남",
  "호랑이",
  "호박",
  "호텔",
  "호흡",
  "혹시",
  "홀로",
  "홈페이지",
  "홍보",
  "홍수",
  "홍차",
  "화면",
  "화분",
  "화살",
  "화요일",
  "화장",
  "화학",
  "확보",
  "확인",
  "확장",
  "확정",
  "환갑",
  "환경",
  "환영",
  "환율",
  "환자",
  "활기",
  "활동",
  "활발히",
  "활용",
  "활짝",
  "회견",
  "회관",
  "회복",
  "회색",
  "회원",
  "회장",
  "회전",
  "횟수",
  "횡단보도",
  "효율적",
  "후반",
  "후춧가루",
  "훈련",
  "훨씬",
  "휴식",
  "휴일",
  "흉내",
  "흐름",
  "흑백",
  "흑인",
  "흔적",
  "흔히",
  "흥미",
  "흥분",
  "희곡",
  "희망",
  "희생",
  "흰색",
  "힘껏"
], bB = [
  "abaisser",
  "abandon",
  "abdiquer",
  "abeille",
  "abolir",
  "aborder",
  "aboutir",
  "aboyer",
  "abrasif",
  "abreuver",
  "abriter",
  "abroger",
  "abrupt",
  "absence",
  "absolu",
  "absurde",
  "abusif",
  "abyssal",
  "académie",
  "acajou",
  "acarien",
  "accabler",
  "accepter",
  "acclamer",
  "accolade",
  "accroche",
  "accuser",
  "acerbe",
  "achat",
  "acheter",
  "aciduler",
  "acier",
  "acompte",
  "acquérir",
  "acronyme",
  "acteur",
  "actif",
  "actuel",
  "adepte",
  "adéquat",
  "adhésif",
  "adjectif",
  "adjuger",
  "admettre",
  "admirer",
  "adopter",
  "adorer",
  "adoucir",
  "adresse",
  "adroit",
  "adulte",
  "adverbe",
  "aérer",
  "aéronef",
  "affaire",
  "affecter",
  "affiche",
  "affreux",
  "affubler",
  "agacer",
  "agencer",
  "agile",
  "agiter",
  "agrafer",
  "agréable",
  "agrume",
  "aider",
  "aiguille",
  "ailier",
  "aimable",
  "aisance",
  "ajouter",
  "ajuster",
  "alarmer",
  "alchimie",
  "alerte",
  "algèbre",
  "algue",
  "aliéner",
  "aliment",
  "alléger",
  "alliage",
  "allouer",
  "allumer",
  "alourdir",
  "alpaga",
  "altesse",
  "alvéole",
  "amateur",
  "ambigu",
  "ambre",
  "aménager",
  "amertume",
  "amidon",
  "amiral",
  "amorcer",
  "amour",
  "amovible",
  "amphibie",
  "ampleur",
  "amusant",
  "analyse",
  "anaphore",
  "anarchie",
  "anatomie",
  "ancien",
  "anéantir",
  "angle",
  "angoisse",
  "anguleux",
  "animal",
  "annexer",
  "annonce",
  "annuel",
  "anodin",
  "anomalie",
  "anonyme",
  "anormal",
  "antenne",
  "antidote",
  "anxieux",
  "apaiser",
  "apéritif",
  "aplanir",
  "apologie",
  "appareil",
  "appeler",
  "apporter",
  "appuyer",
  "aquarium",
  "aqueduc",
  "arbitre",
  "arbuste",
  "ardeur",
  "ardoise",
  "argent",
  "arlequin",
  "armature",
  "armement",
  "armoire",
  "armure",
  "arpenter",
  "arracher",
  "arriver",
  "arroser",
  "arsenic",
  "artériel",
  "article",
  "aspect",
  "asphalte",
  "aspirer",
  "assaut",
  "asservir",
  "assiette",
  "associer",
  "assurer",
  "asticot",
  "astre",
  "astuce",
  "atelier",
  "atome",
  "atrium",
  "atroce",
  "attaque",
  "attentif",
  "attirer",
  "attraper",
  "aubaine",
  "auberge",
  "audace",
  "audible",
  "augurer",
  "aurore",
  "automne",
  "autruche",
  "avaler",
  "avancer",
  "avarice",
  "avenir",
  "averse",
  "aveugle",
  "aviateur",
  "avide",
  "avion",
  "aviser",
  "avoine",
  "avouer",
  "avril",
  "axial",
  "axiome",
  "badge",
  "bafouer",
  "bagage",
  "baguette",
  "baignade",
  "balancer",
  "balcon",
  "baleine",
  "balisage",
  "bambin",
  "bancaire",
  "bandage",
  "banlieue",
  "bannière",
  "banquier",
  "barbier",
  "baril",
  "baron",
  "barque",
  "barrage",
  "bassin",
  "bastion",
  "bataille",
  "bateau",
  "batterie",
  "baudrier",
  "bavarder",
  "belette",
  "bélier",
  "belote",
  "bénéfice",
  "berceau",
  "berger",
  "berline",
  "bermuda",
  "besace",
  "besogne",
  "bétail",
  "beurre",
  "biberon",
  "bicycle",
  "bidule",
  "bijou",
  "bilan",
  "bilingue",
  "billard",
  "binaire",
  "biologie",
  "biopsie",
  "biotype",
  "biscuit",
  "bison",
  "bistouri",
  "bitume",
  "bizarre",
  "blafard",
  "blague",
  "blanchir",
  "blessant",
  "blinder",
  "blond",
  "bloquer",
  "blouson",
  "bobard",
  "bobine",
  "boire",
  "boiser",
  "bolide",
  "bonbon",
  "bondir",
  "bonheur",
  "bonifier",
  "bonus",
  "bordure",
  "borne",
  "botte",
  "boucle",
  "boueux",
  "bougie",
  "boulon",
  "bouquin",
  "bourse",
  "boussole",
  "boutique",
  "boxeur",
  "branche",
  "brasier",
  "brave",
  "brebis",
  "brèche",
  "breuvage",
  "bricoler",
  "brigade",
  "brillant",
  "brioche",
  "brique",
  "brochure",
  "broder",
  "bronzer",
  "brousse",
  "broyeur",
  "brume",
  "brusque",
  "brutal",
  "bruyant",
  "buffle",
  "buisson",
  "bulletin",
  "bureau",
  "burin",
  "bustier",
  "butiner",
  "butoir",
  "buvable",
  "buvette",
  "cabanon",
  "cabine",
  "cachette",
  "cadeau",
  "cadre",
  "caféine",
  "caillou",
  "caisson",
  "calculer",
  "calepin",
  "calibre",
  "calmer",
  "calomnie",
  "calvaire",
  "camarade",
  "caméra",
  "camion",
  "campagne",
  "canal",
  "caneton",
  "canon",
  "cantine",
  "canular",
  "capable",
  "caporal",
  "caprice",
  "capsule",
  "capter",
  "capuche",
  "carabine",
  "carbone",
  "caresser",
  "caribou",
  "carnage",
  "carotte",
  "carreau",
  "carton",
  "cascade",
  "casier",
  "casque",
  "cassure",
  "causer",
  "caution",
  "cavalier",
  "caverne",
  "caviar",
  "cédille",
  "ceinture",
  "céleste",
  "cellule",
  "cendrier",
  "censurer",
  "central",
  "cercle",
  "cérébral",
  "cerise",
  "cerner",
  "cerveau",
  "cesser",
  "chagrin",
  "chaise",
  "chaleur",
  "chambre",
  "chance",
  "chapitre",
  "charbon",
  "chasseur",
  "chaton",
  "chausson",
  "chavirer",
  "chemise",
  "chenille",
  "chéquier",
  "chercher",
  "cheval",
  "chien",
  "chiffre",
  "chignon",
  "chimère",
  "chiot",
  "chlorure",
  "chocolat",
  "choisir",
  "chose",
  "chouette",
  "chrome",
  "chute",
  "cigare",
  "cigogne",
  "cimenter",
  "cinéma",
  "cintrer",
  "circuler",
  "cirer",
  "cirque",
  "citerne",
  "citoyen",
  "citron",
  "civil",
  "clairon",
  "clameur",
  "claquer",
  "classe",
  "clavier",
  "client",
  "cligner",
  "climat",
  "clivage",
  "cloche",
  "clonage",
  "cloporte",
  "cobalt",
  "cobra",
  "cocasse",
  "cocotier",
  "coder",
  "codifier",
  "coffre",
  "cogner",
  "cohésion",
  "coiffer",
  "coincer",
  "colère",
  "colibri",
  "colline",
  "colmater",
  "colonel",
  "combat",
  "comédie",
  "commande",
  "compact",
  "concert",
  "conduire",
  "confier",
  "congeler",
  "connoter",
  "consonne",
  "contact",
  "convexe",
  "copain",
  "copie",
  "corail",
  "corbeau",
  "cordage",
  "corniche",
  "corpus",
  "correct",
  "cortège",
  "cosmique",
  "costume",
  "coton",
  "coude",
  "coupure",
  "courage",
  "couteau",
  "couvrir",
  "coyote",
  "crabe",
  "crainte",
  "cravate",
  "crayon",
  "créature",
  "créditer",
  "crémeux",
  "creuser",
  "crevette",
  "cribler",
  "crier",
  "cristal",
  "critère",
  "croire",
  "croquer",
  "crotale",
  "crucial",
  "cruel",
  "crypter",
  "cubique",
  "cueillir",
  "cuillère",
  "cuisine",
  "cuivre",
  "culminer",
  "cultiver",
  "cumuler",
  "cupide",
  "curatif",
  "curseur",
  "cyanure",
  "cycle",
  "cylindre",
  "cynique",
  "daigner",
  "damier",
  "danger",
  "danseur",
  "dauphin",
  "débattre",
  "débiter",
  "déborder",
  "débrider",
  "débutant",
  "décaler",
  "décembre",
  "déchirer",
  "décider",
  "déclarer",
  "décorer",
  "décrire",
  "décupler",
  "dédale",
  "déductif",
  "déesse",
  "défensif",
  "défiler",
  "défrayer",
  "dégager",
  "dégivrer",
  "déglutir",
  "dégrafer",
  "déjeuner",
  "délice",
  "déloger",
  "demander",
  "demeurer",
  "démolir",
  "dénicher",
  "dénouer",
  "dentelle",
  "dénuder",
  "départ",
  "dépenser",
  "déphaser",
  "déplacer",
  "déposer",
  "déranger",
  "dérober",
  "désastre",
  "descente",
  "désert",
  "désigner",
  "désobéir",
  "dessiner",
  "destrier",
  "détacher",
  "détester",
  "détourer",
  "détresse",
  "devancer",
  "devenir",
  "deviner",
  "devoir",
  "diable",
  "dialogue",
  "diamant",
  "dicter",
  "différer",
  "digérer",
  "digital",
  "digne",
  "diluer",
  "dimanche",
  "diminuer",
  "dioxyde",
  "directif",
  "diriger",
  "discuter",
  "disposer",
  "dissiper",
  "distance",
  "divertir",
  "diviser",
  "docile",
  "docteur",
  "dogme",
  "doigt",
  "domaine",
  "domicile",
  "dompter",
  "donateur",
  "donjon",
  "donner",
  "dopamine",
  "dortoir",
  "dorure",
  "dosage",
  "doseur",
  "dossier",
  "dotation",
  "douanier",
  "double",
  "douceur",
  "douter",
  "doyen",
  "dragon",
  "draper",
  "dresser",
  "dribbler",
  "droiture",
  "duperie",
  "duplexe",
  "durable",
  "durcir",
  "dynastie",
  "éblouir",
  "écarter",
  "écharpe",
  "échelle",
  "éclairer",
  "éclipse",
  "éclore",
  "écluse",
  "école",
  "économie",
  "écorce",
  "écouter",
  "écraser",
  "écrémer",
  "écrivain",
  "écrou",
  "écume",
  "écureuil",
  "édifier",
  "éduquer",
  "effacer",
  "effectif",
  "effigie",
  "effort",
  "effrayer",
  "effusion",
  "égaliser",
  "égarer",
  "éjecter",
  "élaborer",
  "élargir",
  "électron",
  "élégant",
  "éléphant",
  "élève",
  "éligible",
  "élitisme",
  "éloge",
  "élucider",
  "éluder",
  "emballer",
  "embellir",
  "embryon",
  "émeraude",
  "émission",
  "emmener",
  "émotion",
  "émouvoir",
  "empereur",
  "employer",
  "emporter",
  "emprise",
  "émulsion",
  "encadrer",
  "enchère",
  "enclave",
  "encoche",
  "endiguer",
  "endosser",
  "endroit",
  "enduire",
  "énergie",
  "enfance",
  "enfermer",
  "enfouir",
  "engager",
  "engin",
  "englober",
  "énigme",
  "enjamber",
  "enjeu",
  "enlever",
  "ennemi",
  "ennuyeux",
  "enrichir",
  "enrobage",
  "enseigne",
  "entasser",
  "entendre",
  "entier",
  "entourer",
  "entraver",
  "énumérer",
  "envahir",
  "enviable",
  "envoyer",
  "enzyme",
  "éolien",
  "épaissir",
  "épargne",
  "épatant",
  "épaule",
  "épicerie",
  "épidémie",
  "épier",
  "épilogue",
  "épine",
  "épisode",
  "épitaphe",
  "époque",
  "épreuve",
  "éprouver",
  "épuisant",
  "équerre",
  "équipe",
  "ériger",
  "érosion",
  "erreur",
  "éruption",
  "escalier",
  "espadon",
  "espèce",
  "espiègle",
  "espoir",
  "esprit",
  "esquiver",
  "essayer",
  "essence",
  "essieu",
  "essorer",
  "estime",
  "estomac",
  "estrade",
  "étagère",
  "étaler",
  "étanche",
  "étatique",
  "éteindre",
  "étendoir",
  "éternel",
  "éthanol",
  "éthique",
  "ethnie",
  "étirer",
  "étoffer",
  "étoile",
  "étonnant",
  "étourdir",
  "étrange",
  "étroit",
  "étude",
  "euphorie",
  "évaluer",
  "évasion",
  "éventail",
  "évidence",
  "éviter",
  "évolutif",
  "évoquer",
  "exact",
  "exagérer",
  "exaucer",
  "exceller",
  "excitant",
  "exclusif",
  "excuse",
  "exécuter",
  "exemple",
  "exercer",
  "exhaler",
  "exhorter",
  "exigence",
  "exiler",
  "exister",
  "exotique",
  "expédier",
  "explorer",
  "exposer",
  "exprimer",
  "exquis",
  "extensif",
  "extraire",
  "exulter",
  "fable",
  "fabuleux",
  "facette",
  "facile",
  "facture",
  "faiblir",
  "falaise",
  "fameux",
  "famille",
  "farceur",
  "farfelu",
  "farine",
  "farouche",
  "fasciner",
  "fatal",
  "fatigue",
  "faucon",
  "fautif",
  "faveur",
  "favori",
  "fébrile",
  "féconder",
  "fédérer",
  "félin",
  "femme",
  "fémur",
  "fendoir",
  "féodal",
  "fermer",
  "féroce",
  "ferveur",
  "festival",
  "feuille",
  "feutre",
  "février",
  "fiasco",
  "ficeler",
  "fictif",
  "fidèle",
  "figure",
  "filature",
  "filetage",
  "filière",
  "filleul",
  "filmer",
  "filou",
  "filtrer",
  "financer",
  "finir",
  "fiole",
  "firme",
  "fissure",
  "fixer",
  "flairer",
  "flamme",
  "flasque",
  "flatteur",
  "fléau",
  "flèche",
  "fleur",
  "flexion",
  "flocon",
  "flore",
  "fluctuer",
  "fluide",
  "fluvial",
  "folie",
  "fonderie",
  "fongible",
  "fontaine",
  "forcer",
  "forgeron",
  "formuler",
  "fortune",
  "fossile",
  "foudre",
  "fougère",
  "fouiller",
  "foulure",
  "fourmi",
  "fragile",
  "fraise",
  "franchir",
  "frapper",
  "frayeur",
  "frégate",
  "freiner",
  "frelon",
  "frémir",
  "frénésie",
  "frère",
  "friable",
  "friction",
  "frisson",
  "frivole",
  "froid",
  "fromage",
  "frontal",
  "frotter",
  "fruit",
  "fugitif",
  "fuite",
  "fureur",
  "furieux",
  "furtif",
  "fusion",
  "futur",
  "gagner",
  "galaxie",
  "galerie",
  "gambader",
  "garantir",
  "gardien",
  "garnir",
  "garrigue",
  "gazelle",
  "gazon",
  "géant",
  "gélatine",
  "gélule",
  "gendarme",
  "général",
  "génie",
  "genou",
  "gentil",
  "géologie",
  "géomètre",
  "géranium",
  "germe",
  "gestuel",
  "geyser",
  "gibier",
  "gicler",
  "girafe",
  "givre",
  "glace",
  "glaive",
  "glisser",
  "globe",
  "gloire",
  "glorieux",
  "golfeur",
  "gomme",
  "gonfler",
  "gorge",
  "gorille",
  "goudron",
  "gouffre",
  "goulot",
  "goupille",
  "gourmand",
  "goutte",
  "graduel",
  "graffiti",
  "graine",
  "grand",
  "grappin",
  "gratuit",
  "gravir",
  "grenat",
  "griffure",
  "griller",
  "grimper",
  "grogner",
  "gronder",
  "grotte",
  "groupe",
  "gruger",
  "grutier",
  "gruyère",
  "guépard",
  "guerrier",
  "guide",
  "guimauve",
  "guitare",
  "gustatif",
  "gymnaste",
  "gyrostat",
  "habitude",
  "hachoir",
  "halte",
  "hameau",
  "hangar",
  "hanneton",
  "haricot",
  "harmonie",
  "harpon",
  "hasard",
  "hélium",
  "hématome",
  "herbe",
  "hérisson",
  "hermine",
  "héron",
  "hésiter",
  "heureux",
  "hiberner",
  "hibou",
  "hilarant",
  "histoire",
  "hiver",
  "homard",
  "hommage",
  "homogène",
  "honneur",
  "honorer",
  "honteux",
  "horde",
  "horizon",
  "horloge",
  "hormone",
  "horrible",
  "houleux",
  "housse",
  "hublot",
  "huileux",
  "humain",
  "humble",
  "humide",
  "humour",
  "hurler",
  "hydromel",
  "hygiène",
  "hymne",
  "hypnose",
  "idylle",
  "ignorer",
  "iguane",
  "illicite",
  "illusion",
  "image",
  "imbiber",
  "imiter",
  "immense",
  "immobile",
  "immuable",
  "impact",
  "impérial",
  "implorer",
  "imposer",
  "imprimer",
  "imputer",
  "incarner",
  "incendie",
  "incident",
  "incliner",
  "incolore",
  "indexer",
  "indice",
  "inductif",
  "inédit",
  "ineptie",
  "inexact",
  "infini",
  "infliger",
  "informer",
  "infusion",
  "ingérer",
  "inhaler",
  "inhiber",
  "injecter",
  "injure",
  "innocent",
  "inoculer",
  "inonder",
  "inscrire",
  "insecte",
  "insigne",
  "insolite",
  "inspirer",
  "instinct",
  "insulter",
  "intact",
  "intense",
  "intime",
  "intrigue",
  "intuitif",
  "inutile",
  "invasion",
  "inventer",
  "inviter",
  "invoquer",
  "ironique",
  "irradier",
  "irréel",
  "irriter",
  "isoler",
  "ivoire",
  "ivresse",
  "jaguar",
  "jaillir",
  "jambe",
  "janvier",
  "jardin",
  "jauger",
  "jaune",
  "javelot",
  "jetable",
  "jeton",
  "jeudi",
  "jeunesse",
  "joindre",
  "joncher",
  "jongler",
  "joueur",
  "jouissif",
  "journal",
  "jovial",
  "joyau",
  "joyeux",
  "jubiler",
  "jugement",
  "junior",
  "jupon",
  "juriste",
  "justice",
  "juteux",
  "juvénile",
  "kayak",
  "kimono",
  "kiosque",
  "label",
  "labial",
  "labourer",
  "lacérer",
  "lactose",
  "lagune",
  "laine",
  "laisser",
  "laitier",
  "lambeau",
  "lamelle",
  "lampe",
  "lanceur",
  "langage",
  "lanterne",
  "lapin",
  "largeur",
  "larme",
  "laurier",
  "lavabo",
  "lavoir",
  "lecture",
  "légal",
  "léger",
  "légume",
  "lessive",
  "lettre",
  "levier",
  "lexique",
  "lézard",
  "liasse",
  "libérer",
  "libre",
  "licence",
  "licorne",
  "liège",
  "lièvre",
  "ligature",
  "ligoter",
  "ligue",
  "limer",
  "limite",
  "limonade",
  "limpide",
  "linéaire",
  "lingot",
  "lionceau",
  "liquide",
  "lisière",
  "lister",
  "lithium",
  "litige",
  "littoral",
  "livreur",
  "logique",
  "lointain",
  "loisir",
  "lombric",
  "loterie",
  "louer",
  "lourd",
  "loutre",
  "louve",
  "loyal",
  "lubie",
  "lucide",
  "lucratif",
  "lueur",
  "lugubre",
  "luisant",
  "lumière",
  "lunaire",
  "lundi",
  "luron",
  "lutter",
  "luxueux",
  "machine",
  "magasin",
  "magenta",
  "magique",
  "maigre",
  "maillon",
  "maintien",
  "mairie",
  "maison",
  "majorer",
  "malaxer",
  "maléfice",
  "malheur",
  "malice",
  "mallette",
  "mammouth",
  "mandater",
  "maniable",
  "manquant",
  "manteau",
  "manuel",
  "marathon",
  "marbre",
  "marchand",
  "mardi",
  "maritime",
  "marqueur",
  "marron",
  "marteler",
  "mascotte",
  "massif",
  "matériel",
  "matière",
  "matraque",
  "maudire",
  "maussade",
  "mauve",
  "maximal",
  "méchant",
  "méconnu",
  "médaille",
  "médecin",
  "méditer",
  "méduse",
  "meilleur",
  "mélange",
  "mélodie",
  "membre",
  "mémoire",
  "menacer",
  "mener",
  "menhir",
  "mensonge",
  "mentor",
  "mercredi",
  "mérite",
  "merle",
  "messager",
  "mesure",
  "métal",
  "météore",
  "méthode",
  "métier",
  "meuble",
  "miauler",
  "microbe",
  "miette",
  "mignon",
  "migrer",
  "milieu",
  "million",
  "mimique",
  "mince",
  "minéral",
  "minimal",
  "minorer",
  "minute",
  "miracle",
  "miroiter",
  "missile",
  "mixte",
  "mobile",
  "moderne",
  "moelleux",
  "mondial",
  "moniteur",
  "monnaie",
  "monotone",
  "monstre",
  "montagne",
  "monument",
  "moqueur",
  "morceau",
  "morsure",
  "mortier",
  "moteur",
  "motif",
  "mouche",
  "moufle",
  "moulin",
  "mousson",
  "mouton",
  "mouvant",
  "multiple",
  "munition",
  "muraille",
  "murène",
  "murmure",
  "muscle",
  "muséum",
  "musicien",
  "mutation",
  "muter",
  "mutuel",
  "myriade",
  "myrtille",
  "mystère",
  "mythique",
  "nageur",
  "nappe",
  "narquois",
  "narrer",
  "natation",
  "nation",
  "nature",
  "naufrage",
  "nautique",
  "navire",
  "nébuleux",
  "nectar",
  "néfaste",
  "négation",
  "négliger",
  "négocier",
  "neige",
  "nerveux",
  "nettoyer",
  "neurone",
  "neutron",
  "neveu",
  "niche",
  "nickel",
  "nitrate",
  "niveau",
  "noble",
  "nocif",
  "nocturne",
  "noirceur",
  "noisette",
  "nomade",
  "nombreux",
  "nommer",
  "normatif",
  "notable",
  "notifier",
  "notoire",
  "nourrir",
  "nouveau",
  "novateur",
  "novembre",
  "novice",
  "nuage",
  "nuancer",
  "nuire",
  "nuisible",
  "numéro",
  "nuptial",
  "nuque",
  "nutritif",
  "obéir",
  "objectif",
  "obliger",
  "obscur",
  "observer",
  "obstacle",
  "obtenir",
  "obturer",
  "occasion",
  "occuper",
  "océan",
  "octobre",
  "octroyer",
  "octupler",
  "oculaire",
  "odeur",
  "odorant",
  "offenser",
  "officier",
  "offrir",
  "ogive",
  "oiseau",
  "oisillon",
  "olfactif",
  "olivier",
  "ombrage",
  "omettre",
  "onctueux",
  "onduler",
  "onéreux",
  "onirique",
  "opale",
  "opaque",
  "opérer",
  "opinion",
  "opportun",
  "opprimer",
  "opter",
  "optique",
  "orageux",
  "orange",
  "orbite",
  "ordonner",
  "oreille",
  "organe",
  "orgueil",
  "orifice",
  "ornement",
  "orque",
  "ortie",
  "osciller",
  "osmose",
  "ossature",
  "otarie",
  "ouragan",
  "ourson",
  "outil",
  "outrager",
  "ouvrage",
  "ovation",
  "oxyde",
  "oxygène",
  "ozone",
  "paisible",
  "palace",
  "palmarès",
  "palourde",
  "palper",
  "panache",
  "panda",
  "pangolin",
  "paniquer",
  "panneau",
  "panorama",
  "pantalon",
  "papaye",
  "papier",
  "papoter",
  "papyrus",
  "paradoxe",
  "parcelle",
  "paresse",
  "parfumer",
  "parler",
  "parole",
  "parrain",
  "parsemer",
  "partager",
  "parure",
  "parvenir",
  "passion",
  "pastèque",
  "paternel",
  "patience",
  "patron",
  "pavillon",
  "pavoiser",
  "payer",
  "paysage",
  "peigne",
  "peintre",
  "pelage",
  "pélican",
  "pelle",
  "pelouse",
  "peluche",
  "pendule",
  "pénétrer",
  "pénible",
  "pensif",
  "pénurie",
  "pépite",
  "péplum",
  "perdrix",
  "perforer",
  "période",
  "permuter",
  "perplexe",
  "persil",
  "perte",
  "peser",
  "pétale",
  "petit",
  "pétrir",
  "peuple",
  "pharaon",
  "phobie",
  "phoque",
  "photon",
  "phrase",
  "physique",
  "piano",
  "pictural",
  "pièce",
  "pierre",
  "pieuvre",
  "pilote",
  "pinceau",
  "pipette",
  "piquer",
  "pirogue",
  "piscine",
  "piston",
  "pivoter",
  "pixel",
  "pizza",
  "placard",
  "plafond",
  "plaisir",
  "planer",
  "plaque",
  "plastron",
  "plateau",
  "pleurer",
  "plexus",
  "pliage",
  "plomb",
  "plonger",
  "pluie",
  "plumage",
  "pochette",
  "poésie",
  "poète",
  "pointe",
  "poirier",
  "poisson",
  "poivre",
  "polaire",
  "policier",
  "pollen",
  "polygone",
  "pommade",
  "pompier",
  "ponctuel",
  "pondérer",
  "poney",
  "portique",
  "position",
  "posséder",
  "posture",
  "potager",
  "poteau",
  "potion",
  "pouce",
  "poulain",
  "poumon",
  "pourpre",
  "poussin",
  "pouvoir",
  "prairie",
  "pratique",
  "précieux",
  "prédire",
  "préfixe",
  "prélude",
  "prénom",
  "présence",
  "prétexte",
  "prévoir",
  "primitif",
  "prince",
  "prison",
  "priver",
  "problème",
  "procéder",
  "prodige",
  "profond",
  "progrès",
  "proie",
  "projeter",
  "prologue",
  "promener",
  "propre",
  "prospère",
  "protéger",
  "prouesse",
  "proverbe",
  "prudence",
  "pruneau",
  "psychose",
  "public",
  "puceron",
  "puiser",
  "pulpe",
  "pulsar",
  "punaise",
  "punitif",
  "pupitre",
  "purifier",
  "puzzle",
  "pyramide",
  "quasar",
  "querelle",
  "question",
  "quiétude",
  "quitter",
  "quotient",
  "racine",
  "raconter",
  "radieux",
  "ragondin",
  "raideur",
  "raisin",
  "ralentir",
  "rallonge",
  "ramasser",
  "rapide",
  "rasage",
  "ratisser",
  "ravager",
  "ravin",
  "rayonner",
  "réactif",
  "réagir",
  "réaliser",
  "réanimer",
  "recevoir",
  "réciter",
  "réclamer",
  "récolter",
  "recruter",
  "reculer",
  "recycler",
  "rédiger",
  "redouter",
  "refaire",
  "réflexe",
  "réformer",
  "refrain",
  "refuge",
  "régalien",
  "région",
  "réglage",
  "régulier",
  "réitérer",
  "rejeter",
  "rejouer",
  "relatif",
  "relever",
  "relief",
  "remarque",
  "remède",
  "remise",
  "remonter",
  "remplir",
  "remuer",
  "renard",
  "renfort",
  "renifler",
  "renoncer",
  "rentrer",
  "renvoi",
  "replier",
  "reporter",
  "reprise",
  "reptile",
  "requin",
  "réserve",
  "résineux",
  "résoudre",
  "respect",
  "rester",
  "résultat",
  "rétablir",
  "retenir",
  "réticule",
  "retomber",
  "retracer",
  "réunion",
  "réussir",
  "revanche",
  "revivre",
  "révolte",
  "révulsif",
  "richesse",
  "rideau",
  "rieur",
  "rigide",
  "rigoler",
  "rincer",
  "riposter",
  "risible",
  "risque",
  "rituel",
  "rival",
  "rivière",
  "rocheux",
  "romance",
  "rompre",
  "ronce",
  "rondin",
  "roseau",
  "rosier",
  "rotatif",
  "rotor",
  "rotule",
  "rouge",
  "rouille",
  "rouleau",
  "routine",
  "royaume",
  "ruban",
  "rubis",
  "ruche",
  "ruelle",
  "rugueux",
  "ruiner",
  "ruisseau",
  "ruser",
  "rustique",
  "rythme",
  "sabler",
  "saboter",
  "sabre",
  "sacoche",
  "safari",
  "sagesse",
  "saisir",
  "salade",
  "salive",
  "salon",
  "saluer",
  "samedi",
  "sanction",
  "sanglier",
  "sarcasme",
  "sardine",
  "saturer",
  "saugrenu",
  "saumon",
  "sauter",
  "sauvage",
  "savant",
  "savonner",
  "scalpel",
  "scandale",
  "scélérat",
  "scénario",
  "sceptre",
  "schéma",
  "science",
  "scinder",
  "score",
  "scrutin",
  "sculpter",
  "séance",
  "sécable",
  "sécher",
  "secouer",
  "sécréter",
  "sédatif",
  "séduire",
  "seigneur",
  "séjour",
  "sélectif",
  "semaine",
  "sembler",
  "semence",
  "séminal",
  "sénateur",
  "sensible",
  "sentence",
  "séparer",
  "séquence",
  "serein",
  "sergent",
  "sérieux",
  "serrure",
  "sérum",
  "service",
  "sésame",
  "sévir",
  "sevrage",
  "sextuple",
  "sidéral",
  "siècle",
  "siéger",
  "siffler",
  "sigle",
  "signal",
  "silence",
  "silicium",
  "simple",
  "sincère",
  "sinistre",
  "siphon",
  "sirop",
  "sismique",
  "situer",
  "skier",
  "social",
  "socle",
  "sodium",
  "soigneux",
  "soldat",
  "soleil",
  "solitude",
  "soluble",
  "sombre",
  "sommeil",
  "somnoler",
  "sonde",
  "songeur",
  "sonnette",
  "sonore",
  "sorcier",
  "sortir",
  "sosie",
  "sottise",
  "soucieux",
  "soudure",
  "souffle",
  "soulever",
  "soupape",
  "source",
  "soutirer",
  "souvenir",
  "spacieux",
  "spatial",
  "spécial",
  "sphère",
  "spiral",
  "stable",
  "station",
  "sternum",
  "stimulus",
  "stipuler",
  "strict",
  "studieux",
  "stupeur",
  "styliste",
  "sublime",
  "substrat",
  "subtil",
  "subvenir",
  "succès",
  "sucre",
  "suffixe",
  "suggérer",
  "suiveur",
  "sulfate",
  "superbe",
  "supplier",
  "surface",
  "suricate",
  "surmener",
  "surprise",
  "sursaut",
  "survie",
  "suspect",
  "syllabe",
  "symbole",
  "symétrie",
  "synapse",
  "syntaxe",
  "système",
  "tabac",
  "tablier",
  "tactile",
  "tailler",
  "talent",
  "talisman",
  "talonner",
  "tambour",
  "tamiser",
  "tangible",
  "tapis",
  "taquiner",
  "tarder",
  "tarif",
  "tartine",
  "tasse",
  "tatami",
  "tatouage",
  "taupe",
  "taureau",
  "taxer",
  "témoin",
  "temporel",
  "tenaille",
  "tendre",
  "teneur",
  "tenir",
  "tension",
  "terminer",
  "terne",
  "terrible",
  "tétine",
  "texte",
  "thème",
  "théorie",
  "thérapie",
  "thorax",
  "tibia",
  "tiède",
  "timide",
  "tirelire",
  "tiroir",
  "tissu",
  "titane",
  "titre",
  "tituber",
  "toboggan",
  "tolérant",
  "tomate",
  "tonique",
  "tonneau",
  "toponyme",
  "torche",
  "tordre",
  "tornade",
  "torpille",
  "torrent",
  "torse",
  "tortue",
  "totem",
  "toucher",
  "tournage",
  "tousser",
  "toxine",
  "traction",
  "trafic",
  "tragique",
  "trahir",
  "train",
  "trancher",
  "travail",
  "trèfle",
  "tremper",
  "trésor",
  "treuil",
  "triage",
  "tribunal",
  "tricoter",
  "trilogie",
  "triomphe",
  "tripler",
  "triturer",
  "trivial",
  "trombone",
  "tronc",
  "tropical",
  "troupeau",
  "tuile",
  "tulipe",
  "tumulte",
  "tunnel",
  "turbine",
  "tuteur",
  "tutoyer",
  "tuyau",
  "tympan",
  "typhon",
  "typique",
  "tyran",
  "ubuesque",
  "ultime",
  "ultrason",
  "unanime",
  "unifier",
  "union",
  "unique",
  "unitaire",
  "univers",
  "uranium",
  "urbain",
  "urticant",
  "usage",
  "usine",
  "usuel",
  "usure",
  "utile",
  "utopie",
  "vacarme",
  "vaccin",
  "vagabond",
  "vague",
  "vaillant",
  "vaincre",
  "vaisseau",
  "valable",
  "valise",
  "vallon",
  "valve",
  "vampire",
  "vanille",
  "vapeur",
  "varier",
  "vaseux",
  "vassal",
  "vaste",
  "vecteur",
  "vedette",
  "végétal",
  "véhicule",
  "veinard",
  "véloce",
  "vendredi",
  "vénérer",
  "venger",
  "venimeux",
  "ventouse",
  "verdure",
  "vérin",
  "vernir",
  "verrou",
  "verser",
  "vertu",
  "veston",
  "vétéran",
  "vétuste",
  "vexant",
  "vexer",
  "viaduc",
  "viande",
  "victoire",
  "vidange",
  "vidéo",
  "vignette",
  "vigueur",
  "vilain",
  "village",
  "vinaigre",
  "violon",
  "vipère",
  "virement",
  "virtuose",
  "virus",
  "visage",
  "viseur",
  "vision",
  "visqueux",
  "visuel",
  "vital",
  "vitesse",
  "viticole",
  "vitrine",
  "vivace",
  "vivipare",
  "vocation",
  "voguer",
  "voile",
  "voisin",
  "voiture",
  "volaille",
  "volcan",
  "voltiger",
  "volume",
  "vorace",
  "vortex",
  "voter",
  "vouloir",
  "voyage",
  "voyelle",
  "wagon",
  "xénon",
  "yacht",
  "zèbre",
  "zénith",
  "zeste",
  "zoologie"
], yB = [
  "abaco",
  "abbaglio",
  "abbinato",
  "abete",
  "abisso",
  "abolire",
  "abrasivo",
  "abrogato",
  "accadere",
  "accenno",
  "accusato",
  "acetone",
  "achille",
  "acido",
  "acqua",
  "acre",
  "acrilico",
  "acrobata",
  "acuto",
  "adagio",
  "addebito",
  "addome",
  "adeguato",
  "aderire",
  "adipe",
  "adottare",
  "adulare",
  "affabile",
  "affetto",
  "affisso",
  "affranto",
  "aforisma",
  "afoso",
  "africano",
  "agave",
  "agente",
  "agevole",
  "aggancio",
  "agire",
  "agitare",
  "agonismo",
  "agricolo",
  "agrumeto",
  "aguzzo",
  "alabarda",
  "alato",
  "albatro",
  "alberato",
  "albo",
  "albume",
  "alce",
  "alcolico",
  "alettone",
  "alfa",
  "algebra",
  "aliante",
  "alibi",
  "alimento",
  "allagato",
  "allegro",
  "allievo",
  "allodola",
  "allusivo",
  "almeno",
  "alogeno",
  "alpaca",
  "alpestre",
  "altalena",
  "alterno",
  "alticcio",
  "altrove",
  "alunno",
  "alveolo",
  "alzare",
  "amalgama",
  "amanita",
  "amarena",
  "ambito",
  "ambrato",
  "ameba",
  "america",
  "ametista",
  "amico",
  "ammasso",
  "ammenda",
  "ammirare",
  "ammonito",
  "amore",
  "ampio",
  "ampliare",
  "amuleto",
  "anacardo",
  "anagrafe",
  "analista",
  "anarchia",
  "anatra",
  "anca",
  "ancella",
  "ancora",
  "andare",
  "andrea",
  "anello",
  "angelo",
  "angolare",
  "angusto",
  "anima",
  "annegare",
  "annidato",
  "anno",
  "annuncio",
  "anonimo",
  "anticipo",
  "anzi",
  "apatico",
  "apertura",
  "apode",
  "apparire",
  "appetito",
  "appoggio",
  "approdo",
  "appunto",
  "aprile",
  "arabica",
  "arachide",
  "aragosta",
  "araldica",
  "arancio",
  "aratura",
  "arazzo",
  "arbitro",
  "archivio",
  "ardito",
  "arenile",
  "argento",
  "argine",
  "arguto",
  "aria",
  "armonia",
  "arnese",
  "arredato",
  "arringa",
  "arrosto",
  "arsenico",
  "arso",
  "artefice",
  "arzillo",
  "asciutto",
  "ascolto",
  "asepsi",
  "asettico",
  "asfalto",
  "asino",
  "asola",
  "aspirato",
  "aspro",
  "assaggio",
  "asse",
  "assoluto",
  "assurdo",
  "asta",
  "astenuto",
  "astice",
  "astratto",
  "atavico",
  "ateismo",
  "atomico",
  "atono",
  "attesa",
  "attivare",
  "attorno",
  "attrito",
  "attuale",
  "ausilio",
  "austria",
  "autista",
  "autonomo",
  "autunno",
  "avanzato",
  "avere",
  "avvenire",
  "avviso",
  "avvolgere",
  "azione",
  "azoto",
  "azzimo",
  "azzurro",
  "babele",
  "baccano",
  "bacino",
  "baco",
  "badessa",
  "badilata",
  "bagnato",
  "baita",
  "balcone",
  "baldo",
  "balena",
  "ballata",
  "balzano",
  "bambino",
  "bandire",
  "baraonda",
  "barbaro",
  "barca",
  "baritono",
  "barlume",
  "barocco",
  "basilico",
  "basso",
  "batosta",
  "battuto",
  "baule",
  "bava",
  "bavosa",
  "becco",
  "beffa",
  "belgio",
  "belva",
  "benda",
  "benevole",
  "benigno",
  "benzina",
  "bere",
  "berlina",
  "beta",
  "bibita",
  "bici",
  "bidone",
  "bifido",
  "biga",
  "bilancia",
  "bimbo",
  "binocolo",
  "biologo",
  "bipede",
  "bipolare",
  "birbante",
  "birra",
  "biscotto",
  "bisesto",
  "bisnonno",
  "bisonte",
  "bisturi",
  "bizzarro",
  "blando",
  "blatta",
  "bollito",
  "bonifico",
  "bordo",
  "bosco",
  "botanico",
  "bottino",
  "bozzolo",
  "braccio",
  "bradipo",
  "brama",
  "branca",
  "bravura",
  "bretella",
  "brevetto",
  "brezza",
  "briglia",
  "brillante",
  "brindare",
  "broccolo",
  "brodo",
  "bronzina",
  "brullo",
  "bruno",
  "bubbone",
  "buca",
  "budino",
  "buffone",
  "buio",
  "bulbo",
  "buono",
  "burlone",
  "burrasca",
  "bussola",
  "busta",
  "cadetto",
  "caduco",
  "calamaro",
  "calcolo",
  "calesse",
  "calibro",
  "calmo",
  "caloria",
  "cambusa",
  "camerata",
  "camicia",
  "cammino",
  "camola",
  "campale",
  "canapa",
  "candela",
  "cane",
  "canino",
  "canotto",
  "cantina",
  "capace",
  "capello",
  "capitolo",
  "capogiro",
  "cappero",
  "capra",
  "capsula",
  "carapace",
  "carcassa",
  "cardo",
  "carisma",
  "carovana",
  "carretto",
  "cartolina",
  "casaccio",
  "cascata",
  "caserma",
  "caso",
  "cassone",
  "castello",
  "casuale",
  "catasta",
  "catena",
  "catrame",
  "cauto",
  "cavillo",
  "cedibile",
  "cedrata",
  "cefalo",
  "celebre",
  "cellulare",
  "cena",
  "cenone",
  "centesimo",
  "ceramica",
  "cercare",
  "certo",
  "cerume",
  "cervello",
  "cesoia",
  "cespo",
  "ceto",
  "chela",
  "chiaro",
  "chicca",
  "chiedere",
  "chimera",
  "china",
  "chirurgo",
  "chitarra",
  "ciao",
  "ciclismo",
  "cifrare",
  "cigno",
  "cilindro",
  "ciottolo",
  "circa",
  "cirrosi",
  "citrico",
  "cittadino",
  "ciuffo",
  "civetta",
  "civile",
  "classico",
  "clinica",
  "cloro",
  "cocco",
  "codardo",
  "codice",
  "coerente",
  "cognome",
  "collare",
  "colmato",
  "colore",
  "colposo",
  "coltivato",
  "colza",
  "coma",
  "cometa",
  "commando",
  "comodo",
  "computer",
  "comune",
  "conciso",
  "condurre",
  "conferma",
  "congelare",
  "coniuge",
  "connesso",
  "conoscere",
  "consumo",
  "continuo",
  "convegno",
  "coperto",
  "copione",
  "coppia",
  "copricapo",
  "corazza",
  "cordata",
  "coricato",
  "cornice",
  "corolla",
  "corpo",
  "corredo",
  "corsia",
  "cortese",
  "cosmico",
  "costante",
  "cottura",
  "covato",
  "cratere",
  "cravatta",
  "creato",
  "credere",
  "cremoso",
  "crescita",
  "creta",
  "criceto",
  "crinale",
  "crisi",
  "critico",
  "croce",
  "cronaca",
  "crostata",
  "cruciale",
  "crusca",
  "cucire",
  "cuculo",
  "cugino",
  "cullato",
  "cupola",
  "curatore",
  "cursore",
  "curvo",
  "cuscino",
  "custode",
  "dado",
  "daino",
  "dalmata",
  "damerino",
  "daniela",
  "dannoso",
  "danzare",
  "datato",
  "davanti",
  "davvero",
  "debutto",
  "decennio",
  "deciso",
  "declino",
  "decollo",
  "decreto",
  "dedicato",
  "definito",
  "deforme",
  "degno",
  "delegare",
  "delfino",
  "delirio",
  "delta",
  "demenza",
  "denotato",
  "dentro",
  "deposito",
  "derapata",
  "derivare",
  "deroga",
  "descritto",
  "deserto",
  "desiderio",
  "desumere",
  "detersivo",
  "devoto",
  "diametro",
  "dicembre",
  "diedro",
  "difeso",
  "diffuso",
  "digerire",
  "digitale",
  "diluvio",
  "dinamico",
  "dinnanzi",
  "dipinto",
  "diploma",
  "dipolo",
  "diradare",
  "dire",
  "dirotto",
  "dirupo",
  "disagio",
  "discreto",
  "disfare",
  "disgelo",
  "disposto",
  "distanza",
  "disumano",
  "dito",
  "divano",
  "divelto",
  "dividere",
  "divorato",
  "doblone",
  "docente",
  "doganale",
  "dogma",
  "dolce",
  "domato",
  "domenica",
  "dominare",
  "dondolo",
  "dono",
  "dormire",
  "dote",
  "dottore",
  "dovuto",
  "dozzina",
  "drago",
  "druido",
  "dubbio",
  "dubitare",
  "ducale",
  "duna",
  "duomo",
  "duplice",
  "duraturo",
  "ebano",
  "eccesso",
  "ecco",
  "eclissi",
  "economia",
  "edera",
  "edicola",
  "edile",
  "editoria",
  "educare",
  "egemonia",
  "egli",
  "egoismo",
  "egregio",
  "elaborato",
  "elargire",
  "elegante",
  "elencato",
  "eletto",
  "elevare",
  "elfico",
  "elica",
  "elmo",
  "elsa",
  "eluso",
  "emanato",
  "emblema",
  "emesso",
  "emiro",
  "emotivo",
  "emozione",
  "empirico",
  "emulo",
  "endemico",
  "enduro",
  "energia",
  "enfasi",
  "enoteca",
  "entrare",
  "enzima",
  "epatite",
  "epilogo",
  "episodio",
  "epocale",
  "eppure",
  "equatore",
  "erario",
  "erba",
  "erboso",
  "erede",
  "eremita",
  "erigere",
  "ermetico",
  "eroe",
  "erosivo",
  "errante",
  "esagono",
  "esame",
  "esanime",
  "esaudire",
  "esca",
  "esempio",
  "esercito",
  "esibito",
  "esigente",
  "esistere",
  "esito",
  "esofago",
  "esortato",
  "esoso",
  "espanso",
  "espresso",
  "essenza",
  "esso",
  "esteso",
  "estimare",
  "estonia",
  "estroso",
  "esultare",
  "etilico",
  "etnico",
  "etrusco",
  "etto",
  "euclideo",
  "europa",
  "evaso",
  "evidenza",
  "evitato",
  "evoluto",
  "evviva",
  "fabbrica",
  "faccenda",
  "fachiro",
  "falco",
  "famiglia",
  "fanale",
  "fanfara",
  "fango",
  "fantasma",
  "fare",
  "farfalla",
  "farinoso",
  "farmaco",
  "fascia",
  "fastoso",
  "fasullo",
  "faticare",
  "fato",
  "favoloso",
  "febbre",
  "fecola",
  "fede",
  "fegato",
  "felpa",
  "feltro",
  "femmina",
  "fendere",
  "fenomeno",
  "fermento",
  "ferro",
  "fertile",
  "fessura",
  "festivo",
  "fetta",
  "feudo",
  "fiaba",
  "fiducia",
  "fifa",
  "figurato",
  "filo",
  "finanza",
  "finestra",
  "finire",
  "fiore",
  "fiscale",
  "fisico",
  "fiume",
  "flacone",
  "flamenco",
  "flebo",
  "flemma",
  "florido",
  "fluente",
  "fluoro",
  "fobico",
  "focaccia",
  "focoso",
  "foderato",
  "foglio",
  "folata",
  "folclore",
  "folgore",
  "fondente",
  "fonetico",
  "fonia",
  "fontana",
  "forbito",
  "forchetta",
  "foresta",
  "formica",
  "fornaio",
  "foro",
  "fortezza",
  "forzare",
  "fosfato",
  "fosso",
  "fracasso",
  "frana",
  "frassino",
  "fratello",
  "freccetta",
  "frenata",
  "fresco",
  "frigo",
  "frollino",
  "fronde",
  "frugale",
  "frutta",
  "fucilata",
  "fucsia",
  "fuggente",
  "fulmine",
  "fulvo",
  "fumante",
  "fumetto",
  "fumoso",
  "fune",
  "funzione",
  "fuoco",
  "furbo",
  "furgone",
  "furore",
  "fuso",
  "futile",
  "gabbiano",
  "gaffe",
  "galateo",
  "gallina",
  "galoppo",
  "gambero",
  "gamma",
  "garanzia",
  "garbo",
  "garofano",
  "garzone",
  "gasdotto",
  "gasolio",
  "gastrico",
  "gatto",
  "gaudio",
  "gazebo",
  "gazzella",
  "geco",
  "gelatina",
  "gelso",
  "gemello",
  "gemmato",
  "gene",
  "genitore",
  "gennaio",
  "genotipo",
  "gergo",
  "ghepardo",
  "ghiaccio",
  "ghisa",
  "giallo",
  "gilda",
  "ginepro",
  "giocare",
  "gioiello",
  "giorno",
  "giove",
  "girato",
  "girone",
  "gittata",
  "giudizio",
  "giurato",
  "giusto",
  "globulo",
  "glutine",
  "gnomo",
  "gobba",
  "golf",
  "gomito",
  "gommone",
  "gonfio",
  "gonna",
  "governo",
  "gracile",
  "grado",
  "grafico",
  "grammo",
  "grande",
  "grattare",
  "gravoso",
  "grazia",
  "greca",
  "gregge",
  "grifone",
  "grigio",
  "grinza",
  "grotta",
  "gruppo",
  "guadagno",
  "guaio",
  "guanto",
  "guardare",
  "gufo",
  "guidare",
  "ibernato",
  "icona",
  "identico",
  "idillio",
  "idolo",
  "idra",
  "idrico",
  "idrogeno",
  "igiene",
  "ignaro",
  "ignorato",
  "ilare",
  "illeso",
  "illogico",
  "illudere",
  "imballo",
  "imbevuto",
  "imbocco",
  "imbuto",
  "immane",
  "immerso",
  "immolato",
  "impacco",
  "impeto",
  "impiego",
  "importo",
  "impronta",
  "inalare",
  "inarcare",
  "inattivo",
  "incanto",
  "incendio",
  "inchino",
  "incisivo",
  "incluso",
  "incontro",
  "incrocio",
  "incubo",
  "indagine",
  "india",
  "indole",
  "inedito",
  "infatti",
  "infilare",
  "inflitto",
  "ingaggio",
  "ingegno",
  "inglese",
  "ingordo",
  "ingrosso",
  "innesco",
  "inodore",
  "inoltrare",
  "inondato",
  "insano",
  "insetto",
  "insieme",
  "insonnia",
  "insulina",
  "intasato",
  "intero",
  "intonaco",
  "intuito",
  "inumidire",
  "invalido",
  "invece",
  "invito",
  "iperbole",
  "ipnotico",
  "ipotesi",
  "ippica",
  "iride",
  "irlanda",
  "ironico",
  "irrigato",
  "irrorare",
  "isolato",
  "isotopo",
  "isterico",
  "istituto",
  "istrice",
  "italia",
  "iterare",
  "labbro",
  "labirinto",
  "lacca",
  "lacerato",
  "lacrima",
  "lacuna",
  "laddove",
  "lago",
  "lampo",
  "lancetta",
  "lanterna",
  "lardoso",
  "larga",
  "laringe",
  "lastra",
  "latenza",
  "latino",
  "lattuga",
  "lavagna",
  "lavoro",
  "legale",
  "leggero",
  "lembo",
  "lentezza",
  "lenza",
  "leone",
  "lepre",
  "lesivo",
  "lessato",
  "lesto",
  "letterale",
  "leva",
  "levigato",
  "libero",
  "lido",
  "lievito",
  "lilla",
  "limatura",
  "limitare",
  "limpido",
  "lineare",
  "lingua",
  "liquido",
  "lira",
  "lirica",
  "lisca",
  "lite",
  "litigio",
  "livrea",
  "locanda",
  "lode",
  "logica",
  "lombare",
  "londra",
  "longevo",
  "loquace",
  "lorenzo",
  "loto",
  "lotteria",
  "luce",
  "lucidato",
  "lumaca",
  "luminoso",
  "lungo",
  "lupo",
  "luppolo",
  "lusinga",
  "lusso",
  "lutto",
  "macabro",
  "macchina",
  "macero",
  "macinato",
  "madama",
  "magico",
  "maglia",
  "magnete",
  "magro",
  "maiolica",
  "malafede",
  "malgrado",
  "malinteso",
  "malsano",
  "malto",
  "malumore",
  "mana",
  "mancia",
  "mandorla",
  "mangiare",
  "manifesto",
  "mannaro",
  "manovra",
  "mansarda",
  "mantide",
  "manubrio",
  "mappa",
  "maratona",
  "marcire",
  "maretta",
  "marmo",
  "marsupio",
  "maschera",
  "massaia",
  "mastino",
  "materasso",
  "matricola",
  "mattone",
  "maturo",
  "mazurca",
  "meandro",
  "meccanico",
  "mecenate",
  "medesimo",
  "meditare",
  "mega",
  "melassa",
  "melis",
  "melodia",
  "meninge",
  "meno",
  "mensola",
  "mercurio",
  "merenda",
  "merlo",
  "meschino",
  "mese",
  "messere",
  "mestolo",
  "metallo",
  "metodo",
  "mettere",
  "miagolare",
  "mica",
  "micelio",
  "michele",
  "microbo",
  "midollo",
  "miele",
  "migliore",
  "milano",
  "milite",
  "mimosa",
  "minerale",
  "mini",
  "minore",
  "mirino",
  "mirtillo",
  "miscela",
  "missiva",
  "misto",
  "misurare",
  "mitezza",
  "mitigare",
  "mitra",
  "mittente",
  "mnemonico",
  "modello",
  "modifica",
  "modulo",
  "mogano",
  "mogio",
  "mole",
  "molosso",
  "monastero",
  "monco",
  "mondina",
  "monetario",
  "monile",
  "monotono",
  "monsone",
  "montato",
  "monviso",
  "mora",
  "mordere",
  "morsicato",
  "mostro",
  "motivato",
  "motosega",
  "motto",
  "movenza",
  "movimento",
  "mozzo",
  "mucca",
  "mucosa",
  "muffa",
  "mughetto",
  "mugnaio",
  "mulatto",
  "mulinello",
  "multiplo",
  "mummia",
  "munto",
  "muovere",
  "murale",
  "musa",
  "muscolo",
  "musica",
  "mutevole",
  "muto",
  "nababbo",
  "nafta",
  "nanometro",
  "narciso",
  "narice",
  "narrato",
  "nascere",
  "nastrare",
  "naturale",
  "nautica",
  "naviglio",
  "nebulosa",
  "necrosi",
  "negativo",
  "negozio",
  "nemmeno",
  "neofita",
  "neretto",
  "nervo",
  "nessuno",
  "nettuno",
  "neutrale",
  "neve",
  "nevrotico",
  "nicchia",
  "ninfa",
  "nitido",
  "nobile",
  "nocivo",
  "nodo",
  "nome",
  "nomina",
  "nordico",
  "normale",
  "norvegese",
  "nostrano",
  "notare",
  "notizia",
  "notturno",
  "novella",
  "nucleo",
  "nulla",
  "numero",
  "nuovo",
  "nutrire",
  "nuvola",
  "nuziale",
  "oasi",
  "obbedire",
  "obbligo",
  "obelisco",
  "oblio",
  "obolo",
  "obsoleto",
  "occasione",
  "occhio",
  "occidente",
  "occorrere",
  "occultare",
  "ocra",
  "oculato",
  "odierno",
  "odorare",
  "offerta",
  "offrire",
  "offuscato",
  "oggetto",
  "oggi",
  "ognuno",
  "olandese",
  "olfatto",
  "oliato",
  "oliva",
  "ologramma",
  "oltre",
  "omaggio",
  "ombelico",
  "ombra",
  "omega",
  "omissione",
  "ondoso",
  "onere",
  "onice",
  "onnivoro",
  "onorevole",
  "onta",
  "operato",
  "opinione",
  "opposto",
  "oracolo",
  "orafo",
  "ordine",
  "orecchino",
  "orefice",
  "orfano",
  "organico",
  "origine",
  "orizzonte",
  "orma",
  "ormeggio",
  "ornativo",
  "orologio",
  "orrendo",
  "orribile",
  "ortensia",
  "ortica",
  "orzata",
  "orzo",
  "osare",
  "oscurare",
  "osmosi",
  "ospedale",
  "ospite",
  "ossa",
  "ossidare",
  "ostacolo",
  "oste",
  "otite",
  "otre",
  "ottagono",
  "ottimo",
  "ottobre",
  "ovale",
  "ovest",
  "ovino",
  "oviparo",
  "ovocito",
  "ovunque",
  "ovviare",
  "ozio",
  "pacchetto",
  "pace",
  "pacifico",
  "padella",
  "padrone",
  "paese",
  "paga",
  "pagina",
  "palazzina",
  "palesare",
  "pallido",
  "palo",
  "palude",
  "pandoro",
  "pannello",
  "paolo",
  "paonazzo",
  "paprica",
  "parabola",
  "parcella",
  "parere",
  "pargolo",
  "pari",
  "parlato",
  "parola",
  "partire",
  "parvenza",
  "parziale",
  "passivo",
  "pasticca",
  "patacca",
  "patologia",
  "pattume",
  "pavone",
  "peccato",
  "pedalare",
  "pedonale",
  "peggio",
  "peloso",
  "penare",
  "pendice",
  "penisola",
  "pennuto",
  "penombra",
  "pensare",
  "pentola",
  "pepe",
  "pepita",
  "perbene",
  "percorso",
  "perdonato",
  "perforare",
  "pergamena",
  "periodo",
  "permesso",
  "perno",
  "perplesso",
  "persuaso",
  "pertugio",
  "pervaso",
  "pesatore",
  "pesista",
  "peso",
  "pestifero",
  "petalo",
  "pettine",
  "petulante",
  "pezzo",
  "piacere",
  "pianta",
  "piattino",
  "piccino",
  "picozza",
  "piega",
  "pietra",
  "piffero",
  "pigiama",
  "pigolio",
  "pigro",
  "pila",
  "pilifero",
  "pillola",
  "pilota",
  "pimpante",
  "pineta",
  "pinna",
  "pinolo",
  "pioggia",
  "piombo",
  "piramide",
  "piretico",
  "pirite",
  "pirolisi",
  "pitone",
  "pizzico",
  "placebo",
  "planare",
  "plasma",
  "platano",
  "plenario",
  "pochezza",
  "poderoso",
  "podismo",
  "poesia",
  "poggiare",
  "polenta",
  "poligono",
  "pollice",
  "polmonite",
  "polpetta",
  "polso",
  "poltrona",
  "polvere",
  "pomice",
  "pomodoro",
  "ponte",
  "popoloso",
  "porfido",
  "poroso",
  "porpora",
  "porre",
  "portata",
  "posa",
  "positivo",
  "possesso",
  "postulato",
  "potassio",
  "potere",
  "pranzo",
  "prassi",
  "pratica",
  "precluso",
  "predica",
  "prefisso",
  "pregiato",
  "prelievo",
  "premere",
  "prenotare",
  "preparato",
  "presenza",
  "pretesto",
  "prevalso",
  "prima",
  "principe",
  "privato",
  "problema",
  "procura",
  "produrre",
  "profumo",
  "progetto",
  "prolunga",
  "promessa",
  "pronome",
  "proposta",
  "proroga",
  "proteso",
  "prova",
  "prudente",
  "prugna",
  "prurito",
  "psiche",
  "pubblico",
  "pudica",
  "pugilato",
  "pugno",
  "pulce",
  "pulito",
  "pulsante",
  "puntare",
  "pupazzo",
  "pupilla",
  "puro",
  "quadro",
  "qualcosa",
  "quasi",
  "querela",
  "quota",
  "raccolto",
  "raddoppio",
  "radicale",
  "radunato",
  "raffica",
  "ragazzo",
  "ragione",
  "ragno",
  "ramarro",
  "ramingo",
  "ramo",
  "randagio",
  "rantolare",
  "rapato",
  "rapina",
  "rappreso",
  "rasatura",
  "raschiato",
  "rasente",
  "rassegna",
  "rastrello",
  "rata",
  "ravveduto",
  "reale",
  "recepire",
  "recinto",
  "recluta",
  "recondito",
  "recupero",
  "reddito",
  "redimere",
  "regalato",
  "registro",
  "regola",
  "regresso",
  "relazione",
  "remare",
  "remoto",
  "renna",
  "replica",
  "reprimere",
  "reputare",
  "resa",
  "residente",
  "responso",
  "restauro",
  "rete",
  "retina",
  "retorica",
  "rettifica",
  "revocato",
  "riassunto",
  "ribadire",
  "ribelle",
  "ribrezzo",
  "ricarica",
  "ricco",
  "ricevere",
  "riciclato",
  "ricordo",
  "ricreduto",
  "ridicolo",
  "ridurre",
  "rifasare",
  "riflesso",
  "riforma",
  "rifugio",
  "rigare",
  "rigettato",
  "righello",
  "rilassato",
  "rilevato",
  "rimanere",
  "rimbalzo",
  "rimedio",
  "rimorchio",
  "rinascita",
  "rincaro",
  "rinforzo",
  "rinnovo",
  "rinomato",
  "rinsavito",
  "rintocco",
  "rinuncia",
  "rinvenire",
  "riparato",
  "ripetuto",
  "ripieno",
  "riportare",
  "ripresa",
  "ripulire",
  "risata",
  "rischio",
  "riserva",
  "risibile",
  "riso",
  "rispetto",
  "ristoro",
  "risultato",
  "risvolto",
  "ritardo",
  "ritegno",
  "ritmico",
  "ritrovo",
  "riunione",
  "riva",
  "riverso",
  "rivincita",
  "rivolto",
  "rizoma",
  "roba",
  "robotico",
  "robusto",
  "roccia",
  "roco",
  "rodaggio",
  "rodere",
  "roditore",
  "rogito",
  "rollio",
  "romantico",
  "rompere",
  "ronzio",
  "rosolare",
  "rospo",
  "rotante",
  "rotondo",
  "rotula",
  "rovescio",
  "rubizzo",
  "rubrica",
  "ruga",
  "rullino",
  "rumine",
  "rumoroso",
  "ruolo",
  "rupe",
  "russare",
  "rustico",
  "sabato",
  "sabbiare",
  "sabotato",
  "sagoma",
  "salasso",
  "saldatura",
  "salgemma",
  "salivare",
  "salmone",
  "salone",
  "saltare",
  "saluto",
  "salvo",
  "sapere",
  "sapido",
  "saporito",
  "saraceno",
  "sarcasmo",
  "sarto",
  "sassoso",
  "satellite",
  "satira",
  "satollo",
  "saturno",
  "savana",
  "savio",
  "saziato",
  "sbadiglio",
  "sbalzo",
  "sbancato",
  "sbarra",
  "sbattere",
  "sbavare",
  "sbendare",
  "sbirciare",
  "sbloccato",
  "sbocciato",
  "sbrinare",
  "sbruffone",
  "sbuffare",
  "scabroso",
  "scadenza",
  "scala",
  "scambiare",
  "scandalo",
  "scapola",
  "scarso",
  "scatenare",
  "scavato",
  "scelto",
  "scenico",
  "scettro",
  "scheda",
  "schiena",
  "sciarpa",
  "scienza",
  "scindere",
  "scippo",
  "sciroppo",
  "scivolo",
  "sclerare",
  "scodella",
  "scolpito",
  "scomparto",
  "sconforto",
  "scoprire",
  "scorta",
  "scossone",
  "scozzese",
  "scriba",
  "scrollare",
  "scrutinio",
  "scuderia",
  "scultore",
  "scuola",
  "scuro",
  "scusare",
  "sdebitare",
  "sdoganare",
  "seccatura",
  "secondo",
  "sedano",
  "seggiola",
  "segnalato",
  "segregato",
  "seguito",
  "selciato",
  "selettivo",
  "sella",
  "selvaggio",
  "semaforo",
  "sembrare",
  "seme",
  "seminato",
  "sempre",
  "senso",
  "sentire",
  "sepolto",
  "sequenza",
  "serata",
  "serbato",
  "sereno",
  "serio",
  "serpente",
  "serraglio",
  "servire",
  "sestina",
  "setola",
  "settimana",
  "sfacelo",
  "sfaldare",
  "sfamato",
  "sfarzoso",
  "sfaticato",
  "sfera",
  "sfida",
  "sfilato",
  "sfinge",
  "sfocato",
  "sfoderare",
  "sfogo",
  "sfoltire",
  "sforzato",
  "sfratto",
  "sfruttato",
  "sfuggito",
  "sfumare",
  "sfuso",
  "sgabello",
  "sgarbato",
  "sgonfiare",
  "sgorbio",
  "sgrassato",
  "sguardo",
  "sibilo",
  "siccome",
  "sierra",
  "sigla",
  "signore",
  "silenzio",
  "sillaba",
  "simbolo",
  "simpatico",
  "simulato",
  "sinfonia",
  "singolo",
  "sinistro",
  "sino",
  "sintesi",
  "sinusoide",
  "sipario",
  "sisma",
  "sistole",
  "situato",
  "slitta",
  "slogatura",
  "sloveno",
  "smarrito",
  "smemorato",
  "smentito",
  "smeraldo",
  "smilzo",
  "smontare",
  "smottato",
  "smussato",
  "snellire",
  "snervato",
  "snodo",
  "sobbalzo",
  "sobrio",
  "soccorso",
  "sociale",
  "sodale",
  "soffitto",
  "sogno",
  "soldato",
  "solenne",
  "solido",
  "sollazzo",
  "solo",
  "solubile",
  "solvente",
  "somatico",
  "somma",
  "sonda",
  "sonetto",
  "sonnifero",
  "sopire",
  "soppeso",
  "sopra",
  "sorgere",
  "sorpasso",
  "sorriso",
  "sorso",
  "sorteggio",
  "sorvolato",
  "sospiro",
  "sosta",
  "sottile",
  "spada",
  "spalla",
  "spargere",
  "spatola",
  "spavento",
  "spazzola",
  "specie",
  "spedire",
  "spegnere",
  "spelatura",
  "speranza",
  "spessore",
  "spettrale",
  "spezzato",
  "spia",
  "spigoloso",
  "spillato",
  "spinoso",
  "spirale",
  "splendido",
  "sportivo",
  "sposo",
  "spranga",
  "sprecare",
  "spronato",
  "spruzzo",
  "spuntino",
  "squillo",
  "sradicare",
  "srotolato",
  "stabile",
  "stacco",
  "staffa",
  "stagnare",
  "stampato",
  "stantio",
  "starnuto",
  "stasera",
  "statuto",
  "stelo",
  "steppa",
  "sterzo",
  "stiletto",
  "stima",
  "stirpe",
  "stivale",
  "stizzoso",
  "stonato",
  "storico",
  "strappo",
  "stregato",
  "stridulo",
  "strozzare",
  "strutto",
  "stuccare",
  "stufo",
  "stupendo",
  "subentro",
  "succoso",
  "sudore",
  "suggerito",
  "sugo",
  "sultano",
  "suonare",
  "superbo",
  "supporto",
  "surgelato",
  "surrogato",
  "sussurro",
  "sutura",
  "svagare",
  "svedese",
  "sveglio",
  "svelare",
  "svenuto",
  "svezia",
  "sviluppo",
  "svista",
  "svizzera",
  "svolta",
  "svuotare",
  "tabacco",
  "tabulato",
  "tacciare",
  "taciturno",
  "tale",
  "talismano",
  "tampone",
  "tannino",
  "tara",
  "tardivo",
  "targato",
  "tariffa",
  "tarpare",
  "tartaruga",
  "tasto",
  "tattico",
  "taverna",
  "tavolata",
  "tazza",
  "teca",
  "tecnico",
  "telefono",
  "temerario",
  "tempo",
  "temuto",
  "tendone",
  "tenero",
  "tensione",
  "tentacolo",
  "teorema",
  "terme",
  "terrazzo",
  "terzetto",
  "tesi",
  "tesserato",
  "testato",
  "tetro",
  "tettoia",
  "tifare",
  "tigella",
  "timbro",
  "tinto",
  "tipico",
  "tipografo",
  "tiraggio",
  "tiro",
  "titanio",
  "titolo",
  "titubante",
  "tizio",
  "tizzone",
  "toccare",
  "tollerare",
  "tolto",
  "tombola",
  "tomo",
  "tonfo",
  "tonsilla",
  "topazio",
  "topologia",
  "toppa",
  "torba",
  "tornare",
  "torrone",
  "tortora",
  "toscano",
  "tossire",
  "tostatura",
  "totano",
  "trabocco",
  "trachea",
  "trafila",
  "tragedia",
  "tralcio",
  "tramonto",
  "transito",
  "trapano",
  "trarre",
  "trasloco",
  "trattato",
  "trave",
  "treccia",
  "tremolio",
  "trespolo",
  "tributo",
  "tricheco",
  "trifoglio",
  "trillo",
  "trincea",
  "trio",
  "tristezza",
  "triturato",
  "trivella",
  "tromba",
  "trono",
  "troppo",
  "trottola",
  "trovare",
  "truccato",
  "tubatura",
  "tuffato",
  "tulipano",
  "tumulto",
  "tunisia",
  "turbare",
  "turchino",
  "tuta",
  "tutela",
  "ubicato",
  "uccello",
  "uccisore",
  "udire",
  "uditivo",
  "uffa",
  "ufficio",
  "uguale",
  "ulisse",
  "ultimato",
  "umano",
  "umile",
  "umorismo",
  "uncinetto",
  "ungere",
  "ungherese",
  "unicorno",
  "unificato",
  "unisono",
  "unitario",
  "unte",
  "uovo",
  "upupa",
  "uragano",
  "urgenza",
  "urlo",
  "usanza",
  "usato",
  "uscito",
  "usignolo",
  "usuraio",
  "utensile",
  "utilizzo",
  "utopia",
  "vacante",
  "vaccinato",
  "vagabondo",
  "vagliato",
  "valanga",
  "valgo",
  "valico",
  "valletta",
  "valoroso",
  "valutare",
  "valvola",
  "vampata",
  "vangare",
  "vanitoso",
  "vano",
  "vantaggio",
  "vanvera",
  "vapore",
  "varano",
  "varcato",
  "variante",
  "vasca",
  "vedetta",
  "vedova",
  "veduto",
  "vegetale",
  "veicolo",
  "velcro",
  "velina",
  "velluto",
  "veloce",
  "venato",
  "vendemmia",
  "vento",
  "verace",
  "verbale",
  "vergogna",
  "verifica",
  "vero",
  "verruca",
  "verticale",
  "vescica",
  "vessillo",
  "vestale",
  "veterano",
  "vetrina",
  "vetusto",
  "viandante",
  "vibrante",
  "vicenda",
  "vichingo",
  "vicinanza",
  "vidimare",
  "vigilia",
  "vigneto",
  "vigore",
  "vile",
  "villano",
  "vimini",
  "vincitore",
  "viola",
  "vipera",
  "virgola",
  "virologo",
  "virulento",
  "viscoso",
  "visione",
  "vispo",
  "vissuto",
  "visura",
  "vita",
  "vitello",
  "vittima",
  "vivanda",
  "vivido",
  "viziare",
  "voce",
  "voga",
  "volatile",
  "volere",
  "volpe",
  "voragine",
  "vulcano",
  "zampogna",
  "zanna",
  "zappato",
  "zattera",
  "zavorra",
  "zefiro",
  "zelante",
  "zelo",
  "zenzero",
  "zerbino",
  "zibetto",
  "zinco",
  "zircone",
  "zitto",
  "zolla",
  "zotico",
  "zucchero",
  "zufolo",
  "zulu",
  "zuppa"
], wB = [
  "ábaco",
  "abdomen",
  "abeja",
  "abierto",
  "abogado",
  "abono",
  "aborto",
  "abrazo",
  "abrir",
  "abuelo",
  "abuso",
  "acabar",
  "academia",
  "acceso",
  "acción",
  "aceite",
  "acelga",
  "acento",
  "aceptar",
  "ácido",
  "aclarar",
  "acné",
  "acoger",
  "acoso",
  "activo",
  "acto",
  "actriz",
  "actuar",
  "acudir",
  "acuerdo",
  "acusar",
  "adicto",
  "admitir",
  "adoptar",
  "adorno",
  "aduana",
  "adulto",
  "aéreo",
  "afectar",
  "afición",
  "afinar",
  "afirmar",
  "ágil",
  "agitar",
  "agonía",
  "agosto",
  "agotar",
  "agregar",
  "agrio",
  "agua",
  "agudo",
  "águila",
  "aguja",
  "ahogo",
  "ahorro",
  "aire",
  "aislar",
  "ajedrez",
  "ajeno",
  "ajuste",
  "alacrán",
  "alambre",
  "alarma",
  "alba",
  "álbum",
  "alcalde",
  "aldea",
  "alegre",
  "alejar",
  "alerta",
  "aleta",
  "alfiler",
  "alga",
  "algodón",
  "aliado",
  "aliento",
  "alivio",
  "alma",
  "almeja",
  "almíbar",
  "altar",
  "alteza",
  "altivo",
  "alto",
  "altura",
  "alumno",
  "alzar",
  "amable",
  "amante",
  "amapola",
  "amargo",
  "amasar",
  "ámbar",
  "ámbito",
  "ameno",
  "amigo",
  "amistad",
  "amor",
  "amparo",
  "amplio",
  "ancho",
  "anciano",
  "ancla",
  "andar",
  "andén",
  "anemia",
  "ángulo",
  "anillo",
  "ánimo",
  "anís",
  "anotar",
  "antena",
  "antiguo",
  "antojo",
  "anual",
  "anular",
  "anuncio",
  "añadir",
  "añejo",
  "año",
  "apagar",
  "aparato",
  "apetito",
  "apio",
  "aplicar",
  "apodo",
  "aporte",
  "apoyo",
  "aprender",
  "aprobar",
  "apuesta",
  "apuro",
  "arado",
  "araña",
  "arar",
  "árbitro",
  "árbol",
  "arbusto",
  "archivo",
  "arco",
  "arder",
  "ardilla",
  "arduo",
  "área",
  "árido",
  "aries",
  "armonía",
  "arnés",
  "aroma",
  "arpa",
  "arpón",
  "arreglo",
  "arroz",
  "arruga",
  "arte",
  "artista",
  "asa",
  "asado",
  "asalto",
  "ascenso",
  "asegurar",
  "aseo",
  "asesor",
  "asiento",
  "asilo",
  "asistir",
  "asno",
  "asombro",
  "áspero",
  "astilla",
  "astro",
  "astuto",
  "asumir",
  "asunto",
  "atajo",
  "ataque",
  "atar",
  "atento",
  "ateo",
  "ático",
  "atleta",
  "átomo",
  "atraer",
  "atroz",
  "atún",
  "audaz",
  "audio",
  "auge",
  "aula",
  "aumento",
  "ausente",
  "autor",
  "aval",
  "avance",
  "avaro",
  "ave",
  "avellana",
  "avena",
  "avestruz",
  "avión",
  "aviso",
  "ayer",
  "ayuda",
  "ayuno",
  "azafrán",
  "azar",
  "azote",
  "azúcar",
  "azufre",
  "azul",
  "baba",
  "babor",
  "bache",
  "bahía",
  "baile",
  "bajar",
  "balanza",
  "balcón",
  "balde",
  "bambú",
  "banco",
  "banda",
  "baño",
  "barba",
  "barco",
  "barniz",
  "barro",
  "báscula",
  "bastón",
  "basura",
  "batalla",
  "batería",
  "batir",
  "batuta",
  "baúl",
  "bazar",
  "bebé",
  "bebida",
  "bello",
  "besar",
  "beso",
  "bestia",
  "bicho",
  "bien",
  "bingo",
  "blanco",
  "bloque",
  "blusa",
  "boa",
  "bobina",
  "bobo",
  "boca",
  "bocina",
  "boda",
  "bodega",
  "boina",
  "bola",
  "bolero",
  "bolsa",
  "bomba",
  "bondad",
  "bonito",
  "bono",
  "bonsái",
  "borde",
  "borrar",
  "bosque",
  "bote",
  "botín",
  "bóveda",
  "bozal",
  "bravo",
  "brazo",
  "brecha",
  "breve",
  "brillo",
  "brinco",
  "brisa",
  "broca",
  "broma",
  "bronce",
  "brote",
  "bruja",
  "brusco",
  "bruto",
  "buceo",
  "bucle",
  "bueno",
  "buey",
  "bufanda",
  "bufón",
  "búho",
  "buitre",
  "bulto",
  "burbuja",
  "burla",
  "burro",
  "buscar",
  "butaca",
  "buzón",
  "caballo",
  "cabeza",
  "cabina",
  "cabra",
  "cacao",
  "cadáver",
  "cadena",
  "caer",
  "café",
  "caída",
  "caimán",
  "caja",
  "cajón",
  "cal",
  "calamar",
  "calcio",
  "caldo",
  "calidad",
  "calle",
  "calma",
  "calor",
  "calvo",
  "cama",
  "cambio",
  "camello",
  "camino",
  "campo",
  "cáncer",
  "candil",
  "canela",
  "canguro",
  "canica",
  "canto",
  "caña",
  "cañón",
  "caoba",
  "caos",
  "capaz",
  "capitán",
  "capote",
  "captar",
  "capucha",
  "cara",
  "carbón",
  "cárcel",
  "careta",
  "carga",
  "cariño",
  "carne",
  "carpeta",
  "carro",
  "carta",
  "casa",
  "casco",
  "casero",
  "caspa",
  "castor",
  "catorce",
  "catre",
  "caudal",
  "causa",
  "cazo",
  "cebolla",
  "ceder",
  "cedro",
  "celda",
  "célebre",
  "celoso",
  "célula",
  "cemento",
  "ceniza",
  "centro",
  "cerca",
  "cerdo",
  "cereza",
  "cero",
  "cerrar",
  "certeza",
  "césped",
  "cetro",
  "chacal",
  "chaleco",
  "champú",
  "chancla",
  "chapa",
  "charla",
  "chico",
  "chiste",
  "chivo",
  "choque",
  "choza",
  "chuleta",
  "chupar",
  "ciclón",
  "ciego",
  "cielo",
  "cien",
  "cierto",
  "cifra",
  "cigarro",
  "cima",
  "cinco",
  "cine",
  "cinta",
  "ciprés",
  "circo",
  "ciruela",
  "cisne",
  "cita",
  "ciudad",
  "clamor",
  "clan",
  "claro",
  "clase",
  "clave",
  "cliente",
  "clima",
  "clínica",
  "cobre",
  "cocción",
  "cochino",
  "cocina",
  "coco",
  "código",
  "codo",
  "cofre",
  "coger",
  "cohete",
  "cojín",
  "cojo",
  "cola",
  "colcha",
  "colegio",
  "colgar",
  "colina",
  "collar",
  "colmo",
  "columna",
  "combate",
  "comer",
  "comida",
  "cómodo",
  "compra",
  "conde",
  "conejo",
  "conga",
  "conocer",
  "consejo",
  "contar",
  "copa",
  "copia",
  "corazón",
  "corbata",
  "corcho",
  "cordón",
  "corona",
  "correr",
  "coser",
  "cosmos",
  "costa",
  "cráneo",
  "cráter",
  "crear",
  "crecer",
  "creído",
  "crema",
  "cría",
  "crimen",
  "cripta",
  "crisis",
  "cromo",
  "crónica",
  "croqueta",
  "crudo",
  "cruz",
  "cuadro",
  "cuarto",
  "cuatro",
  "cubo",
  "cubrir",
  "cuchara",
  "cuello",
  "cuento",
  "cuerda",
  "cuesta",
  "cueva",
  "cuidar",
  "culebra",
  "culpa",
  "culto",
  "cumbre",
  "cumplir",
  "cuna",
  "cuneta",
  "cuota",
  "cupón",
  "cúpula",
  "curar",
  "curioso",
  "curso",
  "curva",
  "cutis",
  "dama",
  "danza",
  "dar",
  "dardo",
  "dátil",
  "deber",
  "débil",
  "década",
  "decir",
  "dedo",
  "defensa",
  "definir",
  "dejar",
  "delfín",
  "delgado",
  "delito",
  "demora",
  "denso",
  "dental",
  "deporte",
  "derecho",
  "derrota",
  "desayuno",
  "deseo",
  "desfile",
  "desnudo",
  "destino",
  "desvío",
  "detalle",
  "detener",
  "deuda",
  "día",
  "diablo",
  "diadema",
  "diamante",
  "diana",
  "diario",
  "dibujo",
  "dictar",
  "diente",
  "dieta",
  "diez",
  "difícil",
  "digno",
  "dilema",
  "diluir",
  "dinero",
  "directo",
  "dirigir",
  "disco",
  "diseño",
  "disfraz",
  "diva",
  "divino",
  "doble",
  "doce",
  "dolor",
  "domingo",
  "don",
  "donar",
  "dorado",
  "dormir",
  "dorso",
  "dos",
  "dosis",
  "dragón",
  "droga",
  "ducha",
  "duda",
  "duelo",
  "dueño",
  "dulce",
  "dúo",
  "duque",
  "durar",
  "dureza",
  "duro",
  "ébano",
  "ebrio",
  "echar",
  "eco",
  "ecuador",
  "edad",
  "edición",
  "edificio",
  "editor",
  "educar",
  "efecto",
  "eficaz",
  "eje",
  "ejemplo",
  "elefante",
  "elegir",
  "elemento",
  "elevar",
  "elipse",
  "élite",
  "elixir",
  "elogio",
  "eludir",
  "embudo",
  "emitir",
  "emoción",
  "empate",
  "empeño",
  "empleo",
  "empresa",
  "enano",
  "encargo",
  "enchufe",
  "encía",
  "enemigo",
  "enero",
  "enfado",
  "enfermo",
  "engaño",
  "enigma",
  "enlace",
  "enorme",
  "enredo",
  "ensayo",
  "enseñar",
  "entero",
  "entrar",
  "envase",
  "envío",
  "época",
  "equipo",
  "erizo",
  "escala",
  "escena",
  "escolar",
  "escribir",
  "escudo",
  "esencia",
  "esfera",
  "esfuerzo",
  "espada",
  "espejo",
  "espía",
  "esposa",
  "espuma",
  "esquí",
  "estar",
  "este",
  "estilo",
  "estufa",
  "etapa",
  "eterno",
  "ética",
  "etnia",
  "evadir",
  "evaluar",
  "evento",
  "evitar",
  "exacto",
  "examen",
  "exceso",
  "excusa",
  "exento",
  "exigir",
  "exilio",
  "existir",
  "éxito",
  "experto",
  "explicar",
  "exponer",
  "extremo",
  "fábrica",
  "fábula",
  "fachada",
  "fácil",
  "factor",
  "faena",
  "faja",
  "falda",
  "fallo",
  "falso",
  "faltar",
  "fama",
  "familia",
  "famoso",
  "faraón",
  "farmacia",
  "farol",
  "farsa",
  "fase",
  "fatiga",
  "fauna",
  "favor",
  "fax",
  "febrero",
  "fecha",
  "feliz",
  "feo",
  "feria",
  "feroz",
  "fértil",
  "fervor",
  "festín",
  "fiable",
  "fianza",
  "fiar",
  "fibra",
  "ficción",
  "ficha",
  "fideo",
  "fiebre",
  "fiel",
  "fiera",
  "fiesta",
  "figura",
  "fijar",
  "fijo",
  "fila",
  "filete",
  "filial",
  "filtro",
  "fin",
  "finca",
  "fingir",
  "finito",
  "firma",
  "flaco",
  "flauta",
  "flecha",
  "flor",
  "flota",
  "fluir",
  "flujo",
  "flúor",
  "fobia",
  "foca",
  "fogata",
  "fogón",
  "folio",
  "folleto",
  "fondo",
  "forma",
  "forro",
  "fortuna",
  "forzar",
  "fosa",
  "foto",
  "fracaso",
  "frágil",
  "franja",
  "frase",
  "fraude",
  "freír",
  "freno",
  "fresa",
  "frío",
  "frito",
  "fruta",
  "fuego",
  "fuente",
  "fuerza",
  "fuga",
  "fumar",
  "función",
  "funda",
  "furgón",
  "furia",
  "fusil",
  "fútbol",
  "futuro",
  "gacela",
  "gafas",
  "gaita",
  "gajo",
  "gala",
  "galería",
  "gallo",
  "gamba",
  "ganar",
  "gancho",
  "ganga",
  "ganso",
  "garaje",
  "garza",
  "gasolina",
  "gastar",
  "gato",
  "gavilán",
  "gemelo",
  "gemir",
  "gen",
  "género",
  "genio",
  "gente",
  "geranio",
  "gerente",
  "germen",
  "gesto",
  "gigante",
  "gimnasio",
  "girar",
  "giro",
  "glaciar",
  "globo",
  "gloria",
  "gol",
  "golfo",
  "goloso",
  "golpe",
  "goma",
  "gordo",
  "gorila",
  "gorra",
  "gota",
  "goteo",
  "gozar",
  "grada",
  "gráfico",
  "grano",
  "grasa",
  "gratis",
  "grave",
  "grieta",
  "grillo",
  "gripe",
  "gris",
  "grito",
  "grosor",
  "grúa",
  "grueso",
  "grumo",
  "grupo",
  "guante",
  "guapo",
  "guardia",
  "guerra",
  "guía",
  "guiño",
  "guion",
  "guiso",
  "guitarra",
  "gusano",
  "gustar",
  "haber",
  "hábil",
  "hablar",
  "hacer",
  "hacha",
  "hada",
  "hallar",
  "hamaca",
  "harina",
  "haz",
  "hazaña",
  "hebilla",
  "hebra",
  "hecho",
  "helado",
  "helio",
  "hembra",
  "herir",
  "hermano",
  "héroe",
  "hervir",
  "hielo",
  "hierro",
  "hígado",
  "higiene",
  "hijo",
  "himno",
  "historia",
  "hocico",
  "hogar",
  "hoguera",
  "hoja",
  "hombre",
  "hongo",
  "honor",
  "honra",
  "hora",
  "hormiga",
  "horno",
  "hostil",
  "hoyo",
  "hueco",
  "huelga",
  "huerta",
  "hueso",
  "huevo",
  "huida",
  "huir",
  "humano",
  "húmedo",
  "humilde",
  "humo",
  "hundir",
  "huracán",
  "hurto",
  "icono",
  "ideal",
  "idioma",
  "ídolo",
  "iglesia",
  "iglú",
  "igual",
  "ilegal",
  "ilusión",
  "imagen",
  "imán",
  "imitar",
  "impar",
  "imperio",
  "imponer",
  "impulso",
  "incapaz",
  "índice",
  "inerte",
  "infiel",
  "informe",
  "ingenio",
  "inicio",
  "inmenso",
  "inmune",
  "innato",
  "insecto",
  "instante",
  "interés",
  "íntimo",
  "intuir",
  "inútil",
  "invierno",
  "ira",
  "iris",
  "ironía",
  "isla",
  "islote",
  "jabalí",
  "jabón",
  "jamón",
  "jarabe",
  "jardín",
  "jarra",
  "jaula",
  "jazmín",
  "jefe",
  "jeringa",
  "jinete",
  "jornada",
  "joroba",
  "joven",
  "joya",
  "juerga",
  "jueves",
  "juez",
  "jugador",
  "jugo",
  "juguete",
  "juicio",
  "junco",
  "jungla",
  "junio",
  "juntar",
  "júpiter",
  "jurar",
  "justo",
  "juvenil",
  "juzgar",
  "kilo",
  "koala",
  "labio",
  "lacio",
  "lacra",
  "lado",
  "ladrón",
  "lagarto",
  "lágrima",
  "laguna",
  "laico",
  "lamer",
  "lámina",
  "lámpara",
  "lana",
  "lancha",
  "langosta",
  "lanza",
  "lápiz",
  "largo",
  "larva",
  "lástima",
  "lata",
  "látex",
  "latir",
  "laurel",
  "lavar",
  "lazo",
  "leal",
  "lección",
  "leche",
  "lector",
  "leer",
  "legión",
  "legumbre",
  "lejano",
  "lengua",
  "lento",
  "leña",
  "león",
  "leopardo",
  "lesión",
  "letal",
  "letra",
  "leve",
  "leyenda",
  "libertad",
  "libro",
  "licor",
  "líder",
  "lidiar",
  "lienzo",
  "liga",
  "ligero",
  "lima",
  "límite",
  "limón",
  "limpio",
  "lince",
  "lindo",
  "línea",
  "lingote",
  "lino",
  "linterna",
  "líquido",
  "liso",
  "lista",
  "litera",
  "litio",
  "litro",
  "llaga",
  "llama",
  "llanto",
  "llave",
  "llegar",
  "llenar",
  "llevar",
  "llorar",
  "llover",
  "lluvia",
  "lobo",
  "loción",
  "loco",
  "locura",
  "lógica",
  "logro",
  "lombriz",
  "lomo",
  "lonja",
  "lote",
  "lucha",
  "lucir",
  "lugar",
  "lujo",
  "luna",
  "lunes",
  "lupa",
  "lustro",
  "luto",
  "luz",
  "maceta",
  "macho",
  "madera",
  "madre",
  "maduro",
  "maestro",
  "mafia",
  "magia",
  "mago",
  "maíz",
  "maldad",
  "maleta",
  "malla",
  "malo",
  "mamá",
  "mambo",
  "mamut",
  "manco",
  "mando",
  "manejar",
  "manga",
  "maniquí",
  "manjar",
  "mano",
  "manso",
  "manta",
  "mañana",
  "mapa",
  "máquina",
  "mar",
  "marco",
  "marea",
  "marfil",
  "margen",
  "marido",
  "mármol",
  "marrón",
  "martes",
  "marzo",
  "masa",
  "máscara",
  "masivo",
  "matar",
  "materia",
  "matiz",
  "matriz",
  "máximo",
  "mayor",
  "mazorca",
  "mecha",
  "medalla",
  "medio",
  "médula",
  "mejilla",
  "mejor",
  "melena",
  "melón",
  "memoria",
  "menor",
  "mensaje",
  "mente",
  "menú",
  "mercado",
  "merengue",
  "mérito",
  "mes",
  "mesón",
  "meta",
  "meter",
  "método",
  "metro",
  "mezcla",
  "miedo",
  "miel",
  "miembro",
  "miga",
  "mil",
  "milagro",
  "militar",
  "millón",
  "mimo",
  "mina",
  "minero",
  "mínimo",
  "minuto",
  "miope",
  "mirar",
  "misa",
  "miseria",
  "misil",
  "mismo",
  "mitad",
  "mito",
  "mochila",
  "moción",
  "moda",
  "modelo",
  "moho",
  "mojar",
  "molde",
  "moler",
  "molino",
  "momento",
  "momia",
  "monarca",
  "moneda",
  "monja",
  "monto",
  "moño",
  "morada",
  "morder",
  "moreno",
  "morir",
  "morro",
  "morsa",
  "mortal",
  "mosca",
  "mostrar",
  "motivo",
  "mover",
  "móvil",
  "mozo",
  "mucho",
  "mudar",
  "mueble",
  "muela",
  "muerte",
  "muestra",
  "mugre",
  "mujer",
  "mula",
  "muleta",
  "multa",
  "mundo",
  "muñeca",
  "mural",
  "muro",
  "músculo",
  "museo",
  "musgo",
  "música",
  "muslo",
  "nácar",
  "nación",
  "nadar",
  "naipe",
  "naranja",
  "nariz",
  "narrar",
  "nasal",
  "natal",
  "nativo",
  "natural",
  "náusea",
  "naval",
  "nave",
  "navidad",
  "necio",
  "néctar",
  "negar",
  "negocio",
  "negro",
  "neón",
  "nervio",
  "neto",
  "neutro",
  "nevar",
  "nevera",
  "nicho",
  "nido",
  "niebla",
  "nieto",
  "niñez",
  "niño",
  "nítido",
  "nivel",
  "nobleza",
  "noche",
  "nómina",
  "noria",
  "norma",
  "norte",
  "nota",
  "noticia",
  "novato",
  "novela",
  "novio",
  "nube",
  "nuca",
  "núcleo",
  "nudillo",
  "nudo",
  "nuera",
  "nueve",
  "nuez",
  "nulo",
  "número",
  "nutria",
  "oasis",
  "obeso",
  "obispo",
  "objeto",
  "obra",
  "obrero",
  "observar",
  "obtener",
  "obvio",
  "oca",
  "ocaso",
  "océano",
  "ochenta",
  "ocho",
  "ocio",
  "ocre",
  "octavo",
  "octubre",
  "oculto",
  "ocupar",
  "ocurrir",
  "odiar",
  "odio",
  "odisea",
  "oeste",
  "ofensa",
  "oferta",
  "oficio",
  "ofrecer",
  "ogro",
  "oído",
  "oír",
  "ojo",
  "ola",
  "oleada",
  "olfato",
  "olivo",
  "olla",
  "olmo",
  "olor",
  "olvido",
  "ombligo",
  "onda",
  "onza",
  "opaco",
  "opción",
  "ópera",
  "opinar",
  "oponer",
  "optar",
  "óptica",
  "opuesto",
  "oración",
  "orador",
  "oral",
  "órbita",
  "orca",
  "orden",
  "oreja",
  "órgano",
  "orgía",
  "orgullo",
  "oriente",
  "origen",
  "orilla",
  "oro",
  "orquesta",
  "oruga",
  "osadía",
  "oscuro",
  "osezno",
  "oso",
  "ostra",
  "otoño",
  "otro",
  "oveja",
  "óvulo",
  "óxido",
  "oxígeno",
  "oyente",
  "ozono",
  "pacto",
  "padre",
  "paella",
  "página",
  "pago",
  "país",
  "pájaro",
  "palabra",
  "palco",
  "paleta",
  "pálido",
  "palma",
  "paloma",
  "palpar",
  "pan",
  "panal",
  "pánico",
  "pantera",
  "pañuelo",
  "papá",
  "papel",
  "papilla",
  "paquete",
  "parar",
  "parcela",
  "pared",
  "parir",
  "paro",
  "párpado",
  "parque",
  "párrafo",
  "parte",
  "pasar",
  "paseo",
  "pasión",
  "paso",
  "pasta",
  "pata",
  "patio",
  "patria",
  "pausa",
  "pauta",
  "pavo",
  "payaso",
  "peatón",
  "pecado",
  "pecera",
  "pecho",
  "pedal",
  "pedir",
  "pegar",
  "peine",
  "pelar",
  "peldaño",
  "pelea",
  "peligro",
  "pellejo",
  "pelo",
  "peluca",
  "pena",
  "pensar",
  "peñón",
  "peón",
  "peor",
  "pepino",
  "pequeño",
  "pera",
  "percha",
  "perder",
  "pereza",
  "perfil",
  "perico",
  "perla",
  "permiso",
  "perro",
  "persona",
  "pesa",
  "pesca",
  "pésimo",
  "pestaña",
  "pétalo",
  "petróleo",
  "pez",
  "pezuña",
  "picar",
  "pichón",
  "pie",
  "piedra",
  "pierna",
  "pieza",
  "pijama",
  "pilar",
  "piloto",
  "pimienta",
  "pino",
  "pintor",
  "pinza",
  "piña",
  "piojo",
  "pipa",
  "pirata",
  "pisar",
  "piscina",
  "piso",
  "pista",
  "pitón",
  "pizca",
  "placa",
  "plan",
  "plata",
  "playa",
  "plaza",
  "pleito",
  "pleno",
  "plomo",
  "pluma",
  "plural",
  "pobre",
  "poco",
  "poder",
  "podio",
  "poema",
  "poesía",
  "poeta",
  "polen",
  "policía",
  "pollo",
  "polvo",
  "pomada",
  "pomelo",
  "pomo",
  "pompa",
  "poner",
  "porción",
  "portal",
  "posada",
  "poseer",
  "posible",
  "poste",
  "potencia",
  "potro",
  "pozo",
  "prado",
  "precoz",
  "pregunta",
  "premio",
  "prensa",
  "preso",
  "previo",
  "primo",
  "príncipe",
  "prisión",
  "privar",
  "proa",
  "probar",
  "proceso",
  "producto",
  "proeza",
  "profesor",
  "programa",
  "prole",
  "promesa",
  "pronto",
  "propio",
  "próximo",
  "prueba",
  "público",
  "puchero",
  "pudor",
  "pueblo",
  "puerta",
  "puesto",
  "pulga",
  "pulir",
  "pulmón",
  "pulpo",
  "pulso",
  "puma",
  "punto",
  "puñal",
  "puño",
  "pupa",
  "pupila",
  "puré",
  "quedar",
  "queja",
  "quemar",
  "querer",
  "queso",
  "quieto",
  "química",
  "quince",
  "quitar",
  "rábano",
  "rabia",
  "rabo",
  "ración",
  "radical",
  "raíz",
  "rama",
  "rampa",
  "rancho",
  "rango",
  "rapaz",
  "rápido",
  "rapto",
  "rasgo",
  "raspa",
  "rato",
  "rayo",
  "raza",
  "razón",
  "reacción",
  "realidad",
  "rebaño",
  "rebote",
  "recaer",
  "receta",
  "rechazo",
  "recoger",
  "recreo",
  "recto",
  "recurso",
  "red",
  "redondo",
  "reducir",
  "reflejo",
  "reforma",
  "refrán",
  "refugio",
  "regalo",
  "regir",
  "regla",
  "regreso",
  "rehén",
  "reino",
  "reír",
  "reja",
  "relato",
  "relevo",
  "relieve",
  "relleno",
  "reloj",
  "remar",
  "remedio",
  "remo",
  "rencor",
  "rendir",
  "renta",
  "reparto",
  "repetir",
  "reposo",
  "reptil",
  "res",
  "rescate",
  "resina",
  "respeto",
  "resto",
  "resumen",
  "retiro",
  "retorno",
  "retrato",
  "reunir",
  "revés",
  "revista",
  "rey",
  "rezar",
  "rico",
  "riego",
  "rienda",
  "riesgo",
  "rifa",
  "rígido",
  "rigor",
  "rincón",
  "riñón",
  "río",
  "riqueza",
  "risa",
  "ritmo",
  "rito",
  "rizo",
  "roble",
  "roce",
  "rociar",
  "rodar",
  "rodeo",
  "rodilla",
  "roer",
  "rojizo",
  "rojo",
  "romero",
  "romper",
  "ron",
  "ronco",
  "ronda",
  "ropa",
  "ropero",
  "rosa",
  "rosca",
  "rostro",
  "rotar",
  "rubí",
  "rubor",
  "rudo",
  "rueda",
  "rugir",
  "ruido",
  "ruina",
  "ruleta",
  "rulo",
  "rumbo",
  "rumor",
  "ruptura",
  "ruta",
  "rutina",
  "sábado",
  "saber",
  "sabio",
  "sable",
  "sacar",
  "sagaz",
  "sagrado",
  "sala",
  "saldo",
  "salero",
  "salir",
  "salmón",
  "salón",
  "salsa",
  "salto",
  "salud",
  "salvar",
  "samba",
  "sanción",
  "sandía",
  "sanear",
  "sangre",
  "sanidad",
  "sano",
  "santo",
  "sapo",
  "saque",
  "sardina",
  "sartén",
  "sastre",
  "satán",
  "sauna",
  "saxofón",
  "sección",
  "seco",
  "secreto",
  "secta",
  "sed",
  "seguir",
  "seis",
  "sello",
  "selva",
  "semana",
  "semilla",
  "senda",
  "sensor",
  "señal",
  "señor",
  "separar",
  "sepia",
  "sequía",
  "ser",
  "serie",
  "sermón",
  "servir",
  "sesenta",
  "sesión",
  "seta",
  "setenta",
  "severo",
  "sexo",
  "sexto",
  "sidra",
  "siesta",
  "siete",
  "siglo",
  "signo",
  "sílaba",
  "silbar",
  "silencio",
  "silla",
  "símbolo",
  "simio",
  "sirena",
  "sistema",
  "sitio",
  "situar",
  "sobre",
  "socio",
  "sodio",
  "sol",
  "solapa",
  "soldado",
  "soledad",
  "sólido",
  "soltar",
  "solución",
  "sombra",
  "sondeo",
  "sonido",
  "sonoro",
  "sonrisa",
  "sopa",
  "soplar",
  "soporte",
  "sordo",
  "sorpresa",
  "sorteo",
  "sostén",
  "sótano",
  "suave",
  "subir",
  "suceso",
  "sudor",
  "suegra",
  "suelo",
  "sueño",
  "suerte",
  "sufrir",
  "sujeto",
  "sultán",
  "sumar",
  "superar",
  "suplir",
  "suponer",
  "supremo",
  "sur",
  "surco",
  "sureño",
  "surgir",
  "susto",
  "sutil",
  "tabaco",
  "tabique",
  "tabla",
  "tabú",
  "taco",
  "tacto",
  "tajo",
  "talar",
  "talco",
  "talento",
  "talla",
  "talón",
  "tamaño",
  "tambor",
  "tango",
  "tanque",
  "tapa",
  "tapete",
  "tapia",
  "tapón",
  "taquilla",
  "tarde",
  "tarea",
  "tarifa",
  "tarjeta",
  "tarot",
  "tarro",
  "tarta",
  "tatuaje",
  "tauro",
  "taza",
  "tazón",
  "teatro",
  "techo",
  "tecla",
  "técnica",
  "tejado",
  "tejer",
  "tejido",
  "tela",
  "teléfono",
  "tema",
  "temor",
  "templo",
  "tenaz",
  "tender",
  "tener",
  "tenis",
  "tenso",
  "teoría",
  "terapia",
  "terco",
  "término",
  "ternura",
  "terror",
  "tesis",
  "tesoro",
  "testigo",
  "tetera",
  "texto",
  "tez",
  "tibio",
  "tiburón",
  "tiempo",
  "tienda",
  "tierra",
  "tieso",
  "tigre",
  "tijera",
  "tilde",
  "timbre",
  "tímido",
  "timo",
  "tinta",
  "tío",
  "típico",
  "tipo",
  "tira",
  "tirón",
  "titán",
  "títere",
  "título",
  "tiza",
  "toalla",
  "tobillo",
  "tocar",
  "tocino",
  "todo",
  "toga",
  "toldo",
  "tomar",
  "tono",
  "tonto",
  "topar",
  "tope",
  "toque",
  "tórax",
  "torero",
  "tormenta",
  "torneo",
  "toro",
  "torpedo",
  "torre",
  "torso",
  "tortuga",
  "tos",
  "tosco",
  "toser",
  "tóxico",
  "trabajo",
  "tractor",
  "traer",
  "tráfico",
  "trago",
  "traje",
  "tramo",
  "trance",
  "trato",
  "trauma",
  "trazar",
  "trébol",
  "tregua",
  "treinta",
  "tren",
  "trepar",
  "tres",
  "tribu",
  "trigo",
  "tripa",
  "triste",
  "triunfo",
  "trofeo",
  "trompa",
  "tronco",
  "tropa",
  "trote",
  "trozo",
  "truco",
  "trueno",
  "trufa",
  "tubería",
  "tubo",
  "tuerto",
  "tumba",
  "tumor",
  "túnel",
  "túnica",
  "turbina",
  "turismo",
  "turno",
  "tutor",
  "ubicar",
  "úlcera",
  "umbral",
  "unidad",
  "unir",
  "universo",
  "uno",
  "untar",
  "uña",
  "urbano",
  "urbe",
  "urgente",
  "urna",
  "usar",
  "usuario",
  "útil",
  "utopía",
  "uva",
  "vaca",
  "vacío",
  "vacuna",
  "vagar",
  "vago",
  "vaina",
  "vajilla",
  "vale",
  "válido",
  "valle",
  "valor",
  "válvula",
  "vampiro",
  "vara",
  "variar",
  "varón",
  "vaso",
  "vecino",
  "vector",
  "vehículo",
  "veinte",
  "vejez",
  "vela",
  "velero",
  "veloz",
  "vena",
  "vencer",
  "venda",
  "veneno",
  "vengar",
  "venir",
  "venta",
  "venus",
  "ver",
  "verano",
  "verbo",
  "verde",
  "vereda",
  "verja",
  "verso",
  "verter",
  "vía",
  "viaje",
  "vibrar",
  "vicio",
  "víctima",
  "vida",
  "vídeo",
  "vidrio",
  "viejo",
  "viernes",
  "vigor",
  "vil",
  "villa",
  "vinagre",
  "vino",
  "viñedo",
  "violín",
  "viral",
  "virgo",
  "virtud",
  "visor",
  "víspera",
  "vista",
  "vitamina",
  "viudo",
  "vivaz",
  "vivero",
  "vivir",
  "vivo",
  "volcán",
  "volumen",
  "volver",
  "voraz",
  "votar",
  "voto",
  "voz",
  "vuelo",
  "vulgar",
  "yacer",
  "yate",
  "yegua",
  "yema",
  "yerno",
  "yeso",
  "yodo",
  "yoga",
  "yogur",
  "zafiro",
  "zanja",
  "zapato",
  "zarza",
  "zona",
  "zorro",
  "zumo",
  "zurdo"
], vB = [
  "あいこくしん",
  "あいさつ",
  "あいだ",
  "あおぞら",
  "あかちゃん",
  "あきる",
  "あけがた",
  "あける",
  "あこがれる",
  "あさい",
  "あさひ",
  "あしあと",
  "あじわう",
  "あずかる",
  "あずき",
  "あそぶ",
  "あたえる",
  "あたためる",
  "あたりまえ",
  "あたる",
  "あつい",
  "あつかう",
  "あっしゅく",
  "あつまり",
  "あつめる",
  "あてな",
  "あてはまる",
  "あひる",
  "あぶら",
  "あぶる",
  "あふれる",
  "あまい",
  "あまど",
  "あまやかす",
  "あまり",
  "あみもの",
  "あめりか",
  "あやまる",
  "あゆむ",
  "あらいぐま",
  "あらし",
  "あらすじ",
  "あらためる",
  "あらゆる",
  "あらわす",
  "ありがとう",
  "あわせる",
  "あわてる",
  "あんい",
  "あんがい",
  "あんこ",
  "あんぜん",
  "あんてい",
  "あんない",
  "あんまり",
  "いいだす",
  "いおん",
  "いがい",
  "いがく",
  "いきおい",
  "いきなり",
  "いきもの",
  "いきる",
  "いくじ",
  "いくぶん",
  "いけばな",
  "いけん",
  "いこう",
  "いこく",
  "いこつ",
  "いさましい",
  "いさん",
  "いしき",
  "いじゅう",
  "いじょう",
  "いじわる",
  "いずみ",
  "いずれ",
  "いせい",
  "いせえび",
  "いせかい",
  "いせき",
  "いぜん",
  "いそうろう",
  "いそがしい",
  "いだい",
  "いだく",
  "いたずら",
  "いたみ",
  "いたりあ",
  "いちおう",
  "いちじ",
  "いちど",
  "いちば",
  "いちぶ",
  "いちりゅう",
  "いつか",
  "いっしゅん",
  "いっせい",
  "いっそう",
  "いったん",
  "いっち",
  "いってい",
  "いっぽう",
  "いてざ",
  "いてん",
  "いどう",
  "いとこ",
  "いない",
  "いなか",
  "いねむり",
  "いのち",
  "いのる",
  "いはつ",
  "いばる",
  "いはん",
  "いびき",
  "いひん",
  "いふく",
  "いへん",
  "いほう",
  "いみん",
  "いもうと",
  "いもたれ",
  "いもり",
  "いやがる",
  "いやす",
  "いよかん",
  "いよく",
  "いらい",
  "いらすと",
  "いりぐち",
  "いりょう",
  "いれい",
  "いれもの",
  "いれる",
  "いろえんぴつ",
  "いわい",
  "いわう",
  "いわかん",
  "いわば",
  "いわゆる",
  "いんげんまめ",
  "いんさつ",
  "いんしょう",
  "いんよう",
  "うえき",
  "うえる",
  "うおざ",
  "うがい",
  "うかぶ",
  "うかべる",
  "うきわ",
  "うくらいな",
  "うくれれ",
  "うけたまわる",
  "うけつけ",
  "うけとる",
  "うけもつ",
  "うける",
  "うごかす",
  "うごく",
  "うこん",
  "うさぎ",
  "うしなう",
  "うしろがみ",
  "うすい",
  "うすぎ",
  "うすぐらい",
  "うすめる",
  "うせつ",
  "うちあわせ",
  "うちがわ",
  "うちき",
  "うちゅう",
  "うっかり",
  "うつくしい",
  "うったえる",
  "うつる",
  "うどん",
  "うなぎ",
  "うなじ",
  "うなずく",
  "うなる",
  "うねる",
  "うのう",
  "うぶげ",
  "うぶごえ",
  "うまれる",
  "うめる",
  "うもう",
  "うやまう",
  "うよく",
  "うらがえす",
  "うらぐち",
  "うらない",
  "うりあげ",
  "うりきれ",
  "うるさい",
  "うれしい",
  "うれゆき",
  "うれる",
  "うろこ",
  "うわき",
  "うわさ",
  "うんこう",
  "うんちん",
  "うんてん",
  "うんどう",
  "えいえん",
  "えいが",
  "えいきょう",
  "えいご",
  "えいせい",
  "えいぶん",
  "えいよう",
  "えいわ",
  "えおり",
  "えがお",
  "えがく",
  "えきたい",
  "えくせる",
  "えしゃく",
  "えすて",
  "えつらん",
  "えのぐ",
  "えほうまき",
  "えほん",
  "えまき",
  "えもじ",
  "えもの",
  "えらい",
  "えらぶ",
  "えりあ",
  "えんえん",
  "えんかい",
  "えんぎ",
  "えんげき",
  "えんしゅう",
  "えんぜつ",
  "えんそく",
  "えんちょう",
  "えんとつ",
  "おいかける",
  "おいこす",
  "おいしい",
  "おいつく",
  "おうえん",
  "おうさま",
  "おうじ",
  "おうせつ",
  "おうたい",
  "おうふく",
  "おうべい",
  "おうよう",
  "おえる",
  "おおい",
  "おおう",
  "おおどおり",
  "おおや",
  "おおよそ",
  "おかえり",
  "おかず",
  "おがむ",
  "おかわり",
  "おぎなう",
  "おきる",
  "おくさま",
  "おくじょう",
  "おくりがな",
  "おくる",
  "おくれる",
  "おこす",
  "おこなう",
  "おこる",
  "おさえる",
  "おさない",
  "おさめる",
  "おしいれ",
  "おしえる",
  "おじぎ",
  "おじさん",
  "おしゃれ",
  "おそらく",
  "おそわる",
  "おたがい",
  "おたく",
  "おだやか",
  "おちつく",
  "おっと",
  "おつり",
  "おでかけ",
  "おとしもの",
  "おとなしい",
  "おどり",
  "おどろかす",
  "おばさん",
  "おまいり",
  "おめでとう",
  "おもいで",
  "おもう",
  "おもたい",
  "おもちゃ",
  "おやつ",
  "おやゆび",
  "およぼす",
  "おらんだ",
  "おろす",
  "おんがく",
  "おんけい",
  "おんしゃ",
  "おんせん",
  "おんだん",
  "おんちゅう",
  "おんどけい",
  "かあつ",
  "かいが",
  "がいき",
  "がいけん",
  "がいこう",
  "かいさつ",
  "かいしゃ",
  "かいすいよく",
  "かいぜん",
  "かいぞうど",
  "かいつう",
  "かいてん",
  "かいとう",
  "かいふく",
  "がいへき",
  "かいほう",
  "かいよう",
  "がいらい",
  "かいわ",
  "かえる",
  "かおり",
  "かかえる",
  "かがく",
  "かがし",
  "かがみ",
  "かくご",
  "かくとく",
  "かざる",
  "がぞう",
  "かたい",
  "かたち",
  "がちょう",
  "がっきゅう",
  "がっこう",
  "がっさん",
  "がっしょう",
  "かなざわし",
  "かのう",
  "がはく",
  "かぶか",
  "かほう",
  "かほご",
  "かまう",
  "かまぼこ",
  "かめれおん",
  "かゆい",
  "かようび",
  "からい",
  "かるい",
  "かろう",
  "かわく",
  "かわら",
  "がんか",
  "かんけい",
  "かんこう",
  "かんしゃ",
  "かんそう",
  "かんたん",
  "かんち",
  "がんばる",
  "きあい",
  "きあつ",
  "きいろ",
  "ぎいん",
  "きうい",
  "きうん",
  "きえる",
  "きおう",
  "きおく",
  "きおち",
  "きおん",
  "きかい",
  "きかく",
  "きかんしゃ",
  "ききて",
  "きくばり",
  "きくらげ",
  "きけんせい",
  "きこう",
  "きこえる",
  "きこく",
  "きさい",
  "きさく",
  "きさま",
  "きさらぎ",
  "ぎじかがく",
  "ぎしき",
  "ぎじたいけん",
  "ぎじにってい",
  "ぎじゅつしゃ",
  "きすう",
  "きせい",
  "きせき",
  "きせつ",
  "きそう",
  "きぞく",
  "きぞん",
  "きたえる",
  "きちょう",
  "きつえん",
  "ぎっちり",
  "きつつき",
  "きつね",
  "きてい",
  "きどう",
  "きどく",
  "きない",
  "きなが",
  "きなこ",
  "きぬごし",
  "きねん",
  "きのう",
  "きのした",
  "きはく",
  "きびしい",
  "きひん",
  "きふく",
  "きぶん",
  "きぼう",
  "きほん",
  "きまる",
  "きみつ",
  "きむずかしい",
  "きめる",
  "きもだめし",
  "きもち",
  "きもの",
  "きゃく",
  "きやく",
  "ぎゅうにく",
  "きよう",
  "きょうりゅう",
  "きらい",
  "きらく",
  "きりん",
  "きれい",
  "きれつ",
  "きろく",
  "ぎろん",
  "きわめる",
  "ぎんいろ",
  "きんかくじ",
  "きんじょ",
  "きんようび",
  "ぐあい",
  "くいず",
  "くうかん",
  "くうき",
  "くうぐん",
  "くうこう",
  "ぐうせい",
  "くうそう",
  "ぐうたら",
  "くうふく",
  "くうぼ",
  "くかん",
  "くきょう",
  "くげん",
  "ぐこう",
  "くさい",
  "くさき",
  "くさばな",
  "くさる",
  "くしゃみ",
  "くしょう",
  "くすのき",
  "くすりゆび",
  "くせげ",
  "くせん",
  "ぐたいてき",
  "くださる",
  "くたびれる",
  "くちこみ",
  "くちさき",
  "くつした",
  "ぐっすり",
  "くつろぐ",
  "くとうてん",
  "くどく",
  "くなん",
  "くねくね",
  "くのう",
  "くふう",
  "くみあわせ",
  "くみたてる",
  "くめる",
  "くやくしょ",
  "くらす",
  "くらべる",
  "くるま",
  "くれる",
  "くろう",
  "くわしい",
  "ぐんかん",
  "ぐんしょく",
  "ぐんたい",
  "ぐんて",
  "けあな",
  "けいかく",
  "けいけん",
  "けいこ",
  "けいさつ",
  "げいじゅつ",
  "けいたい",
  "げいのうじん",
  "けいれき",
  "けいろ",
  "けおとす",
  "けおりもの",
  "げきか",
  "げきげん",
  "げきだん",
  "げきちん",
  "げきとつ",
  "げきは",
  "げきやく",
  "げこう",
  "げこくじょう",
  "げざい",
  "けさき",
  "げざん",
  "けしき",
  "けしごむ",
  "けしょう",
  "げすと",
  "けたば",
  "けちゃっぷ",
  "けちらす",
  "けつあつ",
  "けつい",
  "けつえき",
  "けっこん",
  "けつじょ",
  "けっせき",
  "けってい",
  "けつまつ",
  "げつようび",
  "げつれい",
  "けつろん",
  "げどく",
  "けとばす",
  "けとる",
  "けなげ",
  "けなす",
  "けなみ",
  "けぬき",
  "げねつ",
  "けねん",
  "けはい",
  "げひん",
  "けぶかい",
  "げぼく",
  "けまり",
  "けみかる",
  "けむし",
  "けむり",
  "けもの",
  "けらい",
  "けろけろ",
  "けわしい",
  "けんい",
  "けんえつ",
  "けんお",
  "けんか",
  "げんき",
  "けんげん",
  "けんこう",
  "けんさく",
  "けんしゅう",
  "けんすう",
  "げんそう",
  "けんちく",
  "けんてい",
  "けんとう",
  "けんない",
  "けんにん",
  "げんぶつ",
  "けんま",
  "けんみん",
  "けんめい",
  "けんらん",
  "けんり",
  "こあくま",
  "こいぬ",
  "こいびと",
  "ごうい",
  "こうえん",
  "こうおん",
  "こうかん",
  "ごうきゅう",
  "ごうけい",
  "こうこう",
  "こうさい",
  "こうじ",
  "こうすい",
  "ごうせい",
  "こうそく",
  "こうたい",
  "こうちゃ",
  "こうつう",
  "こうてい",
  "こうどう",
  "こうない",
  "こうはい",
  "ごうほう",
  "ごうまん",
  "こうもく",
  "こうりつ",
  "こえる",
  "こおり",
  "ごかい",
  "ごがつ",
  "ごかん",
  "こくご",
  "こくさい",
  "こくとう",
  "こくない",
  "こくはく",
  "こぐま",
  "こけい",
  "こける",
  "ここのか",
  "こころ",
  "こさめ",
  "こしつ",
  "こすう",
  "こせい",
  "こせき",
  "こぜん",
  "こそだて",
  "こたい",
  "こたえる",
  "こたつ",
  "こちょう",
  "こっか",
  "こつこつ",
  "こつばん",
  "こつぶ",
  "こてい",
  "こてん",
  "ことがら",
  "ことし",
  "ことば",
  "ことり",
  "こなごな",
  "こねこね",
  "このまま",
  "このみ",
  "このよ",
  "ごはん",
  "こひつじ",
  "こふう",
  "こふん",
  "こぼれる",
  "ごまあぶら",
  "こまかい",
  "ごますり",
  "こまつな",
  "こまる",
  "こむぎこ",
  "こもじ",
  "こもち",
  "こもの",
  "こもん",
  "こやく",
  "こやま",
  "こゆう",
  "こゆび",
  "こよい",
  "こよう",
  "こりる",
  "これくしょん",
  "ころっけ",
  "こわもて",
  "こわれる",
  "こんいん",
  "こんかい",
  "こんき",
  "こんしゅう",
  "こんすい",
  "こんだて",
  "こんとん",
  "こんなん",
  "こんびに",
  "こんぽん",
  "こんまけ",
  "こんや",
  "こんれい",
  "こんわく",
  "ざいえき",
  "さいかい",
  "さいきん",
  "ざいげん",
  "ざいこ",
  "さいしょ",
  "さいせい",
  "ざいたく",
  "ざいちゅう",
  "さいてき",
  "ざいりょう",
  "さうな",
  "さかいし",
  "さがす",
  "さかな",
  "さかみち",
  "さがる",
  "さぎょう",
  "さくし",
  "さくひん",
  "さくら",
  "さこく",
  "さこつ",
  "さずかる",
  "ざせき",
  "さたん",
  "さつえい",
  "ざつおん",
  "ざっか",
  "ざつがく",
  "さっきょく",
  "ざっし",
  "さつじん",
  "ざっそう",
  "さつたば",
  "さつまいも",
  "さてい",
  "さといも",
  "さとう",
  "さとおや",
  "さとし",
  "さとる",
  "さのう",
  "さばく",
  "さびしい",
  "さべつ",
  "さほう",
  "さほど",
  "さます",
  "さみしい",
  "さみだれ",
  "さむけ",
  "さめる",
  "さやえんどう",
  "さゆう",
  "さよう",
  "さよく",
  "さらだ",
  "ざるそば",
  "さわやか",
  "さわる",
  "さんいん",
  "さんか",
  "さんきゃく",
  "さんこう",
  "さんさい",
  "ざんしょ",
  "さんすう",
  "さんせい",
  "さんそ",
  "さんち",
  "さんま",
  "さんみ",
  "さんらん",
  "しあい",
  "しあげ",
  "しあさって",
  "しあわせ",
  "しいく",
  "しいん",
  "しうち",
  "しえい",
  "しおけ",
  "しかい",
  "しかく",
  "じかん",
  "しごと",
  "しすう",
  "じだい",
  "したうけ",
  "したぎ",
  "したて",
  "したみ",
  "しちょう",
  "しちりん",
  "しっかり",
  "しつじ",
  "しつもん",
  "してい",
  "してき",
  "してつ",
  "じてん",
  "じどう",
  "しなぎれ",
  "しなもの",
  "しなん",
  "しねま",
  "しねん",
  "しのぐ",
  "しのぶ",
  "しはい",
  "しばかり",
  "しはつ",
  "しはらい",
  "しはん",
  "しひょう",
  "しふく",
  "じぶん",
  "しへい",
  "しほう",
  "しほん",
  "しまう",
  "しまる",
  "しみん",
  "しむける",
  "じむしょ",
  "しめい",
  "しめる",
  "しもん",
  "しゃいん",
  "しゃうん",
  "しゃおん",
  "じゃがいも",
  "しやくしょ",
  "しゃくほう",
  "しゃけん",
  "しゃこ",
  "しゃざい",
  "しゃしん",
  "しゃせん",
  "しゃそう",
  "しゃたい",
  "しゃちょう",
  "しゃっきん",
  "じゃま",
  "しゃりん",
  "しゃれい",
  "じゆう",
  "じゅうしょ",
  "しゅくはく",
  "じゅしん",
  "しゅっせき",
  "しゅみ",
  "しゅらば",
  "じゅんばん",
  "しょうかい",
  "しょくたく",
  "しょっけん",
  "しょどう",
  "しょもつ",
  "しらせる",
  "しらべる",
  "しんか",
  "しんこう",
  "じんじゃ",
  "しんせいじ",
  "しんちく",
  "しんりん",
  "すあげ",
  "すあし",
  "すあな",
  "ずあん",
  "すいえい",
  "すいか",
  "すいとう",
  "ずいぶん",
  "すいようび",
  "すうがく",
  "すうじつ",
  "すうせん",
  "すおどり",
  "すきま",
  "すくう",
  "すくない",
  "すける",
  "すごい",
  "すこし",
  "ずさん",
  "すずしい",
  "すすむ",
  "すすめる",
  "すっかり",
  "ずっしり",
  "ずっと",
  "すてき",
  "すてる",
  "すねる",
  "すのこ",
  "すはだ",
  "すばらしい",
  "ずひょう",
  "ずぶぬれ",
  "すぶり",
  "すふれ",
  "すべて",
  "すべる",
  "ずほう",
  "すぼん",
  "すまい",
  "すめし",
  "すもう",
  "すやき",
  "すらすら",
  "するめ",
  "すれちがう",
  "すろっと",
  "すわる",
  "すんぜん",
  "すんぽう",
  "せあぶら",
  "せいかつ",
  "せいげん",
  "せいじ",
  "せいよう",
  "せおう",
  "せかいかん",
  "せきにん",
  "せきむ",
  "せきゆ",
  "せきらんうん",
  "せけん",
  "せこう",
  "せすじ",
  "せたい",
  "せたけ",
  "せっかく",
  "せっきゃく",
  "ぜっく",
  "せっけん",
  "せっこつ",
  "せっさたくま",
  "せつぞく",
  "せつだん",
  "せつでん",
  "せっぱん",
  "せつび",
  "せつぶん",
  "せつめい",
  "せつりつ",
  "せなか",
  "せのび",
  "せはば",
  "せびろ",
  "せぼね",
  "せまい",
  "せまる",
  "せめる",
  "せもたれ",
  "せりふ",
  "ぜんあく",
  "せんい",
  "せんえい",
  "せんか",
  "せんきょ",
  "せんく",
  "せんげん",
  "ぜんご",
  "せんさい",
  "せんしゅ",
  "せんすい",
  "せんせい",
  "せんぞ",
  "せんたく",
  "せんちょう",
  "せんてい",
  "せんとう",
  "せんぬき",
  "せんねん",
  "せんぱい",
  "ぜんぶ",
  "ぜんぽう",
  "せんむ",
  "せんめんじょ",
  "せんもん",
  "せんやく",
  "せんゆう",
  "せんよう",
  "ぜんら",
  "ぜんりゃく",
  "せんれい",
  "せんろ",
  "そあく",
  "そいとげる",
  "そいね",
  "そうがんきょう",
  "そうき",
  "そうご",
  "そうしん",
  "そうだん",
  "そうなん",
  "そうび",
  "そうめん",
  "そうり",
  "そえもの",
  "そえん",
  "そがい",
  "そげき",
  "そこう",
  "そこそこ",
  "そざい",
  "そしな",
  "そせい",
  "そせん",
  "そそぐ",
  "そだてる",
  "そつう",
  "そつえん",
  "そっかん",
  "そつぎょう",
  "そっけつ",
  "そっこう",
  "そっせん",
  "そっと",
  "そとがわ",
  "そとづら",
  "そなえる",
  "そなた",
  "そふぼ",
  "そぼく",
  "そぼろ",
  "そまつ",
  "そまる",
  "そむく",
  "そむりえ",
  "そめる",
  "そもそも",
  "そよかぜ",
  "そらまめ",
  "そろう",
  "そんかい",
  "そんけい",
  "そんざい",
  "そんしつ",
  "そんぞく",
  "そんちょう",
  "ぞんび",
  "ぞんぶん",
  "そんみん",
  "たあい",
  "たいいん",
  "たいうん",
  "たいえき",
  "たいおう",
  "だいがく",
  "たいき",
  "たいぐう",
  "たいけん",
  "たいこ",
  "たいざい",
  "だいじょうぶ",
  "だいすき",
  "たいせつ",
  "たいそう",
  "だいたい",
  "たいちょう",
  "たいてい",
  "だいどころ",
  "たいない",
  "たいねつ",
  "たいのう",
  "たいはん",
  "だいひょう",
  "たいふう",
  "たいへん",
  "たいほ",
  "たいまつばな",
  "たいみんぐ",
  "たいむ",
  "たいめん",
  "たいやき",
  "たいよう",
  "たいら",
  "たいりょく",
  "たいる",
  "たいわん",
  "たうえ",
  "たえる",
  "たおす",
  "たおる",
  "たおれる",
  "たかい",
  "たかね",
  "たきび",
  "たくさん",
  "たこく",
  "たこやき",
  "たさい",
  "たしざん",
  "だじゃれ",
  "たすける",
  "たずさわる",
  "たそがれ",
  "たたかう",
  "たたく",
  "ただしい",
  "たたみ",
  "たちばな",
  "だっかい",
  "だっきゃく",
  "だっこ",
  "だっしゅつ",
  "だったい",
  "たてる",
  "たとえる",
  "たなばた",
  "たにん",
  "たぬき",
  "たのしみ",
  "たはつ",
  "たぶん",
  "たべる",
  "たぼう",
  "たまご",
  "たまる",
  "だむる",
  "ためいき",
  "ためす",
  "ためる",
  "たもつ",
  "たやすい",
  "たよる",
  "たらす",
  "たりきほんがん",
  "たりょう",
  "たりる",
  "たると",
  "たれる",
  "たれんと",
  "たろっと",
  "たわむれる",
  "だんあつ",
  "たんい",
  "たんおん",
  "たんか",
  "たんき",
  "たんけん",
  "たんご",
  "たんさん",
  "たんじょうび",
  "だんせい",
  "たんそく",
  "たんたい",
  "だんち",
  "たんてい",
  "たんとう",
  "だんな",
  "たんにん",
  "だんねつ",
  "たんのう",
  "たんぴん",
  "だんぼう",
  "たんまつ",
  "たんめい",
  "だんれつ",
  "だんろ",
  "だんわ",
  "ちあい",
  "ちあん",
  "ちいき",
  "ちいさい",
  "ちえん",
  "ちかい",
  "ちから",
  "ちきゅう",
  "ちきん",
  "ちけいず",
  "ちけん",
  "ちこく",
  "ちさい",
  "ちしき",
  "ちしりょう",
  "ちせい",
  "ちそう",
  "ちたい",
  "ちたん",
  "ちちおや",
  "ちつじょ",
  "ちてき",
  "ちてん",
  "ちぬき",
  "ちぬり",
  "ちのう",
  "ちひょう",
  "ちへいせん",
  "ちほう",
  "ちまた",
  "ちみつ",
  "ちみどろ",
  "ちめいど",
  "ちゃんこなべ",
  "ちゅうい",
  "ちゆりょく",
  "ちょうし",
  "ちょさくけん",
  "ちらし",
  "ちらみ",
  "ちりがみ",
  "ちりょう",
  "ちるど",
  "ちわわ",
  "ちんたい",
  "ちんもく",
  "ついか",
  "ついたち",
  "つうか",
  "つうじょう",
  "つうはん",
  "つうわ",
  "つかう",
  "つかれる",
  "つくね",
  "つくる",
  "つけね",
  "つける",
  "つごう",
  "つたえる",
  "つづく",
  "つつじ",
  "つつむ",
  "つとめる",
  "つながる",
  "つなみ",
  "つねづね",
  "つのる",
  "つぶす",
  "つまらない",
  "つまる",
  "つみき",
  "つめたい",
  "つもり",
  "つもる",
  "つよい",
  "つるぼ",
  "つるみく",
  "つわもの",
  "つわり",
  "てあし",
  "てあて",
  "てあみ",
  "ていおん",
  "ていか",
  "ていき",
  "ていけい",
  "ていこく",
  "ていさつ",
  "ていし",
  "ていせい",
  "ていたい",
  "ていど",
  "ていねい",
  "ていひょう",
  "ていへん",
  "ていぼう",
  "てうち",
  "ておくれ",
  "てきとう",
  "てくび",
  "でこぼこ",
  "てさぎょう",
  "てさげ",
  "てすり",
  "てそう",
  "てちがい",
  "てちょう",
  "てつがく",
  "てつづき",
  "でっぱ",
  "てつぼう",
  "てつや",
  "でぬかえ",
  "てぬき",
  "てぬぐい",
  "てのひら",
  "てはい",
  "てぶくろ",
  "てふだ",
  "てほどき",
  "てほん",
  "てまえ",
  "てまきずし",
  "てみじか",
  "てみやげ",
  "てらす",
  "てれび",
  "てわけ",
  "てわたし",
  "でんあつ",
  "てんいん",
  "てんかい",
  "てんき",
  "てんぐ",
  "てんけん",
  "てんごく",
  "てんさい",
  "てんし",
  "てんすう",
  "でんち",
  "てんてき",
  "てんとう",
  "てんない",
  "てんぷら",
  "てんぼうだい",
  "てんめつ",
  "てんらんかい",
  "でんりょく",
  "でんわ",
  "どあい",
  "といれ",
  "どうかん",
  "とうきゅう",
  "どうぐ",
  "とうし",
  "とうむぎ",
  "とおい",
  "とおか",
  "とおく",
  "とおす",
  "とおる",
  "とかい",
  "とかす",
  "ときおり",
  "ときどき",
  "とくい",
  "とくしゅう",
  "とくてん",
  "とくに",
  "とくべつ",
  "とけい",
  "とける",
  "とこや",
  "とさか",
  "としょかん",
  "とそう",
  "とたん",
  "とちゅう",
  "とっきゅう",
  "とっくん",
  "とつぜん",
  "とつにゅう",
  "とどける",
  "ととのえる",
  "とない",
  "となえる",
  "となり",
  "とのさま",
  "とばす",
  "どぶがわ",
  "とほう",
  "とまる",
  "とめる",
  "ともだち",
  "ともる",
  "どようび",
  "とらえる",
  "とんかつ",
  "どんぶり",
  "ないかく",
  "ないこう",
  "ないしょ",
  "ないす",
  "ないせん",
  "ないそう",
  "なおす",
  "ながい",
  "なくす",
  "なげる",
  "なこうど",
  "なさけ",
  "なたでここ",
  "なっとう",
  "なつやすみ",
  "ななおし",
  "なにごと",
  "なにもの",
  "なにわ",
  "なのか",
  "なふだ",
  "なまいき",
  "なまえ",
  "なまみ",
  "なみだ",
  "なめらか",
  "なめる",
  "なやむ",
  "ならう",
  "ならび",
  "ならぶ",
  "なれる",
  "なわとび",
  "なわばり",
  "にあう",
  "にいがた",
  "にうけ",
  "におい",
  "にかい",
  "にがて",
  "にきび",
  "にくしみ",
  "にくまん",
  "にげる",
  "にさんかたんそ",
  "にしき",
  "にせもの",
  "にちじょう",
  "にちようび",
  "にっか",
  "にっき",
  "にっけい",
  "にっこう",
  "にっさん",
  "にっしょく",
  "にっすう",
  "にっせき",
  "にってい",
  "になう",
  "にほん",
  "にまめ",
  "にもつ",
  "にやり",
  "にゅういん",
  "にりんしゃ",
  "にわとり",
  "にんい",
  "にんか",
  "にんき",
  "にんげん",
  "にんしき",
  "にんずう",
  "にんそう",
  "にんたい",
  "にんち",
  "にんてい",
  "にんにく",
  "にんぷ",
  "にんまり",
  "にんむ",
  "にんめい",
  "にんよう",
  "ぬいくぎ",
  "ぬかす",
  "ぬぐいとる",
  "ぬぐう",
  "ぬくもり",
  "ぬすむ",
  "ぬまえび",
  "ぬめり",
  "ぬらす",
  "ぬんちゃく",
  "ねあげ",
  "ねいき",
  "ねいる",
  "ねいろ",
  "ねぐせ",
  "ねくたい",
  "ねくら",
  "ねこぜ",
  "ねこむ",
  "ねさげ",
  "ねすごす",
  "ねそべる",
  "ねだん",
  "ねつい",
  "ねっしん",
  "ねつぞう",
  "ねったいぎょ",
  "ねぶそく",
  "ねふだ",
  "ねぼう",
  "ねほりはほり",
  "ねまき",
  "ねまわし",
  "ねみみ",
  "ねむい",
  "ねむたい",
  "ねもと",
  "ねらう",
  "ねわざ",
  "ねんいり",
  "ねんおし",
  "ねんかん",
  "ねんきん",
  "ねんぐ",
  "ねんざ",
  "ねんし",
  "ねんちゃく",
  "ねんど",
  "ねんぴ",
  "ねんぶつ",
  "ねんまつ",
  "ねんりょう",
  "ねんれい",
  "のいず",
  "のおづま",
  "のがす",
  "のきなみ",
  "のこぎり",
  "のこす",
  "のこる",
  "のせる",
  "のぞく",
  "のぞむ",
  "のたまう",
  "のちほど",
  "のっく",
  "のばす",
  "のはら",
  "のべる",
  "のぼる",
  "のみもの",
  "のやま",
  "のらいぬ",
  "のらねこ",
  "のりもの",
  "のりゆき",
  "のれん",
  "のんき",
  "ばあい",
  "はあく",
  "ばあさん",
  "ばいか",
  "ばいく",
  "はいけん",
  "はいご",
  "はいしん",
  "はいすい",
  "はいせん",
  "はいそう",
  "はいち",
  "ばいばい",
  "はいれつ",
  "はえる",
  "はおる",
  "はかい",
  "ばかり",
  "はかる",
  "はくしゅ",
  "はけん",
  "はこぶ",
  "はさみ",
  "はさん",
  "はしご",
  "ばしょ",
  "はしる",
  "はせる",
  "ぱそこん",
  "はそん",
  "はたん",
  "はちみつ",
  "はつおん",
  "はっかく",
  "はづき",
  "はっきり",
  "はっくつ",
  "はっけん",
  "はっこう",
  "はっさん",
  "はっしん",
  "はったつ",
  "はっちゅう",
  "はってん",
  "はっぴょう",
  "はっぽう",
  "はなす",
  "はなび",
  "はにかむ",
  "はぶらし",
  "はみがき",
  "はむかう",
  "はめつ",
  "はやい",
  "はやし",
  "はらう",
  "はろうぃん",
  "はわい",
  "はんい",
  "はんえい",
  "はんおん",
  "はんかく",
  "はんきょう",
  "ばんぐみ",
  "はんこ",
  "はんしゃ",
  "はんすう",
  "はんだん",
  "ぱんち",
  "ぱんつ",
  "はんてい",
  "はんとし",
  "はんのう",
  "はんぱ",
  "はんぶん",
  "はんぺん",
  "はんぼうき",
  "はんめい",
  "はんらん",
  "はんろん",
  "ひいき",
  "ひうん",
  "ひえる",
  "ひかく",
  "ひかり",
  "ひかる",
  "ひかん",
  "ひくい",
  "ひけつ",
  "ひこうき",
  "ひこく",
  "ひさい",
  "ひさしぶり",
  "ひさん",
  "びじゅつかん",
  "ひしょ",
  "ひそか",
  "ひそむ",
  "ひたむき",
  "ひだり",
  "ひたる",
  "ひつぎ",
  "ひっこし",
  "ひっし",
  "ひつじゅひん",
  "ひっす",
  "ひつぜん",
  "ぴったり",
  "ぴっちり",
  "ひつよう",
  "ひてい",
  "ひとごみ",
  "ひなまつり",
  "ひなん",
  "ひねる",
  "ひはん",
  "ひびく",
  "ひひょう",
  "ひほう",
  "ひまわり",
  "ひまん",
  "ひみつ",
  "ひめい",
  "ひめじし",
  "ひやけ",
  "ひやす",
  "ひよう",
  "びょうき",
  "ひらがな",
  "ひらく",
  "ひりつ",
  "ひりょう",
  "ひるま",
  "ひるやすみ",
  "ひれい",
  "ひろい",
  "ひろう",
  "ひろき",
  "ひろゆき",
  "ひんかく",
  "ひんけつ",
  "ひんこん",
  "ひんしゅ",
  "ひんそう",
  "ぴんち",
  "ひんぱん",
  "びんぼう",
  "ふあん",
  "ふいうち",
  "ふうけい",
  "ふうせん",
  "ぷうたろう",
  "ふうとう",
  "ふうふ",
  "ふえる",
  "ふおん",
  "ふかい",
  "ふきん",
  "ふくざつ",
  "ふくぶくろ",
  "ふこう",
  "ふさい",
  "ふしぎ",
  "ふじみ",
  "ふすま",
  "ふせい",
  "ふせぐ",
  "ふそく",
  "ぶたにく",
  "ふたん",
  "ふちょう",
  "ふつう",
  "ふつか",
  "ふっかつ",
  "ふっき",
  "ふっこく",
  "ぶどう",
  "ふとる",
  "ふとん",
  "ふのう",
  "ふはい",
  "ふひょう",
  "ふへん",
  "ふまん",
  "ふみん",
  "ふめつ",
  "ふめん",
  "ふよう",
  "ふりこ",
  "ふりる",
  "ふるい",
  "ふんいき",
  "ぶんがく",
  "ぶんぐ",
  "ふんしつ",
  "ぶんせき",
  "ふんそう",
  "ぶんぽう",
  "へいあん",
  "へいおん",
  "へいがい",
  "へいき",
  "へいげん",
  "へいこう",
  "へいさ",
  "へいしゃ",
  "へいせつ",
  "へいそ",
  "へいたく",
  "へいてん",
  "へいねつ",
  "へいわ",
  "へきが",
  "へこむ",
  "べにいろ",
  "べにしょうが",
  "へらす",
  "へんかん",
  "べんきょう",
  "べんごし",
  "へんさい",
  "へんたい",
  "べんり",
  "ほあん",
  "ほいく",
  "ぼうぎょ",
  "ほうこく",
  "ほうそう",
  "ほうほう",
  "ほうもん",
  "ほうりつ",
  "ほえる",
  "ほおん",
  "ほかん",
  "ほきょう",
  "ぼきん",
  "ほくろ",
  "ほけつ",
  "ほけん",
  "ほこう",
  "ほこる",
  "ほしい",
  "ほしつ",
  "ほしゅ",
  "ほしょう",
  "ほせい",
  "ほそい",
  "ほそく",
  "ほたて",
  "ほたる",
  "ぽちぶくろ",
  "ほっきょく",
  "ほっさ",
  "ほったん",
  "ほとんど",
  "ほめる",
  "ほんい",
  "ほんき",
  "ほんけ",
  "ほんしつ",
  "ほんやく",
  "まいにち",
  "まかい",
  "まかせる",
  "まがる",
  "まける",
  "まこと",
  "まさつ",
  "まじめ",
  "ますく",
  "まぜる",
  "まつり",
  "まとめ",
  "まなぶ",
  "まぬけ",
  "まねく",
  "まほう",
  "まもる",
  "まゆげ",
  "まよう",
  "まろやか",
  "まわす",
  "まわり",
  "まわる",
  "まんが",
  "まんきつ",
  "まんぞく",
  "まんなか",
  "みいら",
  "みうち",
  "みえる",
  "みがく",
  "みかた",
  "みかん",
  "みけん",
  "みこん",
  "みじかい",
  "みすい",
  "みすえる",
  "みせる",
  "みっか",
  "みつかる",
  "みつける",
  "みてい",
  "みとめる",
  "みなと",
  "みなみかさい",
  "みねらる",
  "みのう",
  "みのがす",
  "みほん",
  "みもと",
  "みやげ",
  "みらい",
  "みりょく",
  "みわく",
  "みんか",
  "みんぞく",
  "むいか",
  "むえき",
  "むえん",
  "むかい",
  "むかう",
  "むかえ",
  "むかし",
  "むぎちゃ",
  "むける",
  "むげん",
  "むさぼる",
  "むしあつい",
  "むしば",
  "むじゅん",
  "むしろ",
  "むすう",
  "むすこ",
  "むすぶ",
  "むすめ",
  "むせる",
  "むせん",
  "むちゅう",
  "むなしい",
  "むのう",
  "むやみ",
  "むよう",
  "むらさき",
  "むりょう",
  "むろん",
  "めいあん",
  "めいうん",
  "めいえん",
  "めいかく",
  "めいきょく",
  "めいさい",
  "めいし",
  "めいそう",
  "めいぶつ",
  "めいれい",
  "めいわく",
  "めぐまれる",
  "めざす",
  "めした",
  "めずらしい",
  "めだつ",
  "めまい",
  "めやす",
  "めんきょ",
  "めんせき",
  "めんどう",
  "もうしあげる",
  "もうどうけん",
  "もえる",
  "もくし",
  "もくてき",
  "もくようび",
  "もちろん",
  "もどる",
  "もらう",
  "もんく",
  "もんだい",
  "やおや",
  "やける",
  "やさい",
  "やさしい",
  "やすい",
  "やすたろう",
  "やすみ",
  "やせる",
  "やそう",
  "やたい",
  "やちん",
  "やっと",
  "やっぱり",
  "やぶる",
  "やめる",
  "ややこしい",
  "やよい",
  "やわらかい",
  "ゆうき",
  "ゆうびんきょく",
  "ゆうべ",
  "ゆうめい",
  "ゆけつ",
  "ゆしゅつ",
  "ゆせん",
  "ゆそう",
  "ゆたか",
  "ゆちゃく",
  "ゆでる",
  "ゆにゅう",
  "ゆびわ",
  "ゆらい",
  "ゆれる",
  "ようい",
  "ようか",
  "ようきゅう",
  "ようじ",
  "ようす",
  "ようちえん",
  "よかぜ",
  "よかん",
  "よきん",
  "よくせい",
  "よくぼう",
  "よけい",
  "よごれる",
  "よさん",
  "よしゅう",
  "よそう",
  "よそく",
  "よっか",
  "よてい",
  "よどがわく",
  "よねつ",
  "よやく",
  "よゆう",
  "よろこぶ",
  "よろしい",
  "らいう",
  "らくがき",
  "らくご",
  "らくさつ",
  "らくだ",
  "らしんばん",
  "らせん",
  "らぞく",
  "らたい",
  "らっか",
  "られつ",
  "りえき",
  "りかい",
  "りきさく",
  "りきせつ",
  "りくぐん",
  "りくつ",
  "りけん",
  "りこう",
  "りせい",
  "りそう",
  "りそく",
  "りてん",
  "りねん",
  "りゆう",
  "りゅうがく",
  "りよう",
  "りょうり",
  "りょかん",
  "りょくちゃ",
  "りょこう",
  "りりく",
  "りれき",
  "りろん",
  "りんご",
  "るいけい",
  "るいさい",
  "るいじ",
  "るいせき",
  "るすばん",
  "るりがわら",
  "れいかん",
  "れいぎ",
  "れいせい",
  "れいぞうこ",
  "れいとう",
  "れいぼう",
  "れきし",
  "れきだい",
  "れんあい",
  "れんけい",
  "れんこん",
  "れんさい",
  "れんしゅう",
  "れんぞく",
  "れんらく",
  "ろうか",
  "ろうご",
  "ろうじん",
  "ろうそく",
  "ろくが",
  "ろこつ",
  "ろじうら",
  "ろしゅつ",
  "ろせん",
  "ろてん",
  "ろめん",
  "ろれつ",
  "ろんぎ",
  "ろんぱ",
  "ろんぶん",
  "ろんり",
  "わかす",
  "わかめ",
  "わかやま",
  "わかれる",
  "わしつ",
  "わじまし",
  "わすれもの",
  "わらう",
  "われる"
], xB = [
  "abacate",
  "abaixo",
  "abalar",
  "abater",
  "abduzir",
  "abelha",
  "aberto",
  "abismo",
  "abotoar",
  "abranger",
  "abreviar",
  "abrigar",
  "abrupto",
  "absinto",
  "absoluto",
  "absurdo",
  "abutre",
  "acabado",
  "acalmar",
  "acampar",
  "acanhar",
  "acaso",
  "aceitar",
  "acelerar",
  "acenar",
  "acervo",
  "acessar",
  "acetona",
  "achatar",
  "acidez",
  "acima",
  "acionado",
  "acirrar",
  "aclamar",
  "aclive",
  "acolhida",
  "acomodar",
  "acoplar",
  "acordar",
  "acumular",
  "acusador",
  "adaptar",
  "adega",
  "adentro",
  "adepto",
  "adequar",
  "aderente",
  "adesivo",
  "adeus",
  "adiante",
  "aditivo",
  "adjetivo",
  "adjunto",
  "admirar",
  "adorar",
  "adquirir",
  "adubo",
  "adverso",
  "advogado",
  "aeronave",
  "afastar",
  "aferir",
  "afetivo",
  "afinador",
  "afivelar",
  "aflito",
  "afluente",
  "afrontar",
  "agachar",
  "agarrar",
  "agasalho",
  "agenciar",
  "agilizar",
  "agiota",
  "agitado",
  "agora",
  "agradar",
  "agreste",
  "agrupar",
  "aguardar",
  "agulha",
  "ajoelhar",
  "ajudar",
  "ajustar",
  "alameda",
  "alarme",
  "alastrar",
  "alavanca",
  "albergue",
  "albino",
  "alcatra",
  "aldeia",
  "alecrim",
  "alegria",
  "alertar",
  "alface",
  "alfinete",
  "algum",
  "alheio",
  "aliar",
  "alicate",
  "alienar",
  "alinhar",
  "aliviar",
  "almofada",
  "alocar",
  "alpiste",
  "alterar",
  "altitude",
  "alucinar",
  "alugar",
  "aluno",
  "alusivo",
  "alvo",
  "amaciar",
  "amador",
  "amarelo",
  "amassar",
  "ambas",
  "ambiente",
  "ameixa",
  "amenizar",
  "amido",
  "amistoso",
  "amizade",
  "amolador",
  "amontoar",
  "amoroso",
  "amostra",
  "amparar",
  "ampliar",
  "ampola",
  "anagrama",
  "analisar",
  "anarquia",
  "anatomia",
  "andaime",
  "anel",
  "anexo",
  "angular",
  "animar",
  "anjo",
  "anomalia",
  "anotado",
  "ansioso",
  "anterior",
  "anuidade",
  "anunciar",
  "anzol",
  "apagador",
  "apalpar",
  "apanhado",
  "apego",
  "apelido",
  "apertada",
  "apesar",
  "apetite",
  "apito",
  "aplauso",
  "aplicada",
  "apoio",
  "apontar",
  "aposta",
  "aprendiz",
  "aprovar",
  "aquecer",
  "arame",
  "aranha",
  "arara",
  "arcada",
  "ardente",
  "areia",
  "arejar",
  "arenito",
  "aresta",
  "argiloso",
  "argola",
  "arma",
  "arquivo",
  "arraial",
  "arrebate",
  "arriscar",
  "arroba",
  "arrumar",
  "arsenal",
  "arterial",
  "artigo",
  "arvoredo",
  "asfaltar",
  "asilado",
  "aspirar",
  "assador",
  "assinar",
  "assoalho",
  "assunto",
  "astral",
  "atacado",
  "atadura",
  "atalho",
  "atarefar",
  "atear",
  "atender",
  "aterro",
  "ateu",
  "atingir",
  "atirador",
  "ativo",
  "atoleiro",
  "atracar",
  "atrevido",
  "atriz",
  "atual",
  "atum",
  "auditor",
  "aumentar",
  "aura",
  "aurora",
  "autismo",
  "autoria",
  "autuar",
  "avaliar",
  "avante",
  "avaria",
  "avental",
  "avesso",
  "aviador",
  "avisar",
  "avulso",
  "axila",
  "azarar",
  "azedo",
  "azeite",
  "azulejo",
  "babar",
  "babosa",
  "bacalhau",
  "bacharel",
  "bacia",
  "bagagem",
  "baiano",
  "bailar",
  "baioneta",
  "bairro",
  "baixista",
  "bajular",
  "baleia",
  "baliza",
  "balsa",
  "banal",
  "bandeira",
  "banho",
  "banir",
  "banquete",
  "barato",
  "barbado",
  "baronesa",
  "barraca",
  "barulho",
  "baseado",
  "bastante",
  "batata",
  "batedor",
  "batida",
  "batom",
  "batucar",
  "baunilha",
  "beber",
  "beijo",
  "beirada",
  "beisebol",
  "beldade",
  "beleza",
  "belga",
  "beliscar",
  "bendito",
  "bengala",
  "benzer",
  "berimbau",
  "berlinda",
  "berro",
  "besouro",
  "bexiga",
  "bezerro",
  "bico",
  "bicudo",
  "bienal",
  "bifocal",
  "bifurcar",
  "bigorna",
  "bilhete",
  "bimestre",
  "bimotor",
  "biologia",
  "biombo",
  "biosfera",
  "bipolar",
  "birrento",
  "biscoito",
  "bisneto",
  "bispo",
  "bissexto",
  "bitola",
  "bizarro",
  "blindado",
  "bloco",
  "bloquear",
  "boato",
  "bobagem",
  "bocado",
  "bocejo",
  "bochecha",
  "boicotar",
  "bolada",
  "boletim",
  "bolha",
  "bolo",
  "bombeiro",
  "bonde",
  "boneco",
  "bonita",
  "borbulha",
  "borda",
  "boreal",
  "borracha",
  "bovino",
  "boxeador",
  "branco",
  "brasa",
  "braveza",
  "breu",
  "briga",
  "brilho",
  "brincar",
  "broa",
  "brochura",
  "bronzear",
  "broto",
  "bruxo",
  "bucha",
  "budismo",
  "bufar",
  "bule",
  "buraco",
  "busca",
  "busto",
  "buzina",
  "cabana",
  "cabelo",
  "cabide",
  "cabo",
  "cabrito",
  "cacau",
  "cacetada",
  "cachorro",
  "cacique",
  "cadastro",
  "cadeado",
  "cafezal",
  "caiaque",
  "caipira",
  "caixote",
  "cajado",
  "caju",
  "calafrio",
  "calcular",
  "caldeira",
  "calibrar",
  "calmante",
  "calota",
  "camada",
  "cambista",
  "camisa",
  "camomila",
  "campanha",
  "camuflar",
  "canavial",
  "cancelar",
  "caneta",
  "canguru",
  "canhoto",
  "canivete",
  "canoa",
  "cansado",
  "cantar",
  "canudo",
  "capacho",
  "capela",
  "capinar",
  "capotar",
  "capricho",
  "captador",
  "capuz",
  "caracol",
  "carbono",
  "cardeal",
  "careca",
  "carimbar",
  "carneiro",
  "carpete",
  "carreira",
  "cartaz",
  "carvalho",
  "casaco",
  "casca",
  "casebre",
  "castelo",
  "casulo",
  "catarata",
  "cativar",
  "caule",
  "causador",
  "cautelar",
  "cavalo",
  "caverna",
  "cebola",
  "cedilha",
  "cegonha",
  "celebrar",
  "celular",
  "cenoura",
  "censo",
  "centeio",
  "cercar",
  "cerrado",
  "certeiro",
  "cerveja",
  "cetim",
  "cevada",
  "chacota",
  "chaleira",
  "chamado",
  "chapada",
  "charme",
  "chatice",
  "chave",
  "chefe",
  "chegada",
  "cheiro",
  "cheque",
  "chicote",
  "chifre",
  "chinelo",
  "chocalho",
  "chover",
  "chumbo",
  "chutar",
  "chuva",
  "cicatriz",
  "ciclone",
  "cidade",
  "cidreira",
  "ciente",
  "cigana",
  "cimento",
  "cinto",
  "cinza",
  "ciranda",
  "circuito",
  "cirurgia",
  "citar",
  "clareza",
  "clero",
  "clicar",
  "clone",
  "clube",
  "coado",
  "coagir",
  "cobaia",
  "cobertor",
  "cobrar",
  "cocada",
  "coelho",
  "coentro",
  "coeso",
  "cogumelo",
  "coibir",
  "coifa",
  "coiote",
  "colar",
  "coleira",
  "colher",
  "colidir",
  "colmeia",
  "colono",
  "coluna",
  "comando",
  "combinar",
  "comentar",
  "comitiva",
  "comover",
  "complexo",
  "comum",
  "concha",
  "condor",
  "conectar",
  "confuso",
  "congelar",
  "conhecer",
  "conjugar",
  "consumir",
  "contrato",
  "convite",
  "cooperar",
  "copeiro",
  "copiador",
  "copo",
  "coquetel",
  "coragem",
  "cordial",
  "corneta",
  "coronha",
  "corporal",
  "correio",
  "cortejo",
  "coruja",
  "corvo",
  "cosseno",
  "costela",
  "cotonete",
  "couro",
  "couve",
  "covil",
  "cozinha",
  "cratera",
  "cravo",
  "creche",
  "credor",
  "creme",
  "crer",
  "crespo",
  "criada",
  "criminal",
  "crioulo",
  "crise",
  "criticar",
  "crosta",
  "crua",
  "cruzeiro",
  "cubano",
  "cueca",
  "cuidado",
  "cujo",
  "culatra",
  "culminar",
  "culpar",
  "cultura",
  "cumprir",
  "cunhado",
  "cupido",
  "curativo",
  "curral",
  "cursar",
  "curto",
  "cuspir",
  "custear",
  "cutelo",
  "damasco",
  "datar",
  "debater",
  "debitar",
  "deboche",
  "debulhar",
  "decalque",
  "decimal",
  "declive",
  "decote",
  "decretar",
  "dedal",
  "dedicado",
  "deduzir",
  "defesa",
  "defumar",
  "degelo",
  "degrau",
  "degustar",
  "deitado",
  "deixar",
  "delator",
  "delegado",
  "delinear",
  "delonga",
  "demanda",
  "demitir",
  "demolido",
  "dentista",
  "depenado",
  "depilar",
  "depois",
  "depressa",
  "depurar",
  "deriva",
  "derramar",
  "desafio",
  "desbotar",
  "descanso",
  "desenho",
  "desfiado",
  "desgaste",
  "desigual",
  "deslize",
  "desmamar",
  "desova",
  "despesa",
  "destaque",
  "desviar",
  "detalhar",
  "detentor",
  "detonar",
  "detrito",
  "deusa",
  "dever",
  "devido",
  "devotado",
  "dezena",
  "diagrama",
  "dialeto",
  "didata",
  "difuso",
  "digitar",
  "dilatado",
  "diluente",
  "diminuir",
  "dinastia",
  "dinheiro",
  "diocese",
  "direto",
  "discreta",
  "disfarce",
  "disparo",
  "disquete",
  "dissipar",
  "distante",
  "ditador",
  "diurno",
  "diverso",
  "divisor",
  "divulgar",
  "dizer",
  "dobrador",
  "dolorido",
  "domador",
  "dominado",
  "donativo",
  "donzela",
  "dormente",
  "dorsal",
  "dosagem",
  "dourado",
  "doutor",
  "drenagem",
  "drible",
  "drogaria",
  "duelar",
  "duende",
  "dueto",
  "duplo",
  "duquesa",
  "durante",
  "duvidoso",
  "eclodir",
  "ecoar",
  "ecologia",
  "edificar",
  "edital",
  "educado",
  "efeito",
  "efetivar",
  "ejetar",
  "elaborar",
  "eleger",
  "eleitor",
  "elenco",
  "elevador",
  "eliminar",
  "elogiar",
  "embargo",
  "embolado",
  "embrulho",
  "embutido",
  "emenda",
  "emergir",
  "emissor",
  "empatia",
  "empenho",
  "empinado",
  "empolgar",
  "emprego",
  "empurrar",
  "emulador",
  "encaixe",
  "encenado",
  "enchente",
  "encontro",
  "endeusar",
  "endossar",
  "enfaixar",
  "enfeite",
  "enfim",
  "engajado",
  "engenho",
  "englobar",
  "engomado",
  "engraxar",
  "enguia",
  "enjoar",
  "enlatar",
  "enquanto",
  "enraizar",
  "enrolado",
  "enrugar",
  "ensaio",
  "enseada",
  "ensino",
  "ensopado",
  "entanto",
  "enteado",
  "entidade",
  "entortar",
  "entrada",
  "entulho",
  "envergar",
  "enviado",
  "envolver",
  "enxame",
  "enxerto",
  "enxofre",
  "enxuto",
  "epiderme",
  "equipar",
  "ereto",
  "erguido",
  "errata",
  "erva",
  "ervilha",
  "esbanjar",
  "esbelto",
  "escama",
  "escola",
  "escrita",
  "escuta",
  "esfinge",
  "esfolar",
  "esfregar",
  "esfumado",
  "esgrima",
  "esmalte",
  "espanto",
  "espelho",
  "espiga",
  "esponja",
  "espreita",
  "espumar",
  "esquerda",
  "estaca",
  "esteira",
  "esticar",
  "estofado",
  "estrela",
  "estudo",
  "esvaziar",
  "etanol",
  "etiqueta",
  "euforia",
  "europeu",
  "evacuar",
  "evaporar",
  "evasivo",
  "eventual",
  "evidente",
  "evoluir",
  "exagero",
  "exalar",
  "examinar",
  "exato",
  "exausto",
  "excesso",
  "excitar",
  "exclamar",
  "executar",
  "exemplo",
  "exibir",
  "exigente",
  "exonerar",
  "expandir",
  "expelir",
  "expirar",
  "explanar",
  "exposto",
  "expresso",
  "expulsar",
  "externo",
  "extinto",
  "extrato",
  "fabricar",
  "fabuloso",
  "faceta",
  "facial",
  "fada",
  "fadiga",
  "faixa",
  "falar",
  "falta",
  "familiar",
  "fandango",
  "fanfarra",
  "fantoche",
  "fardado",
  "farelo",
  "farinha",
  "farofa",
  "farpa",
  "fartura",
  "fatia",
  "fator",
  "favorita",
  "faxina",
  "fazenda",
  "fechado",
  "feijoada",
  "feirante",
  "felino",
  "feminino",
  "fenda",
  "feno",
  "fera",
  "feriado",
  "ferrugem",
  "ferver",
  "festejar",
  "fetal",
  "feudal",
  "fiapo",
  "fibrose",
  "ficar",
  "ficheiro",
  "figurado",
  "fileira",
  "filho",
  "filme",
  "filtrar",
  "firmeza",
  "fisgada",
  "fissura",
  "fita",
  "fivela",
  "fixador",
  "fixo",
  "flacidez",
  "flamingo",
  "flanela",
  "flechada",
  "flora",
  "flutuar",
  "fluxo",
  "focal",
  "focinho",
  "fofocar",
  "fogo",
  "foguete",
  "foice",
  "folgado",
  "folheto",
  "forjar",
  "formiga",
  "forno",
  "forte",
  "fosco",
  "fossa",
  "fragata",
  "fralda",
  "frango",
  "frasco",
  "fraterno",
  "freira",
  "frente",
  "fretar",
  "frieza",
  "friso",
  "fritura",
  "fronha",
  "frustrar",
  "fruteira",
  "fugir",
  "fulano",
  "fuligem",
  "fundar",
  "fungo",
  "funil",
  "furador",
  "furioso",
  "futebol",
  "gabarito",
  "gabinete",
  "gado",
  "gaiato",
  "gaiola",
  "gaivota",
  "galega",
  "galho",
  "galinha",
  "galocha",
  "ganhar",
  "garagem",
  "garfo",
  "gargalo",
  "garimpo",
  "garoupa",
  "garrafa",
  "gasoduto",
  "gasto",
  "gata",
  "gatilho",
  "gaveta",
  "gazela",
  "gelado",
  "geleia",
  "gelo",
  "gemada",
  "gemer",
  "gemido",
  "generoso",
  "gengiva",
  "genial",
  "genoma",
  "genro",
  "geologia",
  "gerador",
  "germinar",
  "gesso",
  "gestor",
  "ginasta",
  "gincana",
  "gingado",
  "girafa",
  "girino",
  "glacial",
  "glicose",
  "global",
  "glorioso",
  "goela",
  "goiaba",
  "golfe",
  "golpear",
  "gordura",
  "gorjeta",
  "gorro",
  "gostoso",
  "goteira",
  "governar",
  "gracejo",
  "gradual",
  "grafite",
  "gralha",
  "grampo",
  "granada",
  "gratuito",
  "graveto",
  "graxa",
  "grego",
  "grelhar",
  "greve",
  "grilo",
  "grisalho",
  "gritaria",
  "grosso",
  "grotesco",
  "grudado",
  "grunhido",
  "gruta",
  "guache",
  "guarani",
  "guaxinim",
  "guerrear",
  "guiar",
  "guincho",
  "guisado",
  "gula",
  "guloso",
  "guru",
  "habitar",
  "harmonia",
  "haste",
  "haver",
  "hectare",
  "herdar",
  "heresia",
  "hesitar",
  "hiato",
  "hibernar",
  "hidratar",
  "hiena",
  "hino",
  "hipismo",
  "hipnose",
  "hipoteca",
  "hoje",
  "holofote",
  "homem",
  "honesto",
  "honrado",
  "hormonal",
  "hospedar",
  "humorado",
  "iate",
  "ideia",
  "idoso",
  "ignorado",
  "igreja",
  "iguana",
  "ileso",
  "ilha",
  "iludido",
  "iluminar",
  "ilustrar",
  "imagem",
  "imediato",
  "imenso",
  "imersivo",
  "iminente",
  "imitador",
  "imortal",
  "impacto",
  "impedir",
  "implante",
  "impor",
  "imprensa",
  "impune",
  "imunizar",
  "inalador",
  "inapto",
  "inativo",
  "incenso",
  "inchar",
  "incidir",
  "incluir",
  "incolor",
  "indeciso",
  "indireto",
  "indutor",
  "ineficaz",
  "inerente",
  "infantil",
  "infestar",
  "infinito",
  "inflamar",
  "informal",
  "infrator",
  "ingerir",
  "inibido",
  "inicial",
  "inimigo",
  "injetar",
  "inocente",
  "inodoro",
  "inovador",
  "inox",
  "inquieto",
  "inscrito",
  "inseto",
  "insistir",
  "inspetor",
  "instalar",
  "insulto",
  "intacto",
  "integral",
  "intimar",
  "intocado",
  "intriga",
  "invasor",
  "inverno",
  "invicto",
  "invocar",
  "iogurte",
  "iraniano",
  "ironizar",
  "irreal",
  "irritado",
  "isca",
  "isento",
  "isolado",
  "isqueiro",
  "italiano",
  "janeiro",
  "jangada",
  "janta",
  "jararaca",
  "jardim",
  "jarro",
  "jasmim",
  "jato",
  "javali",
  "jazida",
  "jejum",
  "joaninha",
  "joelhada",
  "jogador",
  "joia",
  "jornal",
  "jorrar",
  "jovem",
  "juba",
  "judeu",
  "judoca",
  "juiz",
  "julgador",
  "julho",
  "jurado",
  "jurista",
  "juro",
  "justa",
  "labareda",
  "laboral",
  "lacre",
  "lactante",
  "ladrilho",
  "lagarta",
  "lagoa",
  "laje",
  "lamber",
  "lamentar",
  "laminar",
  "lampejo",
  "lanche",
  "lapidar",
  "lapso",
  "laranja",
  "lareira",
  "largura",
  "lasanha",
  "lastro",
  "lateral",
  "latido",
  "lavanda",
  "lavoura",
  "lavrador",
  "laxante",
  "lazer",
  "lealdade",
  "lebre",
  "legado",
  "legendar",
  "legista",
  "leigo",
  "leiloar",
  "leitura",
  "lembrete",
  "leme",
  "lenhador",
  "lentilha",
  "leoa",
  "lesma",
  "leste",
  "letivo",
  "letreiro",
  "levar",
  "leveza",
  "levitar",
  "liberal",
  "libido",
  "liderar",
  "ligar",
  "ligeiro",
  "limitar",
  "limoeiro",
  "limpador",
  "linda",
  "linear",
  "linhagem",
  "liquidez",
  "listagem",
  "lisura",
  "litoral",
  "livro",
  "lixa",
  "lixeira",
  "locador",
  "locutor",
  "lojista",
  "lombo",
  "lona",
  "longe",
  "lontra",
  "lorde",
  "lotado",
  "loteria",
  "loucura",
  "lousa",
  "louvar",
  "luar",
  "lucidez",
  "lucro",
  "luneta",
  "lustre",
  "lutador",
  "luva",
  "macaco",
  "macete",
  "machado",
  "macio",
  "madeira",
  "madrinha",
  "magnata",
  "magreza",
  "maior",
  "mais",
  "malandro",
  "malha",
  "malote",
  "maluco",
  "mamilo",
  "mamoeiro",
  "mamute",
  "manada",
  "mancha",
  "mandato",
  "manequim",
  "manhoso",
  "manivela",
  "manobrar",
  "mansa",
  "manter",
  "manusear",
  "mapeado",
  "maquinar",
  "marcador",
  "maresia",
  "marfim",
  "margem",
  "marinho",
  "marmita",
  "maroto",
  "marquise",
  "marreco",
  "martelo",
  "marujo",
  "mascote",
  "masmorra",
  "massagem",
  "mastigar",
  "matagal",
  "materno",
  "matinal",
  "matutar",
  "maxilar",
  "medalha",
  "medida",
  "medusa",
  "megafone",
  "meiga",
  "melancia",
  "melhor",
  "membro",
  "memorial",
  "menino",
  "menos",
  "mensagem",
  "mental",
  "merecer",
  "mergulho",
  "mesada",
  "mesclar",
  "mesmo",
  "mesquita",
  "mestre",
  "metade",
  "meteoro",
  "metragem",
  "mexer",
  "mexicano",
  "micro",
  "migalha",
  "migrar",
  "milagre",
  "milenar",
  "milhar",
  "mimado",
  "minerar",
  "minhoca",
  "ministro",
  "minoria",
  "miolo",
  "mirante",
  "mirtilo",
  "misturar",
  "mocidade",
  "moderno",
  "modular",
  "moeda",
  "moer",
  "moinho",
  "moita",
  "moldura",
  "moleza",
  "molho",
  "molinete",
  "molusco",
  "montanha",
  "moqueca",
  "morango",
  "morcego",
  "mordomo",
  "morena",
  "mosaico",
  "mosquete",
  "mostarda",
  "motel",
  "motim",
  "moto",
  "motriz",
  "muda",
  "muito",
  "mulata",
  "mulher",
  "multar",
  "mundial",
  "munido",
  "muralha",
  "murcho",
  "muscular",
  "museu",
  "musical",
  "nacional",
  "nadador",
  "naja",
  "namoro",
  "narina",
  "narrado",
  "nascer",
  "nativa",
  "natureza",
  "navalha",
  "navegar",
  "navio",
  "neblina",
  "nebuloso",
  "negativa",
  "negociar",
  "negrito",
  "nervoso",
  "neta",
  "neural",
  "nevasca",
  "nevoeiro",
  "ninar",
  "ninho",
  "nitidez",
  "nivelar",
  "nobreza",
  "noite",
  "noiva",
  "nomear",
  "nominal",
  "nordeste",
  "nortear",
  "notar",
  "noticiar",
  "noturno",
  "novelo",
  "novilho",
  "novo",
  "nublado",
  "nudez",
  "numeral",
  "nupcial",
  "nutrir",
  "nuvem",
  "obcecado",
  "obedecer",
  "objetivo",
  "obrigado",
  "obscuro",
  "obstetra",
  "obter",
  "obturar",
  "ocidente",
  "ocioso",
  "ocorrer",
  "oculista",
  "ocupado",
  "ofegante",
  "ofensiva",
  "oferenda",
  "oficina",
  "ofuscado",
  "ogiva",
  "olaria",
  "oleoso",
  "olhar",
  "oliveira",
  "ombro",
  "omelete",
  "omisso",
  "omitir",
  "ondulado",
  "oneroso",
  "ontem",
  "opcional",
  "operador",
  "oponente",
  "oportuno",
  "oposto",
  "orar",
  "orbitar",
  "ordem",
  "ordinal",
  "orfanato",
  "orgasmo",
  "orgulho",
  "oriental",
  "origem",
  "oriundo",
  "orla",
  "ortodoxo",
  "orvalho",
  "oscilar",
  "ossada",
  "osso",
  "ostentar",
  "otimismo",
  "ousadia",
  "outono",
  "outubro",
  "ouvido",
  "ovelha",
  "ovular",
  "oxidar",
  "oxigenar",
  "pacato",
  "paciente",
  "pacote",
  "pactuar",
  "padaria",
  "padrinho",
  "pagar",
  "pagode",
  "painel",
  "pairar",
  "paisagem",
  "palavra",
  "palestra",
  "palheta",
  "palito",
  "palmada",
  "palpitar",
  "pancada",
  "panela",
  "panfleto",
  "panqueca",
  "pantanal",
  "papagaio",
  "papelada",
  "papiro",
  "parafina",
  "parcial",
  "pardal",
  "parede",
  "partida",
  "pasmo",
  "passado",
  "pastel",
  "patamar",
  "patente",
  "patinar",
  "patrono",
  "paulada",
  "pausar",
  "peculiar",
  "pedalar",
  "pedestre",
  "pediatra",
  "pedra",
  "pegada",
  "peitoral",
  "peixe",
  "pele",
  "pelicano",
  "penca",
  "pendurar",
  "peneira",
  "penhasco",
  "pensador",
  "pente",
  "perceber",
  "perfeito",
  "pergunta",
  "perito",
  "permitir",
  "perna",
  "perplexo",
  "persiana",
  "pertence",
  "peruca",
  "pescado",
  "pesquisa",
  "pessoa",
  "petiscar",
  "piada",
  "picado",
  "piedade",
  "pigmento",
  "pilastra",
  "pilhado",
  "pilotar",
  "pimenta",
  "pincel",
  "pinguim",
  "pinha",
  "pinote",
  "pintar",
  "pioneiro",
  "pipoca",
  "piquete",
  "piranha",
  "pires",
  "pirueta",
  "piscar",
  "pistola",
  "pitanga",
  "pivete",
  "planta",
  "plaqueta",
  "platina",
  "plebeu",
  "plumagem",
  "pluvial",
  "pneu",
  "poda",
  "poeira",
  "poetisa",
  "polegada",
  "policiar",
  "poluente",
  "polvilho",
  "pomar",
  "pomba",
  "ponderar",
  "pontaria",
  "populoso",
  "porta",
  "possuir",
  "postal",
  "pote",
  "poupar",
  "pouso",
  "povoar",
  "praia",
  "prancha",
  "prato",
  "praxe",
  "prece",
  "predador",
  "prefeito",
  "premiar",
  "prensar",
  "preparar",
  "presilha",
  "pretexto",
  "prevenir",
  "prezar",
  "primata",
  "princesa",
  "prisma",
  "privado",
  "processo",
  "produto",
  "profeta",
  "proibido",
  "projeto",
  "prometer",
  "propagar",
  "prosa",
  "protetor",
  "provador",
  "publicar",
  "pudim",
  "pular",
  "pulmonar",
  "pulseira",
  "punhal",
  "punir",
  "pupilo",
  "pureza",
  "puxador",
  "quadra",
  "quantia",
  "quarto",
  "quase",
  "quebrar",
  "queda",
  "queijo",
  "quente",
  "querido",
  "quimono",
  "quina",
  "quiosque",
  "rabanada",
  "rabisco",
  "rachar",
  "racionar",
  "radial",
  "raiar",
  "rainha",
  "raio",
  "raiva",
  "rajada",
  "ralado",
  "ramal",
  "ranger",
  "ranhura",
  "rapadura",
  "rapel",
  "rapidez",
  "raposa",
  "raquete",
  "raridade",
  "rasante",
  "rascunho",
  "rasgar",
  "raspador",
  "rasteira",
  "rasurar",
  "ratazana",
  "ratoeira",
  "realeza",
  "reanimar",
  "reaver",
  "rebaixar",
  "rebelde",
  "rebolar",
  "recado",
  "recente",
  "recheio",
  "recibo",
  "recordar",
  "recrutar",
  "recuar",
  "rede",
  "redimir",
  "redonda",
  "reduzida",
  "reenvio",
  "refinar",
  "refletir",
  "refogar",
  "refresco",
  "refugiar",
  "regalia",
  "regime",
  "regra",
  "reinado",
  "reitor",
  "rejeitar",
  "relativo",
  "remador",
  "remendo",
  "remorso",
  "renovado",
  "reparo",
  "repelir",
  "repleto",
  "repolho",
  "represa",
  "repudiar",
  "requerer",
  "resenha",
  "resfriar",
  "resgatar",
  "residir",
  "resolver",
  "respeito",
  "ressaca",
  "restante",
  "resumir",
  "retalho",
  "reter",
  "retirar",
  "retomada",
  "retratar",
  "revelar",
  "revisor",
  "revolta",
  "riacho",
  "rica",
  "rigidez",
  "rigoroso",
  "rimar",
  "ringue",
  "risada",
  "risco",
  "risonho",
  "robalo",
  "rochedo",
  "rodada",
  "rodeio",
  "rodovia",
  "roedor",
  "roleta",
  "romano",
  "roncar",
  "rosado",
  "roseira",
  "rosto",
  "rota",
  "roteiro",
  "rotina",
  "rotular",
  "rouco",
  "roupa",
  "roxo",
  "rubro",
  "rugido",
  "rugoso",
  "ruivo",
  "rumo",
  "rupestre",
  "russo",
  "sabor",
  "saciar",
  "sacola",
  "sacudir",
  "sadio",
  "safira",
  "saga",
  "sagrada",
  "saibro",
  "salada",
  "saleiro",
  "salgado",
  "saliva",
  "salpicar",
  "salsicha",
  "saltar",
  "salvador",
  "sambar",
  "samurai",
  "sanar",
  "sanfona",
  "sangue",
  "sanidade",
  "sapato",
  "sarda",
  "sargento",
  "sarjeta",
  "saturar",
  "saudade",
  "saxofone",
  "sazonal",
  "secar",
  "secular",
  "seda",
  "sedento",
  "sediado",
  "sedoso",
  "sedutor",
  "segmento",
  "segredo",
  "segundo",
  "seiva",
  "seleto",
  "selvagem",
  "semanal",
  "semente",
  "senador",
  "senhor",
  "sensual",
  "sentado",
  "separado",
  "sereia",
  "seringa",
  "serra",
  "servo",
  "setembro",
  "setor",
  "sigilo",
  "silhueta",
  "silicone",
  "simetria",
  "simpatia",
  "simular",
  "sinal",
  "sincero",
  "singular",
  "sinopse",
  "sintonia",
  "sirene",
  "siri",
  "situado",
  "soberano",
  "sobra",
  "socorro",
  "sogro",
  "soja",
  "solda",
  "soletrar",
  "solteiro",
  "sombrio",
  "sonata",
  "sondar",
  "sonegar",
  "sonhador",
  "sono",
  "soprano",
  "soquete",
  "sorrir",
  "sorteio",
  "sossego",
  "sotaque",
  "soterrar",
  "sovado",
  "sozinho",
  "suavizar",
  "subida",
  "submerso",
  "subsolo",
  "subtrair",
  "sucata",
  "sucesso",
  "suco",
  "sudeste",
  "sufixo",
  "sugador",
  "sugerir",
  "sujeito",
  "sulfato",
  "sumir",
  "suor",
  "superior",
  "suplicar",
  "suposto",
  "suprimir",
  "surdina",
  "surfista",
  "surpresa",
  "surreal",
  "surtir",
  "suspiro",
  "sustento",
  "tabela",
  "tablete",
  "tabuada",
  "tacho",
  "tagarela",
  "talher",
  "talo",
  "talvez",
  "tamanho",
  "tamborim",
  "tampa",
  "tangente",
  "tanto",
  "tapar",
  "tapioca",
  "tardio",
  "tarefa",
  "tarja",
  "tarraxa",
  "tatuagem",
  "taurino",
  "taxativo",
  "taxista",
  "teatral",
  "tecer",
  "tecido",
  "teclado",
  "tedioso",
  "teia",
  "teimar",
  "telefone",
  "telhado",
  "tempero",
  "tenente",
  "tensor",
  "tentar",
  "termal",
  "terno",
  "terreno",
  "tese",
  "tesoura",
  "testado",
  "teto",
  "textura",
  "texugo",
  "tiara",
  "tigela",
  "tijolo",
  "timbrar",
  "timidez",
  "tingido",
  "tinteiro",
  "tiragem",
  "titular",
  "toalha",
  "tocha",
  "tolerar",
  "tolice",
  "tomada",
  "tomilho",
  "tonel",
  "tontura",
  "topete",
  "tora",
  "torcido",
  "torneio",
  "torque",
  "torrada",
  "torto",
  "tostar",
  "touca",
  "toupeira",
  "toxina",
  "trabalho",
  "tracejar",
  "tradutor",
  "trafegar",
  "trajeto",
  "trama",
  "trancar",
  "trapo",
  "traseiro",
  "tratador",
  "travar",
  "treino",
  "tremer",
  "trepidar",
  "trevo",
  "triagem",
  "tribo",
  "triciclo",
  "tridente",
  "trilogia",
  "trindade",
  "triplo",
  "triturar",
  "triunfal",
  "trocar",
  "trombeta",
  "trova",
  "trunfo",
  "truque",
  "tubular",
  "tucano",
  "tudo",
  "tulipa",
  "tupi",
  "turbo",
  "turma",
  "turquesa",
  "tutelar",
  "tutorial",
  "uivar",
  "umbigo",
  "unha",
  "unidade",
  "uniforme",
  "urologia",
  "urso",
  "urtiga",
  "urubu",
  "usado",
  "usina",
  "usufruir",
  "vacina",
  "vadiar",
  "vagaroso",
  "vaidoso",
  "vala",
  "valente",
  "validade",
  "valores",
  "vantagem",
  "vaqueiro",
  "varanda",
  "vareta",
  "varrer",
  "vascular",
  "vasilha",
  "vassoura",
  "vazar",
  "vazio",
  "veado",
  "vedar",
  "vegetar",
  "veicular",
  "veleiro",
  "velhice",
  "veludo",
  "vencedor",
  "vendaval",
  "venerar",
  "ventre",
  "verbal",
  "verdade",
  "vereador",
  "vergonha",
  "vermelho",
  "verniz",
  "versar",
  "vertente",
  "vespa",
  "vestido",
  "vetorial",
  "viaduto",
  "viagem",
  "viajar",
  "viatura",
  "vibrador",
  "videira",
  "vidraria",
  "viela",
  "viga",
  "vigente",
  "vigiar",
  "vigorar",
  "vilarejo",
  "vinco",
  "vinheta",
  "vinil",
  "violeta",
  "virada",
  "virtude",
  "visitar",
  "visto",
  "vitral",
  "viveiro",
  "vizinho",
  "voador",
  "voar",
  "vogal",
  "volante",
  "voleibol",
  "voltagem",
  "volumoso",
  "vontade",
  "vulto",
  "vuvuzela",
  "xadrez",
  "xarope",
  "xeque",
  "xeretar",
  "xerife",
  "xingar",
  "zangado",
  "zarpar",
  "zebu",
  "zelador",
  "zombar",
  "zoologia",
  "zumbido"
], EB = [
  "abandon",
  "ability",
  "able",
  "about",
  "above",
  "absent",
  "absorb",
  "abstract",
  "absurd",
  "abuse",
  "access",
  "accident",
  "account",
  "accuse",
  "achieve",
  "acid",
  "acoustic",
  "acquire",
  "across",
  "act",
  "action",
  "actor",
  "actress",
  "actual",
  "adapt",
  "add",
  "addict",
  "address",
  "adjust",
  "admit",
  "adult",
  "advance",
  "advice",
  "aerobic",
  "affair",
  "afford",
  "afraid",
  "again",
  "age",
  "agent",
  "agree",
  "ahead",
  "aim",
  "air",
  "airport",
  "aisle",
  "alarm",
  "album",
  "alcohol",
  "alert",
  "alien",
  "all",
  "alley",
  "allow",
  "almost",
  "alone",
  "alpha",
  "already",
  "also",
  "alter",
  "always",
  "amateur",
  "amazing",
  "among",
  "amount",
  "amused",
  "analyst",
  "anchor",
  "ancient",
  "anger",
  "angle",
  "angry",
  "animal",
  "ankle",
  "announce",
  "annual",
  "another",
  "answer",
  "antenna",
  "antique",
  "anxiety",
  "any",
  "apart",
  "apology",
  "appear",
  "apple",
  "approve",
  "april",
  "arch",
  "arctic",
  "area",
  "arena",
  "argue",
  "arm",
  "armed",
  "armor",
  "army",
  "around",
  "arrange",
  "arrest",
  "arrive",
  "arrow",
  "art",
  "artefact",
  "artist",
  "artwork",
  "ask",
  "aspect",
  "assault",
  "asset",
  "assist",
  "assume",
  "asthma",
  "athlete",
  "atom",
  "attack",
  "attend",
  "attitude",
  "attract",
  "auction",
  "audit",
  "august",
  "aunt",
  "author",
  "auto",
  "autumn",
  "average",
  "avocado",
  "avoid",
  "awake",
  "aware",
  "away",
  "awesome",
  "awful",
  "awkward",
  "axis",
  "baby",
  "bachelor",
  "bacon",
  "badge",
  "bag",
  "balance",
  "balcony",
  "ball",
  "bamboo",
  "banana",
  "banner",
  "bar",
  "barely",
  "bargain",
  "barrel",
  "base",
  "basic",
  "basket",
  "battle",
  "beach",
  "bean",
  "beauty",
  "because",
  "become",
  "beef",
  "before",
  "begin",
  "behave",
  "behind",
  "believe",
  "below",
  "belt",
  "bench",
  "benefit",
  "best",
  "betray",
  "better",
  "between",
  "beyond",
  "bicycle",
  "bid",
  "bike",
  "bind",
  "biology",
  "bird",
  "birth",
  "bitter",
  "black",
  "blade",
  "blame",
  "blanket",
  "blast",
  "bleak",
  "bless",
  "blind",
  "blood",
  "blossom",
  "blouse",
  "blue",
  "blur",
  "blush",
  "board",
  "boat",
  "body",
  "boil",
  "bomb",
  "bone",
  "bonus",
  "book",
  "boost",
  "border",
  "boring",
  "borrow",
  "boss",
  "bottom",
  "bounce",
  "box",
  "boy",
  "bracket",
  "brain",
  "brand",
  "brass",
  "brave",
  "bread",
  "breeze",
  "brick",
  "bridge",
  "brief",
  "bright",
  "bring",
  "brisk",
  "broccoli",
  "broken",
  "bronze",
  "broom",
  "brother",
  "brown",
  "brush",
  "bubble",
  "buddy",
  "budget",
  "buffalo",
  "build",
  "bulb",
  "bulk",
  "bullet",
  "bundle",
  "bunker",
  "burden",
  "burger",
  "burst",
  "bus",
  "business",
  "busy",
  "butter",
  "buyer",
  "buzz",
  "cabbage",
  "cabin",
  "cable",
  "cactus",
  "cage",
  "cake",
  "call",
  "calm",
  "camera",
  "camp",
  "can",
  "canal",
  "cancel",
  "candy",
  "cannon",
  "canoe",
  "canvas",
  "canyon",
  "capable",
  "capital",
  "captain",
  "car",
  "carbon",
  "card",
  "cargo",
  "carpet",
  "carry",
  "cart",
  "case",
  "cash",
  "casino",
  "castle",
  "casual",
  "cat",
  "catalog",
  "catch",
  "category",
  "cattle",
  "caught",
  "cause",
  "caution",
  "cave",
  "ceiling",
  "celery",
  "cement",
  "census",
  "century",
  "cereal",
  "certain",
  "chair",
  "chalk",
  "champion",
  "change",
  "chaos",
  "chapter",
  "charge",
  "chase",
  "chat",
  "cheap",
  "check",
  "cheese",
  "chef",
  "cherry",
  "chest",
  "chicken",
  "chief",
  "child",
  "chimney",
  "choice",
  "choose",
  "chronic",
  "chuckle",
  "chunk",
  "churn",
  "cigar",
  "cinnamon",
  "circle",
  "citizen",
  "city",
  "civil",
  "claim",
  "clap",
  "clarify",
  "claw",
  "clay",
  "clean",
  "clerk",
  "clever",
  "click",
  "client",
  "cliff",
  "climb",
  "clinic",
  "clip",
  "clock",
  "clog",
  "close",
  "cloth",
  "cloud",
  "clown",
  "club",
  "clump",
  "cluster",
  "clutch",
  "coach",
  "coast",
  "coconut",
  "code",
  "coffee",
  "coil",
  "coin",
  "collect",
  "color",
  "column",
  "combine",
  "come",
  "comfort",
  "comic",
  "common",
  "company",
  "concert",
  "conduct",
  "confirm",
  "congress",
  "connect",
  "consider",
  "control",
  "convince",
  "cook",
  "cool",
  "copper",
  "copy",
  "coral",
  "core",
  "corn",
  "correct",
  "cost",
  "cotton",
  "couch",
  "country",
  "couple",
  "course",
  "cousin",
  "cover",
  "coyote",
  "crack",
  "cradle",
  "craft",
  "cram",
  "crane",
  "crash",
  "crater",
  "crawl",
  "crazy",
  "cream",
  "credit",
  "creek",
  "crew",
  "cricket",
  "crime",
  "crisp",
  "critic",
  "crop",
  "cross",
  "crouch",
  "crowd",
  "crucial",
  "cruel",
  "cruise",
  "crumble",
  "crunch",
  "crush",
  "cry",
  "crystal",
  "cube",
  "culture",
  "cup",
  "cupboard",
  "curious",
  "current",
  "curtain",
  "curve",
  "cushion",
  "custom",
  "cute",
  "cycle",
  "dad",
  "damage",
  "damp",
  "dance",
  "danger",
  "daring",
  "dash",
  "daughter",
  "dawn",
  "day",
  "deal",
  "debate",
  "debris",
  "decade",
  "december",
  "decide",
  "decline",
  "decorate",
  "decrease",
  "deer",
  "defense",
  "define",
  "defy",
  "degree",
  "delay",
  "deliver",
  "demand",
  "demise",
  "denial",
  "dentist",
  "deny",
  "depart",
  "depend",
  "deposit",
  "depth",
  "deputy",
  "derive",
  "describe",
  "desert",
  "design",
  "desk",
  "despair",
  "destroy",
  "detail",
  "detect",
  "develop",
  "device",
  "devote",
  "diagram",
  "dial",
  "diamond",
  "diary",
  "dice",
  "diesel",
  "diet",
  "differ",
  "digital",
  "dignity",
  "dilemma",
  "dinner",
  "dinosaur",
  "direct",
  "dirt",
  "disagree",
  "discover",
  "disease",
  "dish",
  "dismiss",
  "disorder",
  "display",
  "distance",
  "divert",
  "divide",
  "divorce",
  "dizzy",
  "doctor",
  "document",
  "dog",
  "doll",
  "dolphin",
  "domain",
  "donate",
  "donkey",
  "donor",
  "door",
  "dose",
  "double",
  "dove",
  "draft",
  "dragon",
  "drama",
  "drastic",
  "draw",
  "dream",
  "dress",
  "drift",
  "drill",
  "drink",
  "drip",
  "drive",
  "drop",
  "drum",
  "dry",
  "duck",
  "dumb",
  "dune",
  "during",
  "dust",
  "dutch",
  "duty",
  "dwarf",
  "dynamic",
  "eager",
  "eagle",
  "early",
  "earn",
  "earth",
  "easily",
  "east",
  "easy",
  "echo",
  "ecology",
  "economy",
  "edge",
  "edit",
  "educate",
  "effort",
  "egg",
  "eight",
  "either",
  "elbow",
  "elder",
  "electric",
  "elegant",
  "element",
  "elephant",
  "elevator",
  "elite",
  "else",
  "embark",
  "embody",
  "embrace",
  "emerge",
  "emotion",
  "employ",
  "empower",
  "empty",
  "enable",
  "enact",
  "end",
  "endless",
  "endorse",
  "enemy",
  "energy",
  "enforce",
  "engage",
  "engine",
  "enhance",
  "enjoy",
  "enlist",
  "enough",
  "enrich",
  "enroll",
  "ensure",
  "enter",
  "entire",
  "entry",
  "envelope",
  "episode",
  "equal",
  "equip",
  "era",
  "erase",
  "erode",
  "erosion",
  "error",
  "erupt",
  "escape",
  "essay",
  "essence",
  "estate",
  "eternal",
  "ethics",
  "evidence",
  "evil",
  "evoke",
  "evolve",
  "exact",
  "example",
  "excess",
  "exchange",
  "excite",
  "exclude",
  "excuse",
  "execute",
  "exercise",
  "exhaust",
  "exhibit",
  "exile",
  "exist",
  "exit",
  "exotic",
  "expand",
  "expect",
  "expire",
  "explain",
  "expose",
  "express",
  "extend",
  "extra",
  "eye",
  "eyebrow",
  "fabric",
  "face",
  "faculty",
  "fade",
  "faint",
  "faith",
  "fall",
  "false",
  "fame",
  "family",
  "famous",
  "fan",
  "fancy",
  "fantasy",
  "farm",
  "fashion",
  "fat",
  "fatal",
  "father",
  "fatigue",
  "fault",
  "favorite",
  "feature",
  "february",
  "federal",
  "fee",
  "feed",
  "feel",
  "female",
  "fence",
  "festival",
  "fetch",
  "fever",
  "few",
  "fiber",
  "fiction",
  "field",
  "figure",
  "file",
  "film",
  "filter",
  "final",
  "find",
  "fine",
  "finger",
  "finish",
  "fire",
  "firm",
  "first",
  "fiscal",
  "fish",
  "fit",
  "fitness",
  "fix",
  "flag",
  "flame",
  "flash",
  "flat",
  "flavor",
  "flee",
  "flight",
  "flip",
  "float",
  "flock",
  "floor",
  "flower",
  "fluid",
  "flush",
  "fly",
  "foam",
  "focus",
  "fog",
  "foil",
  "fold",
  "follow",
  "food",
  "foot",
  "force",
  "forest",
  "forget",
  "fork",
  "fortune",
  "forum",
  "forward",
  "fossil",
  "foster",
  "found",
  "fox",
  "fragile",
  "frame",
  "frequent",
  "fresh",
  "friend",
  "fringe",
  "frog",
  "front",
  "frost",
  "frown",
  "frozen",
  "fruit",
  "fuel",
  "fun",
  "funny",
  "furnace",
  "fury",
  "future",
  "gadget",
  "gain",
  "galaxy",
  "gallery",
  "game",
  "gap",
  "garage",
  "garbage",
  "garden",
  "garlic",
  "garment",
  "gas",
  "gasp",
  "gate",
  "gather",
  "gauge",
  "gaze",
  "general",
  "genius",
  "genre",
  "gentle",
  "genuine",
  "gesture",
  "ghost",
  "giant",
  "gift",
  "giggle",
  "ginger",
  "giraffe",
  "girl",
  "give",
  "glad",
  "glance",
  "glare",
  "glass",
  "glide",
  "glimpse",
  "globe",
  "gloom",
  "glory",
  "glove",
  "glow",
  "glue",
  "goat",
  "goddess",
  "gold",
  "good",
  "goose",
  "gorilla",
  "gospel",
  "gossip",
  "govern",
  "gown",
  "grab",
  "grace",
  "grain",
  "grant",
  "grape",
  "grass",
  "gravity",
  "great",
  "green",
  "grid",
  "grief",
  "grit",
  "grocery",
  "group",
  "grow",
  "grunt",
  "guard",
  "guess",
  "guide",
  "guilt",
  "guitar",
  "gun",
  "gym",
  "habit",
  "hair",
  "half",
  "hammer",
  "hamster",
  "hand",
  "happy",
  "harbor",
  "hard",
  "harsh",
  "harvest",
  "hat",
  "have",
  "hawk",
  "hazard",
  "head",
  "health",
  "heart",
  "heavy",
  "hedgehog",
  "height",
  "hello",
  "helmet",
  "help",
  "hen",
  "hero",
  "hidden",
  "high",
  "hill",
  "hint",
  "hip",
  "hire",
  "history",
  "hobby",
  "hockey",
  "hold",
  "hole",
  "holiday",
  "hollow",
  "home",
  "honey",
  "hood",
  "hope",
  "horn",
  "horror",
  "horse",
  "hospital",
  "host",
  "hotel",
  "hour",
  "hover",
  "hub",
  "huge",
  "human",
  "humble",
  "humor",
  "hundred",
  "hungry",
  "hunt",
  "hurdle",
  "hurry",
  "hurt",
  "husband",
  "hybrid",
  "ice",
  "icon",
  "idea",
  "identify",
  "idle",
  "ignore",
  "ill",
  "illegal",
  "illness",
  "image",
  "imitate",
  "immense",
  "immune",
  "impact",
  "impose",
  "improve",
  "impulse",
  "inch",
  "include",
  "income",
  "increase",
  "index",
  "indicate",
  "indoor",
  "industry",
  "infant",
  "inflict",
  "inform",
  "inhale",
  "inherit",
  "initial",
  "inject",
  "injury",
  "inmate",
  "inner",
  "innocent",
  "input",
  "inquiry",
  "insane",
  "insect",
  "inside",
  "inspire",
  "install",
  "intact",
  "interest",
  "into",
  "invest",
  "invite",
  "involve",
  "iron",
  "island",
  "isolate",
  "issue",
  "item",
  "ivory",
  "jacket",
  "jaguar",
  "jar",
  "jazz",
  "jealous",
  "jeans",
  "jelly",
  "jewel",
  "job",
  "join",
  "joke",
  "journey",
  "joy",
  "judge",
  "juice",
  "jump",
  "jungle",
  "junior",
  "junk",
  "just",
  "kangaroo",
  "keen",
  "keep",
  "ketchup",
  "key",
  "kick",
  "kid",
  "kidney",
  "kind",
  "kingdom",
  "kiss",
  "kit",
  "kitchen",
  "kite",
  "kitten",
  "kiwi",
  "knee",
  "knife",
  "knock",
  "know",
  "lab",
  "label",
  "labor",
  "ladder",
  "lady",
  "lake",
  "lamp",
  "language",
  "laptop",
  "large",
  "later",
  "latin",
  "laugh",
  "laundry",
  "lava",
  "law",
  "lawn",
  "lawsuit",
  "layer",
  "lazy",
  "leader",
  "leaf",
  "learn",
  "leave",
  "lecture",
  "left",
  "leg",
  "legal",
  "legend",
  "leisure",
  "lemon",
  "lend",
  "length",
  "lens",
  "leopard",
  "lesson",
  "letter",
  "level",
  "liar",
  "liberty",
  "library",
  "license",
  "life",
  "lift",
  "light",
  "like",
  "limb",
  "limit",
  "link",
  "lion",
  "liquid",
  "list",
  "little",
  "live",
  "lizard",
  "load",
  "loan",
  "lobster",
  "local",
  "lock",
  "logic",
  "lonely",
  "long",
  "loop",
  "lottery",
  "loud",
  "lounge",
  "love",
  "loyal",
  "lucky",
  "luggage",
  "lumber",
  "lunar",
  "lunch",
  "luxury",
  "lyrics",
  "machine",
  "mad",
  "magic",
  "magnet",
  "maid",
  "mail",
  "main",
  "major",
  "make",
  "mammal",
  "man",
  "manage",
  "mandate",
  "mango",
  "mansion",
  "manual",
  "maple",
  "marble",
  "march",
  "margin",
  "marine",
  "market",
  "marriage",
  "mask",
  "mass",
  "master",
  "match",
  "material",
  "math",
  "matrix",
  "matter",
  "maximum",
  "maze",
  "meadow",
  "mean",
  "measure",
  "meat",
  "mechanic",
  "medal",
  "media",
  "melody",
  "melt",
  "member",
  "memory",
  "mention",
  "menu",
  "mercy",
  "merge",
  "merit",
  "merry",
  "mesh",
  "message",
  "metal",
  "method",
  "middle",
  "midnight",
  "milk",
  "million",
  "mimic",
  "mind",
  "minimum",
  "minor",
  "minute",
  "miracle",
  "mirror",
  "misery",
  "miss",
  "mistake",
  "mix",
  "mixed",
  "mixture",
  "mobile",
  "model",
  "modify",
  "mom",
  "moment",
  "monitor",
  "monkey",
  "monster",
  "month",
  "moon",
  "moral",
  "more",
  "morning",
  "mosquito",
  "mother",
  "motion",
  "motor",
  "mountain",
  "mouse",
  "move",
  "movie",
  "much",
  "muffin",
  "mule",
  "multiply",
  "muscle",
  "museum",
  "mushroom",
  "music",
  "must",
  "mutual",
  "myself",
  "mystery",
  "myth",
  "naive",
  "name",
  "napkin",
  "narrow",
  "nasty",
  "nation",
  "nature",
  "near",
  "neck",
  "need",
  "negative",
  "neglect",
  "neither",
  "nephew",
  "nerve",
  "nest",
  "net",
  "network",
  "neutral",
  "never",
  "news",
  "next",
  "nice",
  "night",
  "noble",
  "noise",
  "nominee",
  "noodle",
  "normal",
  "north",
  "nose",
  "notable",
  "note",
  "nothing",
  "notice",
  "novel",
  "now",
  "nuclear",
  "number",
  "nurse",
  "nut",
  "oak",
  "obey",
  "object",
  "oblige",
  "obscure",
  "observe",
  "obtain",
  "obvious",
  "occur",
  "ocean",
  "october",
  "odor",
  "off",
  "offer",
  "office",
  "often",
  "oil",
  "okay",
  "old",
  "olive",
  "olympic",
  "omit",
  "once",
  "one",
  "onion",
  "online",
  "only",
  "open",
  "opera",
  "opinion",
  "oppose",
  "option",
  "orange",
  "orbit",
  "orchard",
  "order",
  "ordinary",
  "organ",
  "orient",
  "original",
  "orphan",
  "ostrich",
  "other",
  "outdoor",
  "outer",
  "output",
  "outside",
  "oval",
  "oven",
  "over",
  "own",
  "owner",
  "oxygen",
  "oyster",
  "ozone",
  "pact",
  "paddle",
  "page",
  "pair",
  "palace",
  "palm",
  "panda",
  "panel",
  "panic",
  "panther",
  "paper",
  "parade",
  "parent",
  "park",
  "parrot",
  "party",
  "pass",
  "patch",
  "path",
  "patient",
  "patrol",
  "pattern",
  "pause",
  "pave",
  "payment",
  "peace",
  "peanut",
  "pear",
  "peasant",
  "pelican",
  "pen",
  "penalty",
  "pencil",
  "people",
  "pepper",
  "perfect",
  "permit",
  "person",
  "pet",
  "phone",
  "photo",
  "phrase",
  "physical",
  "piano",
  "picnic",
  "picture",
  "piece",
  "pig",
  "pigeon",
  "pill",
  "pilot",
  "pink",
  "pioneer",
  "pipe",
  "pistol",
  "pitch",
  "pizza",
  "place",
  "planet",
  "plastic",
  "plate",
  "play",
  "please",
  "pledge",
  "pluck",
  "plug",
  "plunge",
  "poem",
  "poet",
  "point",
  "polar",
  "pole",
  "police",
  "pond",
  "pony",
  "pool",
  "popular",
  "portion",
  "position",
  "possible",
  "post",
  "potato",
  "pottery",
  "poverty",
  "powder",
  "power",
  "practice",
  "praise",
  "predict",
  "prefer",
  "prepare",
  "present",
  "pretty",
  "prevent",
  "price",
  "pride",
  "primary",
  "print",
  "priority",
  "prison",
  "private",
  "prize",
  "problem",
  "process",
  "produce",
  "profit",
  "program",
  "project",
  "promote",
  "proof",
  "property",
  "prosper",
  "protect",
  "proud",
  "provide",
  "public",
  "pudding",
  "pull",
  "pulp",
  "pulse",
  "pumpkin",
  "punch",
  "pupil",
  "puppy",
  "purchase",
  "purity",
  "purpose",
  "purse",
  "push",
  "put",
  "puzzle",
  "pyramid",
  "quality",
  "quantum",
  "quarter",
  "question",
  "quick",
  "quit",
  "quiz",
  "quote",
  "rabbit",
  "raccoon",
  "race",
  "rack",
  "radar",
  "radio",
  "rail",
  "rain",
  "raise",
  "rally",
  "ramp",
  "ranch",
  "random",
  "range",
  "rapid",
  "rare",
  "rate",
  "rather",
  "raven",
  "raw",
  "razor",
  "ready",
  "real",
  "reason",
  "rebel",
  "rebuild",
  "recall",
  "receive",
  "recipe",
  "record",
  "recycle",
  "reduce",
  "reflect",
  "reform",
  "refuse",
  "region",
  "regret",
  "regular",
  "reject",
  "relax",
  "release",
  "relief",
  "rely",
  "remain",
  "remember",
  "remind",
  "remove",
  "render",
  "renew",
  "rent",
  "reopen",
  "repair",
  "repeat",
  "replace",
  "report",
  "require",
  "rescue",
  "resemble",
  "resist",
  "resource",
  "response",
  "result",
  "retire",
  "retreat",
  "return",
  "reunion",
  "reveal",
  "review",
  "reward",
  "rhythm",
  "rib",
  "ribbon",
  "rice",
  "rich",
  "ride",
  "ridge",
  "rifle",
  "right",
  "rigid",
  "ring",
  "riot",
  "ripple",
  "risk",
  "ritual",
  "rival",
  "river",
  "road",
  "roast",
  "robot",
  "robust",
  "rocket",
  "romance",
  "roof",
  "rookie",
  "room",
  "rose",
  "rotate",
  "rough",
  "round",
  "route",
  "royal",
  "rubber",
  "rude",
  "rug",
  "rule",
  "run",
  "runway",
  "rural",
  "sad",
  "saddle",
  "sadness",
  "safe",
  "sail",
  "salad",
  "salmon",
  "salon",
  "salt",
  "salute",
  "same",
  "sample",
  "sand",
  "satisfy",
  "satoshi",
  "sauce",
  "sausage",
  "save",
  "say",
  "scale",
  "scan",
  "scare",
  "scatter",
  "scene",
  "scheme",
  "school",
  "science",
  "scissors",
  "scorpion",
  "scout",
  "scrap",
  "screen",
  "script",
  "scrub",
  "sea",
  "search",
  "season",
  "seat",
  "second",
  "secret",
  "section",
  "security",
  "seed",
  "seek",
  "segment",
  "select",
  "sell",
  "seminar",
  "senior",
  "sense",
  "sentence",
  "series",
  "service",
  "session",
  "settle",
  "setup",
  "seven",
  "shadow",
  "shaft",
  "shallow",
  "share",
  "shed",
  "shell",
  "sheriff",
  "shield",
  "shift",
  "shine",
  "ship",
  "shiver",
  "shock",
  "shoe",
  "shoot",
  "shop",
  "short",
  "shoulder",
  "shove",
  "shrimp",
  "shrug",
  "shuffle",
  "shy",
  "sibling",
  "sick",
  "side",
  "siege",
  "sight",
  "sign",
  "silent",
  "silk",
  "silly",
  "silver",
  "similar",
  "simple",
  "since",
  "sing",
  "siren",
  "sister",
  "situate",
  "six",
  "size",
  "skate",
  "sketch",
  "ski",
  "skill",
  "skin",
  "skirt",
  "skull",
  "slab",
  "slam",
  "sleep",
  "slender",
  "slice",
  "slide",
  "slight",
  "slim",
  "slogan",
  "slot",
  "slow",
  "slush",
  "small",
  "smart",
  "smile",
  "smoke",
  "smooth",
  "snack",
  "snake",
  "snap",
  "sniff",
  "snow",
  "soap",
  "soccer",
  "social",
  "sock",
  "soda",
  "soft",
  "solar",
  "soldier",
  "solid",
  "solution",
  "solve",
  "someone",
  "song",
  "soon",
  "sorry",
  "sort",
  "soul",
  "sound",
  "soup",
  "source",
  "south",
  "space",
  "spare",
  "spatial",
  "spawn",
  "speak",
  "special",
  "speed",
  "spell",
  "spend",
  "sphere",
  "spice",
  "spider",
  "spike",
  "spin",
  "spirit",
  "split",
  "spoil",
  "sponsor",
  "spoon",
  "sport",
  "spot",
  "spray",
  "spread",
  "spring",
  "spy",
  "square",
  "squeeze",
  "squirrel",
  "stable",
  "stadium",
  "staff",
  "stage",
  "stairs",
  "stamp",
  "stand",
  "start",
  "state",
  "stay",
  "steak",
  "steel",
  "stem",
  "step",
  "stereo",
  "stick",
  "still",
  "sting",
  "stock",
  "stomach",
  "stone",
  "stool",
  "story",
  "stove",
  "strategy",
  "street",
  "strike",
  "strong",
  "struggle",
  "student",
  "stuff",
  "stumble",
  "style",
  "subject",
  "submit",
  "subway",
  "success",
  "such",
  "sudden",
  "suffer",
  "sugar",
  "suggest",
  "suit",
  "summer",
  "sun",
  "sunny",
  "sunset",
  "super",
  "supply",
  "supreme",
  "sure",
  "surface",
  "surge",
  "surprise",
  "surround",
  "survey",
  "suspect",
  "sustain",
  "swallow",
  "swamp",
  "swap",
  "swarm",
  "swear",
  "sweet",
  "swift",
  "swim",
  "swing",
  "switch",
  "sword",
  "symbol",
  "symptom",
  "syrup",
  "system",
  "table",
  "tackle",
  "tag",
  "tail",
  "talent",
  "talk",
  "tank",
  "tape",
  "target",
  "task",
  "taste",
  "tattoo",
  "taxi",
  "teach",
  "team",
  "tell",
  "ten",
  "tenant",
  "tennis",
  "tent",
  "term",
  "test",
  "text",
  "thank",
  "that",
  "theme",
  "then",
  "theory",
  "there",
  "they",
  "thing",
  "this",
  "thought",
  "three",
  "thrive",
  "throw",
  "thumb",
  "thunder",
  "ticket",
  "tide",
  "tiger",
  "tilt",
  "timber",
  "time",
  "tiny",
  "tip",
  "tired",
  "tissue",
  "title",
  "toast",
  "tobacco",
  "today",
  "toddler",
  "toe",
  "together",
  "toilet",
  "token",
  "tomato",
  "tomorrow",
  "tone",
  "tongue",
  "tonight",
  "tool",
  "tooth",
  "top",
  "topic",
  "topple",
  "torch",
  "tornado",
  "tortoise",
  "toss",
  "total",
  "tourist",
  "toward",
  "tower",
  "town",
  "toy",
  "track",
  "trade",
  "traffic",
  "tragic",
  "train",
  "transfer",
  "trap",
  "trash",
  "travel",
  "tray",
  "treat",
  "tree",
  "trend",
  "trial",
  "tribe",
  "trick",
  "trigger",
  "trim",
  "trip",
  "trophy",
  "trouble",
  "truck",
  "true",
  "truly",
  "trumpet",
  "trust",
  "truth",
  "try",
  "tube",
  "tuition",
  "tumble",
  "tuna",
  "tunnel",
  "turkey",
  "turn",
  "turtle",
  "twelve",
  "twenty",
  "twice",
  "twin",
  "twist",
  "two",
  "type",
  "typical",
  "ugly",
  "umbrella",
  "unable",
  "unaware",
  "uncle",
  "uncover",
  "under",
  "undo",
  "unfair",
  "unfold",
  "unhappy",
  "uniform",
  "unique",
  "unit",
  "universe",
  "unknown",
  "unlock",
  "until",
  "unusual",
  "unveil",
  "update",
  "upgrade",
  "uphold",
  "upon",
  "upper",
  "upset",
  "urban",
  "urge",
  "usage",
  "use",
  "used",
  "useful",
  "useless",
  "usual",
  "utility",
  "vacant",
  "vacuum",
  "vague",
  "valid",
  "valley",
  "valve",
  "van",
  "vanish",
  "vapor",
  "various",
  "vast",
  "vault",
  "vehicle",
  "velvet",
  "vendor",
  "venture",
  "venue",
  "verb",
  "verify",
  "version",
  "very",
  "vessel",
  "veteran",
  "viable",
  "vibrant",
  "vicious",
  "victory",
  "video",
  "view",
  "village",
  "vintage",
  "violin",
  "virtual",
  "virus",
  "visa",
  "visit",
  "visual",
  "vital",
  "vivid",
  "vocal",
  "voice",
  "void",
  "volcano",
  "volume",
  "vote",
  "voyage",
  "wage",
  "wagon",
  "wait",
  "walk",
  "wall",
  "walnut",
  "want",
  "warfare",
  "warm",
  "warrior",
  "wash",
  "wasp",
  "waste",
  "water",
  "wave",
  "way",
  "wealth",
  "weapon",
  "wear",
  "weasel",
  "weather",
  "web",
  "wedding",
  "weekend",
  "weird",
  "welcome",
  "west",
  "wet",
  "whale",
  "what",
  "wheat",
  "wheel",
  "when",
  "where",
  "whip",
  "whisper",
  "wide",
  "width",
  "wife",
  "wild",
  "will",
  "win",
  "window",
  "wine",
  "wing",
  "wink",
  "winner",
  "winter",
  "wire",
  "wisdom",
  "wise",
  "wish",
  "witness",
  "wolf",
  "woman",
  "wonder",
  "wood",
  "wool",
  "word",
  "work",
  "world",
  "worry",
  "worth",
  "wrap",
  "wreck",
  "wrestle",
  "wrist",
  "write",
  "wrong",
  "yard",
  "year",
  "yellow",
  "you",
  "young",
  "youth",
  "zebra",
  "zero",
  "zone",
  "zoo"
];
Object.defineProperty(Jt, "__esModule", { value: !0 });
const dr = {};
Jt.wordlists = dr;
let it;
var fn = Jt._default = it;
try {
  fn = Jt._default = it = hB, dr.czech = it;
} catch {
}
try {
  fn = Jt._default = it = pB, dr.chinese_simplified = it;
} catch {
}
try {
  fn = Jt._default = it = gB, dr.chinese_traditional = it;
} catch {
}
try {
  fn = Jt._default = it = mB, dr.korean = it;
} catch {
}
try {
  fn = Jt._default = it = bB, dr.french = it;
} catch {
}
try {
  fn = Jt._default = it = yB, dr.italian = it;
} catch {
}
try {
  fn = Jt._default = it = wB, dr.spanish = it;
} catch {
}
try {
  fn = Jt._default = it = vB, dr.japanese = it, dr.JA = it;
} catch {
}
try {
  fn = Jt._default = it = xB, dr.portuguese = it;
} catch {
}
try {
  fn = Jt._default = it = EB, dr.english = it, dr.EN = it;
} catch {
}
Object.defineProperty(ln, "__esModule", { value: !0 });
const _B = Rr, Lw = It, zw = wu, SB = Eo, Hc = Jt;
let qs = Hc._default;
const h0 = "Invalid mnemonic", qo = "Invalid entropy", kB = "Invalid mnemonic checksum", jw = `A wordlist is required but a default could not be found.
Please pass a 2048 word array explicitly.`;
function Vs(e) {
  return (e || "").normalize("NFKD");
}
function Mw(e, t, r) {
  for (; e.length < r; )
    e = t + e;
  return e;
}
function Dw(e) {
  return parseInt(e, 2);
}
function Fw(e) {
  return e.map((t) => Mw(t.toString(2), "0", 8)).join("");
}
function Kw(e) {
  const r = e.length * 8 / 32, n = _B.sha256(Uint8Array.from(e));
  return Fw(Array.from(n)).slice(0, r);
}
function qw(e) {
  return "mnemonic" + (e || "");
}
function AB(e, t) {
  const r = Uint8Array.from(Buffer.from(Vs(e), "utf8")), n = Uint8Array.from(Buffer.from(qw(Vs(t)), "utf8")), o = zw.pbkdf2(Lw.sha512, r, n, {
    c: 2048,
    dkLen: 64
  });
  return Buffer.from(o);
}
ln.mnemonicToSeedSync = AB;
function TB(e, t) {
  const r = Uint8Array.from(Buffer.from(Vs(e), "utf8")), n = Uint8Array.from(Buffer.from(qw(Vs(t)), "utf8"));
  return zw.pbkdf2Async(Lw.sha512, r, n, {
    c: 2048,
    dkLen: 64
  }).then((o) => Buffer.from(o));
}
var IB = ln.mnemonicToSeed = TB;
function Vw(e, t) {
  if (t = t || qs, !t)
    throw new Error(jw);
  const r = Vs(e).split(" ");
  if (r.length % 3 !== 0)
    throw new Error(h0);
  const n = r.map((f) => {
    const l = t.indexOf(f);
    if (l === -1)
      throw new Error(h0);
    return Mw(l.toString(2), "0", 11);
  }).join(""), o = Math.floor(n.length / 33) * 32, i = n.slice(0, o), s = n.slice(o), a = i.match(/(.{1,8})/g).map(Dw);
  if (a.length < 16)
    throw new Error(qo);
  if (a.length > 32)
    throw new Error(qo);
  if (a.length % 4 !== 0)
    throw new Error(qo);
  const c = Buffer.from(a);
  if (Kw(c) !== s)
    throw new Error(kB);
  return c.toString("hex");
}
ln.mnemonicToEntropy = Vw;
function Ww(e, t) {
  if (Buffer.isBuffer(e) || (e = Buffer.from(e, "hex")), t = t || qs, !t)
    throw new Error(jw);
  if (e.length < 16)
    throw new TypeError(qo);
  if (e.length > 32)
    throw new TypeError(qo);
  if (e.length % 4 !== 0)
    throw new TypeError(qo);
  const r = Fw(Array.from(e)), n = Kw(e), s = (r + n).match(/(.{1,11})/g).map((a) => {
    const c = Dw(a);
    return t[c];
  });
  return t[0] === "あいこくしん" ? s.join("　") : s.join(" ");
}
var PB = ln.entropyToMnemonic = Ww;
function OB(e, t, r) {
  if (e = e || 128, e % 32 !== 0)
    throw new TypeError(qo);
  return t = t || ((n) => Buffer.from(SB.randomBytes(n))), Ww(t(e / 8), r);
}
ln.generateMnemonic = OB;
function BB(e, t) {
  try {
    Vw(e, t);
  } catch {
    return !1;
  }
  return !0;
}
ln.validateMnemonic = BB;
function $B(e) {
  const t = Hc.wordlists[e];
  if (t)
    qs = t;
  else
    throw new Error('Could not find wordlist for language "' + e + '"');
}
ln.setDefaultWordlist = $B;
function NB() {
  if (!qs)
    throw new Error("No Default Wordlist set");
  return Object.keys(Hc.wordlists).filter((e) => e === "JA" || e === "EN" ? !1 : Hc.wordlists[e].every((t, r) => t === qs[r]))[0];
}
ln.getDefaultWordlist = NB;
var UB = Jt;
ln.wordlists = UB.wordlists;
function CB(e) {
  return rg(Pt(e));
}
function p0(e, t) {
  return fd(lk, e, t);
}
const Se = (e) => ix(e);
function HB(e) {
  if (xt(e.isPoint(Se("0279be667ef9dcbbac55a06295ce870b07029bfcdb2dce28d959f2815b16f81798"))), xt(!e.isPoint(Se("030000000000000000000000000000000000000000000000000000000000000005"))), xt(e.isPrivate(Se("79be667ef9dcbbac55a06295ce870b07029bfcdb2dce28d959f2815b16f81798"))), xt(e.isPrivate(Se("fffffffffffffffffffffffffffffffebaaedce6af48a03bbfd25e8cd0364140"))), xt(!e.isPrivate(Se("0000000000000000000000000000000000000000000000000000000000000000"))), xt(!e.isPrivate(Se("fffffffffffffffffffffffffffffffebaaedce6af48a03bbfd25e8cd0364141"))), xt(!e.isPrivate(Se("fffffffffffffffffffffffffffffffebaaedce6af48a03bbfd25e8cd0364142"))), xt(pn(e.pointFromScalar(Se("b1121e4088a66a28f5b6b0f5844943ecd9f610196d7bb83b25214b60452c09af")), Se("02b07ba9dca9523b7ef4bd97703d43d20399eb698e194704791a25ce77a400df99")) === 0), e.xOnlyPointAddTweak) {
    xt(e.xOnlyPointAddTweak(Se("79be667ef9dcbbac55a06295ce870b07029bfcdb2dce28d959f2815b16f81798"), Se("fffffffffffffffffffffffffffffffebaaedce6af48a03bbfd25e8cd0364140")) === null);
    let t = e.xOnlyPointAddTweak(Se("1617d38ed8d8657da4d4761e8057bc396ea9e4b9d29776d4be096016dbd2509b"), Se("a8397a935f0dfceba6ba9618f6451ef4d80637abf4e6af2669fbc9de6a8fd2ac"));
    xt(pn(t.xOnlyPubkey, Se("e478f99dab91052ab39a33ea35fd5e6e4933f4d28023cd597c9a1f6760346adf")) === 0 && t.parity === 1), t = e.xOnlyPointAddTweak(Se("2c0b7cf95324a07d05398b240174dc0c2be444d96b159aa6c7f7b1e668680991"), Se("823c3cd2142744b075a87eade7e1b8678ba308d566226a0056ca2b7a76f86b47"));
  }
  xt(pn(e.pointAddScalar(Se("0379be667ef9dcbbac55a06295ce870b07029bfcdb2dce28d959f2815b16f81798"), Se("0000000000000000000000000000000000000000000000000000000000000003")), Se("02c6047f9441ed7d6d3045406e95c07cd85c778e4b8cef3ca7abac09b95c709ee5")) === 0), xt(pn(e.privateAdd(Se("fffffffffffffffffffffffffffffffebaaedce6af48a03bbfd25e8cd036413e"), Se("0000000000000000000000000000000000000000000000000000000000000002")), Se("fffffffffffffffffffffffffffffffebaaedce6af48a03bbfd25e8cd0364140")) === 0), e.privateNegate && (xt(pn(e.privateNegate(Se("0000000000000000000000000000000000000000000000000000000000000001")), Se("fffffffffffffffffffffffffffffffebaaedce6af48a03bbfd25e8cd0364140")) === 0), xt(pn(e.privateNegate(Se("fffffffffffffffffffffffffffffffebaaedce6af48a03bbfd25e8cd036413e")), Se("0000000000000000000000000000000000000000000000000000000000000003")) === 0), xt(pn(e.privateNegate(Se("b1121e4088a66a28f5b6b0f5844943ecd9f610196d7bb83b25214b60452c09af")), Se("4eede1bf775995d70a494f0a7bb6bc11e0b8cccd41cce8009ab1132c8b0a3792")) === 0)), xt(pn(e.sign(Se("5e9f0a0d593efdcf78ac923bc3313e4e7d408d574354ee2b3288c0da9fbba6ed"), Se("fffffffffffffffffffffffffffffffebaaedce6af48a03bbfd25e8cd0364140")), Se("54c4a33c6423d689378f160a7ff8b61330444abb58fb470f96ea16d99d4a2fed07082304410efa6b2943111b6a4e0aaa7b7db55a07e9861d1fb3cb1f421044a5")) === 0), xt(e.verify(Se("5e9f0a0d593efdcf78ac923bc3313e4e7d408d574354ee2b3288c0da9fbba6ed"), Se("0379be667ef9dcbbac55a06295ce870b07029bfcdb2dce28d959f2815b16f81798"), Se("54c4a33c6423d689378f160a7ff8b61330444abb58fb470f96ea16d99d4a2fed07082304410efa6b2943111b6a4e0aaa7b7db55a07e9861d1fb3cb1f421044a5"))), e.signSchnorr && xt(pn(e.signSchnorr(Se("7e2d58d8b3bcdf1abadec7829054f90dda9805aab56c77333024b9d0a508b75c"), Se("c90fdaa22168c234c4c6628b80dc1cd129024e088a67cc74020bbea63b14e5c9"), Se("c87aa53824b4d7ae2eb035a2b5bbbccc080e76cdc6d1692c4b0b62d798e6d906")), Se("5831aaeed7b44bb74e5eab94ba9d4294c49bcf2a60728d8b4c200f50dd313c1bab745879a5ad954a72c45a91c3a51d3c7adea98d82f8481e0e1e03674a6f3fb7")) === 0), e.verifySchnorr && xt(e.verifySchnorr(Se("7e2d58d8b3bcdf1abadec7829054f90dda9805aab56c77333024b9d0a508b75c"), Se("dd308afec5777e13121fa72b9cc1b7cc0139715309b086c960e18fd969774eb8"), Se("5831aaeed7b44bb74e5eab94ba9d4294c49bcf2a60728d8b4c200f50dd313c1bab745879a5ad954a72c45a91c3a51d3c7adea98d82f8481e0e1e03674a6f3fb7")));
}
function xt(e) {
  if (!e)
    throw new Error("ecc library invalid");
}
/*! scure-base - MIT License (c) 2022 Paul Miller (paulmillr.com) */
function zf(e) {
  return e instanceof Uint8Array || e != null && typeof e == "object" && e.constructor.name === "Uint8Array";
}
// @__NO_SIDE_EFFECTS__
function Gw(...e) {
  const t = (i) => i, r = (i, s) => (a) => i(s(a)), n = e.map((i) => i.encode).reduceRight(r, t), o = e.map((i) => i.decode).reduce(r, t);
  return { encode: n, decode: o };
}
// @__NO_SIDE_EFFECTS__
function RB(e) {
  return {
    encode: (t) => {
      if (!Array.isArray(t) || t.length && typeof t[0] != "number")
        throw new Error("alphabet.encode input should be an array of numbers");
      return t.map((r) => {
        if (r < 0 || r >= e.length)
          throw new Error(`Digit index outside alphabet: ${r} (alphabet: ${e.length})`);
        return e[r];
      });
    },
    decode: (t) => {
      if (!Array.isArray(t) || t.length && typeof t[0] != "string")
        throw new Error("alphabet.decode input should be array of strings");
      return t.map((r) => {
        if (typeof r != "string")
          throw new Error(`alphabet.decode: not string element=${r}`);
        const n = e.indexOf(r);
        if (n === -1)
          throw new Error(`Unknown letter: "${r}". Allowed: ${e}`);
        return n;
      });
    }
  };
}
// @__NO_SIDE_EFFECTS__
function LB(e = "") {
  if (typeof e != "string")
    throw new Error("join separator should be string");
  return {
    encode: (t) => {
      if (!Array.isArray(t) || t.length && typeof t[0] != "string")
        throw new Error("join.encode input should be array of strings");
      for (let r of t)
        if (typeof r != "string")
          throw new Error(`join.encode: non-string input=${r}`);
      return t.join(e);
    },
    decode: (t) => {
      if (typeof t != "string")
        throw new Error("join.decode input should be string");
      return t.split(e);
    }
  };
}
// @__NO_SIDE_EFFECTS__
function g0(e, t, r) {
  if (t < 2)
    throw new Error(`convertRadix: wrong from=${t}, base cannot be less than 2`);
  if (r < 2)
    throw new Error(`convertRadix: wrong to=${r}, base cannot be less than 2`);
  if (!Array.isArray(e))
    throw new Error("convertRadix: data should be array");
  if (!e.length)
    return [];
  let n = 0;
  const o = [], i = Array.from(e);
  for (i.forEach((s) => {
    if (s < 0 || s >= t)
      throw new Error(`Wrong integer: ${s}`);
  }); ; ) {
    let s = 0, a = !0;
    for (let c = n; c < i.length; c++) {
      const u = i[c], f = t * s + u;
      if (!Number.isSafeInteger(f) || t * s / t !== s || f - u !== t * s)
        throw new Error("convertRadix: carry overflow");
      s = f % r;
      const l = Math.floor(f / r);
      if (i[c] = l, !Number.isSafeInteger(l) || l * r + s !== f)
        throw new Error("convertRadix: carry overflow");
      if (a)
        l ? a = !1 : n = c;
      else continue;
    }
    if (o.push(s), a)
      break;
  }
  for (let s = 0; s < e.length - 1 && e[s] === 0; s++)
    o.push(0);
  return o.reverse();
}
// @__NO_SIDE_EFFECTS__
function zB(e) {
  return {
    encode: (t) => {
      if (!zf(t))
        throw new Error("radix.encode input should be Uint8Array");
      return /* @__PURE__ */ g0(Array.from(t), 2 ** 8, e);
    },
    decode: (t) => {
      if (!Array.isArray(t) || t.length && typeof t[0] != "number")
        throw new Error("radix.decode input should be array of numbers");
      return Uint8Array.from(/* @__PURE__ */ g0(t, e, 2 ** 8));
    }
  };
}
// @__NO_SIDE_EFFECTS__
function jB(e, t) {
  if (typeof t != "function")
    throw new Error("checksum fn should be function");
  return {
    encode(r) {
      if (!zf(r))
        throw new Error("checksum.encode: input should be Uint8Array");
      const n = t(r).slice(0, e), o = new Uint8Array(r.length + e);
      return o.set(r), o.set(n, r.length), o;
    },
    decode(r) {
      if (!zf(r))
        throw new Error("checksum.decode: input should be Uint8Array");
      const n = r.slice(0, -e), o = t(n).slice(0, e), i = r.slice(-e);
      for (let s = 0; s < e; s++)
        if (o[s] !== i[s])
          throw new Error("Invalid checksum");
      return n;
    }
  };
}
const MB = (e) => /* @__PURE__ */ Gw(/* @__PURE__ */ zB(58), /* @__PURE__ */ RB(e), /* @__PURE__ */ LB("")), DB = /* @__PURE__ */ MB("123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz"), FB = (e) => /* @__PURE__ */ Gw(/* @__PURE__ */ jB(4, (t) => e(e(t))), DB), KB = FB;
var bn;
function qB(e) {
  return {
    lang: (e == null ? void 0 : e.lang) ?? (bn == null ? void 0 : bn.lang),
    message: e == null ? void 0 : e.message,
    abortEarly: (e == null ? void 0 : e.abortEarly) ?? (bn == null ? void 0 : bn.abortEarly),
    abortPipeEarly: (e == null ? void 0 : e.abortPipeEarly) ?? (bn == null ? void 0 : bn.abortPipeEarly)
  };
}
var Bl;
function VB(e) {
  return Bl == null ? void 0 : Bl.get(e);
}
var $l;
function WB(e) {
  return $l == null ? void 0 : $l.get(e);
}
var Nl;
function GB(e, t) {
  var r;
  return (r = Nl == null ? void 0 : Nl.get(e)) == null ? void 0 : r.get(t);
}
function Ws(e) {
  var r, n;
  const t = typeof e;
  return t === "string" ? `"${e}"` : t === "number" || t === "bigint" || t === "boolean" ? `${e}` : t === "object" || t === "function" ? (e && ((n = (r = Object.getPrototypeOf(e)) == null ? void 0 : r.constructor) == null ? void 0 : n.name)) ?? "null" : t;
}
function Hn(e, t, r, n, o) {
  const i = o && "input" in o ? o.input : r.value, s = (o == null ? void 0 : o.expected) ?? e.expects ?? null, a = (o == null ? void 0 : o.received) ?? Ws(i), c = {
    kind: e.kind,
    type: e.type,
    input: i,
    expected: s,
    received: a,
    message: `Invalid ${t}: ${s ? `Expected ${s} but r` : "R"}eceived ${a}`,
    // @ts-expect-error
    requirement: e.requirement,
    path: o == null ? void 0 : o.path,
    issues: o == null ? void 0 : o.issues,
    lang: n.lang,
    abortEarly: n.abortEarly,
    abortPipeEarly: n.abortPipeEarly
  }, u = e.kind === "schema", f = (o == null ? void 0 : o.message) ?? // @ts-expect-error
  e.message ?? GB(e.reference, c.lang) ?? (u ? WB(c.lang) : null) ?? n.message ?? VB(c.lang);
  f && (c.message = typeof f == "function" ? f(c) : f), u && (r.typed = !1), r.issues ? r.issues.push(c) : r.issues = [c];
}
var ZB = class extends Error {
  /**
   * Creates a Valibot error with useful information.
   *
   * @param issues The error issues.
   */
  constructor(t) {
    super(t[0].message);
    /**
     * The error issues.
     */
    ne(this, "issues");
    this.name = "ValiError", this.issues = t;
  }
};
function vu(e) {
  return {
    kind: "validation",
    type: "integer",
    reference: vu,
    async: !1,
    expects: null,
    requirement: Number.isInteger,
    message: e,
    _run(t, r) {
      return t.typed && !this.requirement(t.value) && Hn(this, "integer", t, r), t;
    }
  };
}
function Sh(e, t) {
  return {
    kind: "validation",
    type: "length",
    reference: Sh,
    async: !1,
    expects: `${e}`,
    requirement: e,
    message: t,
    _run(r, n) {
      return r.typed && r.value.length !== this.requirement && Hn(this, "length", r, n, {
        received: `${r.value.length}`
      }), r;
    }
  };
}
function xu(e, t) {
  return {
    kind: "validation",
    type: "max_value",
    reference: xu,
    async: !1,
    expects: `<=${e instanceof Date ? e.toJSON() : Ws(e)}`,
    requirement: e,
    message: t,
    _run(r, n) {
      return r.typed && r.value > this.requirement && Hn(this, "value", r, n, {
        received: r.value instanceof Date ? r.value.toJSON() : Ws(r.value)
      }), r;
    }
  };
}
function Eu(e, t) {
  return {
    kind: "validation",
    type: "min_value",
    reference: Eu,
    async: !1,
    expects: `>=${e instanceof Date ? e.toJSON() : Ws(e)}`,
    requirement: e,
    message: t,
    _run(r, n) {
      return r.typed && r.value < this.requirement && Hn(this, "value", r, n, {
        received: r.value instanceof Date ? r.value.toJSON() : Ws(r.value)
      }), r;
    }
  };
}
function Zw(e, t) {
  return {
    kind: "validation",
    type: "regex",
    reference: Zw,
    async: !1,
    expects: `${e}`,
    requirement: e,
    message: t,
    _run(r, n) {
      return r.typed && !this.requirement.test(r.value) && Hn(this, "format", r, n), r;
    }
  };
}
function _u(e, t) {
  return {
    kind: "schema",
    type: "instance",
    reference: _u,
    expects: e.name,
    async: !1,
    class: e,
    message: t,
    _run(r, n) {
      return r.value instanceof this.class ? r.typed = !0 : Hn(this, "type", r, n), r;
    }
  };
}
function Su(e) {
  return {
    kind: "schema",
    type: "number",
    reference: Su,
    expects: "number",
    async: !1,
    message: e,
    _run(t, r) {
      return typeof t.value == "number" && !isNaN(t.value) ? t.typed = !0 : Hn(this, "type", t, r), t;
    }
  };
}
function jf(e, t) {
  return {
    kind: "schema",
    type: "object",
    reference: jf,
    expects: "Object",
    async: !1,
    entries: e,
    message: t,
    _run(r, n) {
      var i;
      const o = r.value;
      if (o && typeof o == "object") {
        r.typed = !0, r.value = {};
        for (const s in this.entries) {
          const a = o[s], c = this.entries[s]._run(
            { typed: !1, value: a },
            n
          );
          if (c.issues) {
            const u = {
              type: "object",
              origin: "value",
              input: o,
              key: s,
              value: a
            };
            for (const f of c.issues)
              f.path ? f.path.unshift(u) : f.path = [u], (i = r.issues) == null || i.push(f);
            if (r.issues || (r.issues = c.issues), n.abortEarly) {
              r.typed = !1;
              break;
            }
          }
          c.typed || (r.typed = !1), (c.value !== void 0 || s in o) && (r.value[s] = c.value);
        }
      } else
        Hn(this, "type", r, n);
      return r;
    }
  };
}
function Xw(e) {
  return {
    kind: "schema",
    type: "string",
    reference: Xw,
    expects: "string",
    async: !1,
    message: e,
    _run(t, r) {
      return typeof t.value == "string" ? t.typed = !0 : Hn(this, "type", t, r), t;
    }
  };
}
function yn(e, t, r) {
  const n = e._run(
    { typed: !1, value: t },
    qB(r)
  );
  if (n.issues)
    throw new ZB(n.issues);
  return n.value;
}
function is(...e) {
  return {
    ...e[0],
    pipe: e,
    _run(t, r) {
      for (const n of e)
        if (n.kind !== "metadata") {
          if (t.issues && (n.kind === "schema" || n.kind === "transformation")) {
            t.typed = !1;
            break;
          }
          (!t.issues || !r.abortEarly && !r.abortPipeEarly) && (t = n._run(t, r));
        }
      return t;
    }
  };
}
const Mf = is(Su(), vu(), Eu(0), xu(4294967295)), XB = is(Su(), vu(), Eu(0), xu(2147483647)), YB = is(Su(), vu(), Eu(0), xu(255)), Ul = is(_u(Uint8Array), Sh(32)), JB = is(_u(Uint8Array), Sh(33)), QB = jf({
  wif: YB,
  bip32: jf({
    public: Mf,
    private: Mf
  })
}), e$ = is(Xw(), Zw(/^(m\/)?(\d+'?\/)*\d+'?$/));
function t$(e, t, r) {
  if (t.length !== 32)
    throw new TypeError("Invalid privateKey length");
  var n = new Uint8Array(34), o = new DataView(n.buffer);
  return o.setUint8(0, e), n.set(t, 1), n[33] = 1, n;
}
function r$(e) {
  return $i.encode(t$(e.version, e.privateKey));
}
const m0 = KB(Pt), b0 = {
  encode: (e) => m0.encode(e),
  decode: (e) => m0.decode(e)
};
function n$(e) {
  HB(e);
  const t = {
    messagePrefix: `Bitcoin Signed Message:
`,
    bech32: "bc",
    bip32: {
      public: 76067358,
      private: 76066276
    },
    pubKeyHash: 0,
    scriptHash: 5,
    wif: 128
  }, r = 2147483648;
  function n(h) {
    return h.length === 32 ? h : h.slice(1, 33);
  }
  class o {
    constructor(m, b) {
      ne(this, "__D");
      ne(this, "__Q");
      ne(this, "lowR", !1);
      this.__D = m, this.__Q = b;
    }
    get publicKey() {
      return this.__Q === void 0 && (this.__Q = e.pointFromScalar(this.__D, !0)), this.__Q;
    }
    get privateKey() {
      return this.__D;
    }
    sign(m, b) {
      if (!this.privateKey)
        throw new Error("Missing private key");
      if (b === void 0 && (b = this.lowR), b === !1)
        return e.sign(m, this.privateKey);
      {
        let y = e.sign(m, this.privateKey);
        const g = new Uint8Array(32);
        let x = 0;
        for (; y[0] > 127; )
          x++, Io(g, 0, x, "LE"), y = e.sign(m, this.privateKey, g);
        return y;
      }
    }
    signSchnorr(m) {
      if (!this.privateKey)
        throw new Error("Missing private key");
      if (!e.signSchnorr)
        throw new Error("signSchnorr not supported by ecc library");
      return e.signSchnorr(m, this.privateKey);
    }
    verify(m, b) {
      return e.verify(m, this.publicKey, b);
    }
    verifySchnorr(m, b) {
      if (!e.verifySchnorr)
        throw new Error("verifySchnorr not supported by ecc library");
      return e.verifySchnorr(m, this.publicKey.subarray(1, 33), b);
    }
  }
  class i extends o {
    constructor(b, y, g, x, S = 0, v = 0, T = 0) {
      super(b, y);
      ne(this, "chainCode");
      ne(this, "network");
      ne(this, "__DEPTH");
      ne(this, "__INDEX");
      ne(this, "__PARENT_FINGERPRINT");
      this.chainCode = g, this.network = x, this.__DEPTH = S, this.__INDEX = v, this.__PARENT_FINGERPRINT = T, yn(QB, x);
    }
    get depth() {
      return this.__DEPTH;
    }
    get index() {
      return this.__INDEX;
    }
    get parentFingerprint() {
      return this.__PARENT_FINGERPRINT;
    }
    get identifier() {
      return CB(this.publicKey);
    }
    get fingerprint() {
      return this.identifier.slice(0, 4);
    }
    get compressed() {
      return !0;
    }
    // Private === not neutered
    // Public === neutered
    isNeutered() {
      return this.__D === void 0;
    }
    neutered() {
      return f(this.publicKey, this.chainCode, this.network, this.depth, this.index, this.parentFingerprint);
    }
    toBase58() {
      const b = this.network, y = this.isNeutered() ? b.bip32.public : b.bip32.private, g = new Uint8Array(78);
      return Io(g, 0, y, "BE"), Gh(g, 4, this.depth), Io(g, 5, this.parentFingerprint, "BE"), Io(g, 9, this.index, "BE"), g.set(this.chainCode, 13), this.isNeutered() ? g.set(this.publicKey, 45) : (Gh(g, 45, 0), g.set(this.privateKey, 46)), b0.encode(g);
    }
    toWIF() {
      if (!this.privateKey)
        throw new TypeError("Missing private key");
      return r$({
        version: this.network.wif,
        privateKey: this.privateKey,
        compressed: !0
      });
    }
    // https://github.com/bitcoin/bips/blob/master/bip-0032.mediawiki#child-key-derivation-ckd-functions
    derive(b) {
      yn(Mf, b);
      const y = b >= r, g = new Uint8Array(37);
      if (y) {
        if (this.isNeutered())
          throw new TypeError("Missing private key for hardened child key");
        g[0] = 0, g.set(this.privateKey, 1), Io(g, 33, b, "BE");
      } else
        g.set(this.publicKey, 0), Io(g, 33, b, "BE");
      const x = p0(this.chainCode, g), S = x.slice(0, 32), v = x.slice(32);
      if (!e.isPrivate(S))
        return this.derive(b + 1);
      let T;
      if (this.isNeutered()) {
        const I = e.pointAddScalar(this.publicKey, S, !0);
        if (I === null)
          return this.derive(b + 1);
        T = f(I, v, this.network, this.depth + 1, b, yi(this.fingerprint, 0, "BE"));
      } else {
        const I = e.privateAdd(this.privateKey, S);
        if (I == null)
          return this.derive(b + 1);
        T = c(I, v, this.network, this.depth + 1, b, yi(this.fingerprint, 0, "BE"));
      }
      return T;
    }
    deriveHardened(b) {
      if (typeof yn(XB, b) == "number")
        return this.derive(b + r);
      throw new TypeError("Expected UInt31, got " + b);
    }
    derivePath(b) {
      yn(e$, b);
      let y = b.split("/");
      if (y[0] === "m") {
        if (this.parentFingerprint)
          throw new TypeError("Expected master, got child");
        y = y.slice(1);
      }
      return y.reduce((g, x) => {
        let S;
        return x.slice(-1) === "'" ? (S = parseInt(x.slice(0, -1), 10), g.deriveHardened(S)) : (S = parseInt(x, 10), g.derive(S));
      }, this);
    }
    tweak(b) {
      return this.privateKey ? this.tweakFromPrivateKey(b) : this.tweakFromPublicKey(b);
    }
    tweakFromPublicKey(b) {
      const y = n(this.publicKey);
      if (!e.xOnlyPointAddTweak)
        throw new Error("xOnlyPointAddTweak not supported by ecc library");
      const g = e.xOnlyPointAddTweak(y, b);
      if (!g || g.xOnlyPubkey === null)
        throw new Error("Cannot tweak public key!");
      const x = Uint8Array.from([
        g.parity === 0 ? 2 : 3
      ]), S = ox([
        x,
        g.xOnlyPubkey
      ]);
      return new o(void 0, S);
    }
    tweakFromPrivateKey(b) {
      const y = this.publicKey[0] === 3 || this.publicKey[0] === 4 && (this.publicKey[64] & 1) === 1, g = (() => {
        if (y) {
          if (e.privateNegate)
            return e.privateNegate(this.privateKey);
          throw new Error("privateNegate not supported by ecc library");
        } else return this.privateKey;
      })(), x = e.privateAdd(g, b);
      if (!x)
        throw new Error("Invalid tweaked private key!");
      return new o(x, void 0);
    }
  }
  function s(h, m) {
    const b = b0.decode(h);
    if (b.length !== 78)
      throw new TypeError("Invalid buffer length");
    m = m || t;
    const y = yi(b, 0, "BE");
    if (y !== m.bip32.private && y !== m.bip32.public)
      throw new TypeError("Invalid network version");
    const g = b[4], x = yi(b, 5, "BE");
    if (g === 0 && x !== 0)
      throw new TypeError("Invalid parent fingerprint");
    const S = yi(b, 9, "BE");
    if (g === 0 && S !== 0)
      throw new TypeError("Invalid index");
    const v = b.slice(13, 45);
    let T;
    if (y === m.bip32.private) {
      if (b[45] !== 0)
        throw new TypeError("Invalid private key");
      const I = b.slice(46, 78);
      T = c(I, v, m, g, S, x);
    } else {
      const I = b.slice(45, 78);
      T = f(I, v, m, g, S, x);
    }
    return T;
  }
  function a(h, m, b) {
    return c(h, m, b);
  }
  function c(h, m, b, y, g, x) {
    if (yn(Ul, h), yn(Ul, m), b = b || t, !e.isPrivate(h))
      throw new TypeError("Private key not in range [1, n)");
    return new i(h, void 0, m, b, y, g, x);
  }
  function u(h, m, b) {
    return f(h, m, b);
  }
  function f(h, m, b, y, g, x) {
    if (yn(JB, h), yn(Ul, m), b = b || t, !e.isPoint(h))
      throw new TypeError("Point is not on the curve");
    return new i(void 0, h, m, b, y, g, x);
  }
  function l(h, m) {
    if (yn(_u(Uint8Array), h), h.length < 16)
      throw new TypeError("Seed should be at least 128 bits");
    if (h.length > 64)
      throw new TypeError("Seed should be at most 512 bits");
    m = m || t;
    const b = p0(nx("Bitcoin seed"), h), y = b.slice(0, 32), g = b.slice(32);
    return a(y, g, m);
  }
  return {
    fromSeed: l,
    fromBase58: s,
    fromPublicKey: u,
    fromPrivateKey: a
  };
}
const o$ = n$(uh);
ig(uh);
const i$ = async ({
  contentBase64: e,
  mimeType: t,
  quantity: r = 1,
  inscriptions: n,
  ordinalAddress: o,
  paymentAddress: i,
  paymentPublicKey: s,
  signPsbt: a,
  network: c = Me
}) => {
  try {
    if (!e && !n)
      throw new Error("contentBase64 or inscriptions is required");
    const u = await c$(c), f = Buffer.from(u).toString("hex"), l = n || Array(r).fill({
      content: e,
      mimeType: t
    }), h = await s$({
      inscriptions: l,
      paymentAddress: i,
      paymentPublicKey: s,
      privKey: f,
      network: c
    });
    if (!h || !(h != null && h.psbtHex))
      throw new Error("couldn't get commit tx");
    const m = String(h == null ? void 0 : h.psbtHex), b = String(h == null ? void 0 : h.psbtBase64), y = await a(
      "",
      m,
      b,
      !0,
      !1,
      c
    );
    if (!y) throw new Error("sign psbt failed");
    const x = et.fromHex((y == null ? void 0 : y.signedPsbtHex) || "").extractTransaction(), S = await vh(x.toHex(), c);
    if (!S) throw new Error("commit tx failed");
    return await a$({
      inscriptions: l,
      ordinalAddress: o,
      privKey: f,
      commitTxId: S,
      network: c
    });
  } catch (u) {
    throw u;
  }
}, s$ = async ({
  inscriptions: e,
  paymentAddress: t,
  paymentPublicKey: r,
  privKey: n,
  network: o
}) => {
  try {
    const i = e.length, s = e.reduce(
      (P, H) => P + Buffer.from(H.content).length,
      0
    );
    if (s > 39e4)
      throw new Error("Content size is too large, must be less than 390kb");
    const { fastestFee: a } = await f$(o), c = am(String(n), !0), u = new et({
      network: At(o)
    }), { inscriberAddress: f } = u$(
      c,
      e,
      o
    ), l = 5 * 34 * i, h = Math.floor(l * a * i), m = Math.floor(s * a / 3) + 1e3 + 546 * i, b = Math.floor(h + m), g = (await yh(
      t,
      o
    )).filter((P) => P.value > 3e3).sort((P, H) => H.value - P.value), x = oB(g);
    if (x === 0)
      throw new Error("insufficient funds");
    if (x < b)
      throw new Error("insufficient funds");
    let S = 0;
    const v = await id(
      t,
      At(o)
    );
    let T = 0;
    for await (const P of g) {
      const H = iB(t, o);
      if (console.log({ paymentAddressType: H }), u.addInput({
        hash: P.txid,
        index: P.vout,
        witnessUtxo: { value: BigInt(P.value), script: v }
      }), H === bs && u.updateInput(T, {
        tapInternalKey: vs(Buffer.from(r, "hex"))
      }), H === B0) {
        let j = fw(r, o);
        u.updateInput(T, { redeemScript: j });
      }
      if (T++, S += P.value, S > b)
        break;
    }
    const I = S - b;
    return u.addOutput({
      value: BigInt(m),
      address: f
    }), I > 546 && u.addOutput({
      value: BigInt(I),
      address: t
    }), {
      psbtHex: u.toHex(),
      psbtBase64: u.toBase64()
    };
  } catch (i) {
    throw i;
  }
}, a$ = async ({
  inscriptions: e,
  ordinalAddress: t,
  commitTxId: r,
  privKey: n,
  network: o,
  isDry: i
}) => {
  try {
    const s = fk(n), a = am(n, !0), c = Yw(a, e), u = xc.encodeScript(c), [f, l] = xc.getPubKey(a, { target: u });
    if (!await l$(String(r), o))
      throw new Error("ERROR WAITING FOR COMMIT TX");
    const m = await d$(
      r,
      0,
      o
    );
    if (m === 0 || !m)
      throw new Error("ERROR GETTING FIRST INPUT VALUE");
    const b = Ur.create({
      vin: [
        {
          txid: r,
          vout: 0,
          prevout: {
            value: m,
            scriptPubKey: ["OP_1", f]
          }
        }
      ],
      vout: [
        ...Array(e.length).fill({
          value: 546,
          scriptPubKey: ey.toScriptPubKey(t)
        })
      ]
    }), y = q6.taproot.sign(s, b, 0, { extension: u });
    return b.vin[0].witness = [y, c, l], i ? Ur.util.getTxid(b) : await vh(Ur.encode(b).hex, o);
  } catch (s) {
    throw s;
  }
};
async function c$(e) {
  const t = crypto.getRandomValues(new Uint8Array(32)), r = PB(Buffer.from(t)), n = await IB(r), o = o$.fromSeed(n, At(e));
  return o == null ? void 0 : o.derivePath("m/44'/0'/0'/0/0").privateKey;
}
const Yw = (e, t) => {
  const r = new TextEncoder(), n = r.encode("ord"), o = 546, i = (a, c) => {
    let u;
    if (c === rB) {
      const l = Buffer.from(a, "base64").toString("utf-8");
      u = Buffer.from(l, "utf-8");
    } else
      u = Buffer.from(a, "base64");
    const f = [];
    for (let l = 0; l < u.length; l += 520)
      f.push(u.slice(l, l + 520));
    return f;
  }, s = [e, "OP_CHECKSIG"];
  return t.forEach((a, c) => {
    const { content: u, mimeType: f } = a, l = i(u, f);
    if (s.push("OP_0", "OP_IF", n, "01", r.encode(f), "OP_0"), c > 0) {
      const h = o * (c + 1), m = Buffer.from([h]);
      s.push(Buffer.from([2])), s.push(m);
    }
    s.push(...l.map((h) => h), "OP_ENDIF");
  }), s;
}, u$ = (e, t, r = Me) => {
  const n = Yw(e, t), o = xc.encodeScript(n), [i] = xc.getPubKey(e, { target: o });
  return {
    inscriberAddress: ey.p2tr.fromPubKey(
      i,
      wP(r)
    ),
    tpubkey: i,
    tapleaf: o
  };
};
async function Jw(e, t = Me) {
  try {
    return await ct.get(`${bu(t)}/api/tx/${e}`).then((r) => r.data);
  } catch (r) {
    throw r;
  }
}
async function l$(e, t) {
  const n = Date.now();
  for (; ; )
    try {
      if (await Jw(e, t))
        return console.log("Transaction found in mempool:", e), !0;
      if (Date.now() - n > 6e4)
        return !1;
      await new Promise((i) => setTimeout(i, 5e3));
    } catch {
      if (Date.now() - n > 6e4)
        return !1;
      await new Promise((i) => setTimeout(i, 5e3));
    }
}
const f$ = async (e) => await ct.get(`${bu(e)}/api/v1/fees/recommended`, {
  headers: {
    "Content-Type": "application/json"
  }
}).then((t) => t.data);
async function d$(e, t, r) {
  const o = Date.now();
  for (; ; )
    try {
      const i = await Jw(e, r);
      if (i && i.vout && i.vout.length > 0)
        return Math.floor(i.vout[t].value);
      if (Date.now() - o > 6e4)
        return null;
      await new Promise((s) => setTimeout(s, 5e3));
    } catch (i) {
      if (console.error("Error fetching transaction output value:", i), Date.now() - o > 6e4)
        return null;
      await new Promise((s) => setTimeout(s, 5e3));
    }
}
const Df = new Error(
  "The connected wallet doesn't support this method..."
), h$ = new Error("Wallet is not installed");
class Kr {
  constructor(t, r, n) {
    ne(this, "$store");
    ne(this, "$network");
    this.parent = r, this.config = n, this.$store = t.$store, this.$network = t.$network, this.initialize();
  }
  disconnect() {
  }
  async requestAccounts() {
    return [this.$store.get().address, this.$store.get().paymentAddress];
  }
  switchNetwork(t) {
    throw this.parent.disconnect(), Df;
  }
  async getNetwork() {
    const { address: t } = this.$store.get();
    return t.slice(0, 1) === "t" && [Ze, $t, jt, Nt].includes(this.$network.get()) ? this.$network.get() : Me;
  }
  async getPublicKey() {
    return this.$store.get().publicKey;
  }
  async getBalance() {
    const { paymentAddress: t } = this.$store.get();
    return await os(t, this.$network.get());
  }
  async getInscriptions(t, r) {
    throw console.log("getInscriptions not implemented", t, r), Df;
  }
  async pushPsbt(t) {
    let r = t;
    return r.startsWith("02") || (console.log("extracting tx..."), r = et.fromHex(r).extractTransaction().toHex()), await vh(r, this.$network.get());
  }
  async inscribe(t, r) {
    return await i$({
      contentBase64: t,
      mimeType: r,
      ordinalAddress: this.$store.get().address,
      paymentAddress: this.$store.get().paymentAddress,
      paymentPublicKey: this.$store.get().paymentPublicKey,
      signPsbt: this.signPsbt.bind(this),
      network: this.$network.get()
    });
  }
}
class p$ extends Kr {
  constructor() {
    super(...arguments);
    ne(this, "observer");
  }
  get library() {
    return window.unisat;
  }
  get network() {
    return this.$network.get();
  }
  initialize() {
    typeof window < "u" && typeof document < "u" && (this.observer = new window.MutationObserver(() => {
      var r;
      this.library && (this.$store.setKey("hasProvider", {
        ...this.$store.get().hasProvider,
        [Po]: !0
      }), (r = this.observer) == null || r.disconnect());
    }), this.observer.observe(document, { childList: !0, subtree: !0 })), Sr(this.$store, ["provider"], (r) => {
      if (r.provider !== Po) {
        this.removeListeners();
        return;
      }
      this.library.getAccounts().then((n) => {
        this.handleAccountsChanged(n);
      }), this.addListeners();
    });
  }
  addListeners() {
    this.library.on("accountsChanged", this.handleAccountsChanged.bind(this)), this.library.on("networkChanged", this.handleNetworkChanged.bind(this));
  }
  removeListeners() {
    var r, n;
    this.library && ((r = this.library) == null || r.removeListener(
      "accountsChanged",
      this.handleAccountsChanged.bind(this)
    ), (n = this.library) == null || n.removeListener(
      "networkChanged",
      this.handleNetworkChanged.bind(this)
    ));
  }
  dispose() {
    var r;
    (r = this.observer) == null || r.disconnect(), this.removeListeners();
  }
  handleAccountsChanged(r) {
    if (!r.length) {
      this.parent.disconnect();
      return;
    }
    this.$store.get().accounts[0] !== r[0] && (this.$store.setKey("accounts", r), r.length > 0 ? this.parent.connect(Po) : this.parent.disconnect());
  }
  handleNetworkChanged(r) {
    const n = Nc(r);
    this.network !== n && this.switchNetwork(n), this.parent.connect(Po);
  }
  async connect(r) {
    if (!this.library) throw new Error("Unisat isn't installed");
    const n = await this.library.requestAccounts();
    if (!n) throw new Error("No accounts found");
    await this.getNetwork().then((i) => {
      this.network !== i && this.switchNetwork(this.network);
    });
    const o = await this.library.getPublicKey();
    if (!o) throw new Error("No public key found");
    this.$store.setKey("accounts", n), this.$store.setKey("address", n[0]), this.$store.setKey("paymentAddress", n[0]), this.$store.setKey("publicKey", o), this.$store.setKey("paymentPublicKey", o), this.$store.setKey("provider", Po), this.$store.setKey("connected", !0);
  }
  async getNetwork() {
    var n;
    const r = await ((n = this.library) == null ? void 0 : n.getChain());
    return r ? Nc(r.enum) : this.network;
  }
  async sendBTC(r, n) {
    var i;
    const o = await ((i = this.library) == null ? void 0 : i.sendBitcoin(r, n));
    if (!o) throw new Error("Transaction failed");
    return o;
  }
  async signMessage(r, n) {
    var o;
    return await ((o = this.library) == null ? void 0 : o.signMessage(r));
  }
  async signPsbt(r, n, o, i, s) {
    var u;
    const a = await ((u = this.library) == null ? void 0 : u.signPsbt(n, {
      autoFinalized: i
    })), c = et.fromHex(a);
    if (i && s) {
      const f = await this.pushPsbt(a);
      return {
        signedPsbtHex: c.toHex(),
        signedPsbtBase64: c.toBase64(),
        txId: f
      };
    }
    return {
      signedPsbtHex: c.toHex(),
      signedPsbtBase64: c.toBase64(),
      txId: void 0
    };
  }
  async getPublicKey() {
    var r;
    return await ((r = this.library) == null ? void 0 : r.getPublicKey());
  }
  async getBalance() {
    return (await this.library.getBalance()).total;
  }
  async getInscriptions(r, n) {
    const o = r || 0, i = n || 10;
    return await this.library.getInscriptions(o, i);
  }
  async requestAccounts() {
    return await this.library.requestAccounts();
  }
  async switchNetwork(r) {
    var o;
    const n = jy(r);
    await ((o = this.library) == null ? void 0 : o.switchChain(n)), this.$network.set(r);
  }
}
const g$ = (e) => /^(?:[A-Za-z0-9+\/]{4})*?(?:[A-Za-z0-9+\/]{2}==|[A-Za-z0-9+\/]{3}=)?$/.test(e), m$ = (e) => /^[a-fA-F0-9]+$/.test(e);
function b$(e) {
  typeof window < "u" && typeof localStorage < "u" && setTimeout(() => {
    const t = document.createTextNode(" ");
    document.body.appendChild(t), t.remove(), e();
  }, 1500);
}
function L7() {
  return {
    $store: O0({
      provider: void 0,
      address: "",
      paymentAddress: "",
      publicKey: "",
      paymentPublicKey: "",
      connected: !1,
      isConnecting: !1,
      isInitializing: !0,
      accounts: [],
      balance: void 0,
      hasProvider: {
        [xi]: !1,
        [Po]: !1,
        [wn]: !1,
        [Ei]: !1,
        [No]: !1,
        [$o]: !1,
        [vi]: !1,
        [Uo]: !0,
        [Bo]: !1,
        [_i]: !1,
        [Oo]: !1
      }
    }),
    $network: Dl(Me),
    $library: Dl(void 0)
  };
}
function z7({ network: e }) {
  return {
    network: e
  };
}
const or = [
  "address",
  "paymentAddress",
  "publicKey",
  "paymentPublicKey",
  "balance"
], y$ = (e) => {
  const t = e.match(/.{1,2}/g);
  if (!t)
    throw new Error("Invalid hex string");
  return Uint8Array.from(t.map((r) => parseInt(r, 16)));
};
var Cl;
function w$(e) {
  return Cl == null ? void 0 : Cl.get(e);
}
var Hl;
function v$(e) {
  return Hl == null ? void 0 : Hl.get(e);
}
var Rl;
function x$(e, t) {
  var r;
  return (r = Rl == null ? void 0 : Rl.get(e)) == null ? void 0 : r.get(t);
}
function ku(e) {
  var r, n;
  let t = typeof e;
  return t === "object" && (t = (e && ((n = (r = Object.getPrototypeOf(e)) == null ? void 0 : r.constructor) == null ? void 0 : n.name)) ?? "null"), t === "string" ? `"${e}"` : t === "number" || t === "bigint" || t === "boolean" ? `${e}` : t;
}
function ir(e, t, r, n, o) {
  const i = o && "input" in o ? o.input : r.value, s = (o == null ? void 0 : o.expected) ?? e.expects ?? null, a = (o == null ? void 0 : o.received) ?? ku(i), c = {
    kind: e.kind,
    type: e.type,
    input: i,
    expected: s,
    received: a,
    message: `Invalid ${t}: ${s ? `Expected ${s} but r` : "R"}eceived ${a}`,
    // @ts-expect-error
    requirement: e.requirement,
    path: o == null ? void 0 : o.path,
    issues: o == null ? void 0 : o.issues,
    lang: n.lang,
    abortEarly: n.abortEarly,
    abortPipeEarly: n.abortPipeEarly
  }, u = e.kind === "schema", f = (o == null ? void 0 : o.message) ?? // @ts-expect-error
  e.message ?? x$(e.reference, c.lang) ?? (u ? v$(c.lang) : null) ?? n.message ?? w$(c.lang);
  f && (c.message = typeof f == "function" ? f(c) : f), u && (r.typed = !1), r.issues ? r.issues.push(c) : r.issues = [c];
}
function E$(e, t) {
  return Object.hasOwn(e, t) && t !== "__proto__" && t !== "prototype" && t !== "constructor";
}
function Qw(e, t, r) {
  return typeof e.default == "function" ? (
    // @ts-expect-error
    e.default(t, r)
  ) : (
    // @ts-expect-error
    e.default
  );
}
function y0(e, t) {
  return !e._run({ typed: !1, value: t }, { abortEarly: !0 }).issues;
}
function jr(e, t) {
  return {
    kind: "schema",
    type: "array",
    reference: jr,
    expects: "Array",
    async: !1,
    item: e,
    message: t,
    _run(r, n) {
      var i;
      const o = r.value;
      if (Array.isArray(o)) {
        r.typed = !0, r.value = [];
        for (let s = 0; s < o.length; s++) {
          const a = o[s], c = this.item._run({ typed: !1, value: a }, n);
          if (c.issues) {
            const u = {
              type: "array",
              origin: "value",
              input: o,
              key: s,
              value: a
            };
            for (const f of c.issues)
              f.path ? f.path.unshift(u) : f.path = [u], (i = r.issues) == null || i.push(f);
            if (r.issues || (r.issues = c.issues), n.abortEarly) {
              r.typed = !1;
              break;
            }
          }
          c.typed || (r.typed = !1), r.value.push(c.value);
        }
      } else
        ir(this, "type", r, n);
      return r;
    }
  };
}
function ev(e) {
  return {
    kind: "schema",
    type: "boolean",
    reference: ev,
    expects: "boolean",
    async: !1,
    message: e,
    _run(t, r) {
      return typeof t.value == "boolean" ? t.typed = !0 : ir(this, "type", t, r), t;
    }
  };
}
function Qo(e, t) {
  const r = Object.entries(e).filter(([n]) => isNaN(+n)).map(([, n]) => n);
  return {
    kind: "schema",
    type: "enum",
    reference: Qo,
    expects: r.map(ku).join(" | ") || "never",
    async: !1,
    enum: e,
    options: r,
    message: t,
    _run(n, o) {
      return this.options.includes(n.value) ? n.typed = !0 : ir(this, "type", n, o), n;
    }
  };
}
function ut(e, t) {
  return {
    kind: "schema",
    type: "literal",
    reference: ut,
    expects: ku(e),
    async: !1,
    literal: e,
    message: t,
    _run(r, n) {
      return r.value === this.literal ? r.typed = !0 : ir(this, "type", r, n), r;
    }
  };
}
function tv(e, t) {
  return {
    kind: "schema",
    type: "loose_object",
    reference: tv,
    expects: "Object",
    async: !1,
    entries: e,
    message: t,
    _run(r, n) {
      var i;
      const o = r.value;
      if (o && typeof o == "object") {
        r.typed = !0, r.value = {};
        for (const s in this.entries) {
          const a = o[s], c = this.entries[s]._run(
            { typed: !1, value: a },
            n
          );
          if (c.issues) {
            const u = {
              type: "object",
              origin: "value",
              input: o,
              key: s,
              value: a
            };
            for (const f of c.issues)
              f.path ? f.path.unshift(u) : f.path = [u], (i = r.issues) == null || i.push(f);
            if (r.issues || (r.issues = c.issues), n.abortEarly) {
              r.typed = !1;
              break;
            }
          }
          c.typed || (r.typed = !1), (c.value !== void 0 || s in o) && (r.value[s] = c.value);
        }
        if (!r.issues || !n.abortEarly)
          for (const s in o)
            E$(o, s) && !(s in this.entries) && (r.value[s] = o[s]);
      } else
        ir(this, "type", r, n);
      return r;
    }
  };
}
function kh(e, t) {
  return {
    kind: "schema",
    type: "non_optional",
    reference: kh,
    expects: "!undefined",
    async: !1,
    wrapped: e,
    message: t,
    _run(r, n) {
      return r.value === void 0 ? (ir(this, "type", r, n), r) : this.wrapped._run(r, n);
    }
  };
}
function si(e) {
  return {
    kind: "schema",
    type: "null",
    reference: si,
    expects: "null",
    async: !1,
    message: e,
    _run(t, r) {
      return t.value === null ? t.typed = !0 : ir(this, "type", t, r), t;
    }
  };
}
function ai(e, ...t) {
  const r = {
    kind: "schema",
    type: "nullish",
    reference: ai,
    expects: `${e.expects} | null | undefined`,
    async: !1,
    wrapped: e,
    _run(n, o) {
      return (n.value === null || n.value === void 0) && ("default" in this && (n.value = Qw(
        this,
        n,
        o
      )), n.value === null || n.value === void 0) ? (n.typed = !0, n) : this.wrapped._run(n, o);
    }
  };
  return 0 in t && (r.default = t[0]), r;
}
function nn(e) {
  return {
    kind: "schema",
    type: "number",
    reference: nn,
    expects: "number",
    async: !1,
    message: e,
    _run(t, r) {
      return typeof t.value == "number" && !isNaN(t.value) ? t.typed = !0 : ir(this, "type", t, r), t;
    }
  };
}
function ae(e, t) {
  return {
    kind: "schema",
    type: "object",
    reference: ae,
    expects: "Object",
    async: !1,
    entries: e,
    message: t,
    _run(r, n) {
      var i;
      const o = r.value;
      if (o && typeof o == "object") {
        r.typed = !0, r.value = {};
        for (const s in this.entries) {
          const a = o[s], c = this.entries[s]._run(
            { typed: !1, value: a },
            n
          );
          if (c.issues) {
            const u = {
              type: "object",
              origin: "value",
              input: o,
              key: s,
              value: a
            };
            for (const f of c.issues)
              f.path ? f.path.unshift(u) : f.path = [u], (i = r.issues) == null || i.push(f);
            if (r.issues || (r.issues = c.issues), n.abortEarly) {
              r.typed = !1;
              break;
            }
          }
          c.typed || (r.typed = !1), (c.value !== void 0 || s in o) && (r.value[s] = c.value);
        }
      } else
        ir(this, "type", r, n);
      return r;
    }
  };
}
function Mr(e, ...t) {
  const r = {
    kind: "schema",
    type: "optional",
    reference: Mr,
    expects: `${e.expects} | undefined`,
    async: !1,
    wrapped: e,
    _run(n, o) {
      return n.value === void 0 && ("default" in this && (n.value = Qw(
        this,
        n,
        o
      )), n.value === void 0) ? (n.typed = !0, n) : this.wrapped._run(n, o);
    }
  };
  return 0 in t && (r.default = t[0]), r;
}
function rv(e, t) {
  return {
    kind: "schema",
    type: "picklist",
    reference: rv,
    expects: e.map(ku).join(" | ") || "never",
    async: !1,
    options: e,
    message: t,
    _run(r, n) {
      return this.options.includes(r.value) ? r.typed = !0 : ir(this, "type", r, n), r;
    }
  };
}
function fe(e) {
  return {
    kind: "schema",
    type: "string",
    reference: fe,
    expects: "string",
    async: !1,
    message: e,
    _run(t, r) {
      return typeof t.value == "string" ? t.typed = !0 : ir(this, "type", t, r), t;
    }
  };
}
function Ah(e) {
  return {
    kind: "schema",
    type: "undefined",
    reference: Ah,
    expects: "undefined",
    async: !1,
    message: e,
    _run(t, r) {
      return t.value === void 0 ? t.typed = !0 : ir(this, "type", t, r), t;
    }
  };
}
function w0(e) {
  let t;
  if (e)
    for (const r of e)
      t ? t.push(...r.issues) : t = r.issues;
  return t;
}
function Au(e, t) {
  return {
    kind: "schema",
    type: "union",
    reference: Au,
    expects: [...new Set(e.map((r) => r.expects))].join(" | ") || "never",
    async: !1,
    options: e,
    message: t,
    _run(r, n) {
      let o, i, s;
      for (const a of this.options) {
        const c = a._run(
          { typed: !1, value: r.value },
          n
        );
        if (c.typed)
          if (c.issues)
            i ? i.push(c) : i = [c];
          else {
            o = c;
            break;
          }
        else
          s ? s.push(c) : s = [c];
      }
      if (o)
        return o;
      if (i) {
        if (i.length === 1)
          return i[0];
        ir(this, "type", r, n, {
          issues: w0(i)
        }), r.typed = !0;
      } else {
        if ((s == null ? void 0 : s.length) === 1)
          return s[0];
        ir(this, "type", r, n, {
          issues: w0(s)
        });
      }
      return r;
    }
  };
}
function Tu() {
  return {
    kind: "schema",
    type: "unknown",
    reference: Tu,
    expects: "unknown",
    async: !1,
    _run(e) {
      return e.typed = !0, e;
    }
  };
}
var pr = {}, qi = {}, Wt = {};
Object.defineProperty(Wt, "__esModule", { value: !0 });
Wt.decode = Wt.encode = Wt.unescape = Wt.escape = Wt.pad = void 0;
const nv = ts;
function Th(e) {
  return `${e}${"=".repeat(4 - (e.length % 4 || 4))}`;
}
Wt.pad = Th;
function ov(e) {
  return e.replace(/=/g, "").replace(/\+/g, "-").replace(/\//g, "_");
}
Wt.escape = ov;
function iv(e) {
  return Th(e).replace(/-/g, "+").replace(/_/g, "/");
}
Wt.unescape = iv;
function _$(e) {
  return ov((0, nv.fromByteArray)(new TextEncoder().encode(e)));
}
Wt.encode = _$;
function S$(e) {
  return new TextDecoder().decode((0, nv.toByteArray)(Th(iv(e))));
}
Wt.decode = S$;
var Iu = {}, Pu = {}, Vi = {};
Object.defineProperty(Vi, "__esModule", { value: !0 });
Vi.joseToDer = Vi.derToJose = void 0;
const sv = ts, av = Wt;
function Ll(e) {
  return (e / 8 | 0) + (e % 8 === 0 ? 0 : 1);
}
const k$ = {
  ES256: Ll(256),
  ES384: Ll(384),
  ES512: Ll(521)
};
function cv(e) {
  const t = k$[e];
  if (t)
    return t;
  throw new Error(`Unknown algorithm "${e}"`);
}
const Rc = 128, uv = 0, A$ = 32, T$ = 16, I$ = 2, lv = T$ | A$ | uv << 6, Lc = I$ | uv << 6;
function fv(e) {
  if (e instanceof Uint8Array)
    return e;
  if (typeof e == "string")
    return (0, sv.toByteArray)((0, av.pad)(e));
  throw new TypeError("ECDSA signature must be a Base64 string or a Uint8Array");
}
function P$(e, t) {
  const r = fv(e), n = cv(t), o = n + 1, i = r.length;
  let s = 0;
  if (r[s++] !== lv)
    throw new Error('Could not find expected "seq"');
  let a = r[s++];
  if (a === (Rc | 1) && (a = r[s++]), i - s < a)
    throw new Error(`"seq" specified length of "${a}", only "${i - s}" remaining`);
  if (r[s++] !== Lc)
    throw new Error('Could not find expected "int" for "r"');
  const c = r[s++];
  if (i - s - 2 < c)
    throw new Error(`"r" specified length of "${c}", only "${i - s - 2}" available`);
  if (o < c)
    throw new Error(`"r" specified length of "${c}", max of "${o}" is acceptable`);
  const u = s;
  if (s += c, r[s++] !== Lc)
    throw new Error('Could not find expected "int" for "s"');
  const f = r[s++];
  if (i - s !== f)
    throw new Error(`"s" specified length of "${f}", expected "${i - s}"`);
  if (o < f)
    throw new Error(`"s" specified length of "${f}", max of "${o}" is acceptable`);
  const l = s;
  if (s += f, s !== i)
    throw new Error(`Expected to consume entire array, but "${i - s}" bytes remain`);
  const h = n - c, m = n - f, b = new Uint8Array(h + c + m + f);
  for (s = 0; s < h; ++s)
    b[s] = 0;
  b.set(r.subarray(u + Math.max(-h, 0), u + c), s), s = n;
  for (const y = s; s < y + m; ++s)
    b[s] = 0;
  return b.set(r.subarray(l + Math.max(-m, 0), l + f), s), (0, av.escape)((0, sv.fromByteArray)(b));
}
Vi.derToJose = P$;
function v0(e, t, r) {
  let n = 0;
  for (; t + n < r && e[t + n] === 0; )
    ++n;
  return e[t + n] >= Rc && --n, n;
}
function O$(e, t) {
  e = fv(e);
  const r = cv(t), n = e.length;
  if (n !== r * 2)
    throw new TypeError(`"${t}" signatures must be "${r * 2}" bytes, saw "${n}"`);
  const o = v0(e, 0, r), i = v0(e, r, e.length), s = r - o, a = r - i, c = 2 + s + 1 + 1 + a, u = c < Rc, f = new Uint8Array((u ? 2 : 3) + c);
  let l = 0;
  return f[l++] = lv, u ? f[l++] = c : (f[l++] = Rc | 1, f[l++] = c & 255), f[l++] = Lc, f[l++] = s, o < 0 ? (f[l++] = 0, f.set(e.subarray(0, r), l), l += r) : (f.set(e.subarray(o, r), l), l += r - o), f[l++] = Lc, f[l++] = a, i < 0 ? (f[l++] = 0, f.set(e.subarray(r), l)) : f.set(e.subarray(r + i), l), f;
}
Vi.joseToDer = O$;
var $n = {};
Object.defineProperty($n, "__esModule", { value: !0 });
$n.InvalidTokenError = $n.MissingParametersError = void 0;
class B$ extends Error {
  constructor(t) {
    super(), this.name = "MissingParametersError", this.message = t || "";
  }
}
$n.MissingParametersError = B$;
class $$ extends Error {
  constructor(t) {
    super(), this.name = "InvalidTokenError", this.message = t || "";
  }
}
$n.InvalidTokenError = $$;
Object.defineProperty(Pu, "__esModule", { value: !0 });
Pu.SECP256K1Client = void 0;
const N$ = uu, U$ = Rr, Za = eh, x0 = Vi, E0 = $n, _0 = Eo;
Za.utils.hmacSha256Sync = (e, ...t) => {
  const r = N$.hmac.create(U$.sha256, e);
  return t.forEach((n) => r.update(n)), r.digest();
};
class dv {
  static derivePublicKey(t, r = !0) {
    return t.length === 66 && (t = t.slice(0, 64)), t.length < 64 && (t = t.padStart(64, "0")), (0, _0.bytesToHex)(Za.getPublicKey(t, r));
  }
  static signHash(t, r, n = "jose") {
    if (!t || !r)
      throw new E0.MissingParametersError("a signing input hash and private key are all required");
    const o = Za.signSync(t, r.slice(0, 64), {
      der: !0,
      canonical: !1
    });
    if (n === "der")
      return (0, _0.bytesToHex)(o);
    if (n === "jose")
      return (0, x0.derToJose)(o, "ES256");
    throw Error("Invalid signature format");
  }
  static loadSignature(t) {
    return (0, x0.joseToDer)(t, "ES256");
  }
  static verifyHash(t, r, n) {
    if (!t || !r || !n)
      throw new E0.MissingParametersError("a signing input hash, der signature, and public key are all required");
    return Za.verify(r, t, n, { strict: !1 });
  }
}
Pu.SECP256K1Client = dv;
dv.algorithmName = "ES256K";
(function(e) {
  Object.defineProperty(e, "__esModule", { value: !0 }), e.cryptoClients = e.SECP256K1Client = void 0;
  const t = Pu;
  Object.defineProperty(e, "SECP256K1Client", { enumerable: !0, get: function() {
    return t.SECP256K1Client;
  } });
  const r = {
    ES256K: t.SECP256K1Client
  };
  e.cryptoClients = r;
})(Iu);
var ei = {}, C$ = we && we.__awaiter || function(e, t, r, n) {
  function o(i) {
    return i instanceof r ? i : new r(function(s) {
      s(i);
    });
  }
  return new (r || (r = Promise))(function(i, s) {
    function a(f) {
      try {
        u(n.next(f));
      } catch (l) {
        s(l);
      }
    }
    function c(f) {
      try {
        u(n.throw(f));
      } catch (l) {
        s(l);
      }
    }
    function u(f) {
      f.done ? i(f.value) : o(f.value).then(a, c);
    }
    u((n = n.apply(e, t || [])).next());
  });
};
Object.defineProperty(ei, "__esModule", { value: !0 });
ei.hashSha256Async = ei.hashSha256 = void 0;
const H$ = Rr;
function hv(e) {
  return (0, H$.sha256)(e);
}
ei.hashSha256 = hv;
function R$(e) {
  return C$(this, void 0, void 0, function* () {
    try {
      if (typeof crypto < "u" && typeof crypto.subtle < "u") {
        const r = typeof e == "string" ? new TextEncoder().encode(e) : e, n = yield crypto.subtle.digest("SHA-256", r);
        return new Uint8Array(n);
      } else {
        const r = yy;
        if (!r.createHash)
          throw new Error("`crypto` module does not contain `createHash`");
        return Promise.resolve(r.createHash("sha256").update(e).digest());
      }
    } catch (t) {
      return console.log(t), console.log('Crypto lib not found. Neither the global `crypto.subtle` Web Crypto API, nor the or the Node.js `require("crypto").createHash` module is available. Falling back to JS implementation.'), Promise.resolve(hv(e));
    }
  });
}
ei.hashSha256Async = R$;
var L$ = we && we.__awaiter || function(e, t, r, n) {
  function o(i) {
    return i instanceof r ? i : new r(function(s) {
      s(i);
    });
  }
  return new (r || (r = Promise))(function(i, s) {
    function a(f) {
      try {
        u(n.next(f));
      } catch (l) {
        s(l);
      }
    }
    function c(f) {
      try {
        u(n.throw(f));
      } catch (l) {
        s(l);
      }
    }
    function u(f) {
      f.done ? i(f.value) : o(f.value).then(a, c);
    }
    u((n = n.apply(e, t || [])).next());
  });
};
Object.defineProperty(qi, "__esModule", { value: !0 });
qi.TokenSigner = qi.createUnsecuredToken = void 0;
const Ff = Wt, S0 = Iu, z$ = $n, k0 = ei;
function Kf(e, t) {
  const r = [], n = Ff.encode(JSON.stringify(t));
  r.push(n);
  const o = Ff.encode(JSON.stringify(e));
  return r.push(o), r.join(".");
}
function j$(e) {
  return Kf(e, { typ: "JWT", alg: "none" }) + ".";
}
qi.createUnsecuredToken = j$;
class M$ {
  constructor(t, r) {
    if (!(t && r))
      throw new z$.MissingParametersError("a signing algorithm and private key are required");
    if (typeof t != "string")
      throw new Error("signing algorithm parameter must be a string");
    if (t = t.toUpperCase(), !S0.cryptoClients.hasOwnProperty(t))
      throw new Error("invalid signing algorithm");
    this.tokenType = "JWT", this.cryptoClient = S0.cryptoClients[t], this.rawPrivateKey = r;
  }
  header(t = {}) {
    const r = { typ: this.tokenType, alg: this.cryptoClient.algorithmName };
    return Object.assign({}, r, t);
  }
  sign(t, r = !1, n = {}) {
    const o = this.header(n), i = Kf(t, o), s = (0, k0.hashSha256)(i);
    return this.createWithSignedHash(t, r, o, i, s);
  }
  signAsync(t, r = !1, n = {}) {
    return L$(this, void 0, void 0, function* () {
      const o = this.header(n), i = Kf(t, o), s = yield (0, k0.hashSha256Async)(i);
      return this.createWithSignedHash(t, r, o, i, s);
    });
  }
  createWithSignedHash(t, r, n, o, i) {
    const s = this.cryptoClient.signHash(i, this.rawPrivateKey);
    return r ? {
      header: [Ff.encode(JSON.stringify(n))],
      payload: JSON.stringify(t),
      signature: [s]
    } : [o, s].join(".");
  }
}
qi.TokenSigner = M$;
var Ou = {};
Object.defineProperty(Ou, "__esModule", { value: !0 });
Ou.TokenVerifier = void 0;
const D$ = Wt, A0 = Iu, F$ = $n, za = ei;
class K$ {
  constructor(t, r) {
    if (!(t && r))
      throw new F$.MissingParametersError("a signing algorithm and public key are required");
    if (typeof t != "string")
      throw "signing algorithm parameter must be a string";
    if (t = t.toUpperCase(), !A0.cryptoClients.hasOwnProperty(t))
      throw "invalid signing algorithm";
    this.tokenType = "JWT", this.cryptoClient = A0.cryptoClients[t], this.rawPublicKey = r;
  }
  verify(t) {
    return typeof t == "string" ? this.verifyCompact(t, !1) : typeof t == "object" ? this.verifyExpanded(t, !1) : !1;
  }
  verifyAsync(t) {
    return typeof t == "string" ? this.verifyCompact(t, !0) : typeof t == "object" ? this.verifyExpanded(t, !0) : Promise.resolve(!1);
  }
  verifyCompact(t, r) {
    const n = t.split("."), o = n[0] + "." + n[1], i = (s) => {
      const a = this.cryptoClient.loadSignature(n[2]);
      return this.cryptoClient.verifyHash(s, a, this.rawPublicKey);
    };
    if (r)
      return (0, za.hashSha256Async)(o).then((s) => i(s));
    {
      const s = (0, za.hashSha256)(o);
      return i(s);
    }
  }
  verifyExpanded(t, r) {
    const n = [t.header.join("."), D$.encode(t.payload)].join(".");
    let o = !0;
    const i = (s) => (t.signature.map((a) => {
      const c = this.cryptoClient.loadSignature(a);
      this.cryptoClient.verifyHash(s, c, this.rawPublicKey) || (o = !1);
    }), o);
    if (r)
      return (0, za.hashSha256Async)(n).then((s) => i(s));
    {
      const s = (0, za.hashSha256)(n);
      return i(s);
    }
  }
}
Ou.TokenVerifier = K$;
var Bu = {};
Object.defineProperty(Bu, "__esModule", { value: !0 });
Bu.decodeToken = void 0;
const ja = Wt;
function q$(e) {
  if (typeof e == "string") {
    const t = e.split("."), r = JSON.parse(ja.decode(t[0])), n = JSON.parse(ja.decode(t[1])), o = t[2];
    return {
      header: r,
      payload: n,
      signature: o
    };
  } else if (typeof e == "object") {
    if (typeof e.payload != "string")
      throw new Error("Expected token payload to be a base64 or json string");
    let t = e.payload;
    e.payload[0] !== "{" && (t = ja.decode(t));
    const r = [];
    return e.header.map((n) => {
      const o = JSON.parse(ja.decode(n));
      r.push(o);
    }), {
      header: r,
      payload: JSON.parse(t),
      signature: e.signature
    };
  }
}
Bu.decodeToken = q$;
(function(e) {
  var t = we && we.__createBinding || (Object.create ? function(n, o, i, s) {
    s === void 0 && (s = i);
    var a = Object.getOwnPropertyDescriptor(o, i);
    (!a || ("get" in a ? !o.__esModule : a.writable || a.configurable)) && (a = { enumerable: !0, get: function() {
      return o[i];
    } }), Object.defineProperty(n, s, a);
  } : function(n, o, i, s) {
    s === void 0 && (s = i), n[s] = o[i];
  }), r = we && we.__exportStar || function(n, o) {
    for (var i in n) i !== "default" && !Object.prototype.hasOwnProperty.call(o, i) && t(o, n, i);
  };
  Object.defineProperty(e, "__esModule", { value: !0 }), r(qi, e), r(Ou, e), r(Bu, e), r($n, e), r(Iu, e);
})(pr);
/*! *****************************************************************************
Copyright (c) Microsoft Corporation.

Permission to use, copy, modify, and/or distribute this software for any
purpose with or without fee is hereby granted.

THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
PERFORMANCE OF THIS SOFTWARE.
***************************************************************************** */
var T0 = "123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz";
(() => {
  const e = Array(256).fill(-1);
  for (let t = 0; t < T0.length; ++t) e[T0.charCodeAt(t)] = t;
})();
var I0, zl, Ma, Ih = (I0 = function(e, t) {
  Object.defineProperty(t, "__esModule", { value: !0 }), t.bech32m = t.bech32 = void 0;
  const r = "qpzry9x8gf2tvdw0s3jn54khce6mua7l", n = {};
  for (let l = 0; l < 32; l++) {
    const h = r.charAt(l);
    n[h] = l;
  }
  function o(l) {
    const h = l >> 25;
    return (33554431 & l) << 5 ^ 996825010 & -(h >> 0 & 1) ^ 642813549 & -(h >> 1 & 1) ^ 513874426 & -(h >> 2 & 1) ^ 1027748829 & -(h >> 3 & 1) ^ 705979059 & -(h >> 4 & 1);
  }
  function i(l) {
    let h = 1;
    for (let m = 0; m < l.length; ++m) {
      const b = l.charCodeAt(m);
      if (b < 33 || b > 126) return "Invalid prefix (" + l + ")";
      h = o(h) ^ b >> 5;
    }
    h = o(h);
    for (let m = 0; m < l.length; ++m) {
      const b = l.charCodeAt(m);
      h = o(h) ^ 31 & b;
    }
    return h;
  }
  function s(l, h, m, b) {
    let y = 0, g = 0;
    const x = (1 << m) - 1, S = [];
    for (let v = 0; v < l.length; ++v) for (y = y << h | l[v], g += h; g >= m; ) g -= m, S.push(y >> g & x);
    if (b) g > 0 && S.push(y << m - g & x);
    else {
      if (g >= h) return "Excess padding";
      if (y << m - g & x) return "Non-zero padding";
    }
    return S;
  }
  function a(l) {
    return s(l, 8, 5, !0);
  }
  function c(l) {
    const h = s(l, 5, 8, !1);
    if (Array.isArray(h)) return h;
  }
  function u(l) {
    const h = s(l, 5, 8, !1);
    if (Array.isArray(h)) return h;
    throw new Error(h);
  }
  function f(l) {
    let h;
    function m(b, y) {
      if (y = y || 90, b.length < 8) return b + " too short";
      if (b.length > y) return "Exceeds length limit";
      const g = b.toLowerCase(), x = b.toUpperCase();
      if (b !== g && b !== x) return "Mixed-case string " + b;
      const S = (b = g).lastIndexOf("1");
      if (S === -1) return "No separator character for " + b;
      if (S === 0) return "Missing prefix for " + b;
      const v = b.slice(0, S), T = b.slice(S + 1);
      if (T.length < 6) return "Data too short";
      let I = i(v);
      if (typeof I == "string") return I;
      const P = [];
      for (let H = 0; H < T.length; ++H) {
        const j = T.charAt(H), V = n[j];
        if (V === void 0) return "Unknown character " + j;
        I = o(I) ^ V, H + 6 >= T.length || P.push(V);
      }
      return I !== h ? "Invalid checksum for " + b : { prefix: v, words: P };
    }
    return h = l === "bech32" ? 1 : 734539939, { decodeUnsafe: function(b, y) {
      const g = m(b, y);
      if (typeof g == "object") return g;
    }, decode: function(b, y) {
      const g = m(b, y);
      if (typeof g == "object") return g;
      throw new Error(g);
    }, encode: function(b, y, g) {
      if (g = g || 90, b.length + 7 + y.length > g) throw new TypeError("Exceeds length limit");
      let x = i(b = b.toLowerCase());
      if (typeof x == "string") throw new Error(x);
      let S = b + "1";
      for (let v = 0; v < y.length; ++v) {
        const T = y[v];
        if (T >> 5) throw new Error("Non 5-bit word");
        x = o(x) ^ T, S += r.charAt(T);
      }
      for (let v = 0; v < 6; ++v) x = o(x);
      x ^= h;
      for (let v = 0; v < 6; ++v) S += r.charAt(x >> 5 * (5 - v) & 31);
      return S;
    }, toWords: a, fromWordsUnsafe: c, fromWords: u };
  }
  t.bech32 = f("bech32"), t.bech32m = f("bech32m");
}, I0(zl = { exports: {} }, zl.exports), zl.exports);
(Ma = Ih) && Ma.__esModule && Object.prototype.hasOwnProperty.call(Ma, "default") && Ma.default;
Ih.bech32m;
Ih.bech32;
new Uint8Array(new Uint16Array([65279]).buffer)[0];
var ki, Ai;
(function(e) {
  e.mainnet = "mainnet", e.testnet = "testnet", e.regtest = "regtest";
})(ki || (ki = {})), function(e) {
  e.p2pkh = "p2pkh", e.p2sh = "p2sh", e.p2wpkh = "p2wpkh", e.p2wsh = "p2wsh", e.p2tr = "p2tr";
}(Ai || (Ai = {}));
Ai.p2pkh, ki.mainnet, Ai.p2pkh, ki.testnet, Ai.p2sh, ki.mainnet, Ai.p2sh, ki.testnet;
var V$ = "accountChange";
ae({
  type: ut(V$)
});
var W$ = "networkChange";
ae({
  type: ut(W$)
});
var G$ = "disconnect";
ae({
  type: ut(G$)
});
async function $u(e) {
  var r;
  const t = await (e == null ? void 0 : e()) || ((r = window.XverseProviders) == null ? void 0 : r.BitcoinProvider) || window.BitcoinProvider;
  if (!t)
    throw new Error("No Bitcoin wallet installed");
  return t;
}
var pv = /* @__PURE__ */ ((e) => (e.Mainnet = "Mainnet", e.Testnet = "Testnet", e.Signet = "Signet", e))(pv || {}), Ph = Mr(Au([fe(), nn(), si()])), sr = ae({
  jsonrpc: ut("2.0"),
  method: fe(),
  params: Mr(
    Au([
      jr(Tu()),
      tv({}),
      // Note: This is to support current incorrect usage of RPC 2.0. Params need
      // to be either an array or an object when provided. Changing this now would
      // be a breaking change, so accepting null values for now. Tracking in
      // https://linear.app/xverseapp/issue/ENG-4538.
      si()
    ])
  ),
  id: Ph
}), Es = /* @__PURE__ */ ((e) => (e[e.PARSE_ERROR = -32700] = "PARSE_ERROR", e[e.INVALID_REQUEST = -32600] = "INVALID_REQUEST", e[e.METHOD_NOT_FOUND = -32601] = "METHOD_NOT_FOUND", e[e.INVALID_PARAMS = -32602] = "INVALID_PARAMS", e[e.INTERNAL_ERROR = -32603] = "INTERNAL_ERROR", e[e.USER_REJECTION = -32e3] = "USER_REJECTION", e[e.METHOD_NOT_SUPPORTED = -32001] = "METHOD_NOT_SUPPORTED", e[e.ACCESS_DENIED = -32002] = "ACCESS_DENIED", e))(Es || {}), gv = ae({
  jsonrpc: ut("2.0"),
  result: kh(Tu()),
  id: Ph
}), mv = ae({
  jsonrpc: ut("2.0"),
  error: kh(Tu()),
  id: Ph
});
Au([
  gv,
  mv
]);
var Nu = /* @__PURE__ */ ((e) => (e.Ordinals = "ordinals", e.Payment = "payment", e.Stacks = "stacks", e))(Nu || {}), bv = /* @__PURE__ */ ((e) => (e.p2pkh = "p2pkh", e.p2sh = "p2sh", e.p2wpkh = "p2wpkh", e.p2wsh = "p2wsh", e.p2tr = "p2tr", e.stacks = "stacks", e))(bv || {}), Z$ = ae({
  address: fe(),
  publicKey: fe(),
  purpose: Qo(Nu),
  addressType: Qo(bv)
}), yv = async (e) => {
  var n, o;
  const t = await $u(e.getProvider), { purposes: r } = e.payload;
  if (!r)
    throw new Error("Address purposes are required");
  try {
    const i = pr.createUnsecuredToken(e.payload), s = await t.connect(i);
    (n = e.onFinish) == null || n.call(e, s);
  } catch (i) {
    console.error("[Connect] Error during address request", i), (o = e.onCancel) == null || o.call(e);
  }
}, X$ = "stx_getAddresses", Y$ = ai(
  ae({
    /**
     * A message to be displayed to the user in the request prompt.
     */
    message: Mr(fe())
  })
);
ae({
  ...sr.entries,
  ...ae({
    method: ut(X$),
    params: Y$,
    id: fe()
  }).entries
});
var J$ = "stx_signTransaction", Q$ = ae({
  /**
   * The transaction to sign as a hex-encoded string.
   */
  transaction: fe(),
  /**
   * The public key to sign the transaction with. The wallet may use any key
   * when not provided.
   */
  pubkey: Mr(fe()),
  /**
   * Whether to broadcast the transaction after signing. Defaults to `true`.
   */
  broadcast: Mr(ev())
});
ae({
  ...sr.entries,
  ...ae({
    method: ut(J$),
    params: Q$,
    id: fe()
  }).entries
});
var eN = ["software", "ledger"], tN = rv(eN), rN = "getInfo", nN = ai(si());
ae({
  /**
   * Version of the wallet.
   */
  version: fe(),
  /**
   * [WBIP](https://wbips.netlify.app/wbips/WBIP002) methods supported by the wallet.
   */
  methods: Mr(jr(fe())),
  /**
   * List of WBIP standards supported by the wallet. Not currently used.
   */
  supports: jr(fe())
});
ae({
  ...sr.entries,
  ...ae({
    method: ut(rN),
    params: nN,
    id: fe()
  }).entries
});
var oN = "getAddresses", iN = ae({
  /**
   * The purposes for which to generate addresses. See
   * {@linkcode AddressPurpose} for available purposes.
   */
  purposes: jr(Qo(Nu)),
  /**
   * A message to be displayed to the user in the request prompt.
   */
  message: Mr(fe())
});
ae({
  ...sr.entries,
  ...ae({
    method: ut(oN),
    params: iN,
    id: fe()
  }).entries
});
var sN = "signMessage", ha = /* @__PURE__ */ ((e) => (e.ECDSA = "ECDSA", e.BIP322 = "BIP322", e))(ha || {}), aN = ae({
  /**
   * The address used for signing.
   **/
  address: fe(),
  /**
   * The message to sign.
   **/
  message: fe(),
  /**
   * The protocol to use for signing the message.
   */
  protocol: Mr(Qo(ha))
});
ae({
  /**
   * The signature of the message.
   */
  signature: fe(),
  /**
   * hash of the message.
   */
  messageHash: fe(),
  /**
   * The address used for signing.
   */
  address: fe(),
  /**
   * The protocol to use for signing the message.
   */
  protocol: Qo(ha)
});
ae({
  ...sr.entries,
  ...ae({
    method: ut(sN),
    params: aN,
    id: fe()
  }).entries
});
var cN = "getAccounts", uN = ae({
  /**
   * The purposes for which to generate addresses. See
   * {@linkcode AddressPurpose} for available purposes.
   */
  purposes: jr(Qo(Nu)),
  /**
   * A message to be displayed to the user in the request prompt.
   */
  message: Mr(fe())
});
jr(
  ae({
    ...Z$.entries,
    ...ae({
      walletType: tN
    }).entries
  })
);
ae({
  ...sr.entries,
  ...ae({
    method: ut(cN),
    params: uN,
    id: fe()
  }).entries
});
var lN = "getBalance";
ai(si());
ae({
  ...sr.entries,
  ...ae({
    method: ut(lN),
    id: fe()
  }).entries
});
var fN = "wallet_requestPermissions", dN = Ah();
ut(!0);
ae({
  ...sr.entries,
  ...ae({
    method: ut(fN),
    params: dN,
    id: fe()
  }).entries
});
var hN = "wallet_renouncePermissions", pN = Ah();
ut(!0);
ae({
  ...sr.entries,
  ...ae({
    method: ut(hN),
    params: pN,
    id: fe()
  }).entries
});
var gN = "wallet_getWalletType";
ai(si());
ae({
  ...sr.entries,
  ...ae({
    method: ut(gN),
    id: fe()
  }).entries
});
var mN = "runes_getBalance", bN = ai(si());
ae({
  balances: jr(
    ae({
      runeName: fe(),
      amount: fe(),
      divisibility: nn(),
      symbol: fe(),
      inscriptionId: ai(fe())
    })
  )
});
ae({
  ...sr.entries,
  ...ae({
    method: ut(mN),
    params: bN,
    id: fe()
  }).entries
});
var yN = "runes_transfer", wN = ae({
  recipients: jr(
    ae({
      runeName: fe(),
      amount: fe(),
      address: fe()
    })
  )
});
ae({
  ...sr.entries,
  ...ae({
    method: ut(yN),
    params: wN,
    id: fe()
  }).entries
});
var vN = "ord_getInscriptions", xN = ae({
  offset: nn(),
  limit: nn()
});
ae({
  total: nn(),
  limit: nn(),
  offset: nn(),
  inscriptions: jr(
    ae({
      inscriptionId: fe(),
      inscriptionNumber: fe(),
      address: fe(),
      collectionName: Mr(fe()),
      postage: fe(),
      contentLength: fe(),
      contentType: fe(),
      timestamp: nn(),
      offset: nn(),
      genesisTransaction: fe(),
      output: fe()
    })
  )
});
ae({
  ...sr.entries,
  ...ae({
    method: ut(vN),
    params: xN,
    id: fe()
  }).entries
});
var EN = "ord_sendInscriptions", _N = ae({
  transfers: jr(
    ae({
      address: fe(),
      inscriptionId: fe()
    })
  )
});
ae({
  ...sr.entries,
  ...ae({
    method: ut(EN),
    params: _N,
    id: fe()
  }).entries
});
var Da = async (e, t, r) => {
  var i;
  let n = ((i = window.XverseProviders) == null ? void 0 : i.BitcoinProvider) || window.BitcoinProvider;
  if (!n)
    throw new Error("no wallet provider was found");
  if (!e)
    throw new Error("A wallet method is required");
  const o = await n.request(e, t);
  return y0(mv, o) ? {
    status: "error",
    error: o.error
  } : y0(gv, o) ? {
    status: "success",
    result: o.result
  } : {
    status: "error",
    error: {
      code: -32603,
      message: "Received unknown response from provider.",
      data: o
    }
  };
}, SN = async (e) => {
  var o, i;
  const t = await $u(e.getProvider), { address: r, message: n } = e.payload;
  if (!r)
    throw new Error("An address is required to sign a message");
  if (!n)
    throw new Error("A message to be signed is required");
  try {
    const s = pr.createUnsecuredToken(e.payload), a = await t.signMessage(s);
    (o = e.onFinish) == null || o.call(e, a);
  } catch (s) {
    console.error("[Connect] Error during sign message request", s), (i = e.onCancel) == null || i.call(e);
  }
}, kN = (e) => e.map((t) => {
  const { address: r, amountSats: n } = t;
  return {
    address: r,
    amountSats: n.toString()
  };
}), AN = async (e) => {
  var s, a;
  const t = await $u(e.getProvider), { recipients: r, senderAddress: n, network: o, message: i } = e.payload;
  if (!r || r.length === 0)
    throw new Error("At least one recipient is required");
  if (r.some(
    (c) => typeof c.address != "string" || typeof c.amountSats != "bigint"
  ))
    throw new Error("Incorrect recipient format");
  if (!n)
    throw new Error("The sender address is required");
  try {
    const c = kN(r), u = {
      network: o,
      senderAddress: n,
      message: i,
      recipients: c
    }, f = pr.createUnsecuredToken(u), l = await t.sendBtcTransaction(f);
    (s = e.onFinish) == null || s.call(e, l);
  } catch (c) {
    console.error("[Connect] Error during send BTC transaction request", c), (a = e.onCancel) == null || a.call(e);
  }
}, TN = async (e) => {
  var o, i;
  const t = await $u(e.getProvider), { psbtBase64: r, inputsToSign: n } = e.payload;
  if (!r)
    throw new Error("A value for psbtBase64 representing the tx hash is required");
  if (!n)
    throw new Error("An array specifying the inputs to be signed by the wallet is required");
  try {
    const s = pr.createUnsecuredToken(e.payload), a = await t.signTransaction(s);
    (o = e.onFinish) == null || o.call(e, a);
  } catch (s) {
    console.error("[Connect] Error during sign transaction request", s), (i = e.onCancel) == null || i.call(e);
  }
};
let P0 = (e) => e, ms = {}, uo = { addEventListener() {
}, removeEventListener() {
} };
function IN() {
  try {
    return typeof localStorage < "u";
  } catch {
    return !1;
  }
}
IN() && (ms = localStorage);
let PN = {
  addEventListener(e, t, r) {
    window.addEventListener("storage", t), window.addEventListener("pageshow", r);
  },
  removeEventListener(e, t, r) {
    window.removeEventListener("storage", t), window.removeEventListener("pageshow", r);
  }
};
typeof window < "u" && (uo = PN);
function ci(e, t = {}, r = {}) {
  let n = r.encode || P0, o = r.decode || P0, i = O0(), s = i.setKey, a = (l, h) => {
    typeof h > "u" ? (r.listen !== !1 && uo.perKey && uo.removeEventListener(e + l, u, f), delete ms[e + l]) : (r.listen !== !1 && uo.perKey && !(l in i.value) && uo.addEventListener(e + l, u, f), ms[e + l] = n(h));
  };
  i.setKey = (l, h) => {
    a(l, h), s(l, h);
  };
  let c = i.set;
  i.set = function(l) {
    for (let h in l)
      a(h, l[h]);
    for (let h in i.value)
      h in l || a(h, void 0);
    c(l);
  };
  function u(l) {
    l.key ? l.key.startsWith(e) && (l.newValue === null ? s(l.key.slice(e.length), void 0) : s(l.key.slice(e.length), o(l.newValue))) : c({});
  }
  function f() {
    let l = { ...t };
    for (let h in ms)
      h.startsWith(e) && (l[h.slice(e.length)] = o(ms[h]));
    for (let h in l)
      i.setKey(h, l[h]);
  }
  return Mv(i, () => {
    if (f(), r.listen !== !1)
      return uo.addEventListener(e, u, f), () => {
        uo.removeEventListener(e, u, f);
        for (let l in i.value)
          uo.removeEventListener(e + l, u, f);
      };
  }), i;
}
const ON = "XVERSE_CONNECTED_WALLET_STATE";
class BN extends Kr {
  constructor() {
    super(...arguments);
    ne(this, "observer");
    ne(this, "$valueStore", ci(
      ON,
      {
        address: "",
        paymentAddress: "",
        paymentPublicKey: "",
        publicKey: "",
        balance: ""
      }
    ));
    ne(this, "removeSubscriber");
  }
  get library() {
    return window == null ? void 0 : window.BitcoinProvider;
  }
  get network() {
    return this.$network.get();
  }
  restorePersistedValues() {
    const r = this.$valueStore.get();
    for (const n of or)
      this.$store.setKey(n, r[n]);
  }
  watchStateChange(r, n, o) {
    var i, s;
    o && r.provider === Oo && (o === "balance" ? this.$valueStore.setKey("balance", ((i = r.balance) == null ? void 0 : i.toString()) ?? "") : or.includes(o) && this.$valueStore.setKey(
      o,
      ((s = r[o]) == null ? void 0 : s.toString()) ?? ""
    ));
  }
  initialize() {
    Sr(this.$store, ["provider"], (r) => {
      r.provider !== Oo ? this.removeSubscriber && (this.$valueStore.set({
        address: "",
        paymentAddress: "",
        paymentPublicKey: "",
        publicKey: "",
        balance: ""
      }), this.removeSubscriber(), this.removeSubscriber = void 0) : this.removeSubscriber = this.$store.subscribe(
        this.watchStateChange.bind(this)
      );
    }), typeof window < "u" && typeof document < "u" && (this.observer = new window.MutationObserver(() => {
      var n, o;
      ((n = window == null ? void 0 : window.XverseProviders) == null ? void 0 : n.BitcoinProvider) && (this.$store.setKey("hasProvider", {
        ...this.$store.get().hasProvider,
        [Oo]: !0
      }), (o = this.observer) == null || o.disconnect());
    }), this.observer.observe(document, { childList: !0, subtree: !0 }));
  }
  dispose() {
    var r;
    (r = this.observer) == null || r.disconnect();
  }
  async connect(r) {
    const { address: n, paymentAddress: o } = this.$valueStore.get();
    try {
      if (n)
        if (n.startsWith("tb1") && Eh(this.network))
          this.disconnect();
        else {
          this.restorePersistedValues(), os(o, this.network).then((a) => {
            this.$store.setKey("balance", a);
          });
          return;
        }
      let i = Va(this.network || Me);
      await yv({
        payload: {
          purposes: ["ordinals", "payment"],
          message: "Connecting with lasereyes",
          network: {
            type: i
          }
        },
        onFinish: (a) => {
          const c = mh(a.addresses), u = bh(a.addresses);
          if (!c || !u)
            throw new Error("Could not find the addresses");
          c && u && (this.$store.setKey("address", c.address), this.$store.setKey("paymentAddress", u.address)), this.$store.setKey(
            "publicKey",
            String(a.addresses[0].publicKey)
          ), this.$store.setKey(
            "paymentPublicKey",
            String(a.addresses[1].publicKey)
          );
        },
        onCancel: () => {
          throw new Error(`User canceled lasereyes to ${Oo} wallet`);
        },
        onError: (a) => {
          throw new Error(`Can't lasereyes to ${Oo} wallet`);
        }
      });
    } catch (i) {
      throw i;
    }
  }
  async getNetwork() {
    const { address: r } = this.$store.get();
    return r.slice(0, 1) === "t" && [Ze, $t, jt, Nt].includes(this.network) ? this.network : Me;
  }
  async sendBTC(r, n) {
    const o = await Da("sendTransfer", {
      recipients: [
        {
          address: r,
          amount: n
        }
      ]
    });
    if (o.status === "success")
      return o.result.txid;
    throw o.error.code === Es.USER_REJECTION ? new Error("User rejected the request") : new Error("Error sending BTC: " + o.error.message);
  }
  async signMessage(r, n) {
    const o = n || this.$store.get().paymentAddress, i = await Da("signMessage", {
      address: o,
      message: r,
      protocol: ha.BIP322
    });
    if (i.status === "success")
      return i.result.signature;
    throw i.error.code === Es.USER_REJECTION ? new Error("User rejected the request") : new Error("Error signing message: " + i.error.message);
  }
  async signPsbt(r, n, o, i, s) {
    try {
      const a = et.fromBase64(String(o), {
        network: At(this.network)
      }), c = this.$store.get().address, u = this.$store.get().paymentAddress, f = a.data.inputs;
      let l = {};
      const h = {
        [c]: []
      }, m = {
        [u]: []
      };
      let b = 0;
      for await (let T of f) {
        if (T.witnessUtxo === void 0)
          m[u].push(Number(b));
        else {
          const { script: I } = T.witnessUtxo, P = Qs(
            I,
            At(this.network)
          );
          P === u ? m[u].push(Number(b)) : P === c && h[c].push(Number(b));
        }
        b++;
      }
      h[c].length > 0 && (l = { ...l, ...h }), m[u].length > 0 && (l = { ...l, ...m });
      let y, g, x, S;
      const v = await Da(
        "signPsbt",
        {
          psbt: o,
          broadcast: !!s,
          signInputs: l
        }
      );
      if (v.status === "success")
        S = et.fromBase64(v.result.psbt, { network: At(this.network) }), y = v.result.txid;
      else
        throw v.error.code === Es.USER_REJECTION ? new Error("User canceled the request") : new Error("Error signing psbt");
      if (!S)
        throw new Error("Error signing psbt");
      return i && !y ? (S.finalizeAllInputs(), g = S.toHex(), x = S.toBase64()) : (g = S.toHex(), x = S.toBase64()), {
        signedPsbtHex: g,
        signedPsbtBase64: x,
        txId: y
      };
    } catch (a) {
      throw console.error(a), a;
    }
  }
  async getInscriptions(r, n) {
    const s = await Da("ord_getInscriptions", { offset: r || 0, limit: n || 10 });
    if (s.status === "success")
      return console.log(s.result), s.result.inscriptions;
    throw console.error(s.error), new Error("Error getting inscriptions");
  }
}
class $N extends Kr {
  constructor() {
    super(...arguments);
    ne(this, "observer");
  }
  get library() {
    return window.wizz;
  }
  get network() {
    return this.$network.get();
  }
  handleNetworkChanged(r) {
    this.parent.connect(_i);
  }
  handleAccountsChanged(r) {
    if (!r.length) {
      this.parent.disconnect();
      return;
    }
    this.$store.get().accounts[0] !== r[0] && this.$store.setKey("accounts", r);
  }
  initialize() {
    Sr(this.$store, ["provider"], (r) => {
      r.provider === _i ? this.addLibraryListeners() : this.removeLibraryListeners();
    }), typeof window < "u" && typeof document < "u" && (this.observer = new window.MutationObserver(() => {
      var r;
      this.library && (this.$store.setKey("hasProvider", {
        ...this.$store.get().hasProvider,
        [_i]: !0
      }), (r = this.observer) == null || r.disconnect());
    }), this.observer.observe(document, { childList: !0, subtree: !0 }));
  }
  removeLibraryListeners() {
    var r, n;
    (r = this.library) == null || r.removeListener(
      "networkChanged",
      this.handleNetworkChanged.bind(this)
    ), (n = this.library) == null || n.removeListener(
      "accountsChanged",
      this.handleAccountsChanged.bind(this)
    );
  }
  addLibraryListeners() {
    var r, n;
    (r = this.library) == null || r.on("networkChanged", this.handleNetworkChanged.bind(this)), (n = this.library) == null || n.on("accountsChanged", this.handleAccountsChanged.bind(this));
  }
  dispose() {
    var r;
    (r = this.observer) == null || r.disconnect(), this.removeLibraryListeners();
  }
  async connect() {
    if (!this.library) throw h$;
    const r = await this.library.requestAccounts();
    if (!r) throw new Error("No accounts found");
    const n = await this.library.getPublicKey();
    if (!n) throw new Error("No public key found");
    this.$store.setKey("accounts", r), this.$store.setKey("address", r[0]), this.$store.setKey("paymentAddress", r[0]), this.$store.setKey("publicKey", n), this.$store.setKey("paymentPublicKey", n), this.$store.setKey("provider", _i), await this.getNetwork().then((o) => {
      var i;
      o && ((i = this.config) == null ? void 0 : i.network) !== o && this.parent.switchNetwork(o);
    }), this.$store.setKey("connected", !0);
  }
  async requestAccounts() {
    return await this.library.requestAccounts();
  }
  async getNetwork() {
    var n;
    const r = await ((n = this.library) == null ? void 0 : n.getNetwork());
    return r ? Jp(r) : void 0;
  }
  async switchNetwork(r) {
    var o;
    if (r === Nt || r === kr)
      return await this.library.switchNetwork(xs);
    const n = Jp(r);
    await ((o = this.library) == null ? void 0 : o.switchNetwork(n)), this.$network.set(r), await this.parent.getBalance();
  }
  async getPublicKey() {
    var r;
    return await ((r = this.library) == null ? void 0 : r.getPublicKey());
  }
  async getBalance() {
    return (await this.library.getBalance()).total;
  }
  async getInscriptions(r, n) {
    const o = r || 0, i = n || 10;
    return await this.library.getInscriptions(o, i);
  }
  async sendBTC(r, n) {
    var i;
    const o = await ((i = this.library) == null ? void 0 : i.sendBitcoin(r, n));
    if (o)
      return o;
    throw new Error("Error sending BTC");
  }
  async signMessage(r) {
    var n;
    return await ((n = this.library) == null ? void 0 : n.signMessage(r));
  }
  async signPsbt(r, n, o, i, s) {
    var f;
    const a = await ((f = this.library) == null ? void 0 : f.signPsbt(n, {
      autoFinalized: i,
      broadcast: !1
    })), c = et.fromHex(a);
    let u;
    return i && s && (u = await this.pushPsbt(a)), {
      signedPsbtHex: c.toHex(),
      signedPsbtBase64: c.toBase64(),
      txId: u
    };
  }
}
const NN = "OYL_CONNECTED_WALLET_STATE";
class UN extends Kr {
  constructor() {
    super(...arguments);
    ne(this, "observer");
    ne(this, "$valueStore", ci(
      NN,
      {
        address: "",
        paymentAddress: "",
        paymentPublicKey: "",
        publicKey: "",
        balance: ""
      }
    ));
    ne(this, "removeSubscriber");
  }
  get library() {
    return window.oyl;
  }
  get network() {
    return this.$network.get();
  }
  restorePersistedValues() {
    const r = this.$valueStore.get();
    for (const n of or)
      this.$store.setKey(n, r[n]);
  }
  watchStateChange(r, n, o) {
    var i, s;
    o && r.provider === vi && (o === "balance" ? this.$valueStore.setKey("balance", ((i = r.balance) == null ? void 0 : i.toString()) ?? "") : or.includes(o) && this.$valueStore.setKey(
      o,
      ((s = r[o]) == null ? void 0 : s.toString()) ?? ""
    ));
  }
  initialize() {
    typeof window < "u" && typeof document < "u" && (this.observer = new window.MutationObserver(() => {
      var n;
      (window == null ? void 0 : window.oyl) && (this.$store.setKey("hasProvider", {
        ...this.$store.get().hasProvider,
        [vi]: !0
      }), (n = this.observer) == null || n.disconnect());
    }), this.observer.observe(document, { childList: !0, subtree: !0 })), Sr(this.$store, ["provider"], (r) => {
      r.provider !== vi ? this.removeSubscriber && (this.$valueStore.set({
        address: "",
        publicKey: "",
        paymentAddress: "",
        paymentPublicKey: "",
        balance: ""
      }), this.removeSubscriber(), this.removeSubscriber = void 0) : this.removeSubscriber = this.$store.subscribe(
        this.watchStateChange.bind(this)
      );
    });
  }
  dispose() {
    var r;
    (r = this.observer) == null || r.disconnect();
  }
  async connect(r) {
    if (!this.library) throw new Error("Oyl isn't installed");
    if (xh(this.network))
      throw new Error(`${this.network} is not supported by Oyl`);
    const { nativeSegwit: n, taproot: o } = await this.library.getAddresses();
    if (!n || !o) throw new Error("No accounts found");
    this.$store.setKey("address", o.address), this.$store.setKey("paymentAddress", n.address), this.$store.setKey("publicKey", o.publicKey), this.$store.setKey("paymentPublicKey", n.publicKey), this.$store.setKey("provider", vi), this.$store.setKey("connected", !0);
  }
  async getNetwork() {
    return this.network;
  }
  async sendBTC(r, n) {
    const { psbtHex: o } = await wh(
      this.$store.get().address,
      this.$store.get().paymentAddress,
      r,
      n,
      this.$store.get().paymentPublicKey,
      this.network,
      7
    ), i = await this.signPsbt("", o, "", !0, !0);
    if (!i) throw new Error("Error sending BTC");
    return i.txId;
  }
  async signMessage(r, n) {
    const o = n || this.$store.get().paymentAddress;
    return (await this.library.signMessage({
      address: o,
      message: r
    })).signature;
  }
  async signPsbt(r, n, o, i, s) {
    const { psbt: a, txid: c } = await this.library.signPsbt({
      psbt: n,
      finalize: i,
      broadcast: s
    }), u = et.fromHex(a);
    return {
      signedPsbtHex: u.toHex(),
      signedPsbtBase64: u.toBase64(),
      txId: c
    };
  }
  async pushPsbt(r) {
    return (await this.library.pushPsbt({ psbt: r })).txid;
  }
  async getPublicKey() {
    var r;
    return await ((r = this.library) == null ? void 0 : r.getPublicKey());
  }
  async getBalance() {
    const { total: r } = await this.library.getBalance();
    return this.$store.setKey("balance", r), r;
  }
  async getInscriptions(r, n) {
    const o = r || 0, i = n || 10;
    return await this.library.getInscriptions(o, i);
  }
  async requestAccounts() {
    return await this.library.requestAccounts();
  }
  async switchNetwork() {
    throw Df;
  }
}
const CN = "LEATHER_CONNECTED_WALLET_STATE";
class HN extends Kr {
  constructor() {
    super(...arguments);
    ne(this, "observer");
    ne(this, "$valueStore", ci(
      CN,
      {
        address: "",
        publicKey: "",
        paymentAddress: "",
        paymentPublicKey: "",
        balance: ""
      }
    ));
    ne(this, "removeSubscriber");
  }
  get library() {
    return window.LeatherProvider;
  }
  get network() {
    return this.$network.get();
  }
  restorePersistedValues() {
    const r = this.$valueStore.get();
    for (const n of or)
      this.$store.setKey(n, r[n]);
  }
  watchStateChange(r, n, o) {
    var i, s;
    o && r.provider === xi && (o === "balance" ? this.$valueStore.setKey("balance", ((i = r.balance) == null ? void 0 : i.toString()) ?? "") : or.includes(o) && this.$valueStore.setKey(
      o,
      ((s = r[o]) == null ? void 0 : s.toString()) ?? ""
    ));
  }
  initialize() {
    typeof window < "u" && typeof document < "u" && (this.observer = new window.MutationObserver(() => {
      var n;
      (window == null ? void 0 : window.LeatherProvider) && (this.$store.setKey("hasProvider", {
        ...this.$store.get().hasProvider,
        [xi]: !0
      }), (n = this.observer) == null || n.disconnect());
    }), this.observer.observe(document, { childList: !0, subtree: !0 })), Sr(this.$store, ["provider"], (r) => {
      r.provider !== xi ? this.removeSubscriber && (this.$valueStore.set({
        address: "",
        publicKey: "",
        paymentAddress: "",
        paymentPublicKey: "",
        balance: ""
      }), this.removeSubscriber(), this.removeSubscriber = void 0) : this.removeSubscriber = this.$store.subscribe(
        this.watchStateChange.bind(this)
      );
    });
  }
  dispose() {
    var r;
    (r = this.observer) == null || r.disconnect();
  }
  async connect(r) {
    var u;
    if (!this.library) throw new Error("Leather isn't installed");
    const n = await this.library.request("getAddresses");
    if (!n) throw new Error("No accounts found");
    const i = n.result.addresses, s = i.map(
      (f) => f.address
    ), a = i.find(
      (f) => f.type === bs
    ), c = i.find(
      (f) => f.type === Fl
    );
    if (!(a != null && a.publicKey) || !(c != null && c.publicKey))
      throw new Error("No accounts found");
    if ((u = String(a == null ? void 0 : a.address)) != null && u.startsWith("tb") && this.network !== Ze && this.network !== $t && this.network !== jt)
      throw new Error(
        `Please switch networks to ${this.network} in the wallet settings.`
      );
    this.$store.setKey("accounts", s), this.$store.setKey("address", a.address), this.$store.setKey("paymentAddress", c.address), this.$store.setKey("publicKey", a.publicKey), this.$store.setKey("paymentPublicKey", c.publicKey), this.$store.setKey("provider", xi), this.$store.setKey("connected", !0);
  }
  async getNetwork() {
    return this.network;
  }
  async sendBTC(r, n) {
    var i, s;
    const o = await ((i = this.library) == null ? void 0 : i.request("sendTransfer", {
      recipients: [
        {
          address: r,
          amount: n
        }
      ]
    }));
    if ((s = o == null ? void 0 : o.result) != null && s.txid)
      return o.result.txid;
    throw o.error.code === Es.USER_REJECTION ? new Error("User rejected the request") : new Error("Error sending BTC: " + o.error.message);
  }
  async signMessage(r, n) {
    var s;
    const o = n === this.$store.get().address ? bs : Fl;
    if (n !== this.$store.get().address && n !== this.$store.get().paymentAddress)
      throw new Error("Invalid address to sign message");
    const i = await this.library.request("signMessage", {
      message: r,
      paymentType: o
    });
    return (s = i == null ? void 0 : i.result) == null ? void 0 : s.signature;
  }
  async signPsbt(r, n, o, i, s) {
    const a = {
      hex: n,
      broadcast: !1,
      network: this.network
    }, f = (await this.library.request(
      "signPsbt",
      a
    )).result.hex, l = et.fromHex(String(f));
    if (i && s) {
      const h = l.finalizeAllInputs(), m = await this.pushPsbt(h.toHex());
      return {
        signedPsbtHex: l.toHex(),
        signedPsbtBase64: l.toBase64(),
        txId: m
      };
    } else if (i) {
      const h = l.finalizeAllInputs();
      return {
        signedPsbtHex: h.toHex(),
        signedPsbtBase64: h.toBase64(),
        txId: void 0
      };
    } else
      return {
        signedPsbtHex: l.toHex(),
        signedPsbtBase64: l.toBase64(),
        txId: void 0
      };
  }
  async getPublicKey() {
    const { result: r } = await this.library.request(
      "getAddresses"
    ), o = r.addresses.find(
      (i) => i.type === bs
    );
    if (!(o != null && o.publicKey))
      throw new Error("No accounts found");
    return o.publicKey;
  }
  async getBalance() {
    const r = await os(
      this.$store.get().paymentAddress,
      this.network
    );
    return this.$store.setKey("balance", r), r.toString();
  }
  async requestAccounts() {
    const { result: r } = await this.library.request(
      "getAddresses"
    ), o = r.addresses.map((i) => i.address);
    return this.$store.setKey("accounts", o), o;
  }
}
var _s = {}, wv = {}, qr = {}, vv = {};
Object.defineProperty(vv, "__esModule", { value: !0 });
(function(e) {
  var t = we && we.__createBinding || (Object.create ? function(s, a, c, u) {
    u === void 0 && (u = c);
    var f = Object.getOwnPropertyDescriptor(a, c);
    (!f || ("get" in f ? !a.__esModule : f.writable || f.configurable)) && (f = { enumerable: !0, get: function() {
      return a[c];
    } }), Object.defineProperty(s, u, f);
  } : function(s, a, c, u) {
    u === void 0 && (u = c), s[u] = a[c];
  }), r = we && we.__exportStar || function(s, a) {
    for (var c in s) c !== "default" && !Object.prototype.hasOwnProperty.call(a, c) && t(a, s, c);
  };
  Object.defineProperty(e, "__esModule", { value: !0 }), e.getProviderById = e.getProviders = e.getProviderOrThrow = void 0;
  async function n(s) {
    var c, u;
    if (s) {
      const f = await s();
      if (f)
        return f;
    }
    const a = window.OrangeBitcoinProvider || ((c = window.OrangecryptoProviders) == null ? void 0 : c.BitcoinProvider) || ((u = window.OrangeWalletProviders) == null ? void 0 : u.OrangeBitcoinProvider);
    if (!a)
      throw new Error("No Orange Bitcoin wallet installed");
    return a;
  }
  e.getProviderOrThrow = n;
  function o() {
    return window.btc_providers || (window.btc_providers = []), window.btc_providers;
  }
  e.getProviders = o;
  function i(s) {
    var a;
    if (Array.isArray(window.btc_providers)) {
      const c = window.btc_providers.find((u) => u.id === s);
      return (a = c == null ? void 0 : c.id) == null ? void 0 : a.split(".").reduce((u, f) => u == null ? void 0 : u[f], window);
    } else {
      console.log("window.btc_providers is not defined or not an array");
      return;
    }
  }
  e.getProviderById = i, r(vv, e);
})(qr);
var xv = {};
(function(e) {
  Object.defineProperty(e, "__esModule", { value: !0 }), e.AddressType = e.AddressPurpose = void 0, function(t) {
    t.Ordinals = "ordinals", t.Payment = "payment", t.Stacks = "stacks";
  }(e.AddressPurpose || (e.AddressPurpose = {})), function(t) {
    t.p2pkh = "p2pkh", t.p2sh = "p2sh", t.p2wpkh = "p2wpkh", t.p2wsh = "p2wsh", t.p2tr = "p2tr", t.stacks = "stacks";
  }(e.AddressType || (e.AddressType = {}));
})(xv);
(function(e) {
  var t = we && we.__createBinding || (Object.create ? function(s, a, c, u) {
    u === void 0 && (u = c);
    var f = Object.getOwnPropertyDescriptor(a, c);
    (!f || ("get" in f ? !a.__esModule : f.writable || f.configurable)) && (f = { enumerable: !0, get: function() {
      return a[c];
    } }), Object.defineProperty(s, u, f);
  } : function(s, a, c, u) {
    u === void 0 && (u = c), s[u] = a[c];
  }), r = we && we.__exportStar || function(s, a) {
    for (var c in s) c !== "default" && !Object.prototype.hasOwnProperty.call(a, c) && t(a, s, c);
  };
  Object.defineProperty(e, "__esModule", { value: !0 }), e.getAddress = void 0;
  const n = pr, o = qr, i = async (s) => {
    var u, f;
    const a = await (0, o.getProviderOrThrow)(s.getProvider), { purposes: c } = s.payload;
    if (!c)
      throw new Error("Address purposes are required");
    try {
      const l = (0, n.createUnsecuredToken)(s.payload), h = await a.connect(l);
      (u = s.onFinish) == null || u.call(s, h);
    } catch (l) {
      console.error("[Connect] Error during address request", l), (f = s.onCancel) == null || f.call(s);
    }
  };
  e.getAddress = i, r(xv, e);
})(wv);
var Ev = {}, _v = {}, Sv = {};
Object.defineProperty(Sv, "__esModule", { value: !0 });
var kv = {};
Object.defineProperty(kv, "__esModule", { value: !0 });
(function(e) {
  var t = we && we.__createBinding || (Object.create ? function(n, o, i, s) {
    s === void 0 && (s = i);
    var a = Object.getOwnPropertyDescriptor(o, i);
    (!a || ("get" in a ? !o.__esModule : a.writable || a.configurable)) && (a = { enumerable: !0, get: function() {
      return o[i];
    } }), Object.defineProperty(n, s, a);
  } : function(n, o, i, s) {
    s === void 0 && (s = i), n[s] = o[i];
  }), r = we && we.__exportStar || function(n, o) {
    for (var i in n) i !== "default" && !Object.prototype.hasOwnProperty.call(o, i) && t(o, n, i);
  };
  Object.defineProperty(e, "__esModule", { value: !0 }), r(Sv, e), r(kv, e);
})(_v);
(function(e) {
  var t = we && we.__createBinding || (Object.create ? function(s, a, c, u) {
    u === void 0 && (u = c);
    var f = Object.getOwnPropertyDescriptor(a, c);
    (!f || ("get" in f ? !a.__esModule : f.writable || f.configurable)) && (f = { enumerable: !0, get: function() {
      return a[c];
    } }), Object.defineProperty(s, u, f);
  } : function(s, a, c, u) {
    u === void 0 && (u = c), s[u] = a[c];
  }), r = we && we.__exportStar || function(s, a) {
    for (var c in s) c !== "default" && !Object.prototype.hasOwnProperty.call(a, c) && t(a, s, c);
  };
  Object.defineProperty(e, "__esModule", { value: !0 }), e.request = void 0;
  const n = qr, o = async (s, a, c) => {
    var l;
    let u = ((l = window.OrangecryptoProviders) == null ? void 0 : l.BitcoinProvider) || window.OrangeBitcoinProvider;
    if (c && (u = await (0, n.getProviderById)(c)), !u)
      throw new Error("no wallet provider was found");
    if (!s)
      throw new Error("A wallet method is required");
    const f = await u.request(s, a);
    return i(f) ? {
      status: "success",
      result: f.result
    } : {
      status: "error",
      error: f.error
    };
  };
  e.request = o;
  const i = (s) => Object.hasOwn(s, "result") && !!s.result;
  r(_v, e);
})(Ev);
var Av = {}, Tv = {};
Object.defineProperty(Tv, "__esModule", { value: !0 });
(function(e) {
  var t = we && we.__createBinding || (Object.create ? function(a, c, u, f) {
    f === void 0 && (f = u);
    var l = Object.getOwnPropertyDescriptor(c, u);
    (!l || ("get" in l ? !c.__esModule : l.writable || l.configurable)) && (l = { enumerable: !0, get: function() {
      return c[u];
    } }), Object.defineProperty(a, f, l);
  } : function(a, c, u, f) {
    f === void 0 && (f = u), a[f] = c[u];
  }), r = we && we.__exportStar || function(a, c) {
    for (var u in a) u !== "default" && !Object.prototype.hasOwnProperty.call(c, u) && t(c, a, u);
  };
  Object.defineProperty(e, "__esModule", { value: !0 }), e.getCapabilities = void 0;
  const n = pr, o = qr, i = (a, c) => {
    const u = (l) => !(!a[l] || c && !c.has(l)), f = {
      request: u("request"),
      connect: u("connect"),
      signMessage: u("signMessage"),
      signTransaction: u("signTransaction"),
      sendBtcTransaction: u("sendBtcTransaction"),
      createInscription: u("createInscription"),
      createRepeatInscriptions: u("createRepeatInscriptions"),
      signMultipleTransactions: u("signMultipleTransactions")
    };
    return Object.entries(f).reduce((l, [h, m]) => m ? [...l, h] : l, []);
  }, s = async (a) => {
    var f, l, h;
    const c = await (0, o.getProviderOrThrow)(a.getProvider), u = (0, n.createUnsecuredToken)(a.payload);
    if (c.getCapabilities)
      try {
        const m = await c.getCapabilities(u);
        (f = a.onFinish) == null || f.call(a, i(c, new Set(m)));
      } catch (m) {
        console.error("[Connect] Error during capabilities request", m);
      }
    try {
      const m = i(c);
      (l = a.onFinish) == null || l.call(a, m);
    } catch (m) {
      console.error("[Connect] Error during capabilities request", m), (h = a.onCancel) == null || h.call(a);
    }
  };
  e.getCapabilities = s, r(Tv, e);
})(Av);
var Iv = {}, Uu = {}, pa = {};
Object.defineProperty(pa, "__esModule", { value: !0 });
pa.validateInscriptionPayload = void 0;
const RN = 4e5, LN = 6e4, zN = (e) => {
  const { contentType: t, content: r, payloadType: n, network: o, appFeeAddress: i, appFee: s } = e;
  if (!/^[a-z]+\/[a-z0-9\-\.\+]+(?=;.*|$)/.test(t))
    throw new Error("Invalid content type detected");
  if (!r || r.length === 0)
    throw new Error("Empty content not allowed");
  if (!n || n !== "BASE_64" && n !== "PLAIN_TEXT")
    throw new Error("Empty invalid payloadType specified");
  if (r.length > (o.type === "Mainnet" ? RN : LN))
    throw new Error("Content too large");
  if (((i == null ? void 0 : i.length) ?? 0) > 0 && (s ?? 0) <= 0)
    throw new Error("Invalid combination of app fee address and fee provided");
};
pa.validateInscriptionPayload = zN;
Object.defineProperty(Uu, "__esModule", { value: !0 });
Uu.createInscription = void 0;
const jN = pr, MN = qr, DN = pa, FN = async (e) => {
  var n, o;
  const { getProvider: t } = e, r = await (0, MN.getProviderOrThrow)(t);
  (0, DN.validateInscriptionPayload)(e.payload);
  try {
    const i = (0, jN.createUnsecuredToken)(e.payload), s = await r.createInscription(i);
    (n = e.onFinish) == null || n.call(e, s);
  } catch (i) {
    console.error("[Connect] Error during create inscription", i), (o = e.onCancel) == null || o.call(e);
  }
};
Uu.createInscription = FN;
var Cu = {};
Object.defineProperty(Cu, "__esModule", { value: !0 });
Cu.createRepeatInscriptions = void 0;
const KN = qr, qN = pr, VN = pa, WN = async (e) => {
  var n, o;
  const { getProvider: t } = e, r = await (0, KN.getProviderOrThrow)(t);
  (0, VN.validateInscriptionPayload)(e.payload);
  try {
    const i = (0, qN.createUnsecuredToken)(e.payload), s = await r.createRepeatInscriptions(i);
    (n = e.onFinish) == null || n.call(e, s);
  } catch (i) {
    console.error("[Connect] Error during create repeat inscriptions", i), (o = e.onCancel) == null || o.call(e);
  }
};
Cu.createRepeatInscriptions = WN;
var Pv = {};
Object.defineProperty(Pv, "__esModule", { value: !0 });
(function(e) {
  var t = we && we.__createBinding || (Object.create ? function(n, o, i, s) {
    s === void 0 && (s = i);
    var a = Object.getOwnPropertyDescriptor(o, i);
    (!a || ("get" in a ? !o.__esModule : a.writable || a.configurable)) && (a = { enumerable: !0, get: function() {
      return o[i];
    } }), Object.defineProperty(n, s, a);
  } : function(n, o, i, s) {
    s === void 0 && (s = i), n[s] = o[i];
  }), r = we && we.__exportStar || function(n, o) {
    for (var i in n) i !== "default" && !Object.prototype.hasOwnProperty.call(o, i) && t(o, n, i);
  };
  Object.defineProperty(e, "__esModule", { value: !0 }), r(Uu, e), r(Cu, e), r(Pv, e);
})(Iv);
var Ov = {}, Bv = {};
Object.defineProperty(Bv, "__esModule", { value: !0 });
(function(e) {
  var t = we && we.__createBinding || (Object.create ? function(s, a, c, u) {
    u === void 0 && (u = c);
    var f = Object.getOwnPropertyDescriptor(a, c);
    (!f || ("get" in f ? !a.__esModule : f.writable || f.configurable)) && (f = { enumerable: !0, get: function() {
      return a[c];
    } }), Object.defineProperty(s, u, f);
  } : function(s, a, c, u) {
    u === void 0 && (u = c), s[u] = a[c];
  }), r = we && we.__exportStar || function(s, a) {
    for (var c in s) c !== "default" && !Object.prototype.hasOwnProperty.call(a, c) && t(a, s, c);
  };
  Object.defineProperty(e, "__esModule", { value: !0 }), e.signMessage = void 0;
  const n = pr, o = qr, i = async (s) => {
    var f, l;
    const a = await (0, o.getProviderOrThrow)(s.getProvider), { address: c, message: u } = s.payload;
    if (!c)
      throw new Error("An address is required to sign a message");
    if (!u)
      throw new Error("A message to be signed is required");
    try {
      const h = (0, n.createUnsecuredToken)(s.payload), m = await a.signMessage(h);
      (f = s.onFinish) == null || f.call(s, m);
    } catch (h) {
      console.error("[Connect] Error during sign message request", h), (l = s.onCancel) == null || l.call(s);
    }
  };
  e.signMessage = i, r(Bv, e);
})(Ov);
var $v = {}, Hu = {};
Object.defineProperty(Hu, "__esModule", { value: !0 });
Hu.sendBtcTransaction = void 0;
const GN = pr, ZN = qr, XN = (e) => e.map((t) => {
  const { address: r, amountSats: n } = t;
  return {
    address: r,
    amountSats: n.toString()
  };
}), YN = async (e) => {
  var s, a;
  const t = await (0, ZN.getProviderOrThrow)(e.getProvider), { recipients: r, senderAddress: n, network: o, message: i } = e.payload;
  if (!r || r.length === 0)
    throw new Error("At least one recipient is required");
  if (r.some((c) => typeof c.address != "string" || typeof c.amountSats != "bigint"))
    throw new Error("Incorrect recipient format");
  if (!n)
    throw new Error("The sender address is required");
  try {
    const c = XN(r), u = {
      network: o,
      senderAddress: n,
      message: i,
      recipients: c
    }, f = (0, GN.createUnsecuredToken)(u), l = await t.sendBtcTransaction(f);
    (s = e.onFinish) == null || s.call(e, l);
  } catch (c) {
    console.error("[Connect] Error during send BTC transaction request", c), (a = e.onCancel) == null || a.call(e);
  }
};
Hu.sendBtcTransaction = YN;
var Ru = {};
Object.defineProperty(Ru, "__esModule", { value: !0 });
Ru.signTransaction = void 0;
const JN = pr, QN = qr, eU = async (e) => {
  var o, i;
  const t = await (0, QN.getProviderOrThrow)(e.getProvider), { psbtBase64: r, inputsToSign: n } = e.payload;
  if (!r)
    throw new Error("A value for psbtBase64 representing the tx hash is required");
  if (!n)
    throw new Error("An array specifying the inputs to be signed by the wallet is required");
  try {
    const s = (0, JN.createUnsecuredToken)(e.payload), a = await t.signTransaction(s);
    (o = e.onFinish) == null || o.call(e, a);
  } catch (s) {
    console.error("[Connect] Error during sign transaction request", s), (i = e.onCancel) == null || i.call(e);
  }
};
Ru.signTransaction = eU;
var Lu = {};
Object.defineProperty(Lu, "__esModule", { value: !0 });
Lu.signMultipleTransactions = void 0;
const tU = pr, rU = qr, nU = async (e) => {
  var n, o;
  const t = await (0, rU.getProviderOrThrow)(e.getProvider), { psbts: r } = e.payload;
  if (!r || !r.length)
    throw new Error("psbts array is required");
  if (r.length > 100)
    throw new Error("psbts array must contain less than 100 psbts");
  try {
    const i = (0, tU.createUnsecuredToken)(e.payload), s = await t.signMultipleTransactions(i);
    (n = e.onFinish) == null || n.call(e, s);
  } catch (i) {
    console.error("[Connect] Error during sign Multiple transactions request", i), (o = e.onCancel) == null || o.call(e);
  }
};
Lu.signMultipleTransactions = nU;
var Nv = {};
Object.defineProperty(Nv, "__esModule", { value: !0 });
(function(e) {
  var t = we && we.__createBinding || (Object.create ? function(n, o, i, s) {
    s === void 0 && (s = i);
    var a = Object.getOwnPropertyDescriptor(o, i);
    (!a || ("get" in a ? !o.__esModule : a.writable || a.configurable)) && (a = { enumerable: !0, get: function() {
      return o[i];
    } }), Object.defineProperty(n, s, a);
  } : function(n, o, i, s) {
    s === void 0 && (s = i), n[s] = o[i];
  }), r = we && we.__exportStar || function(n, o) {
    for (var i in n) i !== "default" && !Object.prototype.hasOwnProperty.call(o, i) && t(o, n, i);
  };
  Object.defineProperty(e, "__esModule", { value: !0 }), r(Hu, e), r(Ru, e), r(Lu, e), r(Nv, e);
})($v);
var Uv = {};
(function(e) {
  Object.defineProperty(e, "__esModule", { value: !0 }), e.RpcErrorCode = e.BitcoinNetworkType = void 0, function(t) {
    t.Mainnet = "Mainnet", t.Testnet = "Testnet";
  }(e.BitcoinNetworkType || (e.BitcoinNetworkType = {})), function(t) {
    t[t.PARSE_ERROR = -32700] = "PARSE_ERROR", t[t.INVALID_REQUEST = -32600] = "INVALID_REQUEST", t[t.METHOD_NOT_FOUND = -32601] = "METHOD_NOT_FOUND", t[t.INVALID_PARAMS = -32602] = "INVALID_PARAMS", t[t.INTERNAL_ERROR = -32603] = "INTERNAL_ERROR", t[t.USER_REJECTION = -32e3] = "USER_REJECTION", t[t.METHOD_NOT_SUPPORTED = -32001] = "METHOD_NOT_SUPPORTED";
  }(e.RpcErrorCode || (e.RpcErrorCode = {}));
})(Uv);
(function(e) {
  var t = we && we.__createBinding || (Object.create ? function(n, o, i, s) {
    s === void 0 && (s = i);
    var a = Object.getOwnPropertyDescriptor(o, i);
    (!a || ("get" in a ? !o.__esModule : a.writable || a.configurable)) && (a = { enumerable: !0, get: function() {
      return o[i];
    } }), Object.defineProperty(n, s, a);
  } : function(n, o, i, s) {
    s === void 0 && (s = i), n[s] = o[i];
  }), r = we && we.__exportStar || function(n, o) {
    for (var i in n) i !== "default" && !Object.prototype.hasOwnProperty.call(o, i) && t(o, n, i);
  };
  Object.defineProperty(e, "__esModule", { value: !0 }), r(wv, e), r(Ev, e), r(Av, e), r(Iv, e), r(Ov, e), r(qr, e), r($v, e), r(Uv, e);
})(_s);
const oU = /* @__PURE__ */ Z1(_s), {
  signMessage: iU,
  sendBtcTransaction: sU
} = oU, aU = "ORANGE_CONNECTED_WALLET_STATE";
class cU extends Kr {
  constructor() {
    super(...arguments);
    ne(this, "observer");
    ne(this, "$valueStore", ci(
      aU,
      {
        address: "",
        paymentAddress: "",
        paymentPublicKey: "",
        publicKey: "",
        balance: ""
      }
    ));
    ne(this, "removeSubscriber");
  }
  get library() {
    var r;
    return (r = window == null ? void 0 : window.OrangeWalletProviders) == null ? void 0 : r.OrangeBitcoinProvider;
  }
  get network() {
    return this.$network.get();
  }
  restorePersistedValues() {
    const r = this.$valueStore.get();
    for (const n of or)
      this.$store.setKey(n, r[n]);
  }
  watchStateChange(r, n, o) {
    var i, s;
    o && r.provider === $o && (o === "balance" ? this.$valueStore.setKey("balance", ((i = r.balance) == null ? void 0 : i.toString()) ?? "") : or.includes(o) && this.$valueStore.setKey(
      o,
      ((s = r[o]) == null ? void 0 : s.toString()) ?? ""
    ));
  }
  initialize() {
    var r;
    typeof window < "u" && typeof document < "u" && (this.observer = new window.MutationObserver(() => {
      var o;
      (window == null ? void 0 : window.OrangeBitcoinProvider) && (this.$store.setKey("hasProvider", {
        ...this.$store.get().hasProvider,
        [$o]: !0
      }), (o = this.observer) == null || o.disconnect());
    }), (r = this.observer) == null || r.observe(document, { childList: !0, subtree: !0 })), Sr(this.$store, ["provider"], (n) => {
      n.provider !== $o ? this.removeSubscriber && (this.$valueStore.set({
        address: "",
        paymentAddress: "",
        paymentPublicKey: "",
        publicKey: "",
        balance: ""
      }), this.removeSubscriber(), this.removeSubscriber = void 0) : this.removeSubscriber = this.$store.subscribe(
        this.watchStateChange.bind(this)
      );
    });
  }
  dispose() {
    var r;
    (r = this.observer) == null || r.disconnect();
  }
  async connect(r) {
    const { address: n, paymentAddress: o } = this.$valueStore.get();
    try {
      if (n) {
        this.restorePersistedValues(), os(o, this.network).then((a) => {
          this.$store.setKey("balance", a);
        });
        return;
      }
      let i = Al(this.network || Me);
      const s = {
        payload: {
          purposes: ["ordinals", "payment"],
          message: "Address for receiving Ordinals and payments",
          network: {
            type: i
          }
        },
        onFinish: (a) => {
          const c = mh(a.addresses), u = bh(a.addresses);
          if (!c || !(u != null && u.address))
            throw new Error("Could not find addresses");
          c && u && (this.$store.setKey("provider", $o), this.$store.setKey("address", c.address), this.$store.setKey("paymentAddress", u.address)), this.$store.setKey("publicKey", String(c.publicKey)), this.$store.setKey(
            "paymentPublicKey",
            String(u.publicKey)
          );
        },
        onCancel: () => {
          throw new Error(`User canceled lasereyes to ${$o} wallet`);
        }
      };
      await _s.getAddress(s), this.$store.setKey("connected", !0);
    } catch (i) {
      throw i;
    }
  }
  async getNetwork() {
    const { address: r } = this.$store.get();
    return r.slice(0, 1) === "t" && [Ze, $t, jt, Nt].includes(this.network) ? this.network : Me;
  }
  async sendBTC(r, n) {
    let o = "";
    const i = {
      payload: {
        network: {
          type: Al(this.network)
        },
        recipients: [
          {
            address: r,
            amountSats: BigInt(n)
          }
        ],
        senderAddress: this.$store.get().paymentAddress
      },
      onFinish: (s) => {
        o = s;
      },
      onCancel: () => {
        throw new Error("User canceled the request");
      }
    };
    return await sU(i), o;
  }
  async signMessage(r, n) {
    let o = "";
    const i = n || this.$store.get().paymentAddress, s = {
      payload: {
        network: {
          type: Al(this.network)
        },
        address: i,
        message: r
      },
      onFinish: (a) => {
        o = a;
      },
      onCancel: () => {
        throw new Error("User canceled the request");
      }
    };
    return await iU(s), o;
  }
  async signPsbt(r, n, o, i, s) {
    try {
      const a = et.fromBase64(String(o), {
        network: At(this.network)
      }), c = this.$store.get().address, u = this.$store.get().paymentAddress, f = a.data.inputs;
      let l = {};
      const h = {
        [c]: []
      }, m = {
        [u]: []
      };
      let b = 0;
      for await (let T of f) {
        if (T.witnessUtxo === void 0)
          m[u].push(Number(b));
        else {
          const { script: I } = T.witnessUtxo, P = Qs(
            I,
            At(this.network)
          );
          P === u ? m[u].push(Number(b)) : P === c && h[c].push(Number(b));
        }
        b++;
      }
      h[c].length > 0 && (l = { ...l, ...h }), m[u].length > 0 && (l = { ...l, ...m });
      let y, g, x, S;
      const v = await _s.request(
        "signPsbt",
        {
          psbt: o,
          broadcast: !!s,
          signInputs: l
        }
      );
      if (v.status === "success")
        S = et.fromBase64(v.result.psbt, { network: At(this.network) }), y = v.result.txid;
      else
        throw v.error.code === _s.RpcErrorCode.USER_REJECTION ? new Error("User canceled the request") : new Error("Error signing psbt");
      if (!S)
        throw new Error("Error signing psbt");
      return i && !y ? (S.finalizeAllInputs(), g = S.toHex(), x = S.toBase64()) : (g = S.toHex(), x = S.toBase64()), {
        signedPsbtHex: g,
        signedPsbtBase64: x,
        txId: y
      };
    } catch (a) {
      throw console.error(a), a;
    }
  }
}
const uU = "OKX_CONNECTED_WALLET_STATE";
class lU extends Kr {
  constructor() {
    super(...arguments);
    ne(this, "observer");
    ne(this, "$valueStore", ci(
      uU,
      {
        address: "",
        paymentAddress: "",
        paymentPublicKey: "",
        publicKey: "",
        balance: ""
      }
    ));
    ne(this, "removeSubscriber");
  }
  get library() {
    var n, o;
    let r;
    return this.network === Ze || this.network === $t || this.network === jt || this.network === Nt ? r = (n = window == null ? void 0 : window.okxwallet) == null ? void 0 : n.bitcoinTestnet : (this.network === Me || this.network === kr) && (r = (o = window == null ? void 0 : window.okxwallet) == null ? void 0 : o.bitcoin), r;
  }
  get network() {
    return this.$network.get();
  }
  restorePersistedValues() {
    const r = this.$valueStore.get();
    for (const n of or)
      this.$store.setKey(n, r[n]);
  }
  watchStateChange(r, n, o) {
    var i, s;
    o && r.provider === Ei && (o === "balance" ? this.$valueStore.setKey("balance", ((i = r.balance) == null ? void 0 : i.toString()) ?? "") : or.includes(o) && this.$valueStore.setKey(
      o,
      ((s = r[o]) == null ? void 0 : s.toString()) ?? ""
    ));
  }
  initialize() {
    var r;
    typeof window < "u" && typeof document < "u" && (this.observer = new window.MutationObserver(() => {
      var o;
      this.library && (this.$store.setKey("hasProvider", {
        ...this.$store.get().hasProvider,
        [Ei]: !0
      }), (o = this.observer) == null || o.disconnect());
    }), (r = this.observer) == null || r.observe(document, { childList: !0, subtree: !0 })), Sr(this.$store, ["provider"], (n) => {
      n.provider !== Ei ? this.removeSubscriber && (this.$valueStore.set({
        address: "",
        paymentAddress: "",
        paymentPublicKey: "",
        publicKey: "",
        balance: ""
      }), this.removeSubscriber(), this.removeSubscriber = void 0) : this.removeSubscriber = this.$store.subscribe(
        this.watchStateChange.bind(this)
      );
    });
  }
  dispose() {
    var r;
    (r = this.observer) == null || r.disconnect();
  }
  async connect(r) {
    try {
      const n = await this.library.connect();
      if (!n) throw new Error("No accounts found");
      this.$store.setKey("address", n.address), this.$store.setKey("paymentAddress", n.address), this.$store.setKey("publicKey", n.publicKey), this.$store.setKey("paymentPublicKey", n.publicKey), this.$store.setKey("accounts", [n]), this.$store.setKey("provider", Ei), this.$store.setKey("connected", !0);
    } catch (n) {
      throw n;
    }
  }
  async requestAccounts() {
    const r = this.library, n = this.network;
    return n === Ze || n === $t || n === Nt ? await r.connect() : await r.requestAccounts();
  }
  async getNetwork() {
    const { address: r } = this.$store.get(), n = this.network;
    if (r.slice(0, 1) === "t")
      return n === Ze ? Ze : n === $t ? $t : n === jt ? jt : n === Nt ? Nt : Ze;
    const o = await this.library.getNetwork();
    return vP(o);
  }
  async getPublicKey() {
    const r = this.library;
    return await (r == null ? void 0 : r.getPublicKey());
  }
  async getInscriptions(r, n) {
    return await this.library.getInscriptions(r, n);
  }
  async sendBTC(r, n) {
    const i = await this.library.sendBitcoin(r, n);
    if (!i) throw new Error("Transaction failed");
    return i;
  }
  async signMessage(r, n) {
    const o = this.library;
    return await (o == null ? void 0 : o.signMessage(r));
  }
  async signPsbt(r, n, o, i, s) {
    const c = await this.library.signPsbt(n, {
      autoFinalized: i
    }), u = et.fromHex(c);
    if (i && s) {
      const f = await this.pushPsbt(c);
      return {
        signedPsbtHex: u.toHex(),
        signedPsbtBase64: u.toBase64(),
        txId: f
      };
    }
    return {
      signedPsbtHex: u.toHex(),
      signedPsbtBase64: u.toBase64(),
      txId: void 0
    };
  }
}
const fU = "MAGIC_EDEN_CONNECTED_WALLET_STATE";
class dU extends Kr {
  constructor() {
    super(...arguments);
    ne(this, "observer");
    ne(this, "$valueStore", ci(
      fU,
      {
        address: "",
        paymentAddress: "",
        paymentPublicKey: "",
        publicKey: "",
        balance: ""
      }
    ));
    ne(this, "removeSubscriber");
  }
  get library() {
    var r;
    return (r = window == null ? void 0 : window.magicEden) == null ? void 0 : r.bitcoin;
  }
  get network() {
    return this.$network.get();
  }
  restorePersistedValues() {
    const r = this.$valueStore.get();
    for (const n of or)
      this.$store.setKey(n, r[n]);
  }
  watchStateChange(r, n, o) {
    var i, s;
    o && r.provider === wn && (o === "balance" ? this.$valueStore.setKey("balance", ((i = r.balance) == null ? void 0 : i.toString()) ?? "") : or.includes(o) && this.$valueStore.setKey(
      o,
      ((s = r[o]) == null ? void 0 : s.toString()) ?? ""
    ));
  }
  initialize() {
    typeof window < "u" && typeof document < "u" && (this.observer = new window.MutationObserver(() => {
      var n, o;
      ((n = window == null ? void 0 : window.magicEden) == null ? void 0 : n.bitcoin) && (this.$store.setKey("hasProvider", {
        ...this.$store.get().hasProvider,
        [wn]: !0
      }), (o = this.observer) == null || o.disconnect());
    }), this.observer.observe(document, { childList: !0, subtree: !0 })), Sr(this.$store, ["provider"], (r) => {
      r.provider !== wn ? this.removeSubscriber && (this.$valueStore.set({
        address: "",
        paymentAddress: "",
        paymentPublicKey: "",
        publicKey: "",
        balance: ""
      }), this.removeSubscriber(), this.removeSubscriber = void 0) : this.removeSubscriber = this.$store.subscribe(
        this.watchStateChange.bind(this)
      );
    });
  }
  dispose() {
    var r;
    (r = this.observer) == null || r.disconnect();
  }
  async connect(r) {
    const { address: n, paymentAddress: o } = this.$valueStore.get();
    try {
      if (n)
        if (n.startsWith("tb1") && Eh(this.network))
          this.disconnect();
        else {
          this.restorePersistedValues(), os(o, this.network).then((a) => {
            this.$store.setKey("balance", a);
          });
          return;
        }
      if (xh(this.network))
        throw new Error(`${this.network} is not supported by ${wn}`);
      let i = Va(this.network || Me);
      await yv({
        getProvider: async () => this.library,
        payload: {
          purposes: ["ordinals", "payment"],
          message: "Connecting with lasereyes",
          network: {
            type: i
          }
        },
        onFinish: (a) => {
          const c = mh(a.addresses), u = bh(a.addresses);
          if (!c || !u)
            throw new Error("No address found");
          c && u && (this.$store.setKey("provider", wn), this.$store.setKey("address", c.address), this.$store.setKey("paymentAddress", u.address)), this.$store.setKey(
            "publicKey",
            String(a.addresses[0].publicKey)
          ), this.$store.setKey(
            "paymentPublicKey",
            String(a.addresses[1].publicKey)
          );
        },
        onCancel: () => {
          throw new Error(`User canceled lasereyes to ${wn} wallet`);
        },
        onError: (a) => {
          throw new Error(`Can't lasereyes to ${wn} wallet`);
        }
      }), this.$store.setKey("connected", !0);
    } catch (i) {
      throw i;
    }
  }
  async sendBTC(r, n) {
    let o;
    if (await AN({
      getProvider: async () => this.library,
      payload: {
        network: {
          type: Va(this.network)
        },
        recipients: [
          {
            address: r,
            amountSats: BigInt(n)
          }
        ],
        senderAddress: this.$store.get().paymentAddress
      },
      onFinish: (i) => {
        o = i;
      },
      onCancel: () => {
        throw console.error("Request canceled"), new Error("User canceled the request");
      }
    }), !o) throw new Error("Error sending BTC");
    return o.txid;
  }
  async signMessage(r, n) {
    try {
      const o = n || this.$store.get().paymentAddress;
      let i = "";
      return await SN({
        getProvider: async () => this.library,
        payload: {
          network: {
            type: pv.Mainnet
          },
          address: o,
          message: r,
          protocol: ha.BIP322
        },
        onFinish: (s) => {
          i = s;
        },
        onCancel: () => {
          throw console.error("Request canceled"), new Error("User canceled the request");
        }
      }), i;
    } catch (o) {
      throw o;
    }
  }
  async signPsbt(r, n, o, i, s) {
    console.log("signPsbt", o, i, s);
    const { address: a, paymentAddress: c } = this.$store.get(), u = et.fromBase64(String(o), {
      network: At(this.network)
    }), f = u.data.inputs, l = [], h = {
      address: a,
      signingIndexes: []
    }, m = {
      address: c,
      signingIndexes: []
    };
    let b = 0;
    for await (let I of f) {
      const { script: P } = I.witnessUtxo, H = Qs(
        P,
        At(this.network)
      );
      H === c ? m.signingIndexes.push(Number(b)) : H === a && h.signingIndexes.push(Number(b)), b++;
    }
    h.signingIndexes.length > 0 && l.push(h), m.signingIndexes.length > 0 && l.push(m);
    let y, g, x, S;
    const v = Va(this.network), T = {
      getProvider: async () => this.library,
      payload: {
        network: {
          type: v
        },
        message: "Sign Transaction",
        psbtBase64: u.toBase64(),
        broadcast: s,
        inputsToSign: l
      },
      onFinish: async (I) => {
        I.psbtBase64 && (S = et.fromBase64(String(I.psbtBase64), {
          network: At(this.network)
        }), g = S.toHex(), x = S.toBase64());
      },
      onCancel: () => {
        throw console.log("Canceled"), new Error("User canceled the request");
      },
      onError: (I) => {
        throw console.log("error", I), I;
      }
    };
    if (await TN(T), !S)
      throw new Error("signature failed");
    return i || s ? (S.finalizeAllInputs(), g = S.extractTransaction().toHex(), s ? (y = await this.pushPsbt(g), {
      signedPsbtHex: g,
      signedPsbtBase64: x,
      txId: y
    }) : {
      signedPsbtHex: g,
      signedPsbtBase64: x,
      txId: y
    }) : {
      signedPsbtHex: g,
      signedPsbtBase64: x,
      txId: y
    };
  }
}
class hU extends Kr {
  constructor() {
    super(...arguments);
    ne(this, "observer");
  }
  get library() {
    var r;
    return (r = window == null ? void 0 : window.phantom) == null ? void 0 : r.bitcoin;
  }
  get network() {
    return this.$network.get();
  }
  initialize() {
    typeof window < "u" && typeof document < "u" && (this.observer = new window.MutationObserver(() => {
      var r;
      this.library && (this.$store.setKey("hasProvider", {
        ...this.$store.get().hasProvider,
        [Bo]: !0
      }), (r = this.observer) == null || r.disconnect());
    }), this.observer.observe(document, { childList: !0, subtree: !0 })), Sr(this.$store, ["provider"], (r) => {
      r.provider === Bo && this.library.requestAccounts().then((n) => {
        this.handleAccountsChanged(n);
      });
    });
  }
  dispose() {
    var r;
    (r = this.observer) == null || r.disconnect();
  }
  handleAccountsChanged(r) {
    if (!r.length) {
      this.parent.disconnect();
      return;
    }
    this.$store.get().accounts[0] !== r[0] && (this.$store.setKey("accounts", r), r.length > 0 ? this.parent.connect(Bo) : this.parent.disconnect());
  }
  async connect(r) {
    if (!this.library) throw new Error("Phantom isn't installed");
    if (xh(this.network))
      throw new Error(`${this.network} is not supported by ${Bo}`);
    const n = await this.library.requestAccounts();
    if (!n) throw new Error("No accounts found");
    this.$store.setKey("accounts", n);
    const o = n.find(
      (s) => s.purpose === "ordinals"
    ), i = n.find(
      (s) => s.purpose === "payment"
    );
    this.$store.setKey("address", o.address), this.$store.setKey("paymentAddress", i.address), this.$store.setKey("publicKey", o.publicKey), this.$store.setKey("paymentPublicKey", i.publicKey), this.$store.setKey("provider", Bo), this.$store.setKey("connected", !0);
  }
  async getNetwork() {
    return this.$store.get().address.slice(0, 1) === "t" ? Ze : Me;
  }
  async sendBTC(r, n) {
    const { psbtHex: o } = await wh(
      this.$store.get().address,
      this.$store.get().paymentAddress,
      r,
      n,
      this.$store.get().paymentPublicKey,
      this.network,
      7
    ), i = await this.signPsbt("", o, "", !0, !0);
    if (!i) throw new Error("Error sending BTC");
    return i.txId;
  }
  async signMessage(r, n) {
    var u;
    const o = new TextEncoder().encode(r), i = new Uint8Array(o), s = n || this.$store.get().paymentAddress, a = await ((u = this.library) == null ? void 0 : u.signMessage(s, i)), c = String.fromCharCode(...a.signature);
    return btoa(c);
  }
  async signPsbt(r, n, o, i, s) {
    const { address: a, paymentAddress: c } = this.$store.get(), f = et.fromHex(String(n), {
      network: At(this.network)
    }).data.inputs, l = [], h = {
      address: a,
      signingIndexes: []
    }, m = {
      address: c,
      signingIndexes: []
    };
    let b = 0;
    for await (let x of f) {
      const { script: S } = x.witnessUtxo, v = Qs(
        S,
        At(this.network)
      );
      v === c ? m.signingIndexes.push(Number(b)) : v === a && h.signingIndexes.push(Number(b)), b++;
    }
    h.signingIndexes.length > 0 && l.push(h), m.signingIndexes.length > 0 && l.push(m);
    const y = await this.library.signPSBT(
      y$(n),
      {
        inputsToSign: l
      }
    ), g = et.fromBuffer(y);
    if (i && l.forEach((x) => {
      x.signingIndexes.forEach((S) => {
        g.finalizeInput(S);
      });
    }), s) {
      const x = await this.pushPsbt(g.toHex());
      return {
        signedPsbtHex: g.toHex(),
        signedPsbtBase64: g.toBase64(),
        txId: x
      };
    }
    return {
      signedPsbtHex: g.toHex(),
      signedPsbtBase64: g.toBase64(),
      txId: void 0
    };
  }
  async requestAccounts() {
    return await this.library.requestAccounts();
  }
}
class pU extends Kr {
  constructor() {
    super(...arguments);
    ne(this, "observer");
  }
  get library() {
    return window == null ? void 0 : window.opnet;
  }
  get network() {
    return this.$network.get();
  }
  initialize() {
    typeof window < "u" && typeof document < "u" && (this.observer = new window.MutationObserver(() => {
      var r;
      this.library && (this.$store.setKey("hasProvider", {
        ...this.$store.get().hasProvider,
        [No]: !0
      }), (r = this.observer) == null || r.disconnect());
    }), this.observer.observe(document, { childList: !0, subtree: !0 })), Sr(this.$store, ["provider"], (r) => {
      if (r.provider !== No) {
        this.removeListeners();
        return;
      }
      this.library.getAccounts().then((n) => {
        this.handleAccountsChanged(n);
      }), this.addListeners();
    });
  }
  addListeners() {
    this.library.on("accountsChanged", this.handleAccountsChanged.bind(this)), this.library.on("networkChanged", this.handleNetworkChanged.bind(this));
  }
  removeListeners() {
    var r, n;
    this.library && ((r = this.library) == null || r.removeListener(
      "accountsChanged",
      this.handleAccountsChanged.bind(this)
    ), (n = this.library) == null || n.removeListener(
      "networkChanged",
      this.handleNetworkChanged.bind(this)
    ));
  }
  dispose() {
    var r;
    (r = this.observer) == null || r.disconnect(), this.removeListeners();
  }
  handleAccountsChanged(r) {
    if (!r.length) {
      this.parent.disconnect();
      return;
    }
    this.$store.get().accounts[0] !== r[0] && (this.$store.setKey("accounts", r), r.length > 0 ? this.parent.connect(No) : this.parent.disconnect());
  }
  handleNetworkChanged(r) {
    const n = Nc(r);
    this.network !== n && this.switchNetwork(n), this.parent.connect(No);
  }
  async connect(r) {
    if (!this.library) throw new Error("OP_NET isn't installed");
    const n = await this.library.requestAccounts();
    if (!n) throw new Error("No accounts found");
    const o = await this.library.getPublicKey();
    if (!o) throw new Error("No public key found");
    this.$store.setKey("accounts", n), this.$store.setKey("address", n[0]), this.$store.setKey("paymentAddress", n[0]), this.$store.setKey("publicKey", o), this.$store.setKey("paymentPublicKey", o), this.$store.setKey("provider", No), await this.getNetwork().then((i) => {
      var s;
      ((s = this.config) == null ? void 0 : s.network) !== i && this.switchNetwork(i);
    }), this.$store.setKey("connected", !0);
  }
  async getNetwork() {
    var n;
    const r = await ((n = this.library) == null ? void 0 : n.getChain());
    return r ? Nc(r.enum) : this.network;
  }
  async sendBTC(r, n) {
    var i;
    const o = await ((i = this.library) == null ? void 0 : i.sendBitcoin(r, n));
    if (!o) throw new Error("Transaction failed");
    return o;
  }
  async signMessage(r, n) {
    var o;
    return await ((o = this.library) == null ? void 0 : o.signMessage(r));
  }
  async signPsbt(r, n, o, i, s) {
    var u;
    const a = await ((u = this.library) == null ? void 0 : u.signPsbt(n, {
      autoFinalized: i
    })), c = et.fromHex(a);
    if (i && s) {
      const f = await this.pushPsbt(a);
      return {
        signedPsbtHex: c.toHex(),
        signedPsbtBase64: c.toBase64(),
        txId: f
      };
    }
    return {
      signedPsbtHex: c.toHex(),
      signedPsbtBase64: c.toBase64(),
      txId: void 0
    };
  }
  async getPublicKey() {
    var r;
    return await ((r = this.library) == null ? void 0 : r.getPublicKey());
  }
  async getBalance() {
    return (await this.library.getBalance()).total;
  }
  async getInscriptions(r, n) {
    return await this.library.getInscriptions(r, n);
  }
  async requestAccounts() {
    return await this.library.requestAccounts();
  }
  async switchNetwork(r) {
    var o;
    const n = jy(r);
    await ((o = this.library) == null ? void 0 : o.switchChain(n)), this.$network.set(r);
  }
}
let jl = !1;
function ao(e) {
  return new Promise((t) => {
    if (jl) {
      console.warn(`Already waiting for console input for "${e}"!`);
      return;
    }
    jl = !0;
    const r = console.log;
    console.log = (...n) => {
      r.apply(console, n), n.length > 0 && typeof n[0] == "string" && (console.log = r, jl = !1, t(n[0]));
    }, r(`Please log a value for "${e}" using 
 console.log('<your-value>') 
 to continue.`);
  });
}
const gU = "SPARROW_CONNECTED_WALLET_STATE";
class mU extends Kr {
  constructor() {
    super(...arguments);
    ne(this, "observer");
    ne(this, "$valueStore", ci(
      gU,
      {
        address: "",
        paymentAddress: "",
        paymentPublicKey: "",
        publicKey: "",
        balance: ""
      }
    ));
    ne(this, "removeSubscriber");
  }
  get network() {
    return this.$network.get();
  }
  initialize() {
    typeof window < "u" && typeof document < "u" && (this.observer = new window.MutationObserver(() => {
      var r;
      this.$store.setKey("hasProvider", {
        ...this.$store.get().hasProvider,
        [Uo]: !0
      }), (r = this.observer) == null || r.disconnect();
    }), this.observer.observe(document, { childList: !0, subtree: !0 })), Sr(this.$store, ["provider"], (r) => {
      r.provider !== Uo ? this.removeSubscriber && (this.$valueStore.set({
        address: "",
        paymentAddress: "",
        paymentPublicKey: "",
        publicKey: "",
        balance: ""
      }), this.removeSubscriber(), this.removeSubscriber = void 0) : this.removeSubscriber = this.$store.subscribe(
        this.watchStateChange.bind(this)
      );
    });
  }
  watchStateChange(r, n, o) {
    var i, s;
    o && r.provider === Uo && (o === "balance" ? this.$valueStore.setKey("balance", ((i = r.balance) == null ? void 0 : i.toString()) ?? "") : or.includes(o) && this.$valueStore.setKey(
      o,
      ((s = r[o]) == null ? void 0 : s.toString()) ?? ""
    ));
  }
  restorePersistedValues() {
    const r = this.$valueStore.get();
    for (const n of or)
      this.$store.setKey(n, r[n]);
  }
  dispose() {
    var r;
    (r = this.observer) == null || r.disconnect();
  }
  async connect(r) {
    try {
      const { address: n, paymentAddress: o } = this.$valueStore.get();
      if (n && o)
        if (n.startsWith("tb1") && Eh(this.network))
          this.disconnect();
        else {
          this.restorePersistedValues();
          return;
        }
      const i = await ao("address");
      if (!i) throw new Error("No address provided");
      const s = await ao("paymentAddress");
      if (!s) throw new Error("No payment address provided");
      const a = await ao("publicKey");
      if (!a) throw new Error("No public key provided");
      const c = await ao("paymentPublicKey");
      if (!c) throw new Error("No payment public key provided");
      this.$store.setKey("provider", Uo), this.$store.setKey("accounts", [i, s]), this.$store.setKey("address", i), this.$store.setKey("paymentAddress", s), this.$store.setKey("publicKey", a), this.$store.setKey("paymentPublicKey", c), this.$store.setKey("connected", !0);
    } catch (n) {
      this.disconnect(), console.error("Error during connect:", n);
    }
  }
  async getNetwork() {
    return this.network;
  }
  async sendBTC(r, n) {
    const { psbtBase64: o } = await wh(
      this.$store.get().address,
      this.$store.get().paymentAddress,
      r,
      n,
      this.$store.get().paymentPublicKey,
      this.network,
      7
    );
    console.log("sign this send psbt in with sparrow wallet:"), console.log(""), console.log(`${o}`), console.log("");
    const i = await ao("signedAndFinalizedPsbt");
    if (!i) throw new Error("No signed PSBT provided");
    const s = await this.pushPsbt(i);
    if (!s) throw new Error("send failed, no txid returned");
    return s;
  }
  async signMessage(r, n) {
    return console.log("sign this message in sparrow wallet:"), console.log(""), console.log(`${r}`), console.log(""), await ao("message to sign");
  }
  async signPsbt(r, n, o, i, s) {
    const a = et.fromBase64(o);
    console.log("sign this in sparrow wallet:"), console.log(""), console.log(`${o}`), console.log("");
    const c = await ao("signed psbt hex");
    if (i && s) {
      const u = await this.pushPsbt(c);
      return {
        signedPsbtHex: c,
        signedPsbtBase64: a.toBase64(),
        txId: u
      };
    }
    return {
      signedPsbtHex: c,
      signedPsbtBase64: a.toBase64(),
      txId: void 0
    };
  }
  async getPublicKey() {
    const r = await ao("publicKey");
    return this.$store.setKey("publicKey", r), r;
  }
  async getBalance() {
    const r = await os(
      this.$store.get().paymentAddress,
      this.network
    );
    return this.$store.setKey("balance", r), r.toString();
  }
  async requestAccounts() {
    return await this.connect(Uo), this.$store.get().accounts;
  }
}
class j7 {
  constructor(t, r) {
    ne(this, "$store");
    ne(this, "$network");
    ne(this, "$providerMap");
    this.config = r, this.$store = t.$store, this.$network = t.$network, this.$providerMap = {
      [xi]: new HN(t, this, r),
      [wn]: new dU(t, this, r),
      [Ei]: new lU(t, this, r),
      [No]: new pU(t, this, r),
      [$o]: new cU(t, this, r),
      [vi]: new UN(t, this, r),
      [Bo]: new hU(t, this, r),
      [Uo]: new mU(t, this, r),
      [Po]: new p$(t, this, r),
      [Oo]: new BN(t, this, r),
      [_i]: new $N(t, this, r)
    }, this.$network.listen(this.watchNetworkChange.bind(this)), Dv(
      this.$store,
      ["isInitializing"],
      (n) => this.handleIsInitializingChanged(n.isInitializing)
    ), r && r.network && (this.$network.set(r.network), this.getNetwork().then((n) => {
      try {
        r.network !== n && this.switchNetwork(r.network);
      } catch {
        this.disconnect();
      }
    })), b$(() => this.$store.setKey("isInitializing", !1));
  }
  dispose() {
    Object.values(this.$providerMap).forEach((t) => t == null ? void 0 : t.dispose());
  }
  handleIsInitializingChanged(t) {
    if (typeof window < "u" && typeof localStorage < "u" && !t) {
      const r = localStorage == null ? void 0 : localStorage.getItem(
        Du
      );
      r && (this.$store.setKey("provider", r), this.connect(r));
    }
  }
  async connect(t) {
    this.$store.setKey("isConnecting", !0);
    try {
      if (localStorage == null || localStorage.setItem(Du, t), !this.$providerMap[t])
        throw new Error("Unsupported wallet provider");
      const r = this.$providerMap[t];
      await (r == null ? void 0 : r.connect(t)), this.$store.setKey("connected", !0), this.$store.setKey("provider", t);
    } catch (r) {
      throw this.$store.setKey("isConnecting", !1), this.disconnect(), r;
    } finally {
      this.$store.setKey("isConnecting", !1);
    }
  }
  async requestAccounts() {
    var t;
    if (!this.$store.get().provider)
      throw new Error("No wallet provider connected");
    try {
      return await ((t = this.$providerMap[this.$store.get().provider]) == null ? void 0 : t.requestAccounts());
    } catch (r) {
      throw r instanceof Error && r.message.toLowerCase().includes("not implemented") ? new Error("The connected wallet doesn't support this method") : r;
    }
  }
  disconnect() {
    this.$store.setKey("connected", !1), this.$store.setKey("provider", void 0), this.$store.setKey("address", ""), this.$store.setKey("paymentAddress", ""), this.$store.setKey("publicKey", ""), this.$store.setKey("paymentPublicKey", ""), this.$store.setKey("balance", void 0), this.$store.setKey("accounts", []), localStorage == null || localStorage.removeItem(Du);
  }
  switchNetwork(t) {
    var r;
    try {
      this.$store.get().provider && ((r = this.$providerMap[this.$store.get().provider]) == null || r.switchNetwork(t));
    } catch (n) {
      throw n instanceof Error && n.message.toLowerCase().includes("not implemented") ? (this.disconnect(), new Error(
        "The connected wallet doesn't support programmatic network changes.."
      )) : n;
    }
  }
  watchNetworkChange() {
    this.$store.setKey("balance", void 0);
  }
  async getNetwork() {
    var t;
    return this.$store.get().provider && this.$providerMap[this.$store.get().provider] ? await ((t = this.$providerMap[this.$store.get().provider]) == null ? void 0 : t.getNetwork()) : this.$network.get();
  }
  async sendBTC(t, r) {
    var n;
    if (r <= 0) throw new Error("Amount must be greater than 0");
    if (!Number.isInteger(r)) throw new Error("Amount must be an integer");
    if (!this.$store.get().provider) throw new Error("No wallet connected");
    if (this.$providerMap[this.$store.get().provider])
      try {
        return await ((n = this.$providerMap[this.$store.get().provider]) == null ? void 0 : n.sendBTC(
          t,
          r
        ));
      } catch (o) {
        throw o instanceof Error && o.message.toLowerCase().includes("not implemented") ? new Error(
          "The connected wallet doesn't support sending BTC..."
        ) : o;
      }
  }
  async signMessage(t, r) {
    var n;
    if (this.$store.get().provider && this.$providerMap[this.$store.get().provider])
      try {
        return await ((n = this.$providerMap[this.$store.get().provider]) == null ? void 0 : n.signMessage(t, r));
      } catch (o) {
        throw o instanceof Error && o.message.toLowerCase().includes("not implemented") ? new Error(
          "The connected wallet doesn't support message signing..."
        ) : o;
      }
  }
  async signPsbt(t, r = !1, n = !1) {
    var s;
    let o, i;
    if (!t) throw new Error("No PSBT provided");
    if (m$(t))
      i = et.fromHex(t).toBase64(), o = t;
    else if (g$(t))
      i = t, o = et.fromBase64(t).toHex();
    else
      throw new Error("Invalid PSBT format");
    if (this.$store.get().provider && this.$providerMap[this.$store.get().provider])
      try {
        return await ((s = this.$providerMap[this.$store.get().provider]) == null ? void 0 : s.signPsbt(t, o, i, r, n));
      } catch (a) {
        throw a instanceof Error && a.message.toLowerCase().includes("not implemented") ? new Error(
          "The connected wallet doesn't support PSBT signing..."
        ) : a;
      }
    else
      throw new Error("No wallet provider connected");
  }
  async pushPsbt(t) {
    var r;
    if (this.$store.get().provider && this.$providerMap[this.$store.get().provider])
      try {
        return await ((r = this.$providerMap[this.$store.get().provider]) == null ? void 0 : r.pushPsbt(
          t
        ));
      } catch (n) {
        throw n instanceof Error && n.message.toLowerCase().includes("not implemented") ? new Error(
          "The connected wallet doesn't support PSBT signing..."
        ) : n;
      }
  }
  async inscribe(t, r) {
    var n;
    if (this.$store.get().provider && this.$providerMap[this.$store.get().provider])
      try {
        return await ((n = this.$providerMap[this.$store.get().provider]) == null ? void 0 : n.inscribe(
          t,
          r
        ));
      } catch (o) {
        throw o instanceof Error && o.message.toLowerCase().includes("not implemented") ? new Error(
          "The connected wallet doesn't support inscribing..."
        ) : o;
      }
  }
  async getPublicKey() {
    var t;
    if (this.$store.get().provider && this.$providerMap[this.$store.get().provider])
      try {
        return await ((t = this.$providerMap[this.$store.get().provider]) == null ? void 0 : t.getPublicKey());
      } catch (r) {
        throw r instanceof Error && r.message.toLowerCase().includes("not implemented") ? new Error("The connected wallet doesn't support getPublicKey") : r;
      }
  }
  async getBalance() {
    if (this.$store.get().provider && this.$providerMap[this.$store.get().provider])
      try {
        const t = await this.$providerMap[this.$store.get().provider].getBalance();
        return this.$store.setKey("balance", BigInt(t)), t;
      } catch (t) {
        throw t instanceof Error && t.message.toLowerCase().includes("not implemented") ? new Error("The connected wallet doesn't support getBalance") : t;
      }
  }
  async getInscriptions(t, r) {
    var n;
    if (this.$store.get().provider && this.$providerMap[this.$store.get().provider])
      try {
        return await ((n = this.$providerMap[this.$store.get().provider]) == null ? void 0 : n.getInscriptions(
          t,
          r
        ));
      } catch (o) {
        throw o instanceof Error && o.message.toLowerCase().includes("not implemented") ? new Error("The connected wallet doesn't support this method") : o;
      }
  }
}
export {
  E7 as APPLICATION_ATOM_XML,
  _7 as APPLICATION_FORM_URLENCODED,
  w7 as APPLICATION_GZIP,
  g7 as APPLICATION_JAVASCRIPT,
  p7 as APPLICATION_JSON,
  S7 as APPLICATION_OCTET_STREAM,
  b7 as APPLICATION_PDF,
  x7 as APPLICATION_RSS_XML,
  v7 as APPLICATION_XHTML_XML,
  m7 as APPLICATION_XML,
  y7 as APPLICATION_ZIP,
  U7 as AUDIO_MP3,
  H7 as AUDIO_OGG,
  C7 as AUDIO_WAV,
  Ha as CMDRUID_MAINNET,
  yP as CMDRUID_SIGNET,
  Yp as CMDRUID_TESTNET,
  kr as FRACTAL_MAINNET,
  Nt as FRACTAL_TESTNET,
  T7 as IMAGE_GIF,
  O7 as IMAGE_ICON,
  k7 as IMAGE_JPEG,
  A7 as IMAGE_PNG,
  I7 as IMAGE_SVG_XML,
  P7 as IMAGE_WEBP,
  xi as LEATHER,
  Of as LEATHER_MAINNET,
  zy as LEATHER_TESTNET,
  Du as LOCAL_STORAGE_DEFAULT_WALLET,
  j7 as LaserEyesClient,
  wn as MAGIC_EDEN,
  Me as MAINNET,
  R7 as MULTIPART_FORM_DATA,
  Ei as OKX,
  mP as OKX_MAINNET,
  bP as OKX_TESTNET,
  No as OP_NET,
  o7 as OP_WALLET_MAINNET,
  i7 as OP_WALLET_TESTNET,
  $o as ORANGE,
  Ca as ORANGE_MAINNET,
  kl as ORANGE_TESTNET,
  vi as OYL,
  Fv as P2PKH,
  wU as P2PSH,
  B0 as P2SH,
  Kv as P2SH_P2WPKH,
  bs as P2TR,
  Fl as P2WPKH,
  qv as P2WSH,
  Bo as PHANTOM,
  s7 as REGTEST,
  jt as SIGNET,
  Uo as SPARROW,
  vU as SUPPORTED_WALLETS,
  Ze as TESTNET,
  $t as TESTNET4,
  d7 as TEXT_CSS,
  f7 as TEXT_HTML,
  h7 as TEXT_JAVASCRIPT,
  rB as TEXT_PLAIN,
  Po as UNISAT,
  Cy as UNISAT_FRACTAL_MAINNET,
  Hy as UNISAT_FRACTAL_TESTNET,
  Tf as UNISAT_MAINNET,
  Uy as UNISAT_SIGNET,
  $y as UNISAT_TESTNET,
  Ny as UNISAT_TESTNET4,
  Df as UNSUPPORTED_PROVIDER_METHOD_ERROR,
  B7 as VIDEO_MP4,
  N7 as VIDEO_OGG,
  $7 as VIDEO_WEBM,
  h$ as WALLET_NOT_INSTALLED_ERROR,
  _i as WIZZ,
  xs as WIZZ_MAINNET,
  Ly as WIZZ_SIGNET,
  Pf as WIZZ_TESTNET,
  Ry as WIZZ_TESTNET4,
  Kr as WalletProvider,
  Oo as XVERSE,
  gs as XVERSE_MAINNET,
  n7 as XVERSE_NETWORK,
  gP as XVERSE_SIGNET,
  If as XVERSE_TESTNET,
  z7 as createConfig,
  L7 as createStores,
  wP as getCmDruidNetwork,
  a7 as getLeatherNetwork,
  l7 as getNetworkForLeather,
  vP as getNetworkForOkx,
  Nc as getNetworkForUnisat,
  Jp as getNetworkForWizz,
  u7 as getNetworkForXverse,
  Al as getOrangeNetwork,
  Va as getSatsConnectNetwork,
  jy as getUnisatNetwork,
  c7 as getWizzNetwork
};
