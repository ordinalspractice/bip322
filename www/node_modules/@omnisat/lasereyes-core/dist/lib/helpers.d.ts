import { MempoolUtxo, NetworkType } from '../types';
import * as bitcoin from 'bitcoinjs-lib';
export declare const getBitcoinNetwork: (network: NetworkType) => bitcoin.networks.Network;
export declare const findOrdinalsAddress: (addresses: {
    purpose: string;
    address: string;
    publicKey: string;
}[]) => {
    purpose: string;
    address: string;
    publicKey: string;
} | undefined;
export declare const findPaymentAddress: (addresses: {
    purpose: string;
    address: string;
    publicKey: string;
}[]) => {
    purpose: string;
    address: string;
    publicKey: string;
} | undefined;
export declare const getBTCBalance: (address: string, network: NetworkType) => Promise<bigint>;
export declare const satoshisToBTC: (satoshis: number) => string;
export declare function estimateTxSize(taprootInputCount: number, nonTaprootInputCount: number, outputCount: number): number;
export declare function getAddressUtxos(address: string, network: NetworkType): Promise<MempoolUtxo[]>;
export declare function createSendBtcPsbt(address: string, paymentAddress: string, recipientAddress: string, amount: number, paymentPublicKey: string, network: NetworkType, feeRate?: number): Promise<{
    psbtBase64: string;
    psbtHex: string;
}>;
export declare function getRedeemScript(paymentPublicKey: string, network: NetworkType): Uint8Array | undefined;
export declare function delay(ms: number): Promise<unknown>;
export declare function calculateValueOfUtxosGathered(utxoArray: MempoolUtxo[]): number;
export declare function broadcastTx(txHex: string, network: NetworkType): Promise<string>;
export declare const getAddressType: (address: string, network: NetworkType) => string;
export declare const isTestnetNetwork: (network: NetworkType) => network is "testnet" | "testnet4" | "signet";
export declare const isMainnetNetwork: (network: NetworkType) => network is "mainnet" | "fractal mainnet" | "fractal testnet";
//# sourceMappingURL=helpers.d.ts.map