import { ContentType, MempoolTransactionResponse, NetworkType } from '../types';
export declare const inscribeContent: ({ contentBase64, mimeType, quantity, inscriptions, ordinalAddress, paymentAddress, paymentPublicKey, signPsbt, network, }: {
    contentBase64?: string;
    mimeType?: ContentType;
    quantity?: number;
    inscriptions?: {
        content: string;
        mimeType: ContentType;
    }[];
    ordinalAddress: string;
    paymentAddress: string;
    paymentPublicKey?: string;
    signPsbt: (tx: string, psbtHex: string, psbtBase64: string, finalize?: boolean, broadcast?: boolean, network?: NetworkType) => Promise<{
        signedPsbtHex: string | undefined;
        signedPsbtBase64: string | undefined;
        txId?: string;
    } | undefined>;
    network: NetworkType;
}) => Promise<string>;
export declare const getCommitTx: ({ inscriptions, paymentAddress, paymentPublicKey, privKey, network, }: {
    inscriptions: {
        content: string;
        mimeType: ContentType;
    }[];
    paymentAddress: string;
    paymentPublicKey?: string;
    privKey: string;
    network: NetworkType;
    isDry?: boolean;
}) => Promise<{
    psbtHex: string;
    psbtBase64: string;
} | undefined>;
export declare const executeReveal: ({ inscriptions, ordinalAddress, commitTxId, privKey, network, isDry, }: {
    inscriptions: {
        content: string;
        mimeType: ContentType;
    }[];
    ordinalAddress: string;
    commitTxId: string;
    privKey: string;
    network: NetworkType;
    isDry?: boolean;
}) => Promise<string>;
export declare function generatePrivateKey(network: NetworkType): Promise<Uint8Array | undefined>;
export declare const createInscriptionScript: (pubKey: any, inscriptions: {
    content: string;
    mimeType: ContentType;
}[]) => any;
export declare const createRevealAddressAndKeys: (pubKey: any, inscriptions: {
    content: string;
    mimeType: ContentType;
}[], network?: NetworkType) => {
    inscriberAddress: string;
    tpubkey: string;
    tapleaf: string;
};
export declare function getTransaction(txId: string, network?: NetworkType): Promise<MempoolTransactionResponse>;
export declare function getRawTransaction(txId: string, network?: NetworkType): Promise<any>;
export declare function waitForTransaction(txId: string, network: NetworkType): Promise<boolean>;
export declare const getRecommendedFees: (network: NetworkType) => Promise<any>;
export declare function getOutputValueByVOutIndex(commitTxId: string, vOut: number, network: NetworkType): Promise<number | null>;
//# sourceMappingURL=inscribe.d.ts.map