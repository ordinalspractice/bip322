import { WalletProvider } from '.';
import { NetworkType, ProviderType } from '../../types';
import { MapStore } from 'nanostores';
import { PersistedKey } from '../utils';
import { LaserEyesStoreType } from '../types';
export default class SparrowProvider extends WalletProvider {
    get network(): NetworkType;
    observer?: MutationObserver;
    $valueStore: MapStore<Record<PersistedKey, string>>;
    initialize(): void;
    removeSubscriber?: Function;
    watchStateChange(newState: LaserEyesStoreType, _: LaserEyesStoreType | undefined, changedKey: keyof LaserEyesStoreType | undefined): void;
    restorePersistedValues(): void;
    dispose(): void;
    connect(_: ProviderType): Promise<void>;
    getNetwork(): Promise<NetworkType>;
    sendBTC(to: string, amount: number): Promise<string>;
    signMessage(message: string, _?: string | undefined): Promise<string>;
    signPsbt(_: string, __: string, psbtBase64: string, finalize?: boolean | undefined, broadcast?: boolean | undefined): Promise<{
        signedPsbtHex: string | undefined;
        signedPsbtBase64: string | undefined;
        txId?: string | undefined;
    } | undefined>;
    getPublicKey(): Promise<string>;
    getBalance(): Promise<string>;
    requestAccounts(): Promise<string[]>;
}
//# sourceMappingURL=sparrow.d.ts.map