import { WalletProvider } from '.';
import { ProviderType, NetworkType, LaserEyesStoreType } from '../..';
import { MapStore } from 'nanostores';
import { PersistedKey } from '../utils';
export default class OrangeProvider extends WalletProvider {
    get library(): any | undefined;
    get network(): NetworkType;
    observer?: MutationObserver;
    $valueStore: MapStore<Record<PersistedKey, string>>;
    removeSubscriber?: Function;
    restorePersistedValues(): void;
    watchStateChange(newState: LaserEyesStoreType, _: LaserEyesStoreType | undefined, changedKey: keyof LaserEyesStoreType | undefined): void;
    initialize(): void;
    dispose(): void;
    connect(_: ProviderType): Promise<void>;
    getNetwork(): Promise<NetworkType | undefined>;
    sendBTC(to: string, amount: number): Promise<string>;
    signMessage(message: string, toSignAddress?: string | undefined): Promise<string>;
    signPsbt(_: string, __: string, psbtBase64: string, _finalize?: boolean | undefined, broadcast?: boolean | undefined): Promise<{
        signedPsbtHex: string | undefined;
        signedPsbtBase64: string | undefined;
        txId?: string | undefined;
    } | undefined>;
}
//# sourceMappingURL=orange.d.ts.map