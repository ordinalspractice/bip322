import { Params, Requests } from "../request";
import type { GetAddressResponse } from "../addresses";
import type { GetCapabilitiesResponse } from "../capabilities";
import type { CreateInscriptionResponse, CreateRepeatInscriptionsResponse } from "../inscriptions";
import type { SignMessageResponse } from "../messages";
import type { SendBtcTransactionResponse, SignMultipleTransactionsResponse, SignTransactionResponse } from "../transactions";
import { RpcResponse } from "../types";
interface BaseBitcoinProvider {
    request: <Method extends keyof Requests>(method: Method, options: Params<Method>, providerId?: string) => Promise<RpcResponse<Method>>;
    connect: (request: string) => Promise<GetAddressResponse>;
    signMessage: (request: string) => Promise<SignMessageResponse>;
    signTransaction: (request: string) => Promise<SignTransactionResponse>;
    sendBtcTransaction: (request: string) => Promise<SendBtcTransactionResponse>;
    createInscription: (request: string) => Promise<CreateInscriptionResponse>;
    createRepeatInscriptions: (request: string) => Promise<CreateRepeatInscriptionsResponse>;
    signMultipleTransactions: (request: string) => Promise<SignMultipleTransactionsResponse>;
}
export type Capability = keyof BaseBitcoinProvider;
export interface BitcoinProvider extends BaseBitcoinProvider {
    getCapabilities?: (request: string) => Promise<GetCapabilitiesResponse>;
}
export interface Provider {
    id: string;
    name: string;
    icon: string;
    webUrl?: string;
    chromeWebStoreUrl?: string;
    mozillaAddOnsUrl?: string;
    googlePlayStoreUrl?: string;
    iOSAppStoreUrl?: string;
    methods?: string[];
}
declare global {
    interface OrangecryptoProviders {
        BitcoinProvider?: BitcoinProvider;
    }
    interface OrangeWalletProviders {
        OrangeBitcoinProvider?: BitcoinProvider;
    }
    interface Window {
        OrangeBitcoinProvider?: BitcoinProvider;
        BitcoinProvider?: BitcoinProvider;
        OrangecryptoProviders?: OrangecryptoProviders;
        OrangeWalletProviders?: OrangeWalletProviders;
        btc_providers?: Provider[];
    }
}
export {};
